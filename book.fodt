<?xml version="1.0" encoding="UTF-8"?>
<office:document xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0" xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0" xmlns:table="urn:oasis:names:tc:opendocument:xmlns:table:1.0" xmlns:draw="urn:oasis:names:tc:opendocument:xmlns:drawing:1.0" xmlns:fo="urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:number="urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0" xmlns:svg="urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0" xmlns:chart="urn:oasis:names:tc:opendocument:xmlns:chart:1.0" xmlns:dr3d="urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0" xmlns:math="http://www.w3.org/1998/Math/MathML" xmlns:form="urn:oasis:names:tc:opendocument:xmlns:form:1.0" xmlns:script="urn:oasis:names:tc:opendocument:xmlns:script:1.0" xmlns:config="urn:oasis:names:tc:opendocument:xmlns:config:1.0" xmlns:ooo="http://openoffice.org/2004/office" xmlns:ooow="http://openoffice.org/2004/writer" xmlns:oooc="http://openoffice.org/2004/calc" xmlns:dom="http://www.w3.org/2001/xml-events" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:rpt="http://openoffice.org/2005/report" xmlns:of="urn:oasis:names:tc:opendocument:xmlns:of:1.2" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:grddl="http://www.w3.org/2003/g/data-view#" xmlns:officeooo="http://openoffice.org/2009/office" xmlns:tableooo="http://openoffice.org/2009/table" xmlns:drawooo="http://openoffice.org/2010/draw" xmlns:calcext="urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0" xmlns:loext="urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0" xmlns:field="urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0" xmlns:formx="urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0" xmlns:css3t="http://www.w3.org/TR/css3-text/" office:version="1.2" office:mimetype="application/vnd.oasis.opendocument.text">
  <office:meta>
    <meta:generator>asciidoctor-converter-opendocument</meta:generator>
    <dc:title>Node.js • Apprendre par la pratique</dc:title>
    <meta:creation-date>2018-07-12 08:14:32 Coordinated Universal Time</meta:creation-date>
    <dc:language>fr</dc:language>
    <meta:editing-cycles>1</meta:editing-cycles>
    <meta:editing-duration>P0D</meta:editing-duration>
    <meta:document-statistic meta:character-count="0" meta:image-count="0" meta:non-whitespace-character-count="0" meta:object-count="0" meta:page-count="0" meta:paragraph-count="0" meta:table-count="0" meta:word-count="0"/>
    <meta:user-defined meta:name="Info 1"/>
    <meta:user-defined meta:name="Info 2"/>
    <meta:user-defined meta:name="Info 3"/>
    <meta:user-defined meta:name="Info 4"/>
  </office:meta>
  <office:settings>
  <config:config-item-set config:name="ooo:view-settings">
   <config:config-item config:name="ViewAreaTop" config:type="long">159715</config:config-item>
   <config:config-item config:name="ViewAreaLeft" config:type="long">0</config:config-item>
   <config:config-item config:name="ViewAreaWidth" config:type="long">19773</config:config-item>
   <config:config-item config:name="ViewAreaHeight" config:type="long">11601</config:config-item>
   <config:config-item config:name="ShowRedlineChanges" config:type="boolean">false</config:config-item>
   <config:config-item config:name="InBrowseMode" config:type="boolean">false</config:config-item>
   <config:config-item-map-indexed config:name="Views">
    <config:config-item-map-entry>
     <config:config-item config:name="ViewId" config:type="string">view2</config:config-item>
     <config:config-item config:name="ViewLeft" config:type="long">6055</config:config-item>
     <config:config-item config:name="ViewTop" config:type="long">164093</config:config-item>
     <config:config-item config:name="VisibleLeft" config:type="long">0</config:config-item>
     <config:config-item config:name="VisibleTop" config:type="long">159715</config:config-item>
     <config:config-item config:name="VisibleRight" config:type="long">19771</config:config-item>
     <config:config-item config:name="VisibleBottom" config:type="long">171314</config:config-item>
     <config:config-item config:name="ZoomType" config:type="short">0</config:config-item>
     <config:config-item config:name="ViewLayoutColumns" config:type="short">1</config:config-item>
     <config:config-item config:name="ViewLayoutBookMode" config:type="boolean">false</config:config-item>
     <config:config-item config:name="ZoomFactor" config:type="short">110</config:config-item>
     <config:config-item config:name="IsSelectedFrame" config:type="boolean">false</config:config-item>
     <config:config-item config:name="AnchoredTextOverflowLegacy" config:type="boolean">false</config:config-item>
    </config:config-item-map-entry>
   </config:config-item-map-indexed>
  </config:config-item-set>
  <config:config-item-set config:name="ooo:configuration-settings">
   <config:config-item config:name="PrintControls" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintPageBackground" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintAnnotationMode" config:type="short">0</config:config-item>
   <config:config-item config:name="PrintGraphics" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintLeftPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintProspect" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintRightPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintFaxName" config:type="string"/>
   <config:config-item config:name="PrintPaperFromSetup" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintTextPlaceholder" config:type="boolean">false</config:config-item>
   <config:config-item config:name="DisableOffPagePositioning" config:type="boolean">true</config:config-item>
   <config:config-item config:name="ApplyParagraphMarkFormatToNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintReversed" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabOverMargin" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SurroundTextWrapSmall" config:type="boolean">false</config:config-item>
   <config:config-item config:name="BackgroundParaOverDrawings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ClippedPictures" config:type="boolean">false</config:config-item>
   <config:config-item config:name="FloattableNomargins" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UnbreakableNumberings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedSystemFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabOverflow" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintTables" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintSingleJobs" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SmallCapsPercentage66" config:type="boolean">true</config:config-item>
   <config:config-item config:name="CollapseEmptyCellPara" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseFormerLineSpacing" config:type="boolean">true</config:config-item>
   <config:config-item config:name="ProtectForm" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterSetup" config:type="base64Binary">AAA=</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommand" config:type="string"/>
   <config:config-item config:name="ClipAsCharacterAnchoredWriterFlyFrames" config:type="boolean">false</config:config-item>
   <config:config-item config:name="DoNotCaptureDrawObjsOnPage" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommandType" config:type="int">0</config:config-item>
   <config:config-item config:name="LoadReadonly" config:type="boolean">false</config:config-item>
   <config:config-item config:name="DoNotResetParaAttrsForNumFont" config:type="boolean">false</config:config-item>
   <config:config-item config:name="StylesNoDefault" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AlignTabStopPosition" config:type="boolean">false</config:config-item>
   <config:config-item config:name="LinkUpdateMode" config:type="short">1</config:config-item>
   <config:config-item config:name="DoNotJustifyLinesWithManualBreak" config:type="boolean">true</config:config-item>
   <config:config-item config:name="RsidRoot" config:type="int">847901</config:config-item>
   <config:config-item config:name="PropLineSpacingShrinksFirstLine" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ConsiderTextWrapOnObjPos" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabAtLeftIndentForParagraphsInList" config:type="boolean">false</config:config-item>
   <config:config-item config:name="RedlineProtectionKey" config:type="base64Binary"/>
   <config:config-item config:name="UnxForceZeroExtLeading" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintDrawings" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseFormerTextWrapping" config:type="boolean">true</config:config-item>
   <config:config-item config:name="CurrentDatabaseDataSource" config:type="string"/>
   <config:config-item config:name="AllowPrintJobCancel" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SubtractFlysAnchoredAtFlys" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddParaSpacingToTableCells" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddExternalLeading" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddVerticalFrameOffsets" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TreatSingleColumnBreakAsPageBreak" config:type="boolean">false</config:config-item>
   <config:config-item config:name="MathBaselineAlignment" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddFrameOffsets" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IsLabelDocument" config:type="boolean">false</config:config-item>
   <config:config-item config:name="MsWordCompTrailingBlanks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IgnoreFirstLineIndentInNumbering" config:type="boolean">true</config:config-item>
   <config:config-item config:name="OutlineLevelYieldsNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterName" config:type="string"/>
   <config:config-item config:name="IsKernAsianPunctuation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterIndependentLayout" config:type="string">low-resolution</config:config-item>
   <config:config-item config:name="PrintBlackFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TableRowKeep" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UpdateFromTemplate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="EmbeddedDatabaseName" config:type="string"/>
   <config:config-item config:name="Rsid" config:type="int">973921</config:config-item>
   <config:config-item config:name="TabsRelativeToIndent" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseOldPrinterMetrics" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IgnoreTabsAndBlanksForLineCalculation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="InvertBorderSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SaveGlobalDocumentLinks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintProspectRTL" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintEmptyPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="ApplyUserData" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseOldNumbering" config:type="boolean">true</config:config-item>
   <config:config-item config:name="FieldAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseFormerObjectPositioning" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintHiddenText" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddParaTableSpacingAtStart" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CharacterCompressionType" config:type="short">0</config:config-item>
   <config:config-item config:name="SaveVersionOnClose" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ChartAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddParaTableSpacing" config:type="boolean">false</config:config-item>
  </config:config-item-set>
 </office:settings>
  
  <office:font-face-decls>
  <style:font-face style:name="StarSymbol" svg:font-family="StarSymbol" style:font-charset="x-symbol"/>
  <style:font-face style:name="Wingdings" svg:font-family="Wingdings" style:font-adornments="Normal" style:font-pitch="variable" style:font-charset="x-symbol"/>
  <style:font-face style:name="Symbol" svg:font-family="Symbol" style:font-adornments="Normal" style:font-family-generic="roman" style:font-pitch="variable" style:font-charset="x-symbol"/>
  <style:font-face style:name="Times New Roman" svg:font-family="&apos;Times New Roman&apos;"/>
  <style:font-face style:name="Courier New" svg:font-family="&apos;Courier New&apos;" style:font-family-generic="modern"/>
  <style:font-face style:name="Courier New1" svg:font-family="&apos;Courier New&apos;" style:font-family-generic="modern" style:font-pitch="fixed"/>
  <style:font-face style:name="Arial Unicode MS" svg:font-family="&apos;Arial Unicode MS&apos;" style:font-pitch="variable"/>
  <style:font-face style:name="Fontin" svg:font-family="Fontin" style:font-adornments="Gras" style:font-pitch="variable"/>
  <style:font-face style:name="Fontin1" svg:font-family="Fontin" style:font-adornments="Italique" style:font-pitch="variable"/>
  <style:font-face style:name="HG Mincho Light J" svg:font-family="&apos;HG Mincho Light J&apos;" style:font-pitch="variable"/>
  <style:font-face style:name="Garamond" svg:font-family="Garamond" style:font-adornments="Normal" style:font-family-generic="roman" style:font-pitch="variable"/>
  <style:font-face style:name="Garamond Book" svg:font-family="&apos;Garamond Book&apos;" style:font-adornments="Normal" style:font-family-generic="roman" style:font-pitch="variable"/>
  <style:font-face style:name="Times New Roman1" svg:font-family="&apos;Times New Roman&apos;" style:font-family-generic="roman" style:font-pitch="variable"/>
  <style:font-face style:name="Arial" svg:font-family="Arial" style:font-family-generic="swiss" style:font-pitch="variable"/>
  <style:font-face style:name="Arial1" svg:font-family="Arial" style:font-adornments="Gras" style:font-family-generic="swiss" style:font-pitch="variable"/>
  <style:font-face style:name="Arial2" svg:font-family="Arial" style:font-adornments="Italique" style:font-family-generic="swiss" style:font-pitch="variable"/>
  <style:font-face style:name="Arial Narrow" svg:font-family="&apos;Arial Narrow&apos;" style:font-family-generic="swiss" style:font-pitch="variable"/>
  <style:font-face style:name="Arial Narrow1" svg:font-family="&apos;Arial Narrow&apos;" style:font-adornments="Normal" style:font-family-generic="swiss" style:font-pitch="variable"/>
  <style:font-face style:name="Arial Rounded MT Bold" svg:font-family="&apos;Arial Rounded MT Bold&apos;, Tahoma" style:font-family-generic="swiss" style:font-pitch="variable"/>
  <style:font-face style:name="Century Gothic" svg:font-family="&apos;Century Gothic&apos;" style:font-family-generic="swiss" style:font-pitch="variable"/>
  <style:font-face style:name="DejaVu Sans" svg:font-family="&apos;DejaVu Sans&apos;" style:font-adornments="Book" style:font-family-generic="swiss" style:font-pitch="variable"/>
  <style:font-face style:name="DejaVu Sans1" svg:font-family="&apos;DejaVu Sans&apos;" style:font-adornments="Oblique" style:font-family-generic="swiss" style:font-pitch="variable"/>
  <style:font-face style:name="DejaVu Sans Condensed1" svg:font-family="&apos;DejaVu Sans Condensed&apos;" style:font-adornments="Book" style:font-family-generic="swiss" style:font-pitch="variable"/>
  <style:font-face style:name="DejaVu Sans Condensed" svg:font-family="&apos;DejaVu Sans Condensed&apos;" style:font-adornments="Gras" style:font-family-generic="swiss" style:font-pitch="variable"/>
  <style:font-face style:name="Tahoma" svg:font-family="Tahoma" style:font-adornments="Italique gras" style:font-family-generic="swiss" style:font-pitch="variable"/>
 </office:font-face-decls>
  <office:styles>
  <style:default-style style:family="graphic">
   <style:graphic-properties svg:stroke-color="#000000" draw:fill-color="#99ccff" fo:wrap-option="no-wrap" draw:shadow-offset-x="0.1181in" draw:shadow-offset-y="0.1181in" draw:start-line-spacing-horizontal="0.1114in" draw:start-line-spacing-vertical="0.1114in" draw:end-line-spacing-horizontal="0.1114in" draw:end-line-spacing-vertical="0.1114in" style:flow-with-text="true"/>
   <style:paragraph-properties style:text-autospace="ideograph-alpha" style:line-break="strict" style:font-independent-line-spacing="false">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties fo:color="#000000" style:font-name="Times New Roman" fo:font-size="12pt" fo:language="en" fo:country="US" style:font-name-asian="HG Mincho Light J" style:font-size-asian="12pt" style:language-asian="zxx" style:country-asian="none" style:font-name-complex="Arial Unicode MS" style:font-size-complex="12pt" style:language-complex="zxx" style:country-complex="none"/>
  </style:default-style>
  <style:default-style style:family="paragraph">
   <style:paragraph-properties fo:hyphenation-ladder-count="no-limit" style:text-autospace="ideograph-alpha" style:punctuation-wrap="hanging" style:line-break="strict" style:tab-stop-distance="0.4925in" style:writing-mode="lr-tb"/>
   <style:text-properties fo:color="#000000" style:font-name="Times New Roman" fo:font-size="12pt" fo:language="en" fo:country="US" style:font-name-asian="HG Mincho Light J" style:font-size-asian="12pt" style:language-asian="zxx" style:country-asian="none" style:font-name-complex="Arial Unicode MS" style:font-size-complex="12pt" style:language-complex="zxx" style:country-complex="none" fo:hyphenate="false" fo:hyphenation-remain-char-count="2" fo:hyphenation-push-char-count="2"/>
  </style:default-style>
  <style:default-style style:family="table">
   <style:table-properties table:border-model="separating"/>
  </style:default-style>
  <style:default-style style:family="table-row">
   <style:table-row-properties fo:keep-together="auto"/>
  </style:default-style>
  <style:style style:name="Standard" style:family="paragraph" style:class="text">
   <style:paragraph-properties fo:margin-left="0.5909in" fo:margin-right="0in" fo:margin-top="0.0835in" fo:margin-bottom="0.0138in" loext:contextual-spacing="false" fo:text-align="justify" style:justify-single-word="false" fo:orphans="2" fo:widows="2" fo:text-indent="0.0008in" style:auto-text-indent="false"/>
   <style:text-properties style:use-window-font-color="true" style:font-name="Times New Roman1" fo:font-family="&apos;Times New Roman&apos;" style:font-family-generic="roman" style:font-pitch="variable" fo:font-size="10pt" fo:language="fr" fo:country="FR" style:font-name-asian="Times New Roman1" style:font-family-asian="&apos;Times New Roman&apos;" style:font-family-generic-asian="roman" style:font-pitch-asian="variable" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="Text_20_body" style:display-name="Text body" style:family="paragraph" style:parent-style-name="Standard" style:class="text">
   <style:paragraph-properties fo:margin-top="0in" fo:margin-bottom="0.0835in" loext:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="Heading" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Text_20_body" style:class="text">
   <style:paragraph-properties fo:margin-top="0.1665in" fo:margin-bottom="0.0835in" loext:contextual-spacing="false" fo:keep-with-next="always"/>
   <style:text-properties style:font-name="Arial" fo:font-family="Arial" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="14pt" style:font-name-asian="HG Mincho Light J" style:font-family-asian="&apos;HG Mincho Light J&apos;" style:font-pitch-asian="variable" style:font-size-asian="14pt" style:font-name-complex="Arial Unicode MS" style:font-family-complex="&apos;Arial Unicode MS&apos;" style:font-pitch-complex="variable" style:font-size-complex="14pt"/>
  </style:style>
  <style:style style:name="Heading_20_1" style:display-name="Heading 1" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Standard" style:class="text">
   <style:paragraph-properties fo:margin-top="0.139in" fo:margin-bottom="0.5555in" loext:contextual-spacing="false" fo:text-align="end" style:justify-single-word="false" fo:orphans="2" fo:widows="2" fo:padding-left="0in" fo:padding-right="0in" fo:padding-top="0in" fo:padding-bottom="0.0555in" fo:border-left="none" fo:border-right="none" fo:border-top="none" fo:border-bottom="0.06pt solid #000000"/>
   <style:text-properties style:use-window-font-color="true" style:font-name="Arial" fo:font-family="Arial" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="20pt" fo:language="zxx" fo:country="none" fo:font-weight="bold" style:font-name-asian="Times New Roman1" style:font-family-asian="&apos;Times New Roman&apos;" style:font-family-generic-asian="roman" style:font-pitch-asian="variable" style:font-size-asian="20pt" style:language-asian="zxx" style:country-asian="none" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="Heading_20_2" style:display-name="Heading 2" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Standard" style:class="text">
   <style:paragraph-properties fo:margin-top="0.3472in" fo:margin-bottom="0.0138in" loext:contextual-spacing="false" fo:keep-together="always" fo:orphans="2" fo:widows="2" fo:keep-with-next="always"/>
   <style:text-properties style:use-window-font-color="true" style:font-name="Arial" fo:font-family="Arial" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="14pt" fo:language="zxx" fo:country="none" fo:font-weight="bold" style:font-name-asian="Times New Roman1" style:font-family-asian="&apos;Times New Roman&apos;" style:font-family-generic-asian="roman" style:font-pitch-asian="variable" style:font-size-asian="14pt" style:language-asian="zxx" style:country-asian="none" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="Heading_20_3" style:display-name="Heading 3" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Standard" style:class="text">
   <style:paragraph-properties fo:margin-top="0.2083in" fo:margin-bottom="0.0138in" loext:contextual-spacing="false" fo:keep-together="always" fo:orphans="2" fo:widows="2" fo:keep-with-next="always"/>
   <style:text-properties style:use-window-font-color="true" style:font-name="Arial Narrow" fo:font-family="&apos;Arial Narrow&apos;" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="13pt" fo:language="fr" fo:country="FR" fo:font-weight="bold" style:font-name-asian="Times New Roman1" style:font-family-asian="&apos;Times New Roman&apos;" style:font-family-generic-asian="roman" style:font-pitch-asian="variable" style:font-size-asian="13pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="Heading_20_4" style:display-name="Heading 4" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Standard" style:class="text">
   <style:paragraph-properties fo:margin-top="0.139in" fo:margin-bottom="0.0138in" loext:contextual-spacing="false" fo:keep-together="always" fo:orphans="2" fo:widows="2" fo:keep-with-next="always"/>
   <style:text-properties style:use-window-font-color="true" style:font-name="Arial Narrow" fo:font-family="&apos;Arial Narrow&apos;" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="11pt" fo:language="zxx" fo:country="none" fo:font-weight="bold" style:font-name-asian="Times New Roman1" style:font-family-asian="&apos;Times New Roman&apos;" style:font-family-generic-asian="roman" style:font-pitch-asian="variable" style:font-size-asian="11pt" style:language-asian="zxx" style:country-asian="none" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="Heading_20_5" style:display-name="Heading 5" style:family="paragraph" style:parent-style-name="Heading_20_4" style:next-style-name="Standard" style:class="text">
   <style:paragraph-properties fo:margin-left="0.5909in" fo:margin-right="0in" fo:margin-top="0.111in" fo:margin-bottom="0.0138in" loext:contextual-spacing="false" fo:text-indent="0.0008in" style:auto-text-indent="false"/>
   <style:text-properties fo:font-style="italic" fo:font-weight="normal" style:font-style-asian="italic" style:font-weight-asian="normal"/>
  </style:style>
  <style:style style:name="Heading_20_6" style:display-name="Heading 6" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Standard" style:class="text">
   <style:paragraph-properties fo:margin-top="0.1665in" fo:margin-bottom="0.0417in" loext:contextual-spacing="false"/>
   <style:text-properties style:font-name="Arial" fo:font-family="Arial" style:font-family-generic="swiss" style:font-pitch="variable" style:text-underline-style="solid" style:text-underline-width="auto" style:text-underline-color="font-color"/>
  </style:style>
  <style:style style:name="Heading_20_7" style:display-name="Heading 7" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Standard" style:class="text">
   <style:paragraph-properties fo:margin-top="0.1665in" fo:margin-bottom="0.0417in" loext:contextual-spacing="false"/>
   <style:text-properties style:font-name="Arial" fo:font-family="Arial" style:font-family-generic="swiss" style:font-pitch="variable"/>
  </style:style>
  <style:style style:name="Heading_20_8" style:display-name="Heading 8" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Standard" style:class="text">
   <style:paragraph-properties fo:margin-top="0.1665in" fo:margin-bottom="0.0417in" loext:contextual-spacing="false"/>
   <style:text-properties style:font-name="Arial" fo:font-family="Arial" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-style="italic" style:font-style-asian="italic"/>
  </style:style>
  <style:style style:name="Heading_20_9" style:display-name="Heading 9" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Standard" style:class="text">
   <style:paragraph-properties fo:margin-top="0.1665in" fo:margin-bottom="0.0417in" loext:contextual-spacing="false"/>
   <style:text-properties style:font-name="Arial" fo:font-family="Arial" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="9pt" fo:font-style="italic" style:font-size-asian="9pt" style:font-style-asian="italic"/>
  </style:style>
  <style:style style:name="Heading_20_10" style:display-name="Heading 10" style:family="paragraph" style:parent-style-name="Heading" style:next-style-name="Text_20_body" style:class="text">
   <style:text-properties fo:font-size="75%" fo:font-weight="bold" style:font-size-asian="75%" style:font-weight-asian="bold" style:font-size-complex="75%" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="List" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="list">
   <style:text-properties style:font-name="Times New Roman" fo:font-family="&apos;Times New Roman&apos;"/>
  </style:style>
  <style:style style:name="Header" style:family="paragraph" style:parent-style-name="Standard" style:class="extra">
   <style:paragraph-properties fo:margin-left="0.5909in" fo:margin-right="0.0783in" fo:margin-top="0.0835in" fo:margin-bottom="0.0138in" loext:contextual-spacing="false" fo:text-align="end" style:justify-single-word="false" fo:orphans="0" fo:widows="0" fo:text-indent="0.0008in" style:auto-text-indent="false">
    <style:tab-stops>
     <style:tab-stop style:position="0.5409in" style:type="right" style:leader-style="solid" style:leader-text="_"/>
     <style:tab-stop style:position="5.2661in"/>
    </style:tab-stops>
   </style:paragraph-properties>
   <style:text-properties style:font-name="Century Gothic" fo:font-family="&apos;Century Gothic&apos;" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="8pt" style:font-size-asian="8pt"/>
  </style:style>
  <style:style style:name="Header_20_left" style:display-name="Header left" style:family="paragraph" style:parent-style-name="Standard" style:class="extra">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-indent="0in" style:auto-text-indent="false" text:number-lines="false" text:line-number="0">
    <style:tab-stops>
     <style:tab-stop style:position="3.5043in" style:type="center"/>
     <style:tab-stop style:position="7.0083in" style:type="right"/>
    </style:tab-stops>
   </style:paragraph-properties>
   <style:text-properties fo:font-variant="small-caps" style:font-name="DejaVu Sans Condensed" fo:font-family="&apos;DejaVu Sans Condensed&apos;" style:font-style-name="Gras" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="10pt" fo:font-weight="bold"/>
  </style:style>
  <style:style style:name="Header_20_right" style:display-name="Header right" style:family="paragraph" style:parent-style-name="Standard" style:class="extra">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="end" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false" text:number-lines="false" text:line-number="0">
    <style:tab-stops>
     <style:tab-stop style:position="3.5043in" style:type="center"/>
     <style:tab-stop style:position="7.0083in" style:type="right"/>
    </style:tab-stops>
   </style:paragraph-properties>
   <style:text-properties fo:font-variant="small-caps" style:font-name="DejaVu Sans Condensed" fo:font-family="&apos;DejaVu Sans Condensed&apos;" style:font-style-name="Gras" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="10pt" fo:font-weight="bold"/>
  </style:style>
  <style:style style:name="Footer" style:family="paragraph" style:parent-style-name="Standard" style:class="extra">
   <style:paragraph-properties>
    <style:tab-stops>
     <style:tab-stop style:position="3.15in" style:type="center"/>
     <style:tab-stop style:position="6.3in" style:type="right"/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="Footer_20_left" style:display-name="Footer left" style:family="paragraph" style:parent-style-name="Standard" style:class="extra">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false" fo:padding="0.0398in" fo:border-left="0.99pt solid #000000" fo:border-right="none" fo:border-top="none" fo:border-bottom="none" style:shadow="none" text:number-lines="false" text:line-number="0">
    <style:tab-stops>
     <style:tab-stop style:position="3.5043in" style:type="center"/>
     <style:tab-stop style:position="7.0083in" style:type="right"/>
    </style:tab-stops>
   </style:paragraph-properties>
   <style:text-properties style:font-name="Fontin" fo:font-family="Fontin" style:font-style-name="Gras" style:font-pitch="variable" fo:font-size="12pt" fo:font-weight="bold"/>
  </style:style>
  <style:style style:name="Footer_20_right" style:display-name="Footer right" style:family="paragraph" style:parent-style-name="Standard" style:class="extra">
   <loext:graphic-properties draw:fill="none" draw:fill-color="#99ccff"/>
   <style:paragraph-properties fo:text-align="end" style:justify-single-word="false" fo:background-color="transparent" fo:padding="0.0398in" fo:border-left="none" fo:border-right="0.99pt solid #000000" fo:border-top="none" fo:border-bottom="none" style:shadow="none" text:number-lines="false" text:line-number="0">
    <style:tab-stops>
     <style:tab-stop style:position="3.5043in" style:type="center"/>
     <style:tab-stop style:position="7.0083in" style:type="right"/>
    </style:tab-stops>
   </style:paragraph-properties>
   <style:text-properties style:font-name="Fontin" fo:font-family="Fontin" style:font-style-name="Gras" style:font-pitch="variable" fo:font-size="12pt" fo:font-weight="bold"/>
  </style:style>
  <style:style style:name="Table_20_Contents" style:display-name="Table Contents" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="extra">
   <style:paragraph-properties text:number-lines="false" text:line-number="0"/>
  </style:style>
  <style:style style:name="Table_20_Heading" style:display-name="Table Heading" style:family="paragraph" style:parent-style-name="Table_20_Contents" style:class="extra">
   <style:paragraph-properties fo:text-align="center" style:justify-single-word="false" text:number-lines="false" text:line-number="0"/>
   <style:text-properties fo:font-style="italic" fo:font-weight="bold" style:font-style-asian="italic" style:font-weight-asian="bold" style:font-style-complex="italic" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="Caption" style:family="paragraph" style:parent-style-name="Standard" style:class="extra">
   <style:paragraph-properties fo:margin-top="0.0835in" fo:margin-bottom="0.0835in" loext:contextual-spacing="false" text:number-lines="false" text:line-number="0"/>
   <style:text-properties style:font-name="Times New Roman" fo:font-family="&apos;Times New Roman&apos;" fo:font-size="10pt" fo:font-style="italic" style:font-size-asian="10pt" style:font-style-asian="italic" style:font-size-complex="10pt" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="Frame_20_contents" style:display-name="Frame contents" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="extra">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-indent="0in" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="Footnote" style:family="paragraph" style:parent-style-name="Standard" style:class="extra">
   <style:text-properties fo:font-size="8pt" style:font-size-asian="8pt"/>
  </style:style>
  <style:style style:name="Index" style:family="paragraph" style:parent-style-name="Standard" style:class="index">
   <style:paragraph-properties text:number-lines="false" text:line-number="0"/>
   <style:text-properties style:font-name="Times New Roman" fo:font-family="&apos;Times New Roman&apos;"/>
  </style:style>
  <style:style style:name="Index_20_Heading" style:display-name="Index Heading" style:family="paragraph" style:parent-style-name="Heading" style:class="index">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-indent="0in" style:auto-text-indent="false" text:number-lines="false" text:line-number="0"/>
   <style:text-properties fo:font-size="16pt" fo:font-weight="bold" style:font-size-asian="16pt" style:font-weight-asian="bold" style:font-size-complex="16pt" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="Index_20_1" style:display-name="Index 1" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Standard" style:class="index">
   <style:paragraph-properties fo:margin-left="0.139in" fo:margin-right="0in" fo:margin-top="0.0835in" fo:margin-bottom="0.0138in" loext:contextual-spacing="false" fo:text-indent="-0.139in" style:auto-text-indent="false">
    <style:tab-stops>
     <style:tab-stop style:position="2.0138in" style:type="right"/>
    </style:tab-stops>
   </style:paragraph-properties>
   <style:text-properties fo:font-size="9pt" style:font-size-asian="9pt"/>
  </style:style>
  <style:style style:name="Index_20_2" style:display-name="Index 2" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Standard" style:class="index">
   <style:paragraph-properties fo:margin-left="0.278in" fo:margin-right="0in" fo:margin-top="0.0835in" fo:margin-bottom="0.0138in" loext:contextual-spacing="false" fo:text-indent="-0.139in" style:auto-text-indent="false">
    <style:tab-stops>
     <style:tab-stop style:position="2.0138in" style:type="right"/>
    </style:tab-stops>
   </style:paragraph-properties>
   <style:text-properties fo:font-size="9pt" style:font-size-asian="9pt"/>
  </style:style>
  <style:style style:name="Index_20_3" style:display-name="Index 3" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Standard" style:class="index">
   <style:paragraph-properties fo:margin-left="0.4165in" fo:margin-right="0in" fo:margin-top="0.0835in" fo:margin-bottom="0.0138in" loext:contextual-spacing="false" fo:text-indent="-0.139in" style:auto-text-indent="false">
    <style:tab-stops>
     <style:tab-stop style:position="2.0138in" style:type="right"/>
    </style:tab-stops>
   </style:paragraph-properties>
   <style:text-properties fo:font-size="9pt" style:font-size-asian="9pt"/>
  </style:style>
  <style:style style:name="Contents_20_Heading" style:display-name="Contents Heading" style:family="paragraph" style:parent-style-name="Heading" style:class="index">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-indent="0in" style:auto-text-indent="false" text:number-lines="false" text:line-number="0"/>
   <style:text-properties fo:font-size="16pt" fo:font-weight="bold" style:font-size-asian="16pt" style:font-weight-asian="bold" style:font-size-complex="16pt" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="Contents_20_1" style:display-name="Contents 1" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Standard" style:class="index">
   <loext:graphic-properties draw:fill="solid" draw:fill-color="#cccccc" draw:opacity="100%"/>
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0.139in" fo:margin-bottom="0.0693in" loext:contextual-spacing="false" fo:text-align="start" style:justify-single-word="false" fo:keep-together="always" fo:text-indent="0in" style:auto-text-indent="false" fo:background-color="#cccccc" fo:padding-left="0in" fo:padding-right="0in" fo:padding-top="0.0417in" fo:padding-bottom="0.0417in" fo:border-left="none" fo:border-right="none" fo:border-top="0.06pt solid #000000" fo:border-bottom="0.06pt solid #000000" fo:keep-with-next="always">
    <style:tab-stops>
     <style:tab-stop style:position="5.1189in" style:type="right" style:leader-style="dotted" style:leader-text="."/>
    </style:tab-stops>
   </style:paragraph-properties>
   <style:text-properties fo:text-transform="uppercase" style:font-name="Arial" fo:font-family="Arial" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-weight="bold" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="Contents_20_2" style:display-name="Contents 2" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Standard" style:class="index">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:orphans="2" fo:widows="2" fo:text-indent="0in" style:auto-text-indent="false">
    <style:tab-stops>
     <style:tab-stop style:position="5.1181in" style:type="right" style:leader-style="dotted" style:leader-text="."/>
    </style:tab-stops>
   </style:paragraph-properties>
   <style:text-properties style:use-window-font-color="true" style:font-name="Times New Roman1" fo:font-family="&apos;Times New Roman&apos;" style:font-family-generic="roman" style:font-pitch="variable" fo:font-size="10pt" fo:language="zxx" fo:country="none" fo:font-weight="bold" style:font-name-asian="Times New Roman1" style:font-family-asian="&apos;Times New Roman&apos;" style:font-family-generic-asian="roman" style:font-pitch-asian="variable" style:font-size-asian="10pt" style:language-asian="zxx" style:country-asian="none" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="Contents_20_3" style:display-name="Contents 3" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Standard" style:class="index">
   <style:paragraph-properties fo:margin-left="0.1492in" fo:margin-right="0in" fo:orphans="2" fo:widows="2" fo:text-indent="0.0008in" style:auto-text-indent="false">
    <style:tab-stops>
     <style:tab-stop style:position="5.1189in" style:type="right" style:leader-style="dotted" style:leader-text="."/>
    </style:tab-stops>
   </style:paragraph-properties>
   <style:text-properties style:use-window-font-color="true" style:font-name="Times New Roman1" fo:font-family="&apos;Times New Roman&apos;" style:font-family-generic="roman" style:font-pitch="variable" fo:font-size="9pt" fo:language="zxx" fo:country="none" style:font-name-asian="Times New Roman1" style:font-family-asian="&apos;Times New Roman&apos;" style:font-family-generic-asian="roman" style:font-pitch-asian="variable" style:font-size-asian="9pt" style:language-asian="zxx" style:country-asian="none"/>
  </style:style>
  <style:style style:name="Contents_20_4" style:display-name="Contents 4" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Standard" style:class="index">
   <style:paragraph-properties fo:margin-left="0.2799in" fo:margin-right="0in" fo:orphans="2" fo:widows="2" fo:text-indent="0.0008in" style:auto-text-indent="false">
    <style:tab-stops>
     <style:tab-stop style:position="5.1189in" style:type="right" style:leader-style="dotted" style:leader-text="."/>
    </style:tab-stops>
   </style:paragraph-properties>
   <style:text-properties style:use-window-font-color="true" style:font-name="Times New Roman1" fo:font-family="&apos;Times New Roman&apos;" style:font-family-generic="roman" style:font-pitch="variable" fo:font-size="9pt" fo:language="zxx" fo:country="none" fo:font-style="normal" style:font-name-asian="Times New Roman1" style:font-family-asian="&apos;Times New Roman&apos;" style:font-family-generic-asian="roman" style:font-pitch-asian="variable" style:font-size-asian="9pt" style:language-asian="zxx" style:country-asian="none" style:font-style-asian="italic"/>
  </style:style>
  <style:style style:name="Contents_20_5" style:display-name="Contents 5" style:family="paragraph" style:parent-style-name="Index" style:class="index">
   <style:paragraph-properties fo:margin-left="0.7862in" fo:margin-right="0in" fo:text-indent="0in" style:auto-text-indent="false">
    <style:tab-stops>
     <style:tab-stop style:position="6.1028in" style:type="right" style:leader-style="dotted" style:leader-text="."/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="Contents_20_6" style:display-name="Contents 6" style:family="paragraph" style:parent-style-name="Index" style:class="index">
   <style:paragraph-properties fo:margin-left="0.9827in" fo:margin-right="0in" fo:margin-top="0.0043in" fo:margin-bottom="0in" loext:contextual-spacing="false" fo:text-indent="0in" style:auto-text-indent="false">
    <style:tab-stops>
     <style:tab-stop style:position="5.9063in" style:type="right" style:leader-style="dotted" style:leader-text="."/>
    </style:tab-stops>
   </style:paragraph-properties>
   <style:text-properties fo:font-size="9pt" fo:font-style="italic"/>
  </style:style>
  <style:style style:name="Contents_20_7" style:display-name="Contents 7" style:family="paragraph" style:parent-style-name="Index" style:class="index">
   <style:paragraph-properties fo:margin-left="1.1791in" fo:margin-right="0in" fo:text-indent="0in" style:auto-text-indent="false">
    <style:tab-stops>
     <style:tab-stop style:position="5.7098in" style:type="right" style:leader-style="dotted" style:leader-text="."/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="Contents_20_8" style:display-name="Contents 8" style:family="paragraph" style:parent-style-name="Index" style:class="index">
   <style:paragraph-properties fo:margin-left="1.3756in" fo:margin-right="0in" fo:text-indent="0in" style:auto-text-indent="false">
    <style:tab-stops>
     <style:tab-stop style:position="5.5134in" style:type="right" style:leader-style="dotted" style:leader-text="."/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="Contents_20_9" style:display-name="Contents 9" style:family="paragraph" style:parent-style-name="Index" style:class="index">
   <style:paragraph-properties fo:margin-left="1.572in" fo:margin-right="0in" fo:text-indent="0in" style:auto-text-indent="false">
    <style:tab-stops>
     <style:tab-stop style:position="5.3165in" style:type="right" style:leader-style="dotted" style:leader-text="."/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="Contents_20_10" style:display-name="Contents 10" style:family="paragraph" style:parent-style-name="Index" style:class="index">
   <style:paragraph-properties fo:margin-left="1.7689in" fo:margin-right="0in" fo:text-indent="0in" style:auto-text-indent="false">
    <style:tab-stops>
     <style:tab-stop style:position="5.1201in" style:type="right" style:leader-style="dotted" style:leader-text="."/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="Title" style:family="paragraph" style:parent-style-name="Heading" style:next-style-name="Subtitle" style:class="chapter">
   <style:paragraph-properties fo:text-align="center" style:justify-single-word="false"/>
   <style:text-properties style:font-name="Fontin" fo:font-family="Fontin" style:font-style-name="Gras" style:font-pitch="variable" fo:font-size="20pt" fo:font-weight="bold" style:font-size-asian="18pt" style:font-weight-asian="bold" style:font-size-complex="18pt" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="Subtitle" style:family="paragraph" style:parent-style-name="Heading" style:next-style-name="Text_20_body" style:class="chapter">
   <style:paragraph-properties fo:text-align="center" style:justify-single-word="false"/>
   <style:text-properties fo:font-size="14pt" fo:font-style="italic" style:font-size-asian="14pt" style:font-style-asian="italic" style:font-size-complex="14pt" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="Code" style:family="paragraph">
   <style:paragraph-properties fo:margin-left="0.0398in" fo:margin-right="1.0236in" fo:margin-top="0in" fo:margin-bottom="0in" loext:contextual-spacing="false" fo:line-height="0.139in" fo:orphans="2" fo:widows="2" fo:text-indent="0in" style:auto-text-indent="false" style:border-line-width-left="0.0008in 0.0346in 0.0346in" fo:padding-left="0.0555in" fo:padding-right="0in" fo:padding-top="0in" fo:padding-bottom="0in" fo:border-left="5.05pt double #c0c0c0" fo:border-right="none" fo:border-top="none" fo:border-bottom="none">
    <style:tab-stops>
     <style:tab-stop style:position="0.3937in"/>
     <style:tab-stop style:position="0.5909in"/>
     <style:tab-stop style:position="0.7874in"/>
     <style:tab-stop style:position="0.9846in"/>
     <style:tab-stop style:position="1.1811in"/>
     <style:tab-stop style:position="1.3783in"/>
     <style:tab-stop style:position="1.5752in"/>
     <style:tab-stop style:position="1.772in"/>
     <style:tab-stop style:position="1.9689in"/>
     <style:tab-stop style:position="2.1661in"/>
     <style:tab-stop style:position="2.3626in"/>
     <style:tab-stop style:position="2.5598in"/>
     <style:tab-stop style:position="2.7563in"/>
     <style:tab-stop style:position="2.9535in"/>
     <style:tab-stop style:position="3.15in"/>
     <style:tab-stop style:position="3.3472in"/>
     <style:tab-stop style:position="3.5437in"/>
     <style:tab-stop style:position="3.7409in"/>
     <style:tab-stop style:position="3.9374in"/>
     <style:tab-stop style:position="4.1346in"/>
    </style:tab-stops>
   </style:paragraph-properties>
   <style:text-properties style:use-window-font-color="true" style:font-name="Courier New" fo:font-family="&apos;Courier New&apos;" style:font-family-generic="modern" fo:font-size="8pt" fo:language="fr" fo:country="FR" style:font-name-asian="Times New Roman1" style:font-family-asian="&apos;Times New Roman&apos;" style:font-family-generic-asian="roman" style:font-pitch-asian="variable" style:font-size-asian="8pt"/>
  </style:style>
  <style:style style:name="FigureEmplacement" style:family="paragraph" style:parent-style-name="TexteCourant" style:next-style-name="FigureNumero">
   <style:paragraph-properties fo:margin-top="0.2083in" fo:margin-bottom="0.2083in" loext:contextual-spacing="false" fo:text-align="center" style:justify-single-word="false" fo:orphans="2" fo:widows="2"/>
   <style:text-properties style:use-window-font-color="true" style:font-name="Times New Roman1" fo:font-family="&apos;Times New Roman&apos;" style:font-family-generic="roman" style:font-pitch="variable" fo:font-size="10pt" fo:language="zxx" fo:country="none" style:font-name-asian="Times New Roman1" style:font-family-asian="&apos;Times New Roman&apos;" style:font-family-generic-asian="roman" style:font-pitch-asian="variable" style:font-size-asian="10pt" style:language-asian="zxx" style:country-asian="none"/>
  </style:style>
  <style:style style:name="TexteCourant" style:family="paragraph">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0.0835in" fo:margin-bottom="0.0138in" loext:contextual-spacing="false" fo:text-align="justify" style:justify-single-word="false" fo:orphans="2" fo:widows="2" fo:hyphenation-ladder-count="no-limit" fo:text-indent="0in" style:auto-text-indent="false"/>
   <style:text-properties style:use-window-font-color="true" style:font-name="Garamond" fo:font-family="Garamond" style:font-style-name="Normal" style:font-family-generic="roman" style:font-pitch="variable" fo:font-size="10.5pt" fo:language="fr" fo:country="FR" style:font-name-asian="Times New Roman1" style:font-family-asian="&apos;Times New Roman&apos;" style:font-family-generic-asian="roman" style:font-pitch-asian="variable" style:font-size-asian="10pt" fo:hyphenate="true" fo:hyphenation-remain-char-count="2" fo:hyphenation-push-char-count="2"/>
  </style:style>
  <style:style style:name="FigureNumero" style:family="paragraph" style:parent-style-name="TexteCourant" style:next-style-name="FigureLegende">
   <style:paragraph-properties fo:margin-top="0.3937in" fo:margin-bottom="0in" loext:contextual-spacing="false" fo:text-align="center" style:justify-single-word="false"/>
   <style:text-properties fo:color="#808080" style:font-name="DejaVu Sans" fo:font-family="&apos;DejaVu Sans&apos;" style:font-style-name="Book" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="7pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="FigureLegende" style:family="paragraph" style:parent-style-name="TexteCourant" style:next-style-name="TexteCourant" style:default-outline-level="8">
   <style:paragraph-properties fo:margin-top="0.0827in" fo:margin-bottom="0.3937in" loext:contextual-spacing="false" fo:text-align="center" style:justify-single-word="false"/>
   <style:text-properties style:font-name="DejaVu Sans1" fo:font-family="&apos;DejaVu Sans&apos;" style:font-style-name="Oblique" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="7pt" fo:font-style="italic"/>
  </style:style>
  <style:style style:name="ChapitreIntroduction" style:family="paragraph" style:parent-style-name="TexteCourant" style:next-style-name="ListeAPuce">
   <style:paragraph-properties fo:margin-left="0.1965in" fo:margin-right="0in" fo:text-indent="0in" style:auto-text-indent="false" fo:break-after="page"/>
   <style:text-properties fo:color="#000000" style:font-name="Garamond Book" fo:font-family="&apos;Garamond Book&apos;" style:font-style-name="Normal" style:font-family-generic="roman" style:font-pitch="variable" fo:font-size="10pt" fo:language="fr" fo:country="CA" fo:font-weight="normal" style:font-name-asian="Times New Roman1" style:font-family-asian="&apos;Times New Roman&apos;" style:font-family-generic-asian="roman" style:font-pitch-asian="variable" style:font-size-asian="9pt"/>
  </style:style>
  <style:style style:name="ListeAPuce" style:family="paragraph" style:parent-style-name="TexteCourant" style:list-style-name="List_20_1">
   <style:paragraph-properties fo:margin-left="0.3543in" fo:margin-right="0in" fo:margin-top="0.0398in" fo:margin-bottom="0in" loext:contextual-spacing="false" fo:text-indent="0in" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="ListeAPuce2eNiveau" style:family="paragraph" style:parent-style-name="TexteCourant" style:list-style-name="List_20_4">
   <style:paragraph-properties fo:margin-left="0.5902in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" loext:contextual-spacing="false" fo:text-indent="0in" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="ListeSuite" style:family="paragraph" style:parent-style-name="TexteCourant">
   <style:paragraph-properties fo:margin-left="0.9839in" fo:margin-right="2.5591in" fo:margin-top="0in" fo:margin-bottom="0in" loext:contextual-spacing="false" fo:text-indent="0in" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="ChapitreTitre" style:family="paragraph" style:next-style-name="ChapitreIntroduction" style:default-outline-level="1">
   <loext:graphic-properties draw:fill="solid" draw:fill-color="#e6e6e6" draw:opacity="100%"/>
   <style:paragraph-properties fo:margin-top="0.5835in" fo:margin-bottom="0.3335in" loext:contextual-spacing="false" fo:text-align="end" style:justify-single-word="false" fo:orphans="2" fo:widows="2" fo:background-color="#e6e6e6" fo:padding-left="0in" fo:padding-right="0in" fo:padding-top="0in" fo:padding-bottom="0.0138in" fo:border-left="none" fo:border-right="none" fo:border-top="none" fo:border-bottom="0.06pt solid #000000" style:shadow="none"/>
   <style:text-properties style:use-window-font-color="true" style:font-name="Fontin" fo:font-family="Fontin" style:font-style-name="Gras" style:font-pitch="variable" fo:font-size="28pt" fo:language="fr" fo:country="FR" fo:font-weight="bold" style:font-name-asian="Times New Roman1" style:font-family-asian="&apos;Times New Roman&apos;" style:font-family-generic-asian="roman" style:font-pitch-asian="variable" style:font-size-asian="20pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="ChapitreNumero" style:family="paragraph" style:next-style-name="ChapitreTitre">
   <loext:graphic-properties draw:fill="solid" draw:fill-color="#e6e6e6" draw:opacity="100%"/>
   <style:paragraph-properties fo:margin-top="0.6945in" fo:margin-bottom="0.278in" loext:contextual-spacing="false" fo:text-align="end" style:justify-single-word="false" fo:orphans="2" fo:widows="2" fo:break-before="page" fo:background-color="#e6e6e6" fo:padding="0in" fo:border="none" style:shadow="none"/>
   <style:text-properties fo:font-variant="small-caps" style:use-window-font-color="true" style:font-name="Fontin" fo:font-family="Fontin" style:font-style-name="Gras" style:font-pitch="variable" fo:font-size="60pt" fo:language="zxx" fo:country="none" fo:font-weight="bold" style:font-name-asian="Times New Roman1" style:font-family-asian="&apos;Times New Roman&apos;" style:font-family-generic-asian="roman" style:font-pitch-asian="variable" style:font-size-asian="48pt" style:language-asian="zxx" style:country-asian="none" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="PartieTitre" style:family="paragraph" style:next-style-name="Standard">
   <style:paragraph-properties fo:margin-top="0.8335in" fo:margin-bottom="0.4165in" loext:contextual-spacing="false" fo:text-align="center" style:justify-single-word="false" fo:orphans="2" fo:widows="2"/>
   <style:text-properties style:use-window-font-color="true" style:font-name="Arial Rounded MT Bold" fo:font-family="&apos;Arial Rounded MT Bold&apos;, Tahoma" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="36pt" fo:language="zxx" fo:country="none" fo:font-weight="bold" style:font-name-asian="Times New Roman1" style:font-family-asian="&apos;Times New Roman&apos;" style:font-family-generic-asian="roman" style:font-pitch-asian="variable" style:font-size-asian="36pt" style:language-asian="zxx" style:country-asian="none" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="PartieNumero" style:family="paragraph" style:parent-style-name="ChapitreNumero" style:next-style-name="Standard">
   <style:paragraph-properties fo:text-align="center" style:justify-single-word="false" fo:padding-left="0in" fo:padding-right="0in" fo:padding-top="0.111in" fo:padding-bottom="0in" fo:border-left="none" fo:border-right="none" fo:border-top="4.99pt solid #000000" fo:border-bottom="none"/>
   <style:text-properties fo:font-size="22pt" fo:font-weight="normal" style:font-size-asian="22pt" style:font-weight-asian="normal"/>
  </style:style>
  <style:style style:name="Remarque" style:family="paragraph" style:next-style-name="Standard">
   <loext:graphic-properties draw:fill="none" draw:fill-color="#99ccff"/>
   <style:paragraph-properties fo:margin-left="0.5902in" fo:margin-right="0in" fo:margin-top="0.0783in" fo:margin-bottom="0in" loext:contextual-spacing="false" fo:text-align="justify" style:justify-single-word="false" fo:orphans="2" fo:widows="2" fo:text-indent="0in" style:auto-text-indent="false" fo:background-color="transparent" fo:padding="0.0783in" fo:border-left="2.49pt solid #4c4c4c" fo:border-right="none" fo:border-top="none" fo:border-bottom="none" style:shadow="none"/>
   <style:text-properties style:use-window-font-color="true" style:font-name="DejaVu Sans Condensed1" fo:font-family="&apos;DejaVu Sans Condensed&apos;" style:font-style-name="Book" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="8pt" fo:language="fr" fo:country="CA" style:font-name-asian="Times New Roman1" style:font-family-asian="&apos;Times New Roman&apos;" style:font-family-generic-asian="roman" style:font-pitch-asian="variable" style:font-size-asian="9pt"/>
  </style:style>
  <style:style style:name="RemarqueTitre" style:family="paragraph" style:parent-style-name="Remarque" style:next-style-name="Remarque" style:default-outline-level="7">
   <style:paragraph-properties fo:margin-left="0.5902in" fo:margin-right="0in" fo:margin-top="0.1102in" fo:margin-bottom="0.0783in" loext:contextual-spacing="false" fo:text-indent="0in" style:auto-text-indent="false" fo:padding="0in" fo:border="none" fo:keep-with-next="always"/>
   <style:text-properties fo:color="#4c4c4c" fo:font-weight="bold" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="RemarqueURL" style:family="paragraph" style:parent-style-name="Remarque" style:next-style-name="Remarque" style:list-style-name="List_20_2"/>
  <style:style style:name="RemarqueLivre" style:family="paragraph" style:parent-style-name="Remarque" style:next-style-name="Remarque" style:list-style-name="List_20_3"/>
  <style:style style:name="RemarquePuce" style:family="paragraph" style:parent-style-name="Remarque" style:list-style-name="List_20_1">
   <style:paragraph-properties fo:margin-left="0.5902in" fo:margin-right="0in" fo:margin-top="0.0398in" fo:margin-bottom="0in" loext:contextual-spacing="false" fo:text-indent="0in" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="RemarqueNumero" style:family="paragraph" style:parent-style-name="Remarque">
   <style:paragraph-properties fo:margin-left="0.8661in" fo:margin-right="0.3937in" fo:margin-top="0.0398in" fo:margin-bottom="0in" loext:contextual-spacing="false" fo:text-indent="-0.2362in" style:auto-text-indent="false">
    <style:tab-stops/>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="RemarqueCode" style:family="paragraph" style:parent-style-name="Remarque">
   <style:paragraph-properties fo:text-align="start" style:justify-single-word="false"/>
   <style:text-properties style:font-name="Courier New" fo:font-family="&apos;Courier New&apos;" style:font-family-generic="modern" fo:font-size="8pt"/>
  </style:style>
  <style:style style:name="REMARQUE2Titre" style:family="paragraph" style:parent-style-name="REMARQUE2" style:next-style-name="REMARQUE2" style:default-outline-level="6">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-indent="0in" style:auto-text-indent="false"/>
   <style:text-properties fo:font-weight="bold" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="REMARQUE2URL" style:family="paragraph" style:parent-style-name="REMARQUE2" style:list-style-name="List_20_2"/>
  <style:style style:name="REMARQUE2Puce" style:family="paragraph" style:parent-style-name="RemarquePuce" style:list-style-name="List_20_1">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0.0008in" fo:margin-top="0.0398in" fo:margin-bottom="0in" loext:contextual-spacing="false" fo:text-indent="0in" style:auto-text-indent="false"/>
   <style:text-properties fo:font-size="10pt"/>
  </style:style>
  <style:style style:name="REMARQUE2Numero" style:family="paragraph" style:parent-style-name="RemarqueNumero">
   <style:paragraph-properties fo:margin-left="0.2362in" fo:margin-right="0in" fo:margin-top="0.0398in" fo:margin-bottom="0in" loext:contextual-spacing="false" fo:text-indent="-0.2362in" style:auto-text-indent="false">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties fo:font-size="10pt"/>
  </style:style>
  <style:style style:name="RetraitSousListe1" style:family="paragraph">
   <style:paragraph-properties fo:margin-left="0.7874in" fo:margin-right="0in" fo:margin-top="0.0417in" fo:margin-bottom="0.0138in" loext:contextual-spacing="false" fo:orphans="2" fo:widows="2" fo:text-indent="0.0008in" style:auto-text-indent="false"/>
   <style:text-properties style:use-window-font-color="true" style:font-name="Times New Roman1" fo:font-family="&apos;Times New Roman&apos;" style:font-family-generic="roman" style:font-pitch="variable" fo:font-size="10pt" fo:language="fr" fo:country="FR" style:font-name-asian="Times New Roman1" style:font-family-asian="&apos;Times New Roman&apos;" style:font-family-generic-asian="roman" style:font-pitch-asian="variable" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="TableauTexte" style:family="paragraph">
   <style:paragraph-properties fo:margin-top="0.028in" fo:margin-bottom="0.0138in" loext:contextual-spacing="false" fo:line-height="0.139in" fo:keep-together="always" fo:orphans="0" fo:widows="0">
    <style:tab-stops>
     <style:tab-stop style:position="0.1972in"/>
     <style:tab-stop style:position="0.3154in"/>
     <style:tab-stop style:position="0.4335in"/>
    </style:tab-stops>
   </style:paragraph-properties>
   <style:text-properties style:use-window-font-color="true" style:font-name="Arial" fo:font-family="Arial" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="8pt" fo:language="zxx" fo:country="none" style:font-name-asian="Times New Roman1" style:font-family-asian="&apos;Times New Roman&apos;" style:font-family-generic-asian="roman" style:font-pitch-asian="variable" style:font-size-asian="8pt" style:language-asian="zxx" style:country-asian="none"/>
  </style:style>
  <style:style style:name="TableauTitre" style:family="paragraph" style:parent-style-name="TexteCourant">
   <style:paragraph-properties fo:text-align="start" style:justify-single-word="false" fo:keep-together="always" fo:keep-with-next="always"/>
   <style:text-properties style:font-name="Fontin1" fo:font-family="Fontin" style:font-style-name="Italique" style:font-pitch="variable" fo:font-size="9pt" fo:font-style="italic" fo:font-weight="normal" style:font-size-asian="9pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="TableauTitreColonne" style:family="paragraph" style:next-style-name="TableauTexte">
   <style:paragraph-properties fo:margin-top="0.028in" fo:margin-bottom="0.028in" loext:contextual-spacing="false" fo:text-align="start" style:justify-single-word="false" fo:keep-together="always" fo:orphans="2" fo:widows="2" fo:keep-with-next="always"/>
   <style:text-properties style:use-window-font-color="true" style:font-name="DejaVu Sans Condensed" fo:font-family="&apos;DejaVu Sans Condensed&apos;" style:font-style-name="Gras" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="9pt" fo:language="zxx" fo:country="none" fo:font-weight="bold" style:font-name-asian="Times New Roman1" style:font-family-asian="&apos;Times New Roman&apos;" style:font-family-generic-asian="roman" style:font-pitch-asian="variable" style:font-size-asian="9pt" style:language-asian="zxx" style:country-asian="none" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="CodeTableauCommentaireMarge" style:family="paragraph" style:parent-style-name="Remarque">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" loext:contextual-spacing="false" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0.0008in" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="TitreNiveau1" style:family="paragraph" style:next-style-name="TexteCourant" style:default-outline-level="2">
   <style:paragraph-properties fo:margin-left="-0.7874in" fo:margin-right="0in" fo:margin-top="0.3335in" fo:margin-bottom="0in" loext:contextual-spacing="false" fo:orphans="2" fo:widows="2" fo:text-indent="0in" style:auto-text-indent="false" fo:keep-with-next="always"/>
   <style:text-properties fo:color="#000080" style:font-name="Fontin" fo:font-family="Fontin" style:font-style-name="Gras" style:font-pitch="variable" fo:font-size="16pt" fo:language="fr" fo:country="FR" fo:font-weight="bold" style:font-name-asian="Times New Roman1" style:font-family-asian="&apos;Times New Roman&apos;" style:font-family-generic-asian="roman" style:font-pitch-asian="variable" style:font-size-asian="14pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="TitreNiveau2" style:family="paragraph" style:next-style-name="TexteCourant" style:default-outline-level="3">
   <style:paragraph-properties fo:margin-top="0.2083in" fo:margin-bottom="0in" loext:contextual-spacing="false" fo:orphans="2" fo:widows="2" fo:keep-with-next="always"/>
   <style:text-properties fo:color="#000080" style:font-name="Fontin" fo:font-family="Fontin" style:font-style-name="Gras" style:font-pitch="variable" fo:font-size="14pt" fo:language="fr" fo:country="FR" fo:font-weight="bold" style:font-name-asian="Times New Roman1" style:font-family-asian="&apos;Times New Roman&apos;" style:font-family-generic-asian="roman" style:font-pitch-asian="variable" style:font-size-asian="14pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="TitreNiveau3" style:family="paragraph" style:next-style-name="TexteCourant" style:default-outline-level="4">
   <style:paragraph-properties fo:margin-top="0.1665in" fo:margin-bottom="0in" loext:contextual-spacing="false" fo:orphans="2" fo:widows="2" fo:keep-with-next="always"/>
   <style:text-properties fo:color="#000080" style:font-name="Fontin" fo:font-family="Fontin" style:font-style-name="Gras" style:font-pitch="variable" fo:font-size="12pt" fo:language="fr" fo:country="FR" fo:font-weight="bold" style:font-name-asian="Times New Roman1" style:font-family-asian="&apos;Times New Roman&apos;" style:font-family-generic-asian="roman" style:font-pitch-asian="variable" style:font-size-asian="12pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="TitreNiveau4" style:family="paragraph" style:parent-style-name="TitreNiveau3" style:next-style-name="TexteCourant" style:default-outline-level="5">
   <style:paragraph-properties fo:margin-left="0.3937in" fo:margin-right="0in" fo:margin-top="0.111in" fo:margin-bottom="0in" loext:contextual-spacing="false" fo:text-indent="0.0008in" style:auto-text-indent="false"/>
   <style:text-properties fo:font-style="italic" fo:font-weight="normal" style:font-style-asian="italic" style:font-weight-asian="normal"/>
  </style:style>
  <style:style style:name="TableauCorps" style:family="paragraph">
   <style:paragraph-properties fo:margin-top="0.028in" fo:margin-bottom="0.0138in" loext:contextual-spacing="false" fo:line-height="0.139in" fo:keep-together="always" fo:orphans="0" fo:widows="0">
    <style:tab-stops>
     <style:tab-stop style:position="0.1972in"/>
     <style:tab-stop style:position="0.3154in"/>
     <style:tab-stop style:position="0.4335in"/>
    </style:tab-stops>
   </style:paragraph-properties>
   <style:text-properties style:use-window-font-color="true" style:font-name="DejaVu Sans Condensed1" fo:font-family="&apos;DejaVu Sans Condensed&apos;" style:font-style-name="Book" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="8pt" fo:language="zxx" fo:country="none" style:font-name-asian="Times New Roman1" style:font-family-asian="&apos;Times New Roman&apos;" style:font-family-generic-asian="roman" style:font-pitch-asian="variable" style:font-size-asian="8pt" style:language-asian="zxx" style:country-asian="none"/>
  </style:style>
  <style:style style:name="CodeTableau" style:family="paragraph" style:parent-style-name="Code">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-indent="0in" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="CodeTitre" style:family="paragraph" style:parent-style-name="Code">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0.1575in" fo:margin-bottom="0.0783in" loext:contextual-spacing="false" fo:text-indent="0in" style:auto-text-indent="false" fo:padding="0in" fo:border="none"/>
   <style:text-properties style:font-name="Arial1" fo:font-family="Arial" style:font-style-name="Gras" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="9pt" style:text-underline-style="solid" style:text-underline-width="auto" style:text-underline-color="font-color" fo:font-weight="bold"/>
  </style:style>
  <style:style style:name="REMARQUE2" style:family="paragraph" style:parent-style-name="Remarque">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="2.7563in" fo:margin-top="0.0398in" fo:margin-bottom="0in" loext:contextual-spacing="false" fo:text-indent="0in" style:auto-text-indent="false" style:shadow="none">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties style:font-name="Arial Narrow1" fo:font-family="&apos;Arial Narrow&apos;" style:font-style-name="Normal" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="10pt"/>
  </style:style>
  <style:style style:name="REMARQUE2Code" style:family="paragraph" style:parent-style-name="REMARQUE2">
   <style:paragraph-properties fo:text-align="start" style:justify-single-word="false"/>
   <style:text-properties style:font-name="Courier New" fo:font-family="&apos;Courier New&apos;" style:font-family-generic="modern" fo:font-size="10pt"/>
  </style:style>
  <style:style style:name="REMARQUE2FigureNumero" style:family="paragraph" style:parent-style-name="FigureNumero" style:next-style-name="REMARQUE2FigureLegende">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-indent="0in" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="REMARQUE2FigureLegende" style:family="paragraph" style:parent-style-name="FigureLegende" style:next-style-name="REMARQUE2" style:default-outline-level="" style:list-style-name="">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-indent="0in" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="RemarqueFigureLegende" style:family="paragraph" style:parent-style-name="FigureLegende" style:next-style-name="Remarque" style:default-outline-level="" style:list-style-name=""/>
  <style:style style:name="RemarqueFigureNumero" style:family="paragraph" style:parent-style-name="FigureNumero" style:next-style-name="RemarqueFigureLegende"/>
  <style:style style:name="CodeCommentaireMarge" style:family="paragraph" style:parent-style-name="Remarque">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" loext:contextual-spacing="false" fo:text-indent="0.0008in" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="ListeANumero" style:family="paragraph" style:parent-style-name="TexteCourant">
   <style:paragraph-properties fo:margin-left="0.3937in" fo:margin-right="0in" fo:margin-top="0.0398in" fo:margin-bottom="0in" loext:contextual-spacing="false" fo:text-indent="-0.248in" style:auto-text-indent="false">
    <style:tab-stops/>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="Ancre" style:family="paragraph" style:parent-style-name="TexteCourant" style:next-style-name="TexteCourant"/>
  <style:style style:name="Footnote_20_Symbol" style:display-name="Footnote Symbol" style:family="text">
   <style:text-properties style:text-position="37% 100%" fo:font-size="8pt" style:font-size-asian="8pt"/>
  </style:style>
  <style:style style:name="Page_20_Number" style:display-name="Page Number" style:family="text"/>
  <style:style style:name="Numbering_20_Symbols" style:display-name="Numbering Symbols" style:family="text"/>
  <style:style style:name="Bullet_20_Symbols" style:display-name="Bullet Symbols" style:family="text">
   <style:text-properties style:font-name="StarSymbol" fo:font-family="StarSymbol" style:font-charset="x-symbol" fo:font-size="9pt" style:font-name-asian="StarSymbol" style:font-family-asian="StarSymbol" style:font-charset-asian="x-symbol" style:font-size-asian="9pt" style:font-name-complex="StarSymbol" style:font-family-complex="StarSymbol" style:font-charset-complex="x-symbol" style:font-size-complex="9pt"/>
  </style:style>
  <style:style style:name="Internet_20_link" style:display-name="Internet link" style:family="text">
   <style:text-properties fo:color="#000080" style:text-underline-style="solid" style:text-underline-width="auto" style:text-underline-color="font-color"/>
  </style:style>
  <style:style style:name="Visited_20_Internet_20_Link" style:display-name="Visited Internet Link" style:family="text">
   <style:text-properties fo:color="#800000" style:text-underline-style="solid" style:text-underline-width="auto" style:text-underline-color="font-color"/>
  </style:style>
  <style:style style:name="Endnote_20_Symbol" style:display-name="Endnote Symbol" style:family="text"/>
  <style:style style:name="Line_20_numbering" style:display-name="Line numbering" style:family="text"/>
  <style:style style:name="Source_20_Text" style:display-name="Source Text" style:family="text">
   <style:text-properties style:font-name="Courier New1" fo:font-family="&apos;Courier New&apos;" style:font-family-generic="modern" style:font-pitch="fixed" style:font-name-asian="Courier New1" style:font-family-asian="&apos;Courier New&apos;" style:font-family-generic-asian="modern" style:font-pitch-asian="fixed" style:font-name-complex="Courier New1" style:font-family-complex="&apos;Courier New&apos;" style:font-family-generic-complex="modern" style:font-pitch-complex="fixed"/>
  </style:style>
  <style:style style:name="CodeDansTexte" style:family="text">
   <style:text-properties fo:color="#000080" style:font-name="Courier New" fo:font-family="&apos;Courier New&apos;" style:font-family-generic="modern" fo:font-size="8pt" fo:language="zxx" fo:country="none" style:font-size-asian="8pt" style:language-asian="zxx" style:country-asian="none"/>
  </style:style>
  <style:style style:name="RemarquePreTitre" style:family="text">
   <style:text-properties fo:font-variant="small-caps" style:use-window-font-color="true" style:font-name="DejaVu Sans Condensed1" fo:font-family="&apos;DejaVu Sans Condensed&apos;" style:font-style-name="Book" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="9pt" style:text-underline-style="none"/>
  </style:style>
  <style:style style:name="URL" style:family="text">
   <style:text-properties style:font-name="Arial" fo:font-family="Arial" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="8pt" style:font-size-asian="8pt"/>
  </style:style>
  <style:style style:name="CodeExergue" style:family="text">
   <style:text-properties fo:color="#000080" style:font-name="Courier New" fo:font-family="&apos;Courier New&apos;" style:font-family-generic="modern" fo:font-size="8pt" fo:language="zxx" fo:country="none" fo:font-weight="bold" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="CodeCommentaire" style:family="text">
   <style:text-properties fo:color="#808080" style:font-name="Courier New" fo:font-family="&apos;Courier New&apos;" style:font-family-generic="modern" fo:font-size="8pt"/>
  </style:style>
  <style:style style:name="Menu" style:family="text">
   <style:text-properties fo:color="#5c8526" style:font-name="Tahoma" fo:font-family="Tahoma" style:font-style-name="Italique gras" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="7pt" fo:language="fr" fo:country="FR" fo:font-style="normal" fo:font-weight="bold"/>
  </style:style>
  <style:style style:name="Numero" style:family="text">
   <style:text-properties style:font-name="Arial1" fo:font-family="Arial" style:font-style-name="Gras" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="8pt" fo:font-weight="bold" fo:background-color="transparent"/>
  </style:style>
  <style:style style:name="Hidden" style:family="text">
   <style:text-properties fo:color="#008080" style:font-name="Arial Narrow" fo:font-family="&apos;Arial Narrow&apos;" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="7pt" fo:background-color="transparent"/>
  </style:style>
  <style:style style:name="Warning" style:family="text">
   <style:text-properties fo:color="#ff0000"/>
  </style:style>
  <style:style style:name="Symbol" style:family="text">
   <style:text-properties style:font-name="Symbol" fo:font-family="Symbol" style:font-style-name="Normal" style:font-family-generic="roman" style:font-pitch="variable" style:font-charset="x-symbol" fo:font-size="9pt"/>
  </style:style>
  <style:style style:name="WingDings" style:family="text">
   <style:text-properties style:font-name="Wingdings" fo:font-family="Wingdings" style:font-style-name="Normal" style:font-pitch="variable" style:font-charset="x-symbol" fo:font-size="9pt"/>
  </style:style>
  <style:style style:name="PuceCode" style:family="text">
   <style:text-properties fo:color="#ffffff" style:font-name="Arial1" fo:font-family="Arial" style:font-style-name="Gras" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="8pt" fo:font-weight="bold" fo:background-color="#b80047"/>
  </style:style>
  <style:style style:name="Frame" style:family="graphic">
   <style:graphic-properties text:anchor-type="paragraph" svg:x="0in" svg:y="0in" style:wrap="parallel" style:number-wrapped-paragraphs="no-limit" style:wrap-contour="false" style:vertical-pos="top" style:vertical-rel="paragraph-content" style:horizontal-pos="center" style:horizontal-rel="paragraph-content"/>
  </style:style>
  <style:style style:name="Graphics" style:family="graphic">
   <style:graphic-properties text:anchor-type="paragraph" svg:x="0in" svg:y="0in" style:wrap="none" style:vertical-pos="top" style:vertical-rel="paragraph" style:horizontal-pos="center" style:horizontal-rel="paragraph"/>
  </style:style>
  <style:style style:name="OLE" style:family="graphic">
   <style:graphic-properties text:anchor-type="paragraph" svg:x="0in" svg:y="0in" style:wrap="none" style:vertical-pos="top" style:vertical-rel="paragraph" style:horizontal-pos="center" style:horizontal-rel="paragraph"/>
  </style:style>
  <style:style style:name="CadreSimple" style:family="graphic" style:parent-style-name="Frame">
   <style:graphic-properties svg:width="2.2835in" fo:min-height="0.472in" text:anchor-type="paragraph" svg:x="1.0634in" svg:y="0in" fo:margin-top="0.0783in" fo:margin-bottom="0in" style:wrap="none" style:vertical-pos="top" style:vertical-rel="paragraph-content" style:horizontal-pos="from-left" style:horizontal-rel="page-content" fo:background-color="transparent" draw:fill="none" draw:fill-color="#99ccff" fo:padding-left="0in" fo:padding-right="0in" fo:padding-top="0.028in" fo:padding-bottom="0.028in" fo:border-left="none" fo:border-right="none" fo:border-top="0.99pt solid #808080" fo:border-bottom="0.99pt solid #808080">
    <style:columns fo:column-count="1" fo:column-gap="0in"/>
   </style:graphic-properties>
  </style:style>
  <style:style style:name="CadrePrincipale" style:family="graphic" style:parent-style-name="Frame">
   <style:graphic-properties svg:width="4.4098in" fo:min-height="0.7874in" text:anchor-type="paragraph" svg:x="0in" svg:y="0in" fo:margin-top="0.1575in" fo:margin-bottom="0in" style:wrap="none" style:vertical-pos="top" style:vertical-rel="paragraph-content" style:horizontal-pos="left" style:horizontal-rel="paragraph" fo:padding="0.0591in" fo:border="0.06pt solid #808080">
    <style:columns fo:column-count="1" fo:column-gap="0in"/>
   </style:graphic-properties>
  </style:style>
  <style:style style:name="CadreEncadre" style:family="graphic" style:parent-style-name="CadreSimple">
   <style:graphic-properties svg:width="2.2835in" fo:min-height="0.472in" text:anchor-type="paragraph" fo:margin-left="0in" fo:margin-right="0in" style:wrap="none" fo:padding="0.0591in" fo:border="0.99pt solid #808080"/>
  </style:style>
  <style:style style:name="CadrePleinePage" style:family="graphic" style:parent-style-name="CadrePrincipale">
   <style:graphic-properties svg:width="7.0075in" fo:min-height="1.5752in" text:anchor-type="paragraph" fo:margin-top="0.0984in" fo:margin-bottom="0.0984in" fo:background-color="transparent" draw:fill="none" draw:fill-color="#99ccff" fo:padding-left="0in" fo:padding-right="0in" fo:padding-top="0.0591in" fo:padding-bottom="0.0591in" fo:border="0.06pt solid #808080">
    <style:columns fo:column-count="2" fo:column-gap="0.2362in">
     <style:column style:rel-width="32767*" fo:start-indent="0in" fo:end-indent="0.1181in"/>
     <style:column style:rel-width="32768*" fo:start-indent="0.1181in" fo:end-indent="0in"/>
    </style:columns>
   </style:graphic-properties>
  </style:style>
  <style:style style:name="CadreInLine" style:family="graphic" style:parent-style-name="Frame">
   <style:graphic-properties svg:width="0.7874in" fo:min-height="0.1181in" text:anchor-type="paragraph" svg:y="0in" fo:margin-left="0.0398in" fo:margin-right="0.0398in" style:vertical-pos="top" style:vertical-rel="paragraph-content" fo:background-color="transparent" draw:fill="none" draw:fill-color="#99ccff">
    <style:columns fo:column-count="1" fo:column-gap="0in"/>
   </style:graphic-properties>
  </style:style>
  <style:style style:name="CadreEncadreMarge" style:family="graphic" style:parent-style-name="CadreEncadre">
   <style:graphic-properties svg:width="2.2835in" fo:min-height="0.472in" text:anchor-type="paragraph" svg:x="1.0634in" style:wrap="left" style:number-wrapped-paragraphs="1" style:wrap-contour="false" style:horizontal-pos="right" style:horizontal-rel="page-content" fo:background-color="transparent" draw:fill="none" draw:fill-color="#99ccff" fo:padding="0.0193in" fo:border="0.99pt solid #808080">
    <style:columns fo:column-count="1" fo:column-gap="0in"/>
   </style:graphic-properties>
  </style:style>
  <style:style style:name="CadreSimpleMarge" style:family="graphic" style:parent-style-name="CadreSimple">
   <style:graphic-properties svg:width="2.2835in" fo:min-height="0.472in" text:anchor-type="paragraph" svg:x="1.0634in" style:wrap="left" style:number-wrapped-paragraphs="1" style:wrap-contour="false" style:horizontal-pos="right" style:horizontal-rel="page-content"/>
  </style:style>
  <style:style style:name="Figure" style:family="graphic" style:parent-style-name="CadreEncadre">
   <style:graphic-properties svg:width="4.4098in" fo:min-height="0.7874in" text:anchor-type="paragraph" svg:x="0in" svg:y="0in" fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0.1575in" fo:margin-bottom="0in" style:wrap="none" style:vertical-pos="top" style:vertical-rel="paragraph-content" style:horizontal-pos="left" style:horizontal-rel="paragraph" fo:background-color="transparent" draw:fill="none" draw:fill-color="#99ccff" fo:padding="0in" fo:border="none">
    <style:columns fo:column-count="1" fo:column-gap="0in"/>
   </style:graphic-properties>
  </style:style>
  <text:outline-style style:name="Outline">
   <text:outline-level-style text:level="1" style:num-format="">
    <style:list-level-properties/>
   </text:outline-level-style>
   <text:outline-level-style text:level="2" style:num-format="">
    <style:list-level-properties/>
   </text:outline-level-style>
   <text:outline-level-style text:level="3" style:num-format="">
    <style:list-level-properties/>
   </text:outline-level-style>
   <text:outline-level-style text:level="4" style:num-format="">
    <style:list-level-properties/>
   </text:outline-level-style>
   <text:outline-level-style text:level="5" style:num-format="">
    <style:list-level-properties/>
   </text:outline-level-style>
   <text:outline-level-style text:level="6" style:num-format="">
    <style:list-level-properties/>
   </text:outline-level-style>
   <text:outline-level-style text:level="7" style:num-format="">
    <style:list-level-properties/>
   </text:outline-level-style>
   <text:outline-level-style text:level="8" style:num-format="">
    <style:list-level-properties/>
   </text:outline-level-style>
   <text:outline-level-style text:level="9" style:num-format="">
    <style:list-level-properties/>
   </text:outline-level-style>
   <text:outline-level-style text:level="10" style:num-format="">
    <style:list-level-properties/>
   </text:outline-level-style>
  </text:outline-style>
  <text:list-style style:name="List_20_1" style:display-name="List 1">
   <text:list-level-style-bullet text:level="1" text:style-name="Numbering_20_Symbols" text:bullet-char="•">
    <style:list-level-properties text:min-label-width="0.1575in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Numbering_20_Symbols" text:bullet-char="•">
    <style:list-level-properties text:space-before="0.1579in" text:min-label-width="0.1575in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Numbering_20_Symbols" text:bullet-char="•">
    <style:list-level-properties text:space-before="0.3146in" text:min-label-width="0.1575in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Numbering_20_Symbols" text:bullet-char="•">
    <style:list-level-properties text:space-before="0.4724in" text:min-label-width="0.1575in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Numbering_20_Symbols" text:bullet-char="•">
    <style:list-level-properties text:space-before="0.6299in" text:min-label-width="0.1575in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Numbering_20_Symbols" text:bullet-char="•">
    <style:list-level-properties text:space-before="0.7878in" text:min-label-width="0.1575in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Numbering_20_Symbols" text:bullet-char="•">
    <style:list-level-properties text:space-before="0.9445in" text:min-label-width="0.1575in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Numbering_20_Symbols" text:bullet-char="•">
    <style:list-level-properties text:space-before="1.1024in" text:min-label-width="0.1575in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Numbering_20_Symbols" text:bullet-char="•">
    <style:list-level-properties text:space-before="1.2598in" text:min-label-width="0.1575in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Numbering_20_Symbols" text:bullet-char="•">
    <style:list-level-properties text:space-before="1.4177in" text:min-label-width="0.1575in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="List_20_2" style:display-name="List 2">
   <text:list-level-style-bullet text:level="1" text:style-name="Numbering_20_Symbols" text:bullet-char="&gt;">
    <style:list-level-properties text:min-label-width="0.1575in"/>
    <style:text-properties style:font-name="Arial Narrow"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Numbering_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:space-before="0.1181in" text:min-label-width="0.1181in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Numbering_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:space-before="0.2362in" text:min-label-width="0.1181in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Numbering_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:space-before="0.3539in" text:min-label-width="0.1181in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Numbering_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:space-before="0.472in" text:min-label-width="0.1181in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Numbering_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:space-before="0.5902in" text:min-label-width="0.1181in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Numbering_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:space-before="0.7091in" text:min-label-width="0.1181in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Numbering_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:space-before="0.8272in" text:min-label-width="0.1181in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Numbering_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:space-before="0.9453in" text:min-label-width="0.1181in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Numbering_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:space-before="1.063in" text:min-label-width="0.1181in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="List_20_3" style:display-name="List 3">
   <text:list-level-style-bullet text:level="1" text:style-name="Numbering_20_Symbols" text:bullet-char="=">
    <style:list-level-properties text:min-label-width="0.1575in"/>
    <style:text-properties style:font-name="Arial Narrow"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Numbering_20_Symbols" text:bullet-char="□">
    <style:list-level-properties text:space-before="0.1555in" text:min-label-width="0.1555in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Numbering_20_Symbols" text:bullet-char="☑">
    <style:list-level-properties text:min-label-width="0.1555in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Numbering_20_Symbols" text:bullet-char="□">
    <style:list-level-properties text:space-before="0.1555in" text:min-label-width="0.1555in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Numbering_20_Symbols" text:bullet-char="☑">
    <style:list-level-properties text:min-label-width="0.1555in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Numbering_20_Symbols" text:bullet-char="□">
    <style:list-level-properties text:space-before="0.1555in" text:min-label-width="0.1555in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Numbering_20_Symbols" text:bullet-char="☑">
    <style:list-level-properties text:min-label-width="0.1555in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Numbering_20_Symbols" text:bullet-char="□">
    <style:list-level-properties text:space-before="0.1555in" text:min-label-width="0.1555in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Numbering_20_Symbols" text:bullet-char="☑">
    <style:list-level-properties text:min-label-width="0.1555in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Numbering_20_Symbols" text:bullet-char="□">
    <style:list-level-properties text:space-before="0.1555in" text:min-label-width="0.1555in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="List_20_4" style:display-name="List 4">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" text:bullet-char="•">
    <style:list-level-properties text:min-label-width="0.1575in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" text:bullet-char="•">
    <style:list-level-properties text:space-before="0.1579in" text:min-label-width="0.1575in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" text:bullet-char="•">
    <style:list-level-properties text:space-before="0.3146in" text:min-label-width="0.1575in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" text:bullet-char="•">
    <style:list-level-properties text:space-before="0.4724in" text:min-label-width="0.1575in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" text:bullet-char="•">
    <style:list-level-properties text:space-before="0.6299in" text:min-label-width="0.1575in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" text:bullet-char="•">
    <style:list-level-properties text:space-before="0.7878in" text:min-label-width="0.1575in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" text:bullet-char="•">
    <style:list-level-properties text:space-before="0.9445in" text:min-label-width="0.1575in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" text:bullet-char="•">
    <style:list-level-properties text:space-before="1.1024in" text:min-label-width="0.1575in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" text:bullet-char="•">
    <style:list-level-properties text:space-before="1.2598in" text:min-label-width="0.1575in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" text:bullet-char="•">
    <style:list-level-properties text:space-before="1.4177in" text:min-label-width="0.1575in"/>
    <style:text-properties style:font-name="StarSymbol"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="NumList1" text:consecutive-numbering="true">
   <text:list-level-style-number text:level="1" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="0.2563in" text:min-label-width="0.248in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="2" style:num-suffix="." style:num-format="a" style:num-letter-sync="true">
    <style:list-level-properties text:space-before="0.5118in" text:min-label-width="0.25in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="3" style:num-suffix="." style:num-format="i">
    <style:list-level-properties text:space-before="0.7874in" text:min-label-width="0.1252in" fo:text-align="end"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="4" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="1.0429in" text:min-label-width="0.25in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="5" style:num-suffix="." style:num-format="a" style:num-letter-sync="true">
    <style:list-level-properties text:space-before="1.2992in" text:min-label-width="0.25in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="6" style:num-suffix="." style:num-format="i">
    <style:list-level-properties text:space-before="1.5748in" text:min-label-width="0.1252in" fo:text-align="end"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="7" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="1.8307in" text:min-label-width="0.25in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="8" style:num-suffix="." style:num-format="a" style:num-letter-sync="true">
    <style:list-level-properties text:space-before="2.0866in" text:min-label-width="0.25in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="9" style:num-suffix="." style:num-format="i">
    <style:list-level-properties text:space-before="0.0028in" text:min-label-width="0.1252in" fo:text-align="end"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="10" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="3.0118in" text:min-label-width="0.1965in"/>
   </text:list-level-style-number>
  </text:list-style>
  <text:list-style style:name="NumList2" text:consecutive-numbering="true">
   <text:list-level-style-number text:level="1" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:min-label-width="0.248in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="2" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="0.1972in" text:min-label-width="0.1965in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="3" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="0.3937in" text:min-label-width="0.1965in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="4" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="0.5909in" text:min-label-width="0.1965in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="5" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="0.7874in" text:min-label-width="0.1965in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="6" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="0.9846in" text:min-label-width="0.1965in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="7" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="1.1815in" text:min-label-width="0.1965in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="8" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="1.3787in" text:min-label-width="0.1965in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="9" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="1.5752in" text:min-label-width="0.1965in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="10" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="1.7724in" text:min-label-width="0.1965in"/>
   </text:list-level-style-number>
  </text:list-style>
  <text:list-style style:name="WW8Num10" text:consecutive-numbering="true">
   <text:list-level-style-number text:level="1" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="0.5909in" text:min-label-width="0.248in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="2" style:num-suffix="." style:num-format="a" style:num-letter-sync="true">
    <style:list-level-properties text:space-before="1.3409in" text:min-label-width="0.25in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="3" style:num-suffix="." style:num-format="i">
    <style:list-level-properties text:space-before="1.9657in" text:min-label-width="0.1252in" fo:text-align="end"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="4" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="2.3409in" text:min-label-width="0.25in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="5" style:num-suffix="." style:num-format="a" style:num-letter-sync="true">
    <style:list-level-properties text:space-before="2.8409in" text:min-label-width="0.25in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="6" style:num-suffix="." style:num-format="i">
    <style:list-level-properties text:space-before="3.4657in" text:min-label-width="0.1252in" fo:text-align="end"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="7" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="3.8409in" text:min-label-width="0.25in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="8" style:num-suffix="." style:num-format="a" style:num-letter-sync="true">
    <style:list-level-properties text:space-before="4.3409in" text:min-label-width="0.25in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="9" style:num-suffix="." style:num-format="i">
    <style:list-level-properties text:space-before="4.9657in" text:min-label-width="0.1252in" fo:text-align="end"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="10" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="1.7724in" text:min-label-width="0.1965in"/>
   </text:list-level-style-number>
  </text:list-style>
  <text:notes-configuration text:note-class="footnote" text:citation-style-name="Footnote_20_Symbol" style:num-format="1" text:start-value="0" text:footnotes-position="page" text:start-numbering-at="page"/>
  <text:notes-configuration text:note-class="endnote" text:citation-style-name="Endnote_20_Symbol" text:master-page-name="Endnote" style:num-format="1" text:start-value="0"/>
  <text:linenumbering-configuration text:style-name="Line_20_numbering" text:number-lines="false" text:offset="0.1965in" style:num-format="1" text:number-position="left" text:increment="5"/>
 </office:styles>
 <office:automatic-styles>
  <style:style style:name="Tableau1" style:family="table">
   <style:table-properties style:width="5.4326in" table:align="margins"/>
  </style:style>
  <style:style style:name="Tableau1.A" style:family="table-column">
   <style:table-column-properties style:column-width="2.5083in" style:rel-column-width="30255*"/>
  </style:style>
  <style:style style:name="Tableau1.B" style:family="table-column">
   <style:table-column-properties style:column-width="2.9243in" style:rel-column-width="35280*"/>
  </style:style>
  <style:style style:name="Tableau1.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="top" fo:padding-left="0.0486in" fo:padding-right="0.0486in" fo:padding-top="0in" fo:padding-bottom="0in" fo:border-left="0.05pt solid #000000" fo:border-right="none" fo:border-top="0.05pt solid #000000" fo:border-bottom="0.05pt solid #000000"/>
  </style:style>
  <style:style style:name="Tableau1.B1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="top" fo:padding-left="0.0486in" fo:padding-right="0.0486in" fo:padding-top="0in" fo:padding-bottom="0in" fo:border="0.05pt solid #000000"/>
  </style:style>
  <style:style style:name="Tableau1.A2" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="top" fo:padding-left="0.0486in" fo:padding-right="0.0486in" fo:padding-top="0in" fo:padding-bottom="0in" fo:border-left="0.05pt solid #000000" fo:border-right="none" fo:border-top="none" fo:border-bottom="0.05pt solid #000000"/>
  </style:style>
  <style:style style:name="Tableau1.B2" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="top" fo:padding-left="0.0486in" fo:padding-right="0.0486in" fo:padding-top="0in" fo:padding-bottom="0in" fo:border-left="0.05pt solid #000000" fo:border-right="0.05pt solid #000000" fo:border-top="none" fo:border-bottom="0.05pt solid #000000"/>
  </style:style>
  <style:style style:name="P1" style:family="paragraph" style:parent-style-name="Header" style:master-page-name="">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0.1181in" loext:contextual-spacing="false" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false" style:page-number="auto">
    <style:tab-stops>
     <style:tab-stop style:position="0.5409in" style:type="right" style:leader-style="solid" style:leader-text="_"/>
     <style:tab-stop style:position="5.3752in"/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="P2" style:family="paragraph" style:parent-style-name="Header" style:master-page-name="">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0.1181in" loext:contextual-spacing="false" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false" style:page-number="auto">
    <style:tab-stops>
     <style:tab-stop style:position="0.5409in" style:type="right" style:leader-style="solid" style:leader-text="_"/>
     <style:tab-stop style:position="5.3752in"/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="P3" style:family="paragraph" style:parent-style-name="TexteCourant">
   <style:text-properties fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="P4" style:family="paragraph" style:parent-style-name="TexteCourant">
   <style:text-properties style:text-underline-style="solid" style:text-underline-width="auto" style:text-underline-color="font-color"/>
  </style:style>
  <style:style style:name="P5" style:family="paragraph" style:parent-style-name="TableauTitre">
   <style:paragraph-properties>
    <style:tab-stops>
     <style:tab-stop style:position="0.3937in"/>
     <style:tab-stop style:position="0.5909in"/>
     <style:tab-stop style:position="0.7874in"/>
     <style:tab-stop style:position="0.9846in"/>
     <style:tab-stop style:position="1.1811in"/>
     <style:tab-stop style:position="1.3783in"/>
     <style:tab-stop style:position="1.5752in"/>
     <style:tab-stop style:position="1.772in"/>
     <style:tab-stop style:position="1.9689in"/>
     <style:tab-stop style:position="2.1661in"/>
     <style:tab-stop style:position="2.3626in"/>
     <style:tab-stop style:position="2.5598in"/>
     <style:tab-stop style:position="2.7563in"/>
     <style:tab-stop style:position="2.9535in"/>
     <style:tab-stop style:position="3.15in"/>
     <style:tab-stop style:position="3.3472in"/>
     <style:tab-stop style:position="3.5437in"/>
     <style:tab-stop style:position="3.7409in"/>
     <style:tab-stop style:position="3.9374in"/>
     <style:tab-stop style:position="4.1346in"/>
    </style:tab-stops>
   </style:paragraph-properties>
   <style:text-properties fo:language="fr" fo:country="CA"/>
  </style:style>
  <style:style style:name="P6" style:family="paragraph" style:parent-style-name="TableauTitreColonne">
   <style:paragraph-properties>
    <style:tab-stops>
     <style:tab-stop style:position="0.3937in"/>
     <style:tab-stop style:position="0.5909in"/>
     <style:tab-stop style:position="0.7874in"/>
     <style:tab-stop style:position="0.9846in"/>
     <style:tab-stop style:position="1.1811in"/>
     <style:tab-stop style:position="1.3783in"/>
     <style:tab-stop style:position="1.5752in"/>
     <style:tab-stop style:position="1.772in"/>
     <style:tab-stop style:position="1.9689in"/>
     <style:tab-stop style:position="2.1661in"/>
     <style:tab-stop style:position="2.3626in"/>
     <style:tab-stop style:position="2.5598in"/>
     <style:tab-stop style:position="2.7563in"/>
     <style:tab-stop style:position="2.9535in"/>
     <style:tab-stop style:position="3.15in"/>
     <style:tab-stop style:position="3.3472in"/>
     <style:tab-stop style:position="3.5437in"/>
     <style:tab-stop style:position="3.7409in"/>
     <style:tab-stop style:position="3.9374in"/>
     <style:tab-stop style:position="4.1346in"/>
    </style:tab-stops>
   </style:paragraph-properties>
   <style:text-properties fo:language="zxx" fo:country="none" style:language-asian="zxx" style:country-asian="none"/>
  </style:style>
  <style:style style:name="P7" style:family="paragraph" style:parent-style-name="TableauCorps">
   <style:paragraph-properties>
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties fo:language="zxx" fo:country="none" style:language-asian="zxx" style:country-asian="none"/>
  </style:style>
  <style:style style:name="P8" style:family="paragraph" style:parent-style-name="Code">
   <style:paragraph-properties fo:margin-left="0.039in" fo:margin-right="1.0319in" fo:text-indent="0in" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="P9" style:family="paragraph" style:parent-style-name="Contents_20_3">
   <style:paragraph-properties>
    <style:tab-stops>
     <style:tab-stop style:position="5.2827in" style:type="right" style:leader-style="dotted" style:leader-text="."/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="P10" style:family="paragraph" style:parent-style-name="Contents_20_2">
   <style:paragraph-properties>
    <style:tab-stops>
     <style:tab-stop style:position="5.4327in" style:type="right" style:leader-style="dotted" style:leader-text="."/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="P11" style:family="paragraph" style:parent-style-name="Contents_20_1">
   <style:paragraph-properties>
    <style:tab-stops>
     <style:tab-stop style:position="5.4327in" style:type="right" style:leader-style="dotted" style:leader-text="."/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="P12" style:family="paragraph" style:parent-style-name="Contents_20_Heading" style:master-page-name="PageEyrolles15-20">
   <style:paragraph-properties style:page-number="auto"/>
  </style:style>
  <style:style style:name="P13" style:family="paragraph" style:parent-style-name="RemarqueTitre">
   <style:paragraph-properties fo:padding-left="0.0555in" fo:padding-right="0.0555in" fo:padding-top="0.0138in" fo:padding-bottom="0.0138in" fo:border="0.06pt solid #000000">
    <style:tab-stops>
     <style:tab-stop style:position="0.3937in"/>
     <style:tab-stop style:position="0.5909in"/>
     <style:tab-stop style:position="0.7874in"/>
     <style:tab-stop style:position="0.9846in"/>
     <style:tab-stop style:position="1.1811in"/>
     <style:tab-stop style:position="1.3783in"/>
     <style:tab-stop style:position="1.5752in"/>
     <style:tab-stop style:position="1.772in"/>
     <style:tab-stop style:position="1.9689in"/>
     <style:tab-stop style:position="2.1661in"/>
     <style:tab-stop style:position="2.3626in"/>
     <style:tab-stop style:position="2.5598in"/>
     <style:tab-stop style:position="2.7563in"/>
     <style:tab-stop style:position="2.9535in"/>
     <style:tab-stop style:position="3.15in"/>
     <style:tab-stop style:position="3.3472in"/>
     <style:tab-stop style:position="3.5437in"/>
     <style:tab-stop style:position="3.7409in"/>
     <style:tab-stop style:position="3.9374in"/>
     <style:tab-stop style:position="4.1346in"/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="T1" style:family="text"/>
  <style:style style:name="T2" style:family="text">
   <style:text-properties fo:font-weight="normal" style:font-weight-asian="normal" style:font-weight-complex="normal"/>
  </style:style>
  <style:style style:name="T3" style:family="text">
   <style:text-properties fo:font-style="italic"/>
  </style:style>
  <style:style style:name="T4" style:family="text">
   <style:text-properties fo:font-style="italic" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="T5" style:family="text">
   <style:text-properties style:font-name="Times New Roman" fo:font-size="10pt"/>
  </style:style>
  <style:style style:name="T6" style:family="text">
   <style:text-properties style:font-name="Arial2" fo:font-size="8pt"/>
  </style:style>
  <style:style style:name="T7" style:family="text">
   <style:text-properties fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="Sect1" style:family="section">
   <style:section-properties style:editable="false">
    <style:columns fo:column-count="1" fo:column-gap="0in"/>
   </style:section-properties>
  </style:style>
  <style:page-layout style:name="pm1" style:page-usage="mirrored">
   <style:page-layout-properties fo:page-width="8.2681in" fo:page-height="11.6929in" style:num-format="1" style:print-orientation="portrait" fo:margin-top="1.4764in" fo:margin-bottom="1.8508in" fo:margin-left="0.6299in" fo:margin-right="0.6299in" style:writing-mode="lr-tb" style:layout-grid-color="#c0c0c0" style:layout-grid-lines="33" style:layout-grid-base-height="0.1945in" style:layout-grid-ruby-height="0.0555in" style:layout-grid-mode="none" style:layout-grid-ruby-below="false" style:layout-grid-print="false" style:layout-grid-display="false" style:footnote-max-height="0in">
    <style:footnote-sep style:width="0.0071in" style:distance-before-sep="0.0398in" style:distance-after-sep="0.0398in" style:line-style="none" style:adjustment="left" style:rel-width="25%" style:color="#000000"/>
   </style:page-layout-properties>
   <style:header-style>
    <style:header-footer-properties fo:min-height="0.1181in" fo:margin-left="0in" fo:margin-right="0in" fo:margin-bottom="0.0783in" style:dynamic-spacing="false"/>
   </style:header-style>
   <style:footer-style/>
  </style:page-layout>
  <style:page-layout style:name="pm2">
   <style:page-layout-properties fo:page-width="8.2681in" fo:page-height="11.6925in" style:num-format="1" style:print-orientation="portrait" fo:margin-top="0.3937in" fo:margin-bottom="0.3937in" fo:margin-left="0.6299in" fo:margin-right="0.6299in" style:writing-mode="lr-tb" style:layout-grid-color="#c0c0c0" style:layout-grid-lines="20" style:layout-grid-base-height="0.278in" style:layout-grid-ruby-height="0.139in" style:layout-grid-mode="none" style:layout-grid-ruby-below="false" style:layout-grid-print="false" style:layout-grid-display="false" style:footnote-max-height="0in">
    <style:footnote-sep style:width="0.0071in" style:distance-before-sep="0.0398in" style:distance-after-sep="0.0398in" style:line-style="none" style:adjustment="left" style:rel-width="25%" style:color="#000000"/>
   </style:page-layout-properties>
   <style:header-style/>
   <style:footer-style/>
  </style:page-layout>
  <style:page-layout style:name="pm3">
   <style:page-layout-properties fo:page-width="8.2681in" fo:page-height="11.6925in" style:num-format="1" style:print-orientation="portrait" fo:margin-top="0.7874in" fo:margin-bottom="0.7874in" fo:margin-left="0.7874in" fo:margin-right="0.7874in" style:writing-mode="lr-tb" style:layout-grid-color="#c0c0c0" style:layout-grid-lines="20" style:layout-grid-base-height="0.278in" style:layout-grid-ruby-height="0.139in" style:layout-grid-mode="none" style:layout-grid-ruby-below="false" style:layout-grid-print="false" style:layout-grid-display="false" style:footnote-max-height="0in">
    <style:footnote-sep style:line-style="none" style:adjustment="left" style:rel-width="25%" style:color="#000000"/>
   </style:page-layout-properties>
   <style:header-style/>
   <style:footer-style/>
  </style:page-layout>
  <style:page-layout style:name="pm4">
   <style:page-layout-properties fo:page-width="8.2673in" fo:page-height="11.6925in" style:num-format="1" style:print-orientation="portrait" fo:margin-top="0.7874in" fo:margin-bottom="0.7874in" fo:margin-left="1.4173in" fo:margin-right="1.4173in" style:shadow="none" fo:background-color="transparent" style:writing-mode="lr-tb" style:layout-grid-color="#c0c0c0" style:layout-grid-lines="20" style:layout-grid-base-height="0.278in" style:layout-grid-ruby-height="0.139in" style:layout-grid-mode="none" style:layout-grid-ruby-below="false" style:layout-grid-print="false" style:layout-grid-display="false" draw:fill="none" draw:fill-color="#99ccff" style:footnote-max-height="0in">
    <style:columns fo:column-count="1" fo:column-gap="0in"/>
    <style:footnote-sep style:width="0.0071in" style:distance-before-sep="0.0398in" style:distance-after-sep="0.0398in" style:line-style="none" style:adjustment="left" style:rel-width="25%" style:color="#000000"/>
   </style:page-layout-properties>
   <style:header-style>
    <style:header-footer-properties fo:min-height="0.3929in" fo:margin-left="0in" fo:margin-right="0in" fo:margin-bottom="0.1965in" style:dynamic-spacing="false"/>
   </style:header-style>
   <style:footer-style>
    <style:header-footer-properties fo:min-height="0.3929in" fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0.1965in" style:dynamic-spacing="false"/>
   </style:footer-style>
  </style:page-layout>
 </office:automatic-styles>
 <office:master-styles>
  <style:master-page style:name="Standard" style:page-layout-name="pm1">
   <style:header>
    <text:p text:style-name="P1">Auteurs/Titre – Chapitre X<text:tab/>page <text:page-number text:select-page="current">0</text:page-number><text:s/>de <text:span text:style-name="Page_20_Number"><text:page-count style:num-format="1">7</text:page-count></text:span><text:span text:style-name="Page_20_Number"><text:s/></text:span></text:p>
   </style:header>
  </style:master-page>
  <style:master-page style:name="HTML" style:page-layout-name="pm2"/>
  <style:master-page style:name="Endnote" style:page-layout-name="pm3"/>
  <style:master-page style:name="PageEyrolles15-20" style:page-layout-name="pm4">
   <style:header>
    <text:p text:style-name="Header_20_right"><text:chapter text:display="number" text:outline-level="1"/><text:chapter text:display="name" text:outline-level="1">Mode d’emploi du modèle .ott (Collection blanche, collection noire, Architecte logiciel)</text:chapter></text:p>
   </style:header>
   <style:header-left>
    <text:p text:style-name="Header_20_left"><text:title>Eyrolles Accès Libre, Sans Taboo, Cahiers du programmeur/Admin</text:title></text:p>
   </style:header-left>
   <style:footer>
    <text:p text:style-name="Footer_20_right"><text:page-number text:select-page="current">7</text:page-number></text:p>
   </style:footer>
   <style:footer-left>
    <text:p text:style-name="Footer_20_left"><text:page-number text:select-page="current">6</text:page-number></text:p>
   </style:footer-left>
  </style:master-page>
 </office:master-styles>
  <office:body>
    <office:text><text:table-of-content text:style-name="Sect1" text:protected="true" text:name="Table des matières1">
  <text:index-body>
    <text:index-title text:style-name="Sect1" text:name="Table des matières_Head">
      <text:p text:style-name="P12">Table des matières</text:p>
    </text:index-title>
  </text:index-body>
</text:table-of-content>
<text:bookmark text:name="ref-avant_propos" /><text:h text:style-name="ChapitreTitre" text:outline-level="1">Avant-propos</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T7">Node.js</text:span>&#160;– appelons-le <text:span text:style-name="T7">Node</text:span> dès à présent&#160;– est né dans le cerveau de
Ryan Dahl, ancien étudiant sans le sou et au parcours informatique atypique.
Son talent a été de s&#8217;obstiner à <text:span text:style-name="T7">résoudre un problème d&#8217;expérience utilisateur</text:span>
fréquent sur le web&#160;: <text:span text:style-name="T7">l&#8217;attente devant un navigateur web figé</text:span>.
Son but&#160;? Rendre possible et facile la création de <text:span text:style-name="T7">barres de progression</text:span>
dans les navigateurs Web.</text:p>
<text:p text:style-name="TexteCourant">J&#8217;ai utilisé Node pour la première fois en 2010, par curiosité.
Nous en étaions alors à la version <text:span text:style-name="CodeDansTexte">0.4</text:span>.
Créer mon propre serveur HTTP était un concept qui semblait étrange,
moi qui étais un habitué à écrire des applications PHP et à les mettre derrière
un serveur Apache&#160;— nginx commençait à peine à décoller.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T7">L&#8217;effet <text:span text:style-name="T4">wahou</text:span> était pourtant là</text:span>&#160;: une installation en quelques secondes,
quelques lignes de JavaScript et j&#8217;avais une API REST câblée avec une base
de données <text:span text:style-name="T4">CouchDB</text:span> pour impressionner mes collègues.</text:p>
<text:p text:style-name="TexteCourant">Je bascule dans un <text:span text:style-name="T7">contexte startup</text:span> fin 2011&#160;: nous sommes quatre développeurs
avec des bagages différents.
Nous voulions <text:span text:style-name="T7">un langage commun</text:span> pour le back-end et le front-end.
Nous partons sur Node, installé sans encombre sur notre serveur dédié
géré par l&#8217;hébergeur <text:span text:style-name="T4">AlwaysData</text:span>.
Nous avions la <text:span text:style-name="T7">sensation de progresser rapidement</text:span>.
Nous allions <text:span text:style-name="T4">réellement</text:span> vite.</text:p>
<text:p text:style-name="TexteCourant">Depuis, de nombreuses entreprises ont communiqué sur leur adoption de Node&#160;:
Paypal, LinkedIn, eBay, Airbnb, British Gaz, Allociné, The New York Times,
Yahoo!, Microsoft, Mozilla, Flickr ou encore Twitter.
Ces entreprises l&#8217;utilisent pour façonner leur outillage métier,
gérer les transactions bancaires, leurs serveurs LDAP, des web services ou
des sites web.</text:p>
<text:bookmark text:name="ref-pourquoi_ce_livre" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Pourquoi ce livre ?</text:h><text:p text:style-name="TexteCourant">Je trouve que <text:span text:style-name="T7">Node est un environnement élégant et agréable</text:span>.
Je prends beaucoup de plaisir à l&#8217;uitliser au quotidien mais je regrette
l&#8217;accent placé sur la nouveauté permanente et la sur-ingéniérie des articles
et ouvrages en langue française.</text:p>
<text:p text:style-name="TexteCourant">Node est <text:span text:style-name="T7">mon outil de travail principal</text:span> depuis 2011 et je fais quasiment tout avec
—&#160;y compris l&#8217;outillage de publication de cet ouvrage.
J&#8217;avais envie de communiquer sur la simplicité, l&#8217;architecture modulaire et
la versatilité de Node pour que vous puissiez <text:span text:style-name="T7">progresser dans l&#8217;usage de JavaScript</text:span>,
<text:span text:style-name="T7">façonner votre propre outillage</text:span> et pour mieux
<text:span text:style-name="T7">utiliser les ressources des systèmes d&#8217;exploitation</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Je vous propose donc un <text:span text:style-name="T7">contenu moins technique que d&#8217;ordinaire</text:span>, orienté sur
l&#8217;apprentissage par la pratique et des concepts qui durent dans le temps.
Cet ouvrage s&#8217;installe avec Node&#160;: tous les exemples sont réels et fonctionnent
dans votre terminal.</text:p>
<text:p text:style-name="TexteCourant">Indirectement, je souhaite <text:span text:style-name="T7">déconstruire la posture d&#8217;expert et de lecteur</text:span>
en me mettant à vos côté pendant votre apprentissage.
Une partie des contenus a été conçue et relue en ateliers collectifs pour que
la progression se fasse de manière naturelle.</text:p>
<text:bookmark text:name="ref-à_qui_sadresse_cet_ouvrage" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">À qui s&#8217;adresse cet ouvrage ?</text:h><text:p text:style-name="TexteCourant">J&#8217;ai écris cet ouvrage avec <text:span text:style-name="T4">trois profils de personnes</text:span> en tête&#160;:
des personnes qui souhaitent <text:span text:style-name="T7">se mettre à Node sans savoir par où commencer</text:span>,
celles et ceux qui font du <text:span text:style-name="T7">front-end et souhaitent mieux comprendre leur outillage</text:span>
et enfin, les personnes qui veulent <text:span text:style-name="T7">renforcer leurs connaissances</text:span> en Node et
JavaScript afin de changer de travail/métier.</text:p>
<text:p text:style-name="TexteCourant">Cet ouvrage s&#8217;adresse aussi à des personnes qui ne programment pas pour gagner leur
vie et qui veulent mieux comprendre de quoi parlent les développeurs et développeuses.
Je pense que les interactions de travail sont de meilleures qualité quand nous
avons le loisir de comprendre les implications des personnes avec qui nous travaillons.</text:p>
<text:bookmark text:name="ref-structure_de_louvrage" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Structure de l&#8217;ouvrage</text:h><text:p text:style-name="TexteCourant">Cet ouvrage se lit dans l&#8217;ordre de votre choix.</text:p>
<text:p text:style-name="TexteCourant">J&#8217;ai fait en sorte que la lecture soit progressive, du plus simple au plus complexe.
Le contenu des chapitres est progressif, explore une problématique et se termine
souvent sur une section avancée, <text:span text:style-name="T7">pour aller plus loin</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Cette édition est composée de <text:span text:style-name="T4">neuf chapitres</text:span> et d'<text:span text:style-name="T4">une annexe</text:span>&#160;:</text:p>
<text:p text:style-name="ListeANumero">1.<text:tab/><text:span text:style-name="T7">Histoire, écosystème et gouvernance</text:span><text:line-break/>
Nous apprendrons d&#8217;où vient Node et qui sont les acteurs participant à son histoire.</text:p><text:p text:style-name="ListeANumero">2.<text:tab/><text:span text:style-name="T7">Installer, mettre à jour et développer</text:span><text:line-break/>
Nous apprendrons à être autonome pour installer Node.js
sur notre ordinateur ou un serveur, se tenir au courant
des mises à jour et jongler entre différentes versions.
Ce sera aussi l&#8217;occasion de découvrir des outils confortables
pour écrire du code.</text:p><text:p text:style-name="ListeANumero">3.<text:tab/><text:span text:style-name="T7">Jouer avec JavaScript</text:span><text:line-break/>
Nous apprendrons à comprendre les différences entre
JavaScript, ECMAScript, le DOM et Node.js.
Ce sera aussi l&#8217;occasion de revoir les bases du langage
pour se sentir plus à l&#8217;aise.</text:p><text:p text:style-name="ListeANumero">4.<text:tab/><text:span text:style-name="T7">Jouer avec Node.js</text:span><text:line-break/>
Nous apprendrons à manipuler des scripts et des modules Node.js&#160;:
les notres, ceux fournis par Node et ceux de la communauté.</text:p><text:p text:style-name="ListeANumero">5.<text:tab/><text:span text:style-name="T7">Jouer avec npm</text:span><text:line-break/>
Nous apprendrons à tirer parti de l&#8217;outil livré par défaut avec Node.js.
Ce sera l&#8217;occasion de s&#8217;amuser à créer nos propres
outils dignes d&#8217;artisans du logiciel.</text:p><text:p text:style-name="ListeANumero">6.<text:tab/><text:span text:style-name="T7">Déployer notre code</text:span><text:line-break/>
Nous apprendrons à déployer notre code le plus tôt possible pour célébrer notre premier programme&#160;!</text:p><text:p text:style-name="ListeANumero">7.<text:tab/><text:span text:style-name="T7">Créer une application web</text:span><text:line-break/>
Nous apprendrons à créer une application web en partant de zéro,
en utilisant un <text:span text:style-name="T4">framework</text:span> puis en parlant à une base de données.
Bienvenue dans l&#8217;odyssée d&#8217;une requête HTTP&#160;!</text:p><text:p text:style-name="ListeANumero">8.<text:tab/><text:span text:style-name="T7">Créer un outil en ligne de commande</text:span><text:line-break/>
Nous apprendrons à rendre du code métier fonctionnel dans un terminal.
La ligne de commande ne paraîtra plus aussi austère après ça.</text:p><text:p text:style-name="ListeANumero">9.<text:tab/><text:span text:style-name="T7">Créer une application front-end</text:span><text:line-break/>
Nous apprendrons à utiliser la richesse de l&#8217;écosystème npm
et à profiter des modules pour écrire des
applications front-end de qualité.</text:p>
<text:p text:style-name="TexteCourant">L'<text:span text:style-name="T7">annexe</text:span> complète l&#8217;ouvrage avec une <text:span text:style-name="T7">sélection de modules <text:span text:style-name="T4">npm</text:span></text:span>,
pour démarrer plus vite et mieux cerner ce qu&#8217;on peut faire avec Node.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Ressources</text:span> Contenu en <text:span text:style-name="T8">livre</text:span> libre accès</text:h><text:p text:style-name="Remarque">Le contenu de cet ouvrage est actualisé en permanence sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://oncletom.io/node.js/" text:visited-style-name="Visited_20_Internet_20_Link">https://oncletom.io/node.js/</text:a></text:span>.</text:p>
<text:p text:style-name="Remarque">L&#8217;intégralité du code source du livre et des exemples sont hébergés sur
<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/oncletom/nodebook" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/oncletom/nodebook</text:a></text:span>.
J&#8217;utilise la plate-forme collaborative <text:span text:style-name="T4">GitHub</text:span> pour recueillir vos avis,
corrections et suggestions.</text:p>
<text:bookmark text:name="ref-remerciements" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Remerciements</text:h><text:p text:style-name="TexteCourant">Cet ouvrage a été rédigé sur près de <text:span text:style-name="T4">quatre années</text:span>&#160;– longue est la liste
exhaustive des personnes à remercier.
Longue aussi est la liste de celles et ceux à qui je dois m&#8217;excuser pour mes
sautes d&#8217;humeur, mes absences ou mes passages à vide.
L&#8217;écriture sur une longue durée est une activité que je trouve éprouvante.
Elle nécessite un ajustement permanent vis à vis de moi-même pour ne pas
(trop) en souffrir.</text:p>
<text:p text:style-name="TexteCourant">Mes premiers remerciements vont à Noémie.
Ta joie, tes encouragements et ta présence sont essentiels à mon équilibre.
Ils m&#8217;emplissent de confiance, m&#8217;inspirent et atténuent les peurs qui me paralysent.</text:p>
<text:p text:style-name="TexteCourant">Je remercie Karine, Laurène, Elsa et Alexandre d'<text:span text:style-name="T4">Eyrolles</text:span> pour cette opportunité.
Je trouve que vous avez fait preuve d&#8217;une patience et d&#8217;une confiance
infinies malgré le délai d&#8217;écriture.</text:p>
<text:p text:style-name="TexteCourant">Je tiens à remercier mes anciens collègues de BBC R&amp;D pour leur soutien,
leur confiance et leur tolérance aux jeux de mots.
Olivier, Sean, Katie, Chris N et Chris L&#160;: c&#8217;était un plaisir et un honneur
d&#8217;être à vos côtés.</text:p>
<text:p text:style-name="TexteCourant">Certain·e·s d&#8217;entre vous m&#8217;ont beaucoup aidé de par leurs conseils,
leurs relectures et leurs encouragements.
Alors un grand merci pour ça à Béa, Claire, Clémentine, David, Efi, Fabien,
Frank, Philippe, Stéphane et Thierry.</text:p>
<text:p text:style-name="TexteCourant">Merci à l&#8217;équipe d&#8217;Asciidoctor pour leur travail précieux et leurs réponses à
mes innombrables questions.
Je pense notamment à Guillaume et à Dan.</text:p>
<text:p text:style-name="TexteCourant">Merci à Antoine pour notre travail en duo sur l&#8217;écriture numérique.
Je suis fier d&#8217;apporter ce mode d&#8217;écriture dans les communautés académiques,
du design et des archivistes.</text:p>
<text:p text:style-name="TexteCourant">Enfin, je remercie toutes les personnes qui m&#8217;ont accueilli chez elles,
dans leur maison, dans leur bureau ou dans leur communauté/meet-up pendant mon
écriture itinérante en 2017 et 2018.</text:p>
<text:p text:style-name="TexteCourant">Bonne lecture,</text:p>
<text:p text:style-name="TexteCourant">—&#160;Thomas</text:p>
<text:bookmark text:name="ref-chapter-01" /><text:p text:style-name="ChapitreNumero">1</text:p><text:h text:style-name="ChapitreTitre" text:outline-level="1">Histoire, écosystème et gouvernance</text:h><text:p text:style-name="TexteCourant">Node.js génère beaucoup de discussions, d&#8217;intérêts et d&#8217;envies.</text:p>
<text:p text:style-name="TexteCourant">Dans ce chapitre, nous allons faire le point sur ce qu&#8217;est Node.js pour mieux comprendre dans quel cambouis nous allons plonger les mains.</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">Comprendre ce qu&#8217;est Node.js</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Savoir qui assure la gouvernance de Node.js</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Décider si Node.js et JavaScript peuvent compléter ou remplacer le langage de programmation de votre entreprise/organisation</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Pourquoi autant de <text:span text:style-name="T4">hype</text:span>&#160;?</text:p>
</text:list-item></text:list>
<text:p text:style-name="ChapitreIntroduction"><text:p text:style-name="TexteCourant">Node.js est-il un langage de programmation&#160;?
Node.js est-il un <text:span text:style-name="T4">framework</text:span> JavaScript&#160;?
Qu&#8217;en restera-t-il une fois la frénésie retombée&#160;?</text:p>
<text:p text:style-name="TexteCourant">Ce chapitre permet de <text:span text:style-name="T7">comprendre pourquoi Node a émergé</text:span> et comment.
Surtout, il vous permettra de comprendre les choix techniques
à l&#8217;origine des fondations de Node et ce que l&#8217;utiliser
peut vous apporter, que ce soit dans un contexte personnel ou professionnel.</text:p></text:p>
<text:bookmark text:name="ref-node_js_un_environnement_dexécution_javascript" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Node.js : un environnement d&#8217;exécution JavaScript</text:h><text:p text:style-name="TexteCourant">Node.js n&#8217;est pas un langage de programmation. Node.js n&#8217;est pas non plus un <text:span text:style-name="T4">framework</text:span> JavaScript. <text:span text:style-name="T7">Node.js est un environnement d&#8217;exécution JavaScript</text:span>.<text:line-break/>La différence entre ces trois désignations peut sembler subtile, futile voire inutile mais le terme <text:span text:style-name="T7">environnement</text:span> est la véritable nature de Node.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T7">Exécuter du JavaScript côté serveur n&#8217;est pas une révolution</text:span>.<text:line-break/>L&#8217;entreprise <text:span text:style-name="T4">Netscape</text:span> s&#8217;y est déjà essayée au début des années 1990 avec <text:span text:style-name="T4">Netscape Enterprise Server</text:span>, juste après l&#8217;avoir introduit dans son navigateur web <text:span text:style-name="T4">Netscape Navigator</text:span>.</text:p>
<text:p text:style-name="TexteCourant">En 1997, <text:span text:style-name="T4">Netscape</text:span> s&#8217;est attelée à créer <text:span text:style-name="T4">Rhino</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://www.mozilla.org/rhino/" text:visited-style-name="Visited_20_Internet_20_Link">https://www.mozilla.org/rhino/</text:a></text:span>), un environnement d&#8217;exécution JavaScript tournant sous Java disponible sous licence libre.
<text:span text:style-name="T4">Rhino</text:span> était un des projets liés à la réécriture de <text:span text:style-name="T4">Netscape Navigator</text:span> en Java.
Si <text:span text:style-name="T4">Netscape</text:span> a depuis fermé ses portes, <text:span text:style-name="T4">Rhino</text:span> a permis l&#8217;émergence de projets utiles aux développeurs web.</text:p>
<text:p text:style-name="TexteCourant">Entre temps le langage JavaScript évolue, le <text:span text:style-name="T4">Web 2.0</text:span> émerge des cendres de la première bulle Internet et d&#8217;autres initiatives émergent dans les années 2000 comme <text:span text:style-name="T4">APE</text:span> (<text:span text:style-name="T4">Ajax Push Engine</text:span>, <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://ape-project.org/" text:visited-style-name="Visited_20_Internet_20_Link">http://ape-project.org/</text:a></text:span>).
Elles mettent également en œuvre JavaScript côté serveur.
JavaScript était surtout un choix logique de partage de code entre client et serveur pour Comet, le précurseur des <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-websockets"  text:visited-style-name="Visited_20_Internet_20_Link">WebSockets</text:a>.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Glossaire</text:span> Comet</text:h><text:p text:style-name="Remarque"><text:span text:style-name="T4">Comet</text:span> est un terme regroupant les différentes tentatives techniques permettant à un serveur web d&#8217;envoyer des données à un client sans que celui-ci ne les ait demandées initialement.</text:p>
<text:p text:style-name="Remarque">Parmi ces techniques, on retrouve le <text:span text:style-name="T4">long polling</text:span>, consistant à conserver une connexion Ajax ouverte pendant la durée de vie d&#8217;une page web.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Glossaire</text:span> WebSockets</text:h><text:p text:style-name="Remarque"><text:span text:style-name="T4">WebSockets</text:span> est un protocole basé sur TCP.</text:p>
<text:p text:style-name="Remarque">Il permet de maintenir une connexion HTTP active entre un client et un serveur et d&#8217;y faire transiter les données de manière bidirectionnelle.</text:p>
<text:p text:style-name="Remarque">Ce protocole sera probablement rendu obsolète par <text:span text:style-name="T4">HTTP/2</text:span>&#160;— le successeur d'<text:span text:style-name="T4">HTTP/1.1</text:span>.
<text:span text:style-name="T4">HTTP/2</text:span> a été initié par Google sous le nom de protocole
<text:span text:style-name="T4">SPDY</text:span> (prononcer <text:span text:style-name="T4">speedy</text:span>).</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7">Cas d&#8217;utilisation modernes de <text:span text:style-name="T4">Rhino</text:span>.</text:h><text:p text:style-name="Remarque">Rhino est toujours utile dès qu&#8217;un projet Java implique du JavaScript.</text:p>
<text:p text:style-name="Remarque">Google l&#8217;utilise comme environnement d&#8217;exécution de ses <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://gsuite-developers.googleblog.com/2012/11/using-open-source-libraries-in-apps.html" text:visited-style-name="Visited_20_Internet_20_Link">https://gsuite-developers.googleblog.com/2012/11/using-open-source-libraries-in-apps.html</text:a>.
Ces scripts permettent à tout un chacun de développer des extensions et des interactions supplémentaires pour les documents Google Drive.</text:p>
<text:p text:style-name="Remarque">Rhino est également employé dans <text:span text:style-name="T4">yuicompressor</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://yui.github.io/yuicompressor/" text:visited-style-name="Visited_20_Internet_20_Link">https://yui.github.io/yuicompressor/</text:a></text:span>), un optimiseur CSS et JavaScript créé par Yahoo.
<text:span text:style-name="T4">yuicompressor</text:span> a été surpassé par <text:span text:style-name="T4">Closure Compiler</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://developers.google.com/closure/compiler/" text:visited-style-name="Visited_20_Internet_20_Link">https://developers.google.com/closure/compiler/</text:a></text:span>) et <text:span text:style-name="T4">UglifyJS</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/uglify-js" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/uglify-js</text:a></text:span>).
Ce dernier est écrit en JavaScript et repose sur Node.<text:line-break/>La boucle est bouclée.</text:p>
<text:p text:style-name="TexteCourant">Node représente un <text:span text:style-name="T7">environnement d&#8217;exécution</text:span> (<text:span text:style-name="T4">runtime</text:span>), un <text:span text:style-name="T7">ensemble d&#8217;API JavaScript</text:span> ainsi qu&#8217;une <text:span text:style-name="T7">machine virtuelle (VM) JavaScript</text:span> performante (parseur, interpréteur et compilateur) pouvant accéder à des ressources système telles que des fichiers (<text:span text:style-name="T4">filesystem</text:span>) ou des connexions réseau (<text:span text:style-name="T4">sockets</text:span>).</text:p>
<text:p text:style-name="TexteCourant">Typiquement, une personne développant en Node écrit du code se basant sur les API à disposition.
Ce code est lu par le <text:span text:style-name="T4">runtime</text:span> Node qui le transmet à la VM JavaScript. Enfin, la VM traduit le programme en langage machine (<text:span text:style-name="T4">bytecode</text:span>) avant que le programme soit effectivement exécuté par le processeur.</text:p>
<text:p text:style-name="TexteCourant">Pour comprendre comment Node a opté pour cette approche, retournons en 2009, lorsque son créateur <text:span text:style-name="T7">Ryan Dahl</text:span> cherchait à résoudre élégamment un problème de performance de programmation.</text:p>
<text:bookmark text:name="ref-bref_historique" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Bref historique</text:h><text:p text:style-name="TexteCourant">En 2006, <text:span text:style-name="T4">Ryan Dahl</text:span> est un étudiant américain en troisième année de doctorat de mathématiques.
Si son but initial était de devenir professeur de mathématiques, il prend la décision de ne pas terminer sa thèse et d&#8217;entreprendre un voyage au Chili.</text:p>
<text:p text:style-name="TexteCourant">Alors qu&#8217;il cherche à effectuer des petits boulots, il y rencontre une autre personne développant des sites web.
Ruby on Rails connaît un succès grandissant et attire son attention.
Alors que Ryan envisageait d&#8217;utiliser Rails, il découvre avec horreur la lenteur du <text:span text:style-name="T4">framework</text:span> et cherche à en découvrir les causes.</text:p>
<text:p text:style-name="TexteCourant">Ryan débute alors sa <text:span text:style-name="T7">quête des applications web performantes</text:span> et découvre <text:span text:style-name="T4">Mongrel</text:span>, un serveur HTTP écrit en Ruby.
Il est séduit par deux choses&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">la possibilité d'<text:span text:style-name="T7">inclure</text:span> un serveur HTTP comme librairie applicative&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">la simplicité de fonctionnement&#160;: recevoir une requête HTTP et décider soi-même de la réponse à apporter.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">La quête initiale se dirige alors sur la possibilité de créer <text:span text:style-name="T7">un serveur web non bloquant</text:span>.
En d&#8217;autres termes, un serveur capable dans un même processus de traiter d&#8217;autres requêtes en attendant de renvoyer la réponse initiale.</text:p>
<text:p text:style-name="TexteCourant">Nous sommes alors en 2008 et le site de partage de photos Flickr innove avec un nouveau système de téléversement d&#8217;images&#160;: une <text:span text:style-name="T7">barre de progression</text:span> représentant le statut du téléversement remplace alors la page figée&#160;– effet  inhérent à l&#8217;envoi de fichiers depuis un formulaire HTML.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-01/images/7112862941_3b8c8e9916_o_d.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 1. Interface du service Flickr après et avant l&#8217;introduction du téléversement progressif.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Lien</text:span> Annonce du nouveau Flickr Uploadr</text:h><text:p text:style-name="Remarque">L&#8217;équipe d&#8217;ingénierie de Flickr explique dans cet article <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://wp.me/p2DMyG-ok" text:visited-style-name="Visited_20_Internet_20_Link">https://wp.me/p2DMyG-ok</text:a></text:span>
comment elle a contourné le problème  de l&#8217;upload via un formulaire classique.
Ce problème gelait la fenêtre du navigateur pendant la durée du téléversement.</text:p>
<text:p text:style-name="TexteCourant">C&#8217;est le <text:span text:style-name="T7">déclic</text:span> pour Ryan&#160;: <text:span text:style-name="T4">Mongrel</text:span> avait déjà un plug-in pour cette fonctionnalité mais il souhaitait simplifier davantage le travail pour les développeurs.
Il reproduit le mécanisme avec succès en C.
Les développeurs web jugeant la solution trop complexe, Ryan tente la même approche avec d&#8217;autres langages, comme Python, Lua ou même Haskell.
Il se heurte au sempiternel problème des ressources bloquantes des différents interpréteurs.</text:p>
<text:p text:style-name="TexteCourant">Le deuxième <text:span text:style-name="T7">déclic</text:span> se produit en janvier 2009 lorsque <text:span text:style-name="T4">JavaScript</text:span> émerge dans une discussion entre développeurs.
<text:span text:style-name="T4">Eurêka</text:span>&#160;!
La machine virtuelle JavaScript V8 de Google a été libérée en <text:span text:style-name="T4">open source</text:span> depuis quelques mois et Apple, Microsoft, Mozilla et Google se livrent à une course à la performance de leur machine virtuelle respective.
En ligne de mire, rendre la navigation sur <text:span text:style-name="T4">mobile</text:span> et sur <text:span text:style-name="T4">ordinateur</text:span> plus rapide et moins gourmande en ressources.</text:p>
<text:p text:style-name="TexteCourant">Ryan admet que JavaScript dispose des caractéristiques idéales même s&#8217;il n&#8217;est pas un adepte du langage&#160;: fonctions anonymes, <text:span text:style-name="T4">closures</text:span> et l'<text:span text:style-name="T4">event loop</text:span> (dans le DOM en tous cas).
Il manque juste aux machines virtuelles JavaScript la capacité d&#8217;accéder à des <text:span text:style-name="T4">sockets</text:span>, au système de fichiers et à d&#8217;autres fonctions système.</text:p>
<text:p text:style-name="TexteCourant">Ryan quitte alors son travail, s&#8217;inspire de ses travaux de modules non bloquants pour Nginx et s&#8217;affaire pendant six mois à marier JavaScript, V8 et l&#8217;environnement du système d&#8217;exploitation.
De ces efforts naît Node.js.<text:line-break/>Il effectue une démonstration de <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://gist.github.com/ry/a3d0bbbff196af633995" text:visited-style-name="Visited_20_Internet_20_Link">https://gist.github.com/ry/a3d0bbbff196af633995</text:a> lors de la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://www.youtube.com/watch?v=ztspvPYybIY" text:visited-style-name="Visited_20_Internet_20_Link">https://www.youtube.com/watch?v=ztspvPYybIY</text:a> qui suscite l&#8217;enthousiasme et attire l&#8217;attention.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;entreprise américaine <text:span text:style-name="T4">Joyent</text:span> l&#8217;embauche à plein temps pour continuer le développement de Node.
Ils pressentent que Node répondra à leurs projets de <text:span text:style-name="T4">datacenter</text:span> et d&#8217;hébergement.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T7">Node et sa communauté sont nés</text:span> et ont continué à prospérer depuis lors.
Pour une simple affaire de <text:span text:style-name="T4">barre de progression</text:span> et une obsession de <text:span text:style-name="T4">perception de rapidité</text:span>.</text:p>
<text:p text:style-name="TexteCourant">En 2018, l&#8217;avenir de Node est au beau fixe avec plus de 2&#160;000 contributeurs
et plus de 735&#160;000 modules publics hébergés sur le registre <text:span text:style-name="T4">npm</text:span>.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Vidéo</text:span> <text:span text:style-name="T4">History of Node.js</text:span></text:h><text:p text:style-name="Remarque">La vidéo <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://youtube.com/watch?v=SAc0vQCC6UQ" text:visited-style-name="Visited_20_Internet_20_Link">https://youtube.com/watch?v=SAc0vQCC6UQ</text:a></text:span> est une présentation
donnée par Ryan Dahl, le créateur de Node, au cours de l&#8217;année 2011.
C&#8217;est la première fois qu&#8217;il intervient pour expliquer son parcours et la
genèse du projet.</text:p>
<text:p text:style-name="Remarque">Peut-être un élément qui figurera dans les livres d&#8217;histoire&#160;!</text:p>
<text:bookmark text:name="ref-les_raisons_du_succès" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Les raisons du succès</text:h><text:p text:style-name="TexteCourant">La tension et l&#8217;attention autour de JavaScript sont énormes en 2009.
La mode du tout <text:span text:style-name="T4">Ajax</text:span> et des <text:span text:style-name="T4">mashups</text:span> s&#8217;est estompée mais une chose en est ressortie&#160;: JavaScript n&#8217;a plus à rougir ni à être relégué au rang de sous-langage.
Les initiatives JSLint, CommonJS et les <text:span text:style-name="T4">good parts</text:span> de Douglas Crockford sont pour beaucoup dans la création de code élégant.</text:p>
<text:p text:style-name="TexteCourant">D&#8217;un autre côté, les entreprises développant des navigateurs web se livrent à une féroce compétition d&#8217;optimisation.
Google, Mozilla et Apple ont besoin de navigateurs rapides pour améliorer leurs parts de marché sur les ordinateurs mais aussi les téléphones et tablettes.
On peut considérer que JavaScript est à cette époque le langage de programmation bénéficiant du plus grand investissement financier et humain en R&amp;D.</text:p>
<text:p text:style-name="TexteCourant">La communauté JavaScript accueille avec ferveur Node lors
de la conférence JSConf Europe en 2009.
Elle contribue à son amélioration et à la création d&#8217;un écosystème
de modules réutilisables.</text:p>
<text:p text:style-name="TexteCourant">Il faudra attendre la création de <text:span text:style-name="T4">npm</text:span> au tout début 2010.
<text:span text:style-name="T4">npm</text:span> a pour but d&#8217;héberger des modules Node et de faciliter
leur installation.
Dès lors, une simple commande suffit pour inclure du code écrit par
d&#8217;autres personnes dans nos projets.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">npm</text:span> devient une pierre angulaire.
À tel point qu&#8217;il est inclus dans l&#8217;installation de Node
à partir de la version 0.6.3 en novembre 2011.
La communauté Node fait le reste du travail
en constituant un <text:span text:style-name="T7">écosystème de modules riche et varié</text:span>&#160;:
frameworks web, drivers de bases de données,
serveurs HTTP, serveurs WebSockets, préprocesseurs CSS,
CoffeeScript, parseurs, proxy, serveurs de log, modules de tests,
langages de <text:span text:style-name="T4">templating</text:span>, etc.</text:p>
<text:p text:style-name="TexteCourant">Malgré ses défauts de jeunesse, Node réussit le tour
de force de la performance&#160;: la recette de l&#8217;accès non-bloquant
a-t-elle fonctionné&#160;?
À en croire les personnes ayant migré vers Node pour ces raisons,
la réponse est <text:span text:style-name="T7">oui</text:span>.</text:p>
<text:bookmark text:name="ref-avoiding-node" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Pourquoi éviter Node.js ?</text:h><text:p text:style-name="TexteCourant">Il est tentant de vouloir suivre un chemin populaire,
d&#8217;adopter le dernier outil ou <text:span text:style-name="T4">framework</text:span> à la mode.</text:p>
<text:p text:style-name="TexteCourant">J&#8217;ai pourtant envie d&#8217;écrire qu&#8217;il n&#8217;est pas forcément nécessaire
de passer à Node.</text:p>
<text:p text:style-name="TexteCourant">Si votre équipe dispose déjà de fortes compétences,
d&#8217;aisance et de productivité dans un autre langage,
il n&#8217;y a pas de raison de passer à Node.
Cette équipe a tout intérêt à capitaliser sur ses
connaissances pour être efficace et minimiser la dette technique
de ses applications.</text:p>
<text:p text:style-name="TexteCourant">L'<text:span text:style-name="T7">offre logicielle est également à prendre en compte</text:span>&#160;: CMS,
systèmes e-commerce ou autre application prête à l&#8217;emploi
que la communauté Node n&#8217;offrirait pas à ce jour.</text:p>
<text:p text:style-name="TexteCourant">Un facteur important et souvent oublié est <text:span text:style-name="T7">l&#8217;acceptation et la compréhension de l&#8217;utilisation de Node</text:span> par une ou plusieurs équipes.
Il est alors plus intéressant de comprendre les raisons
d&#8217;un blocage que de forcer ou d&#8217;imposer Node.<text:line-break/>Cela peut être simple&#160;: balayer des idées reçues,
animer un atelier technique ou inviter un·e expert·e
pour répondre aux questions, interrogations et utilité d&#8217;un tel changement.</text:p>
<text:p text:style-name="TexteCourant">Node ne vous aidera probablement pas si vous cherchez
à <text:span text:style-name="T7">réaliser des choses contre-productives pour JavaScript</text:span>.
Je pense à des opérations mathématiques de très haute précision,
du <text:span text:style-name="T4">machine learning</text:span> avancé ou du calcul scientifique poussé par exemple.
Difficile d&#8217;égaler la richesse fonctionnelle de Python
et de ses librairies SciPy, NumPy ou scikit-learn.
Difficile aussi d&#8217;égaler la finesse de gestion de mémoire de <text:span text:style-name="T4">C++</text:span> ou de <text:span text:style-name="T4">Rust</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Node ne va <text:span text:style-name="T7">pas résoudre les problèmes par magie</text:span>.
Cela reste avant tout une affaire de compétences et d&#8217;expérience.</text:p>
<text:bookmark text:name="ref-pourquoi_choisir_node_js" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Pourquoi choisir Node.js ?</text:h><text:p text:style-name="TexteCourant">Node est un choix de langage principal tout à fait viable.</text:p>
<text:p text:style-name="TexteCourant">Il est préférable que ce choix soit une <text:span text:style-name="T7">volonté partagée</text:span> entre membres d&#8217;une équipe.
Que ce choix soit motivé par ce que Node apporte et simplifie pour vous.</text:p>
<text:p text:style-name="TexteCourant">Node est tout désigné pour créer des <text:span text:style-name="T7">applications à nombreuses actions concurrentes</text:span>.
Autrement dit, dès qu&#8217;une application ou programme fait appel à des accès réseau, aux fichiers ou au système.</text:p>
<text:p text:style-name="TexteCourant">Node est également adapté pour <text:span text:style-name="T7">transformer des flux importants de données</text:span>
en utilisant peu de mémoire.
Cela concerne aussi bien la lecture de fichiers CSV, JSON ou XML de plusieurs gigaoctets.</text:p>
<text:p text:style-name="TexteCourant">Le mécanisme de module de Node encourage à respecter le <text:span text:style-name="T4">principe de responsabilité unique</text:span>.
Nos applications peuvent être <text:span text:style-name="T7">modulaires et autonomes</text:span> au lieu d&#8217;être lourdes et monolithiques.</text:p>
<text:p text:style-name="TexteCourant">Les développeurs et développeuses verront dans Node leur <text:span text:style-name="T7">compagnon idéal pour compiler, générer, assembler et minifier</text:span> leurs applications front-end.
Le bénéfice évident est le partage d&#8217;un outillage CSS, JavaScript et HTML
entre équipes, par projet.</text:p>
<text:p text:style-name="TexteCourant">Conséquence directe, Node offre l&#8217;opportunité d'<text:span text:style-name="T7">unifier vos équipes de développement <text:span text:style-name="T4">front-end</text:span> et <text:span text:style-name="T4">back-end</text:span></text:span>.
Node devient un environnement commun, un langage partagé entre les individus.
Ils peuvent se focaliser sur des fonctionnalités indistinctement de la cible, que ce soit pour le web, un serveur ou une API.</text:p>
<text:p text:style-name="TexteCourant">Node est un environnement adapté à <text:span text:style-name="T7">l&#8217;apprentissage et l&#8217;amélioration de nos connaissances en JavaScript</text:span>.
On peut désormais penser sur du long terme, en se souciant moins de devoir supporter de vieilles versions de Node ou de navigateurs web tant il est facile de passer d&#8217;une version du langage à une autre.</text:p>
<text:bookmark text:name="ref-lécosystème_des_acteurs" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">L&#8217;écosystème des acteurs</text:h><text:p text:style-name="TexteCourant">La majorité des développements initiaux de Node est financée par <text:span text:style-name="T4">Joyent</text:span>,
à commencer par l&#8217;embauche de Ryan Dahl.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;écosystème des acteurs se diversifie avec le temps.
Avec de nouveaux employés chez <text:span text:style-name="T4">Joyent</text:span>.
Puis avec des contributeurs externes qui voyaient un avenir prometteur dans le projet.
S&#8217;ensuivent des entreprises privées comme IBM ou PayPal qui sponsorisent le projet ou le salaire de contributeurs.</text:p>
<text:bookmark text:name="ref-joyent" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Joyent</text:h><text:p text:style-name="TexteCourant">Joyent est une entreprise américaine fondée en 2004.
Elle proposait à l&#8217;origine des services de collaborations
en ligne&#160;: documents, calendriers, e-mails, etc.</text:p>
<text:p text:style-name="TexteCourant">Elle se lance sur le marché de l&#8217;hébergement fin 2005
par le biais d&#8217;une acquisition-fusion.
Parmi ses clients, on peut dénombrer le site de Ruby on Rails
(société Basecamp), WordPress.com (société Automattic) ou
encore le site historique <text:span text:style-name="T4">A List Apart</text:span>.</text:p>
<text:p text:style-name="TexteCourant">En 2009, Joyent se spécialise dans les infrastructures et
plate-formes à la demande et à haute performance.
L&#8217;entreprise se concentre sur des solutions dites temps réel
pour les réseaux sociaux, applications mobiles et compagnies
de jeux vidéo en ligne.</text:p>
<text:p text:style-name="TexteCourant">En avril 2011, Joyent dépose la marque <text:span text:style-name="T4">Node.js</text:span> ainsi que son logo.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-01/images/nodejs-new-pantone-black.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 2. Logo officiel de Node.js.</text:p>
<text:p text:style-name="TexteCourant">En février 2015, Joyent transfère la gestion de Node à la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-node-foundation"  text:visited-style-name="Visited_20_Internet_20_Link">Node.js Foundation</text:a>.
La société <text:span text:style-name="T4">Joyent</text:span> reste propriétaire de la marque <text:span text:style-name="T4">Node.js</text:span>
et de son logo.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Lien</text:span> Annonce du dépôt de marque</text:h><text:p text:style-name="Remarque">Ryan Dahl, alors développeur actif de Node, annonce le dépôt de marque par
l&#8217;entreprise Joyent sur le blog officiel du projet Node
<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://nodejs.org/en/blog/uncategorized/trademark/" text:visited-style-name="Visited_20_Internet_20_Link">https://nodejs.org/en/blog/uncategorized/trademark/</text:a></text:span>.</text:p>
<text:bookmark text:name="ref-npm" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">npm</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">npm</text:span> est une dénomination qui abrite plusieurs concepts&#160;: un <text:span text:style-name="T7">outil en ligne de commande</text:span>, un <text:span text:style-name="T7">registre de modules</text:span> ainsi qu&#8217;une <text:span text:style-name="T7">entreprise privée</text:span> à but lucratif (<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-npm-inc"  text:visited-style-name="Visited_20_Internet_20_Link">npm, Inc</text:a>).</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">npm</text:span> est originellement un module Node créé par Isaacs Schlueter.
Ce module permet d&#8217;installer des modules tiers et de les lier sous forme d&#8217;un arbre de dépendances.
Il est l’équivalent de <text:span text:style-name="T4">Rubygems</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://rubygems.org/" text:visited-style-name="Visited_20_Internet_20_Link">https://rubygems.org/</text:a></text:span>) pour Ruby, de <text:span text:style-name="T4">CPAN</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://www.cpan.org/" text:visited-style-name="Visited_20_Internet_20_Link">http://www.cpan.org/</text:a></text:span>) pour Perl ou encore de <text:span text:style-name="T4">pypi</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://pypi.python.org/pypi" text:visited-style-name="Visited_20_Internet_20_Link">https://pypi.python.org/pypi</text:a></text:span>) pour Python.</text:p>
<text:p text:style-name="TexteCourant">Nous reviendrons plus en détail sur son utilisation dans le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-05"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 5 <text:span text:style-name="T4">Utiliser des modules tiers</text:span></text:a>.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">npm</text:span> désigne également le <text:span text:style-name="T4">registre</text:span> principal qui héberge les modules des communautés Node&#160;: <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://www.npmjs.com/" text:visited-style-name="Visited_20_Internet_20_Link">https://www.npmjs.com/</text:a></text:span>.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Lien</text:span> Annonce de l’inclusion de <text:span text:style-name="T4">npm</text:span> dans Node</text:h><text:p text:style-name="Remarque"><text:span text:style-name="T4">npm</text:span> est installé par défaut avec Node depuis la version 0.6.3, sortie en novembre 2011.
Vous retrouverez son annonce sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://nodejs.org/en/blog/release/v0.6.3/" text:visited-style-name="Visited_20_Internet_20_Link">https://nodejs.org/en/blog/release/v0.6.3/</text:a></text:span>.</text:p>
<text:p text:style-name="Remarque">Auparavant, il fallait installer <text:span text:style-name="T4">npm</text:span> séparément.</text:p>
<text:bookmark text:name="ref-npm-inc" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">npm, Inc.</text:h><text:p text:style-name="TexteCourant">Isaacs Schlueter a été embauché par Joyent en septembre 2010.
Il a succédé à Ryan Dahl dans la gestion du projet Node de
janvier 2012 jusqu’à janvier 2014.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">npm, Inc</text:span> est une entreprise privée américaine fondée en janvier 2014 par Isaacs Schlueter, directement après son départ de Joyent.
Le but de <text:span text:style-name="T4">npm, Inc</text:span> est de fournir des solutions professionnelles basées sur <text:span text:style-name="T4">npm</text:span>.
L&#8217;entreprise souhaite en parallèle soutenir l’effort open source
et les coûts d’infrastructure du registre <text:span text:style-name="T4">npm</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Elle lève 2,6 millions de dollars en février 2014 pour élaborer une nouvelle architecture du registre <text:span text:style-name="T4">npm</text:span>.
Ce financement a également pour vocation la mise en place d&#8217;une stratégie commerciale basée sur les modules privés et les solutions professionnelles.</text:p>
<text:p text:style-name="TexteCourant">La société <text:span text:style-name="T4">npm, Inc</text:span> détient la marque <text:span text:style-name="T4">npm</text:span>, <text:span text:style-name="T4">npm, Inc</text:span> et le <text:span text:style-name="T4">logo npm</text:span>.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-01/images/logo-npm.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 3. Logo officiel de npm, Inc.</text:p>
<text:bookmark text:name="ref-iojs" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">io.js</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">io.js</text:span> est un <text:span text:style-name="T4">fork</text:span> de Node initié par la communauté Node en décembre 2014.
La raison&#160;? La main-mise de Joyent sur les développements et la communication erratique du projet.</text:p>
<text:p text:style-name="TexteCourant">Les objectifs initiaux du projet <text:span text:style-name="T4">io.js</text:span> sont doubles&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">offrir à la communauté Node une gestion transparente, inclusive et ouverte&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">fournir un environnement technique plus moderne, une version de v8 plus récente ainsi qu&#8217;une intégration rapide des nouvelles fonctionnalités ECMAScript.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">Le projet <text:span text:style-name="T4">io.js</text:span> connait une fin heureuse en 2015&#160;:
les efforts du projet et de sa communauté auront abouti à
la création de la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-node-foundation"  text:visited-style-name="Visited_20_Internet_20_Link">Node.js Foundation</text:a> et
du <text:span text:style-name="T4">Node.js Advisory Board</text:span>, respectivement l&#8217;organe
de gestion du projet et le groupe d&#8217;individus en charge
de la gestion du projet Node.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Lien</text:span> Clap de fin</text:h><text:p text:style-name="Remarque">L&#8217;annonce de la sortie de Node v4 et de la création de la <text:span text:style-name="T4">Node.js Foundation</text:span>
est consultable à cette adresse&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="RemarquePuce"><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://nodejs.org/en/blog/announcements/foundation-v4-announce/" text:visited-style-name="Visited_20_Internet_20_Link">https://nodejs.org/en/blog/announcements/foundation-v4-announce/</text:a></text:span></text:p>
</text:list-item></text:list>
<text:bookmark text:name="ref-node-foundation" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Node.js Foundation</text:h><text:p text:style-name="TexteCourant">La <text:span text:style-name="T4">Node.js Foundation</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://foundation.nodejs.org" text:visited-style-name="Visited_20_Internet_20_Link">https://foundation.nodejs.org</text:a></text:span>) est l&#8217;un des
organes officiels de gouvernance du projet Node depuis juin 2015.
Cette fondation est une organisation à but non lucratif.
Elle fait elle-même partie de la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://collabprojects.linuxfoundation.org/" text:visited-style-name="Visited_20_Internet_20_Link">http://collabprojects.linuxfoundation.org/</text:a>,
au même titre que des projets comme <text:span text:style-name="T4">Open Container</text:span>, <text:span text:style-name="T4">Let&#8217;s Encrypt</text:span> ou <text:span text:style-name="T4">Xen</text:span>.</text:p>
<text:p text:style-name="TexteCourant">La tâche première de la fondation a été d&#8217;opérer la fusion entre la base de
code de <text:span text:style-name="T4">Node</text:span> et d'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-iojs"  text:visited-style-name="Visited_20_Internet_20_Link">io.js</text:a> en septembre 2015.
Cela donne lieu à la sortie de Node v4.0.0.</text:p>
<text:p text:style-name="TexteCourant">La fondation fait partie intégrante de la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-governance"  text:visited-style-name="Visited_20_Internet_20_Link">gouvernance du projet Node</text:a>.</text:p>
<text:bookmark text:name="ref-nodejitsu" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Nodejitsu</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">Nodejitsu</text:span> est une entreprise privée américaine fondée en 2010.
Elle vise à fournir des solutions professionnelles autour de Node en tant que <text:span text:style-name="T4">Platform as a Service</text:span> (<text:span text:style-name="T4">PaaS</text:span>) ainsi qu&#8217;avec des dépôts <text:span text:style-name="T4">npm</text:span> privés.<text:line-break/>Son activité en fait un concurrent direct de <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-joyent"  text:visited-style-name="Visited_20_Internet_20_Link">Joyent</text:a> et de <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-npm-inc"  text:visited-style-name="Visited_20_Internet_20_Link">npm, Inc.</text:a>.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">Nodejitsu</text:span> démontre un investissement fort dans la communauté Node en contribuant à plusieurs centaines de modules.
La société prend en charge l&#8217;hébergement du registre <text:span text:style-name="T4">npm</text:span> de 2010 jusqu&#8217;en décembre 2013.</text:p>
<text:p text:style-name="TexteCourant">En 2013, <text:span text:style-name="T4">Nodejitsu</text:span> lance l&#8217;initiative controversée <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-scalenpm"  text:visited-style-name="Visited_20_Internet_20_Link">scalenpm</text:a> (voir l&#8217;encadré ci-après).
Elle vise à collecter des fonds pour améliorer la performance
et la stabilité du <text:span text:style-name="T4">registre npm</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://www.npmjs.com/" text:visited-style-name="Visited_20_Internet_20_Link">https://www.npmjs.com/</text:a></text:span>).<text:line-break/><text:span text:style-name="T4">Nodejitsu</text:span> attise les tensions avec la compagnie <text:span text:style-name="T4">npm, Inc.</text:span>
en tentant de lui couper l&#8217;herbe sous le pied.
Ce ne sera pas un succès.</text:p>
<text:p text:style-name="TexteCourant">En février 2015, la société américaine <text:span text:style-name="T4">GoDaddy</text:span> rachète <text:span text:style-name="T4">Nodejitsu</text:span>,
absorbe son équipe et met fin à ses activités commerciales.</text:p>
<text:bookmark text:name="ref-scalenpm" /><text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Lien</text:span> La controverse <text:span text:style-name="T4">#scalenpm</text:span></text:h><text:p text:style-name="Remarque">L&#8217;initiative <text:span text:style-name="T4">#scalenpm</text:span> a réuni quelque 326 000 $ auprès
d&#8217;entreprises privées et de la communauté Node.</text:p>
<text:p text:style-name="Remarque">Son effort se poursuit dans le but de fournir une meilleure instrumentation et
une architecture résistant à la montée en puissance de l&#8217;utilisation des modules <text:span text:style-name="T4">npm</text:span>.</text:p>
<text:p text:style-name="Remarque">Cette initiative a suscité une controverse dans la mesure où l’opération s’est
déroulée lors de la naissance de <text:span text:style-name="T4">npm, Inc</text:span> et du dépôt de marque associé mais
sans entente apparente entre les deux parties.</text:p>
<text:p text:style-name="Remarque">Le contenu est depuis archivé sur
<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://web.archive.org/web/20160506191542/https://scalenpm.nodejitsu.com/" text:visited-style-name="Visited_20_Internet_20_Link">http://web.archive.org/web/20160506191542/https://scalenpm.nodejitsu.com/</text:a></text:span>.</text:p>
<text:bookmark text:name="ref-node_security_platform" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Node Security Platform</text:h><text:p text:style-name="TexteCourant">Le <text:span text:style-name="T4">Node Security Platform</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://nodesecurity.io/" text:visited-style-name="Visited_20_Internet_20_Link">https://nodesecurity.io/</text:a></text:span>&#160;— anciennement <text:span text:style-name="T4">Node Security Project</text:span>) est un projet à but lucratif soutenu par la société américaine <text:span text:style-name="T4">&amp;yet</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://andyet.com/" text:visited-style-name="Visited_20_Internet_20_Link">https://andyet.com/</text:a></text:span>).
Il a été initié au début de l&#8217;année 2013.</text:p>
<text:p text:style-name="TexteCourant">Son but est triple&#160;:</text:p>
<text:p text:style-name="ListeANumero">1.<text:tab/>auditer la sécurité de tous les modules npm&#160;;</text:p><text:p text:style-name="ListeANumero">2.<text:tab/>communiquer les failles auprès des auteurs de modules&#160;;</text:p><text:p text:style-name="ListeANumero">3.<text:tab/>permettre à quiconque de savoir si un module donné dépend de modules vulnérables.</text:p>
<text:p text:style-name="TexteCourant">Le projet met à disposition des <text:span text:style-name="T4">services</text:span> et des <text:span text:style-name="T4">modules</text:span>
tout en cherchant à impliquer la communauté Node dans le processus.
Cela concerne aussi bien la déclaration des vulnérabilités
que leur résolution ou l&#8217;éducation des développeurs à la sécurité.</text:p>
<text:p text:style-name="TexteCourant">Nous aborderons le sujet de la sécurité tout au long de cet ouvrage&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">au <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-security"  text:visited-style-name="Visited_20_Internet_20_Link">Chapitre 4</text:a>&#160;: mettre à jour Node en cas de failles de sécurité&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">au <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-security"  text:visited-style-name="Visited_20_Internet_20_Link">Chapitre 6</text:a>&#160;: surveiller la santé d&#8217;une application en production&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">au <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-security"  text:visited-style-name="Visited_20_Internet_20_Link">Chapitre 7</text:a>&#160;: identifier les opérations à risques dans une application web.</text:p>
</text:list-item></text:list>
<text:bookmark text:name="ref-governance" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Gouvernance du projet</text:h><text:p text:style-name="TexteCourant">Node a connu une <text:span text:style-name="T7">forte croissance depuis 2012</text:span>.
La gouvernance du projet open source a été effectuée
par la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-joyent"  text:visited-style-name="Visited_20_Internet_20_Link">société Joyent</text:a>.
Ses agissements et la direction donnée au projet ont régulièrement
fait grincer des dents.
Notamment en entretenant un climat d&#8217;incertitude sur
la pérennité à long terme, si Node venait à ne plus
répondre aux intérêts commerciaux de <text:span text:style-name="T4">Joyent</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Des voix se sont élevées pour critiquer l&#8217;absence d&#8217;une
organisation ouverte, commercialement neutre et
ouverte aux contributeurs externes.
Cela a mené à la création d&#8217;un <text:span text:style-name="T4">fork</text:span> de Node&#160;: <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-iojs"  text:visited-style-name="Visited_20_Internet_20_Link">io.js</text:a>.</text:p>
<text:p text:style-name="TexteCourant">La réconciliation entre le projet Node et <text:span text:style-name="T4">io.js</text:span> a sérieusement assaini
les rapports de gouvernance.
Cela a également apporté une direction et des opportunités plus claires
de contribuer à la direction du projet.</text:p>
<text:p text:style-name="TexteCourant">Depuis juin 2015, la gérance du projet est garantie par plusieurs entités&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">le <text:span text:style-name="T4">Technical Steering Committee</text:span> (TSC)&#160;: planning, décisions techniques, direction du projet, documentation et qualité du projet&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">le <text:span text:style-name="T4"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-node-foundation"  text:visited-style-name="Visited_20_Internet_20_Link">Node.js Foundation</text:a> Board</text:span>&#160;: évangélisation, relations commerciales&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">le <text:span text:style-name="T4"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-node-foundation"  text:visited-style-name="Visited_20_Internet_20_Link">Node.js Foundation</text:a> Community Committee</text:span> (CommComm)&#160;: relation avec la communauté, <text:span text:style-name="T4">onboarding</text:span>.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">Le <text:span text:style-name="T4">Technical Steering Committee</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/nodejs/TSC" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/nodejs/TSC</text:a></text:span>) réfère
ses intentions d&#8217;actions au <text:span text:style-name="T4">Board</text:span>.
Son fonctionnement est régi par une charte co-signée avec le <text:span text:style-name="T4">Board</text:span>.
Ce comité est composé de contributeurs et de collaborateurs individuels.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Anecdote</text:span> Une fois n&#8217;est pas coutume</text:h><text:p text:style-name="Remarque">Le <text:span text:style-name="T4">Technical Steering Committee</text:span> était autrefois dissocié d&#8217;une autre entité,
le <text:span text:style-name="T4">Core Technical Committee</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/nodejs/CTC" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/nodejs/CTC</text:a></text:span>).
Les conflits de gouvernance ayant résulté dans la création du <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-ayojs"  text:visited-style-name="Visited_20_Internet_20_Link">fork ayo.js</text:a>
ont mené à la fusion des deux comités.</text:p>
<text:p text:style-name="Remarque">L&#8217;objectif recherché était de rapprocher gouvernance et décisions techniques
tout en réduisant les opportunités d&#8217;abus de pouvoir par les membres
techniques éminents.</text:p>
<text:p text:style-name="TexteCourant">À l&#8217;inverse, le <text:span text:style-name="T4">Board</text:span> géré par la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-node-foundation"  text:visited-style-name="Visited_20_Internet_20_Link">Node.js Foundation</text:a>
est composé essentiellement d&#8217;acteurs de l&#8217;industrie&#160;— dont Google,
IBM, Joyent et PayPal.
Certains membres émérites ou choisis par le <text:span text:style-name="T4">Board</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/nodejs/board" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/nodejs/board</text:a></text:span>)
sont des individus agissant en leur nom propre.</text:p>
<text:p text:style-name="TexteCourant">Les participant·e·s du <text:span text:style-name="T4">Technical Steering Committee</text:span> ont une obligation
de régularité, de présence et de vote aux différents rendez-vous
organisés par le comité.<text:line-break/>Ce mécanisme a été choisi afin de préserver la vitalité du projet.</text:p>
<text:p text:style-name="TexteCourant">Un quota d&#8217;appartenance à une même entreprise a été mis en place
pour maintenir une diversité de représentation.
Dans une moindre mesure, ce mécanisme vise à réduire les possibles conflits
d&#8217;intérêt ou une prise en otage du projet Node comme a pu le faire
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-joyent"  text:visited-style-name="Visited_20_Internet_20_Link">Joyent</text:a> avant l&#8217;apparition de ce modèle de gouvernance.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Liens</text:span> Documentation</text:h><text:p text:style-name="Remarque">Les documents clés régissant le fonctionnement du projet Node
sont répartis dans les dépôts GitHub des différents acteurs&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="RemarquePuce"><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/nodejs/node/blob/master/GOVERNANCE.md" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/nodejs/node/blob/master/GOVERNANCE.md</text:a></text:span></text:p>
</text:list-item><text:list-item>
<text:p text:style-name="RemarquePuce"><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/nodejs/TSC/blob/master/TSC-Charter.md" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/nodejs/TSC/blob/master/TSC-Charter.md</text:a></text:span></text:p>
</text:list-item><text:list-item>
<text:p text:style-name="RemarquePuce"><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/nodejs/admin/blob/master/CODE_OF_CONDUCT.md" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/nodejs/admin/blob/master/CODE_OF_CONDUCT.md</text:a></text:span></text:p>
</text:list-item><text:list-item>
<text:p text:style-name="RemarquePuce"><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/nodejs/node/blob/master/COLLABORATOR_GUIDE.md" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/nodejs/node/blob/master/COLLABORATOR_GUIDE.md</text:a></text:span></text:p>
</text:list-item></text:list>
<text:bookmark text:name="ref-conclusion" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Conclusion</text:h><text:p text:style-name="TexteCourant">Nous venons d&#8217;en apprendre davantage sur les <text:span text:style-name="T7">origines de Node</text:span>, les différentes parties prenantes dans son développement mais aussi sa <text:span text:style-name="T7">philosophie</text:span>&#160;— de <text:span text:style-name="T4">conception</text:span>, de <text:span text:style-name="T4">distribution</text:span> et d'<text:span text:style-name="T4">évolution</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Nous allons voir dans le prochain chapitre comment installer un environnement fonctionnel pour développer et exécuter des programmes Node.</text:p>
<text:bookmark text:name="ref-chapter-02" /><text:p text:style-name="ChapitreNumero">2</text:p><text:h text:style-name="ChapitreTitre" text:outline-level="1">Installer, mettre à jour et développer</text:h><text:p text:style-name="TexteCourant">Selon que tu sois débutant·e ou confirmé·e, il y aura une manière
d&#8217;installer Node qui te correspond.</text:p>
<text:p text:style-name="TexteCourant">Ce chapitre contient tout ce qu&#8217;il faut savoir pour utiliser Node sur notre ordinateur et se préparer à développer notre premier programme.</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">Installer Node.js sur son ordinateur</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Choisir un éditeur de code pour écrire nos programmes</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Déterminer quand migrer vers une nouvelle version de Node.js</text:p>
</text:list-item></text:list>
<text:p text:style-name="ChapitreIntroduction"><text:p text:style-name="TexteCourant">Nous avons vu dans le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-01"  text:visited-style-name="Visited_20_Internet_20_Link">premier chapitre</text:a>
que Node est un <text:span text:style-name="T4">environnement d&#8217;exécution JavaScript</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Certains systèmes d&#8217;exploitation embarquent l&#8217;environnement d&#8217;exécution Node.
D&#8217;autres ne le font pas.
Et d&#8217;autres embarquent Node mais dans une version trop ancienne.
Voire avec une configuration exotique dont il est difficile de connaître les tenants et aboutissants.
Idéalement, on voudrait pouvoir <text:span text:style-name="T7">installer la version de Node de notre choix</text:span> sur notre ordinateur.</text:p>
<text:p text:style-name="TexteCourant">Les <text:span text:style-name="T7">éditeurs de code</text:span> nous facilitent la vie en rendant le code lisible
en ajoutant de la couleur et des repères visuels.
Ces logiciels nous invitent à piocher dans leur bibliothèque d&#8217;extensions
pour en faire un outil qui nous ressemble.</text:p></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Remarque</text:span> Versions de Node et npm</text:h><text:p text:style-name="Remarque">Le contenu de ce chapitre utilise les versions <text:span text:style-name="T7">Node v10</text:span> et <text:span text:style-name="T7">npm v6</text:span>.
Ce sont les versions stables recommandées en 2018.
J&#8217;explique comment les installer au <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 2</text:a>.</text:p>
<text:p text:style-name="TexteCourant">Il n&#8217;est pas nécessaire d&#8217;avoir suivi des études d&#8217;informatique
pour vouloir s&#8217;essayer à la programmation.
Cela n&#8217;implique pas non plus d&#8217;en faire son métier.</text:p>
<text:p text:style-name="TexteCourant">Que l&#8217;on se qualifie de débutant·e, confirmé·e ou expert·e,
il y a un petit rituel auquel on coupera difficilement&#160;:</text:p>
<text:p text:style-name="ListeANumero">1.<text:tab/>installer Node.js pour <text:span text:style-name="T7">voir le résultat de nos programmes</text:span> écrits en JavaScript&#160;;</text:p><text:p text:style-name="ListeANumero">2.<text:tab/>installer un éditeur de code pour <text:span text:style-name="T7">écrire nos programmes JavaScript plus confortablement</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Si l&#8217;idée est de jouer avec du code rapidement,
sans rien installer et avec le premier ordinateur qui vous passe sous la main,
je vous invite à aller directement à la section <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-online"  text:visited-style-name="Visited_20_Internet_20_Link">Sans installation, dans un navigateur web</text:a> ci-après.</text:p>
<text:p text:style-name="TexteCourant">Les sections qui suivent ont pour intention de vous aider à créer
un environnement Node à jour sur votre ordinateur.
Ce contenu s&#8217;applique également à un serveur destiné à héberger vos applications Node.</text:p>
<text:bookmark text:name="ref-install" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Installer Node.js</text:h><text:p text:style-name="TexteCourant">Il y a plusieurs manières d&#8217;installer Node sur une machine.
Elles sont <text:span text:style-name="T4">toutes</text:span> correctes.
Certaines manières sont plus adaptées que d&#8217;autres,
selon votre aisance avec un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-shell"  text:visited-style-name="Visited_20_Internet_20_Link">terminal</text:a>
et selon le besoin de jongler rapidement entre différentes versions de Node.</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">si vous vous êtes déjà servi·e d&#8217;un terminal</text:span>&#160;: je recommande d&#8217;utiliser <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-nvm"  text:visited-style-name="Visited_20_Internet_20_Link">nvm</text:a>&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">si vous ne vous êtes jamais servi·e d&#8217;un terminal</text:span>&#160;: il est plus simple d&#8217;utiliser un <text:span text:style-name="T4">installeur</text:span> depuis le site officiel de Node&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">si vous souhaitez maitriser les options d&#8217;installation</text:span>&#160;: il serait logique de <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-build"  text:visited-style-name="Visited_20_Internet_20_Link">compiler depuis les <text:span text:style-name="T4">sources</text:span></text:a> et/ou <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-docker"  text:visited-style-name="Visited_20_Internet_20_Link">d&#8217;utiliser Docker</text:a>&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">si rien de tout ça ne vous parle</text:span>&#160;: des services en ligne rendent <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-online"  text:visited-style-name="Visited_20_Internet_20_Link">Node accessible depuis un simple navigateur web</text:a>.</text:p>
</text:list-item></text:list>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Question</text:span> Pourquoi utiliser un installeur ?</text:h><text:p text:style-name="Remarque">Les installeurs permettent d&#8217;installer Node facilement, en quelques clics et sans toucher à un terminal.</text:p>
<text:p text:style-name="Remarque">Si vous utilisez un installeur correspondant à une version plus récente de Node,
cette nouvelle version sera utilisée dans <text:span text:style-name="T4">tous</text:span> vos projets Node.</text:p>
<text:p text:style-name="Remarque">C&#8217;est la <text:span text:style-name="T7">solution la plus simple pour installer Node</text:span>.</text:p>
<text:bookmark text:name="ref-online" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Sans installation, dans un navigateur web</text:h><text:p text:style-name="TexteCourant">Il est facile de s&#8217;essayer à Node juste avec un navigateur web moderne comme Firefox, Microsoft Edge ou Chrome.
Des services en ligne combinent un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-ide"  text:visited-style-name="Visited_20_Internet_20_Link">éditeur de texte</text:a>
ainsi qu&#8217;un environnement d&#8217;exécution Node à distance.</text:p>
<text:p text:style-name="TexteCourant">Nous brosserons le portrait de 3 services différents
de part leurs fonctionnalités et leur rapidité de prise en main&#160;:
<text:span text:style-name="T4">RunKit</text:span>, <text:span text:style-name="T4">Codenvy</text:span> et <text:span text:style-name="T4">Cloud9</text:span>.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">RunKit</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://runkit.com" text:visited-style-name="Visited_20_Internet_20_Link">https://runkit.com</text:a></text:span>) est de loin le service le plus simple.
Il s&#8217;articule autour d&#8217;un concept de <text:span text:style-name="T4">bac à sable</text:span>,
notre code ne sera pas plus long qu&#8217;un fichier.
Pour créer un nouveau bac à sable,
il suffit de se rendre sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://runkit.com/new" text:visited-style-name="Visited_20_Internet_20_Link">https://runkit.com/new</text:a></text:span>.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-02/images/runkit-playground.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 4. Bac à sable sur <text:span text:style-name="T4">RunKit</text:span>.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">Codenvy</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://codenvy.io" text:visited-style-name="Visited_20_Internet_20_Link">https://codenvy.io</text:a></text:span>) est un service basé sur le
logiciel open source <text:span text:style-name="T4">Eclipse</text:span> et édité par la compagnie <text:span text:style-name="T4">Red Hat</text:span>.<text:line-break/>L&#8217;interface est organisée exactement comme un des <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-ide"  text:visited-style-name="Visited_20_Internet_20_Link">éditeurs de texte</text:a> abordé plus loin dans ce chapitre.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-02/images/codenvy-workspace.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 5. Espace de travail sur <text:span text:style-name="T4">Codenvy</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Le processus de création de projet est relativement intuitif
et il est très facile d&#8217;importer du code hébergé en ligne, sur <text:span text:style-name="T4">GitHub</text:span>
notamment.
La configuration minimale d&#8217;un projet est gratuite tandis que
les fonctionnalités avancées et le travail en équipe sont payantes.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-02/images/codenvy-dashboard.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 6. Processus de création d&#8217;un espace de travail sur <text:span text:style-name="T4">Codenvy</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Enfin, <text:span text:style-name="T4">Cloud9</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://c9.io" text:visited-style-name="Visited_20_Internet_20_Link">https://c9.io</text:a></text:span>) est un service propriétaire
édité par la compagnie <text:span text:style-name="T4">Amazon Web Services</text:span> (<text:span text:style-name="T4">AWS</text:span>, <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://aws.amazon.com" text:visited-style-name="Visited_20_Internet_20_Link">https://aws.amazon.com</text:a></text:span>).
Ce service intègre des fonctionnalités similaires à celles de <text:span text:style-name="T4">Codenvy</text:span>
(éditeur en ligne, configuration de machine)
et s&#8217;intègre de manière poussée avec les autres services d'<text:span text:style-name="T4">AWS</text:span>,
dont <text:span text:style-name="T4">EC2</text:span> et <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-hosting.lambda"  text:visited-style-name="Visited_20_Internet_20_Link">Lambda</text:a> (voir le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-06"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 6</text:a>).<text:line-break/>Le service est entièrement gratuit.
C&#8217;est la consommation de ressources qui est payante, à l&#8217;heure,
en fonction du dimensionnement des ressources demandées.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-02/images/cloud9-configuration.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 7. Configuration d&#8217;un espace de travail <text:span text:style-name="T4">Cloud9</text:span>.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">Cloud9</text:span> a peu d&#8217;opinions sur la manière dont votre environnement
doit être configuré.
Tout devra être configuré, des accès à votre compte <text:span text:style-name="T4">GitHub</text:span>
y compris la version de Node à installer.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-02/images/cloud9-workspace.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 8. Espace de travail sur <text:span text:style-name="T4">Cloud9</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Ça tombe bien, <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-nvm"  text:visited-style-name="Visited_20_Internet_20_Link">nvm</text:a> est préinstallé sur chaque espace de travail.</text:p>
<text:bookmark text:name="ref-nvm" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Plusieurs versions sur la même machine (<text:span text:style-name="T4">nvm</text:span>)</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">nvm</text:span> est l&#8217;acronyme de <text:span text:style-name="T4">Node Version Manager</text:span>.
Ce logiciel permet d'<text:span text:style-name="T7">installer plusieurs versions de Node sur un même ordinateur</text:span>.<text:line-break/>Si vous êtes sous Windows, <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-nvm-windows"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T4">nvm-windows</text:span></text:a> offre exactement
les mêmes fonctionnalités (voir encadré ci-après).</text:p>
<text:p text:style-name="TexteCourant">Si vous venez d&#8217;un autre univers de programmation,
<text:span text:style-name="T4">nvm</text:span> est l&#8217;équivalent de <text:span text:style-name="T4">rvm</text:span> ou <text:span text:style-name="T4">rbenv</text:span> dans le monde Ruby, de <text:span text:style-name="T4">phpenv</text:span> dans
le monde PHP ou encore de <text:span text:style-name="T4">virtualenv</text:span> pour Python.</text:p>
<text:p text:style-name="TexteCourant">Le programme s&#8217;obtient à cette adresse&#160;: <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/creationix/nvm" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/creationix/nvm</text:a></text:span>.</text:p>
<text:bookmark text:name="ref-nvm-windows" /><text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Alternatives</text:span> <text:span text:style-name="T4">nvm</text:span> pour Windows</text:h><text:p text:style-name="Remarque"><text:span text:style-name="T4">nvm</text:span> ne fonctionne pas sur les ordinateurs équipés de Windows.
Il existe trois autres alternatives&#160;: <text:span text:style-name="T4">nvm-windows</text:span>, <text:span text:style-name="T4">_nvmw</text:span> et <text:span text:style-name="T4">nodist</text:span>.</text:p>
<text:p text:style-name="Remarque"><text:span text:style-name="T4">nvm-windows</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/coreybutler/nvm-windows" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/coreybutler/nvm-windows</text:a></text:span>) offre
les mêmes fonctionnalités que son équivalent pour Linux et macOS <text:span text:style-name="T4">nvm</text:span>.
Il est facile à installer et ne demande pas de privilège système particulier
pour fonctionner.</text:p>
<text:p text:style-name="Remarque">Deux autres alternatives sont à essayer si <text:span text:style-name="T4">nvm-windows</text:span> pose problème&#160;:
<text:span text:style-name="T4">nvmw</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/hakobera/nvmw" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/hakobera/nvmw</text:a></text:span>) et
<text:span text:style-name="T4">nodist</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/marcelklehr/nodist" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/marcelklehr/nodist</text:a></text:span>).</text:p>
<text:p text:style-name="CodeTitre">Commande d&#8217;installation du logiciel nvm v0.33.11</text:p><text:p text:style-name="Code">$ curl -L https://github.com/creationix/nvm/raw/v0.33.11/install.sh | bash</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Alternative</text:span> nvm sous macOS</text:h><text:p text:style-name="Remarque"><text:span text:style-name="T4">nvm</text:span> et Node peuvent s&#8217;installer encore plus facilement sous macOS si vous utilisez le logiciel <text:span text:style-name="T4">Homebrew</text:span>.</text:p>
<text:p text:style-name="Remarque">Rendez-vous dans la section <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install-macos"  text:visited-style-name="Visited_20_Internet_20_Link">macOS</text:a> pour en savoir plus.</text:p>
<text:p text:style-name="TexteCourant">Une fois installé, vous serez libre d&#8217;installer les versions exactes de Node qui vous intéressent en appelant la commande <text:span text:style-name="CodeDansTexte">nvm</text:span> dans un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-shell"  text:visited-style-name="Visited_20_Internet_20_Link">terminal</text:a>.</text:p>
<text:p text:style-name="CodeTitre">Installation de Node v10 avec la commande <text:span text:style-name="CodeDansTexte">nvm install</text:span></text:p><text:p text:style-name="Code">$ nvm install v10</text:p><text:p text:style-name="Code">$ nvm alias default v10</text:p>
<text:p text:style-name="TexteCourant">Dans l&#8217;exemple précédent,
la première ligne est responsable de l'<text:span text:style-name="T7">installation de la version de Node la plus récente</text:span> dans la branche 10.x.
La deuxième ligne est quant à elle responsable de signaler que l&#8217;on veut <text:span text:style-name="T7">en faire <text:span text:style-name="T4">notre</text:span> version par défaut</text:span> sur cet ordinateur.</text:p>
<text:p text:style-name="TexteCourant">On pourra retrouver à tout moment les versions installées en utilisant la commande <text:span text:style-name="CodeDansTexte">nvm ls</text:span>.</text:p>
<text:p text:style-name="CodeTitre">Liste des versions installées de Node avec la commande <text:span text:style-name="CodeDansTexte">nvm ls</text:span></text:p><text:p text:style-name="Code">$ nvm ls</text:p><text:p text:style-name="Code">-&gt;<text:s text:c="7"/>v10.3.0</text:p><text:p text:style-name="Code"><text:s text:c="9"/>v9.3.0</text:p><text:p text:style-name="Code"><text:s text:c="9"/>system</text:p><text:p text:style-name="Code">default -&gt; v10 (-&gt; v10.3.0)</text:p><text:p text:style-name="Code">node -&gt; stable (-&gt; v9.3.0)</text:p><text:p text:style-name="Code">stable -&gt; 9.3 (-&gt; v9.3.0) (default)</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple précédent détaille 2 choses&#160;:</text:p>
<text:p text:style-name="ListeANumero">1.<text:tab/>la liste des versions de Node installées sur le système&#160;;</text:p><text:p text:style-name="ListeANumero">2.<text:tab/>la liste des <text:span text:style-name="T4">alias</text:span>, et leur version correspondante.</text:p>
<text:p text:style-name="TexteCourant">Taper <text:span text:style-name="CodeDansTexte">nvm use stable</text:span> nous fait basculer vers la branche <text:span text:style-name="CodeDansTexte">9.3</text:span>.
C&#8217;est l&#8217;équivalent de <text:span text:style-name="CodeDansTexte">nvm use v9.3.0</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Vous pouvez saisir la commande <text:span text:style-name="CodeDansTexte">nvm --help</text:span> à tout moment pour obtenir de l&#8217;aide sur la syntaxe des commandes.
J&#8217;utilise principalement ces commandes&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="CodeDansTexte">nvm install</text:span>&#160;: installe ou met à jour une version de Node&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="CodeDansTexte">nvm ls</text:span>&#160;: liste les versions installées de Node&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="CodeDansTexte">nvm use</text:span>&#160;: bascule vers une version donnée de Node&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="CodeDansTexte">nvm alias &lt;nom&gt; &lt;version&gt;</text:span>&#160;: crée un alias nommé vers une version de Node&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="CodeDansTexte">nvm run &lt;version&gt; &lt;script&gt;</text:span>&#160;: exécute un script Node dans une version donnée de Node.</text:p>
</text:list-item></text:list>
<text:bookmark text:name="ref-install-ubuntu" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Distributions Linux : Debian/Ubuntu et RedHat/CentOS</text:h><text:p text:style-name="TexteCourant">Les distributions Linux et Debian listent Node dans leurs paquets officiels.
Un simple <text:span text:style-name="CodeDansTexte">apt-get install nodejs</text:span> et ça fonctionne&#160;!
Ou presque car bien souvent on écopera d&#8217;une vieille version de Node.</text:p>
<text:p text:style-name="TexteCourant">Des paquets officiels pour Debian, Ubuntu, Mint, RedHat Enterprise Linux (RHEL)
et CentOS sont maintenus sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/nodesource/distributions" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/nodesource/distributions</text:a></text:span>.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;installation de node 10.x sous Ubuntu et Mint devient aussi simple que les
deux commandes suivantes&#160;:</text:p>
<text:p text:style-name="Code">$ sudo su</text:p><text:p text:style-name="Code">$ curl -sL https://deb.nodesource.com/setup_10.x | bash -</text:p><text:p text:style-name="Code">$ sudo apt-get install -y nodejs</text:p>
<text:p text:style-name="TexteCourant">Pour Debian, il faudra se mettre en <text:span text:style-name="CodeDansTexte">root</text:span> et ensuite saisir ces commandes&#160;:</text:p>
<text:p text:style-name="Code">$ curl -sL https://deb.nodesource.com/setup_10.x | bash -</text:p><text:p text:style-name="Code">$ apt-get install -y nodejs</text:p>
<text:p text:style-name="TexteCourant">Pour RHEL et CentOS, il faudra se mettre en <text:span text:style-name="CodeDansTexte">root</text:span> et saisir cette commande&#160;:</text:p>
<text:p text:style-name="Code">$ curl -sL https://rpm.nodesource.com/setup_8.x | bash -</text:p>
<text:bookmark text:name="ref-distributions_linux_les_autres" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Distributions Linux : les autres</text:h><text:p text:style-name="TexteCourant">Des paquets officiels pour d&#8217;autres distributions que Debian, Ubuntu et Mint sont maintenus et accessibles par le biais des gestionnaires de paquets habituels&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">Gentoo</text:span>&#160;: <text:span text:style-name="CodeDansTexte">emerge nodejs</text:span></text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">Ubuntu &gt;= 12.04</text:span>, <text:span text:style-name="T7">Debian &gt;= jessie</text:span>, <text:span text:style-name="T7">Mint</text:span>&#160;: <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install-ubuntu"  text:visited-style-name="Visited_20_Internet_20_Link">voir ci-après</text:a></text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">Fedora &gt;= 18</text:span>&#160;: <text:span text:style-name="CodeDansTexte">sudo yum install nodejs npm</text:span></text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">Red Hat Enterprise</text:span> et <text:span text:style-name="T7">CentOS</text:span>&#160;: <text:span text:style-name="CodeDansTexte">sudo yum install nodejs npm --enablerepo=epel</text:span></text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">Arch Linux</text:span>&#160;: <text:span text:style-name="CodeDansTexte">pacman -S nodejs</text:span></text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">FreeBSD</text:span>, <text:span text:style-name="T7">OpenBSD</text:span>&#160;: <text:span text:style-name="CodeDansTexte">pkg install node</text:span></text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">La liste à jour est maintenue sur cette page du site officiel de Node <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://nodejs.org/fr/download/package-manager" text:visited-style-name="Visited_20_Internet_20_Link">https://nodejs.org/fr/download/package-manager</text:a></text:span>.</text:p>
<text:p text:style-name="TexteCourant">À noter que vous pouvez aussi utiliser <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-nvm"  text:visited-style-name="Visited_20_Internet_20_Link">nvm</text:a> pour gérer vos versions de Node indépendamment du cycle de vie de votre système d&#8217;exploitation Linux.</text:p>
<text:bookmark text:name="ref-install-macos" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">macOS</text:h><text:p text:style-name="TexteCourant">Un installeur officiel pour macOS est fourni sur le site de Node à l&#8217;adresse <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://nodejs.org/fr/download/" text:visited-style-name="Visited_20_Internet_20_Link">https://nodejs.org/fr/download/</text:a></text:span>.</text:p>
<text:p text:style-name="TexteCourant"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-nvm"  text:visited-style-name="Visited_20_Internet_20_Link">nvm</text:a> est la voie alternative recommandée pour gérer plusieurs versions de Node en parallèle.</text:p>
<text:p text:style-name="TexteCourant">Il est toutefois possible d&#8217;installer Node et <text:span text:style-name="T4">nvm</text:span> via le gestionnaire de paquets <text:span text:style-name="T4">Homebrew</text:span>.
<text:span text:style-name="T4">Homebrew</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://brew.sh/" text:visited-style-name="Visited_20_Internet_20_Link">https://brew.sh/</text:a></text:span>) est un logiciel open source populaire.
Il aide à installer des logiciels qui ne sont pas distribués via le <text:span text:style-name="T4">Mac App Store</text:span>.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;installation de <text:span text:style-name="T4">Homebrew</text:span> se fait en deux étapes&#160;:</text:p>
<text:p text:style-name="ListeANumero">1.<text:tab/>l&#8217;installation des <text:span text:style-name="T4">Command Line Tools</text:span> pour compiler des logiciels depuis leur code source&#160;;</text:p><text:p text:style-name="ListeANumero">2.<text:tab/>l&#8217;installation de <text:span text:style-name="T4">Homebrew</text:span> en elle-même.</text:p>
<text:p text:style-name="CodeTitre">Installation des <text:span text:style-name="T4">Command Line Tools</text:span> et de <text:span text:style-name="T4">Homebrew</text:span> sous macOS</text:p><text:p text:style-name="Code">$ xcode-select --install</text:p><text:p text:style-name="Code">$ BREWRL=https://rawgit.com/Homebrew/install/master/install \</text:p><text:p text:style-name="Code"><text:s text:c="3"/>/usr/bin/ruby -e "$(curl -fsSL $BREWRL)"</text:p>
<text:p text:style-name="TexteCourant">Pour installer <text:span text:style-name="T4">nvm</text:span>, il suffira alors de faire&#160;:</text:p>
<text:p text:style-name="Code">$ brew install nvm</text:p>
<text:p text:style-name="TexteCourant">Ou pour installer une seule version de Node, la plus récente&#160;:</text:p>
<text:p text:style-name="Code">$ brew install node</text:p>
<text:p text:style-name="TexteCourant">Vous pouvez obtenir des options d&#8217;installations et de configuration en tapant <text:span text:style-name="CodeDansTexte">brew info nvm</text:span> et/ou <text:span text:style-name="CodeDansTexte">brew info node</text:span>.</text:p>
<text:bookmark text:name="ref-windows" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Windows</text:h><text:p text:style-name="TexteCourant">Un installeur officiel pour Windows est fourni sur le site de Node à l&#8217;adresse <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://nodejs.org/fr/download/" text:visited-style-name="Visited_20_Internet_20_Link">https://nodejs.org/fr/download/</text:a></text:span>.</text:p>
<text:p text:style-name="TexteCourant"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-nvm"  text:visited-style-name="Visited_20_Internet_20_Link">nvm-windows</text:a> est la voie alternative recommandée pour gérer plusieurs versions de Node en parallèle.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-02/images/windows-node-installer.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 9. Un des écrans d&#8217;installation de Node sous Windows 10</text:p>
<text:p text:style-name="TexteCourant">L&#8217;installeur officiel créera plusieurs raccourcis dans le dossier <text:span text:style-name="T4">Node.js</text:span> du menu Démarrer&#160;:</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-02/images/windows-node-menu.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 10. Node.js dans le menu Démarrer sous Windows 10</text:p>
<text:p text:style-name="TexteCourant">Le menu créé par l&#8217;installeur contient deux icônes que nous utiliserons tout au long de la lecture de cet ouvrage&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T4">Node.js</text:span>&#160;: un terminal pour jouer avec JavaScript et voir les résultats que Node va interpréter&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T4">Node.js command prompt</text:span>&#160;: un terminal pour exécuter nos programmes écrits en JavaScript.</text:p>
</text:list-item></text:list>
<text:p text:style-name="Horizontal_20_Line"/>
<text:p text:style-name="TexteCourant">Si vous utilisez déjà un gestionnaire de paquet comme <text:span text:style-name="T4">Scoop</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://scoop.sh/" text:visited-style-name="Visited_20_Internet_20_Link">http://scoop.sh/</text:a></text:span>) ou <text:span text:style-name="T4">Chocolatey</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://chocolatey.org/" text:visited-style-name="Visited_20_Internet_20_Link">https://chocolatey.org/</text:a></text:span>),
le chemin d&#8217;installation vers Node s&#8217;en trouvera réduit à une simple commande&#160;:</text:p>
<text:p text:style-name="Code"># Avec Scoop</text:p><text:p text:style-name="Code">$ scoop install nodejs</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"># Avec Chocolatey</text:p><text:p text:style-name="Code">$ choco install nodejs</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Attention</text:span> Versions supportées de Windows</text:h><text:p text:style-name="Remarque">Node n&#8217;est pas compatible avec les versions antérieures à Windows Vista.
Cela inclut Windows XP.</text:p>
<text:p text:style-name="Remarque">Mieux vaudra utiliser un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-online"  text:visited-style-name="Visited_20_Internet_20_Link">service en ligne</text:a> pour essayer Node en toute
sécurité sur votre ordinateur ou passer à Linux pour lui redonner une seconde
vie en toute sécurité&#160;!</text:p>
<text:bookmark text:name="ref-install-rpi" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Raspberry Pi</text:h><text:p text:style-name="TexteCourant">Des binaires sont disponibles pour les microcontrôleurs fonctionnant avec des processeurs ARMv6, ARMv7 et ARMv8.
Ces microcontrôleurs sont au cœur de ce que l&#8217;on appelle <text:span text:style-name="T4">Internet des Objets</text:span> (<text:span text:style-name="T4">Internet of Things</text:span>, <text:span text:style-name="T4">IoT</text:span>).
Ces petits ordinateurs consomment peu d&#8217;énergie,
disposent d&#8217;une connectique pour se relier à Internet
et s&#8217;interfacent avec toutes sortes de capteurs.</text:p>
<text:p text:style-name="TexteCourant">Un paquet <text:span text:style-name="CodeDansTexte">deb</text:span> est également proposé pour les utilisateurs du système d&#8217;exploitation <text:span text:style-name="T4">Raspbian</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://www.raspbian.org/" text:visited-style-name="Visited_20_Internet_20_Link">https://www.raspbian.org/</text:a></text:span>).
Les instructions d&#8217;installation sont identiques à celles décrites
dans la section précédente relative aux <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install-ubuntu"  text:visited-style-name="Visited_20_Internet_20_Link">distributions Linux&#160;: Debian et Ubuntu</text:a>.</text:p>
<text:p text:style-name="CodeTitre">Installation de Node v10 sur Raspberry Pi Model 3 (CPU ARMv8)</text:p><text:p text:style-name="Code">$ curl -SLO https://nodejs.org/dist/v10.3.0/node-v10.3.0-linux-arm64.tar.xz</text:p><text:p text:style-name="Code">$ tar -xJf "node-v10.3.0-linux-arm64.tar.xz" -C /usr/local --strip-components=1</text:p><text:p text:style-name="Code">$ ln -s /usr/local/bin/node /usr/local/bin/nodejs</text:p>
<text:p text:style-name="TexteCourant">Tous les binaires et les instructions d&#8217;installation sont disponibles sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://nodejs.org/fr/download/" text:visited-style-name="Visited_20_Internet_20_Link">https://nodejs.org/fr/download/</text:a></text:span>.</text:p>
<text:bookmark text:name="ref-build" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Compiler depuis les sources</text:h><text:p text:style-name="TexteCourant">Certaines situations exigeront que vous compiliez Node.
C&#8217;est le cas si vous cherchez à travailler au plus près du système sur lequel vous comptez déployer vos applications Node.
Je pense par exemple à des architectures processeur <text:span text:style-name="T4">ARM</text:span>, <text:span text:style-name="T4">PowerPC</text:span>, <text:span text:style-name="T4">IBM System/390</text:span> ou bien à des systèmes <text:span text:style-name="T4">Android</text:span>, <text:span text:style-name="T4">OpenBSD</text:span> ou <text:span text:style-name="T4">AIX</text:span>.</text:p>
<text:p text:style-name="TexteCourant">La compilation manuelle est également intéressante pour régler plus finement certains aspects grand public de Node&#160;:
rendre le binaire indépendant des librairies système (<text:span text:style-name="T4">statique</text:span>),
le module <text:span text:style-name="T4">http/2</text:span>,
les langues et fuseaux horaires fonctionnelles avec l&#8217;API <text:span text:style-name="T4">ECMA 402 Intl</text:span>,
les options de sécurité liées à <text:span text:style-name="T4">OpenSSL</text:span>,
mais aussi l&#8217;intégration avec des profileurs et débogueurs externes
(type <text:span text:style-name="T4">XCode</text:span>, <text:span text:style-name="T4">GNU Debugger</text:span>, <text:span text:style-name="T4">Intel VTune</text:span>).</text:p>
<text:p text:style-name="CodeTitre">Étapes de compilation de Node v10.3.0</text:p><text:p text:style-name="Code">$ curl -sS https://nodejs.org/dist/v10.3.0/node-v10.3.0.tar.gz \</text:p><text:p text:style-name="Code"><text:s text:c="2"/>| tar -zxf -</text:p><text:p text:style-name="Code">$ cd node-v10.3.0</text:p><text:p text:style-name="Code">$ ./configure &amp;&amp; make &amp;&amp; make install</text:p>
<text:p text:style-name="TexteCourant">La compilation manuelle requiert la présence de <text:span text:style-name="T4">GCC</text:span> 4.9+, de <text:span text:style-name="T4">Python</text:span> 2.6+ et de <text:span text:style-name="T4">GNU Make</text:span> 3.81+.<text:line-break/>Les instructions de compilation varient d&#8217;un système d&#8217;exploitation à l&#8217;autre.
Consultez les dépendances et instructions complètes à
cette adresse <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/nodejs/node/blob/master/BUILDING.md" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/nodejs/node/blob/master/BUILDING.md</text:a></text:span>.</text:p>
<text:bookmark text:name="ref-install-docker" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Images Docker</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">Docker</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://docker.com" text:visited-style-name="Visited_20_Internet_20_Link">https://docker.com</text:a></text:span>) est un outil open source dit d'<text:span text:style-name="T4">applications en conteneur</text:span>.
Une de ses qualités principales est d'<text:span text:style-name="T7">isoler l&#8217;exécution d&#8217;applications de leur environnement d&#8217;exécution</text:span>.
Une image Docker décrit la recette d&#8217;installation d&#8217;une application.
L&#8217;environnement d&#8217;exécution Docker fait office de passe-plat avec le système d&#8217;exploitation.
Une image Docker fonctionne ainsi de la même manière qu&#8217;elle soit exécutée sous Linux, macOS ou encore Windows.</text:p>
<text:p text:style-name="TexteCourant">Les installeurs et instructions d&#8217;installation de Docker se trouvent à l&#8217;adresse <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://docker.com/community-edition" text:visited-style-name="Visited_20_Internet_20_Link">https://docker.com/community-edition</text:a></text:span>.</text:p>
<text:p text:style-name="TexteCourant">Une fois Docker installé, on peut exécuter une image officielle pour Node v10&#160;:</text:p>
<text:p text:style-name="CodeTitre">Affiche la version de Node</text:p><text:p text:style-name="Code">$ docker run -ti --rm node:10 node --version</text:p><text:p text:style-name="Code">v10.3.0</text:p>
<text:p text:style-name="TexteCourant">Docker télécharge l&#8217;image <text:span text:style-name="CodeDansTexte">node:10</text:span> et exécute la commande <text:span text:style-name="CodeDansTexte">node --version</text:span> dans un contexte isolé du système d&#8217;exploitation.</text:p>
<text:p text:style-name="TexteCourant">Pour lancer un terminal Node dans Docker, il faudrait saisir cette commande&#160;:</text:p>
<text:p text:style-name="Code">$ docker run -ti --rm node:10 node</text:p><text:p text:style-name="Code">&gt; 2+2</text:p><text:p text:style-name="Code">4</text:p>
<text:p text:style-name="TexteCourant">Plusieurs variantes d&#8217;images Node se trouvent à notre disposition&#160;:</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="T4">standard</text:span> (<text:span text:style-name="CodeDansTexte">node:10</text:span>)</text:span><text:line-break/><text:tab/>base Linux Debian pour tout type d&#8217;applications Node&#160;;</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="T4">Debian</text:span> (<text:span text:style-name="CodeDansTexte">node:10-wheezy</text:span>)</text:span><text:line-break/><text:tab/>idem que <text:span text:style-name="T4">standard</text:span> mais sur des bases Debian différentes, comme <text:span text:style-name="T4">Wheezy</text:span>, <text:span text:style-name="T4">Stretch</text:span>, etc.&#160;;</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="T4">Alpine</text:span> (<text:span text:style-name="CodeDansTexte">node:10-alpine</text:span>)</text:span><text:line-break/><text:tab/>distribution spécialement créée pour Docker (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://alpinelinux.org" text:visited-style-name="Visited_20_Internet_20_Link">http://alpinelinux.org</text:a></text:span>)&#160;— elle pèse quelques Mo à peine&#160;;</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="T4">allégée</text:span> (<text:span text:style-name="CodeDansTexte">node:10-slim</text:span>)</text:span><text:line-break/><text:tab/>base Linux Debian sans outillage parfois nécessaires à des modules Node&#160;— utile si vous souhaitez économiser de l&#8217;espace disque.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;intégralité des versions et architectures supportées est disponible sur
le catalogue <text:span text:style-name="T4">Docker Hub</text:span>&#160;: <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://hub.docker.com/_/node/" text:visited-style-name="Visited_20_Internet_20_Link">https://hub.docker.com/_/node/</text:a></text:span>.<text:line-break/>Nous nous repencherons dessus dans la section
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.docker"  text:visited-style-name="Visited_20_Internet_20_Link">déploiement d&#8217;une image Docker</text:a> du
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-06"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 6</text:a>.</text:p>
<text:bookmark text:name="ref-shell" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Utiliser Node.js avec un terminal (<text:span text:style-name="T4">shell</text:span>)</text:h><text:p text:style-name="TexteCourant">La section précédente nous a permis d&#8217;installer l&#8217;environnement d&#8217;exécution Node sur notre machine.
Il se peut aussi que vous ayez privilégié l&#8217;utilisation d&#8217;un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-online"  text:visited-style-name="Visited_20_Internet_20_Link">service en ligne</text:a>.</text:p>
<text:p text:style-name="TexteCourant">Nous allons nous assurer dans cette section que nous pouvons
<text:span text:style-name="T7">voir nos premiers résultats</text:span> d&#8217;une interaction avec Node.</text:p>
<text:p text:style-name="TexteCourant">Le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-shell"  text:visited-style-name="Visited_20_Internet_20_Link">terminal</text:a> est notre compagnon pour dialoguer avec le système d&#8217;exploitation.
L'<text:span text:style-name="T4">invite de commande</text:span> est son nom véritable.
Ce nom nous donne un indice sur la fonction de ce type de logiciel&#160;:
inviter l&#8217;utilisateur à saisir des commandes pour obtenir des résultats calculés par un ordinateur.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-02/images/macos-terminal.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 11. Terminal iTerm2 sous macOS.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Histoire</text:span> Terminal physique</text:h><text:p text:style-name="Remarque">L&#8217;histoire des invites de commande remonte au temps où les ordinateurs
étaient plus volumineux que nos logements.
Une époque lointaine où les ordinateurs étaient véritablement et physiquement
distants des claviers qui les interrogeaient.</text:p>
<text:p text:style-name="Remarque">Pour en savoir plus&#160;: <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://fr.wikipedia.org/wiki/Terminal_informatique" text:visited-style-name="Visited_20_Internet_20_Link">https://fr.wikipedia.org/wiki/Terminal_informatique</text:a></text:span>.</text:p>
<text:p text:style-name="TexteCourant">Une application de type <text:span text:style-name="T4">terminal</text:span> sert également à communiquer avec
Node quand celui-ci est installé sur un ordinateur.</text:p>
<text:p text:style-name="TexteCourant">La majorité des systèmes d&#8217;exploitation embarquent un logiciel utilitaire permettant d&#8217;ouvrir un <text:span text:style-name="T4">terminal</text:span>.
Cela vaut également pour les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-online"  text:visited-style-name="Visited_20_Internet_20_Link">services en ligne</text:a> offrant la fonctionnalité d'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-ide"  text:visited-style-name="Visited_20_Internet_20_Link">éditeur de code</text:a>.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-02/images/cloud9-terminal.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 12. Terminal du <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-online"  text:visited-style-name="Visited_20_Internet_20_Link">service en ligne</text:a> <text:span text:style-name="T4">Cloud9</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Voici une liste non exhaustive d&#8217;applications de type <text:span text:style-name="T4">terminal</text:span>&#160;:</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>macOS</text:span></text:p><text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">Terminal.app</text:span>&#160;: fourni par défaut (dans <text:span text:style-name="CodeDansTexte">Applications / Utilitaires</text:span>)&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">iTerm2</text:span>&#160;: une version améliorée disponible sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://iterm2.com" text:visited-style-name="Visited_20_Internet_20_Link">https://iterm2.com</text:a></text:span> (ou <text:span text:style-name="CodeDansTexte">brew cask install iterm2</text:span>)&#160;;</text:p>
</text:list-item></text:list><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>Linux</text:span></text:p><text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">GNOME Terminal</text:span>&#160;: fourni par défaut sous Debian, Ubuntu et les distributions utilisant le bureau <text:span text:style-name="T4">GNOME</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://wiki.gnome.org/Apps/Terminal" text:visited-style-name="Visited_20_Internet_20_Link">https://wiki.gnome.org/Apps/Terminal</text:a></text:span>)&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">Terminator</text:span>&#160;: un autre terminal populaire (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://gnometerminator.blogspot.com" text:visited-style-name="Visited_20_Internet_20_Link">https://gnometerminator.blogspot.com</text:a></text:span>)&#160;;</text:p>
</text:list-item></text:list><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>Windows</text:span></text:p><text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">Node.js Command Prompt</text:span>&#160;: fourni avec l'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-windows"  text:visited-style-name="Visited_20_Internet_20_Link">installeur Windows</text:a>&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">PowerShell</text:span>&#160;: fourni par défaut depuis Windows 7, sinon disponible sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/PowerShell/PowerShell" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/PowerShell/PowerShell</text:a></text:span>&#160;— également disponible pour macOS et Linux.</text:p>
</text:list-item></text:list>
<text:p text:style-name="RemarqueFigureNumero">(chapter-02/images/windows-terminal.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 13. Node.js Command Prompt sous Windows 10.</text:p>
<text:p text:style-name="TexteCourant">Maintenant que nous avons installé Node et compris comment
y accéder depuis notre système d&#8217;exploitation ou navigateur web,
attaquons-nous au dernier morceau du puzzle&#160;:
<text:span text:style-name="T7">avec quel logiciel écrire du code JavaScript pour nos applications Node</text:span>&#160;?</text:p>
<text:bookmark text:name="ref-ide" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Choisir un éditeur de texte</text:h><text:p text:style-name="TexteCourant">Programmer pour Node revient dans la majorité des cas à écrire du JavaScript.
À cela s&#8217;ajoutent le HTML et le CSS dans le cas d&#8217;applications ou de sites web.</text:p>
<text:p text:style-name="TexteCourant">À la base, si un éditeur de texte suffit pour écrire du code,
prenons le temps de regarder ce qui pourrait nous apporter un peu de confort
dans le processus d&#8217;écriture.</text:p>
<text:p text:style-name="TexteCourant">Les logiciels présentés ci-après couvrent bon nombre de fonctionnalités
qui améliorent de près ou de loin notre capacité à écrire du code de qualité.
Parmi ces fonctionnalités, on peut retrouver la coloration syntaxique,
l&#8217;inspection dynamique, le débogage, des astuces de productivité et
d&#8217;intégration à l&#8217;écosystème Node.</text:p>
<text:p text:style-name="TexteCourant">Cette sélection a pour intention de vous aider à piocher au plus près
de vos goûts.
Le meilleur logiciel sera celui qui vous plaira.
Rien n&#8217;empêche d&#8217;en changer par la suite.</text:p>
<text:bookmark text:name="ref-atom" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Atom</text:h><text:p text:style-name="RemarqueFigureNumero">(chapter-02/images/atom.png)</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">Atom</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://atom.io" text:visited-style-name="Visited_20_Internet_20_Link">https://atom.io</text:a></text:span>) est un éditeur de code open-source,
multilingue et multi plate-forme dont le développement a été initié
par la société commerciale <text:span text:style-name="T4">GitHub</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://github.com" text:visited-style-name="Visited_20_Internet_20_Link">http://github.com</text:a></text:span>).
Le logiciel est basé sur <text:span text:style-name="T4">Electron</text:span>, un environnement d&#8217;exécution
d&#8217;applications de bureau reposant sur les technologies web et sur Node&#160;!</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">Atom</text:span> offre un écosystème d&#8217;extensions pour étendre les fonctionnalités de l&#8217;éditeur.
On retrouvera des extensions dédiées à l&#8217;auto-complétion,
un débogueur Node intégré (pour exécuter nos programmes sans changer de fenêtre)
mais aussi une vérification syntaxique sur mesure.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;ensemble des extensions d'<text:span text:style-name="T4">Atom</text:span> sont disponibles sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://atom.io/packages" text:visited-style-name="Visited_20_Internet_20_Link">https://atom.io/packages</text:a></text:span>&#160;;
voici cependant une liste d&#8217;extensions que j&#8217;utilise au quotidien&#160;:</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>minimap (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://atom.io/packages/minimap" text:visited-style-name="Visited_20_Internet_20_Link">https://atom.io/packages/minimap</text:a></text:span>)</text:span><text:line-break/><text:tab/>Une prévisualisation de l&#8217;intégralité du code source d&#8217;un fichier.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>file-icons (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://atom.io/packages/file-icons" text:visited-style-name="Visited_20_Internet_20_Link">https://atom.io/packages/file-icons</text:a></text:span>)</text:span><text:line-break/><text:tab/>Une manière plus agréable de visualiser les différents types de fichiers
en fonction de leur icône.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>pigments (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://atom.io/packages/pigments" text:visited-style-name="Visited_20_Internet_20_Link">https://atom.io/packages/pigments</text:a></text:span>)</text:span><text:line-break/><text:tab/>Affiche les couleurs en marge et dans le code source.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>language-babel (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://atom.io/packages/language-babel" text:visited-style-name="Visited_20_Internet_20_Link">https://atom.io/packages/language-babel</text:a></text:span>)</text:span><text:line-break/><text:tab/>Coloration syntaxique de tous les langages compris par l&#8217;outil
Babel (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://babeljs.io" text:visited-style-name="Visited_20_Internet_20_Link">https://babeljs.io</text:a></text:span>)&#160;; dont les versions modernes
de JavaScript, JSX, GraphQL, etc.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>emmet (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://atom.io/packages/emmet" text:visited-style-name="Visited_20_Internet_20_Link">https://atom.io/packages/emmet</text:a></text:span>)</text:span><text:line-break/><text:tab/>Génère du HTML à partir d&#8217;une écriture sous forme de sélecteur CSS.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>linter-eslint (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://atom.io/packages/linter-eslint" text:visited-style-name="Visited_20_Internet_20_Link">https://atom.io/packages/linter-eslint</text:a></text:span>)</text:span><text:line-break/><text:tab/>Vérification syntaxique basée sur les règles projet du module
ESLint (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://eslint.org" text:visited-style-name="Visited_20_Internet_20_Link">https://eslint.org</text:a></text:span>, voir
l'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-eslint"  text:visited-style-name="Visited_20_Internet_20_Link">annexe A, eslint</text:a>).</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>atom-ternjs (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://atom.io/packages/atom-ternjs" text:visited-style-name="Visited_20_Internet_20_Link">https://atom.io/packages/atom-ternjs</text:a></text:span>)</text:span><text:line-break/><text:tab/>Autocomplétion pour JavaScript, Node et d&#8217;autres librairies
populaires comme jQuery, chai et underscore.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>editorconfig (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://atom.io/packages/editorconfig" text:visited-style-name="Visited_20_Internet_20_Link">https://atom.io/packages/editorconfig</text:a></text:span>)</text:span><text:line-break/><text:tab/>Adapte les réglages d&#8217;indentation et autres styles d&#8217;écriture de code
documentés dans chaque projet.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>language-sass (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://atom.io/packages/language-sass" text:visited-style-name="Visited_20_Internet_20_Link">https://atom.io/packages/language-sass</text:a></text:span>)</text:span><text:line-break/><text:tab/>Support du langage Sass.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>markdown-writer (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://atom.io/packages/markdown-writer" text:visited-style-name="Visited_20_Internet_20_Link">https://atom.io/packages/markdown-writer</text:a></text:span>)</text:span><text:line-break/><text:tab/>Raccourcis et aides pour formatter du texte au format Markdown.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>autocomplete-modules (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://atom.io/packages/autocomplete-modules" text:visited-style-name="Visited_20_Internet_20_Link">https://atom.io/packages/autocomplete-modules</text:a></text:span>)</text:span><text:line-break/><text:tab/>Étend l&#8217;autocomplétion lors des appels aux
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-05"  text:visited-style-name="Visited_20_Internet_20_Link">modules npm</text:a> (voir Chapitre 5).</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>linter-sass-lint (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://atom.io/packages/linter-sass-lint" text:visited-style-name="Visited_20_Internet_20_Link">https://atom.io/packages/linter-sass-lint</text:a></text:span>)</text:span><text:line-break/><text:tab/>Vérification syntaxique des fichiers Sass.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>node-debugger (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://atom.io/packages/node-debugger" text:visited-style-name="Visited_20_Internet_20_Link">https://atom.io/packages/node-debugger</text:a></text:span>)</text:span><text:line-break/><text:tab/>Intégration du débogueur Node.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>tablr (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://atom.io/packages/tablr" text:visited-style-name="Visited_20_Internet_20_Link">https://atom.io/packages/tablr</text:a></text:span>)</text:span><text:line-break/><text:tab/>Éditeur de fichiers CSV.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>linter-markdown (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://atom.io/packages/linter-markdown" text:visited-style-name="Visited_20_Internet_20_Link">https://atom.io/packages/linter-markdown</text:a></text:span>)</text:span><text:line-break/><text:tab/>Vérification syntaxique des fichiers Markdown.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>node-resolver (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://atom.io/packages/node-resolver" text:visited-style-name="Visited_20_Internet_20_Link">https://atom.io/packages/node-resolver</text:a></text:span>)</text:span><text:line-break/><text:tab/>Navigation au sein des <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-05"  text:visited-style-name="Visited_20_Internet_20_Link">modules npm</text:a>
en cliquant sur leurs méthodes ou propriétés.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Productivité</text:span> Installer vos extensions favorites</text:h><text:p text:style-name="Remarque">Chaque extension peut être ajoutée à nos favoris sur le site <text:span text:style-name="URL">atom.io</text:span>.
L&#8217;intention peut être de signaler notre appréciation d&#8217;une extension
mais aussi de retrouver plus tard celles qui nous plaisent.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-02/images/atom-favourite.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 14. Une extension <text:span text:style-name="T4">Atom</text:span> ajoutée aux favoris.</text:p>
<text:p text:style-name="Remarque">Et ça tombe bien, le logiciel nous offre une commande à saisir
dans un terminal pour installer toutes les extensions
ajoutées à nos favoris&#160;!</text:p>
<text:p text:style-name="RemarqueCode">$ apm stars --install</text:p>
<text:bookmark text:name="ref-vs-code" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Visual Studio Code</text:h><text:p text:style-name="RemarqueFigureNumero">(chapter-02/images/visual-studio-code.png)</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">Visual Studio Code</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://code.visualstudio.com" text:visited-style-name="Visited_20_Internet_20_Link">https://code.visualstudio.com</text:a></text:span>)
est un éditeur de code open-source, multilingue et multi plate-forme
dont le développement a été initié par la société <text:span text:style-name="T4">Microsoft</text:span>.
Le logiciel est basé sur <text:span text:style-name="T4">Electron</text:span>, un environnement d&#8217;exécution
d&#8217;applications de bureau reposant sur les technologies web et sur Node&#160;!</text:p>
<text:p text:style-name="TexteCourant">Le système <text:span text:style-name="T4">IntelliSense</text:span> est un de ses atouts principaux.
Il se sert du contexte disponible pour offrir une auto-complétion
et des bulles d&#8217;aide pertinentes.
C&#8217;est un éditeur parfaitement adapté au développement d&#8217;applications Node
grâce à des fonctionnalités natives comme l&#8217;exécution, le débogage,
la gestion de tâches et le versionnement&#160;– du code et des modules <text:span text:style-name="T4">npm</text:span>.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">Visual Studio Code</text:span> se complète d&#8217;un mode Node (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://code.visualstudio.com/Docs/runtimes/nodejs" text:visited-style-name="Visited_20_Internet_20_Link">https://code.visualstudio.com/Docs/runtimes/nodejs</text:a></text:span>)
et d&#8217;une place de marché (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://marketplace.visualstudio.com/VSCode" text:visited-style-name="Visited_20_Internet_20_Link">https://marketplace.visualstudio.com/VSCode</text:a></text:span>) pour
étendre ses fonctionnalités.</text:p>
<text:bookmark text:name="ref-webstorm" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">WebStorm</text:h><text:p text:style-name="RemarqueFigureNumero">(chapter-02/images/webstorm.png)</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">WebStorm</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://www.jetbrains.com/webstorm/" text:visited-style-name="Visited_20_Internet_20_Link">https://www.jetbrains.com/webstorm/</text:a></text:span>) est un environnement de développement (<text:span text:style-name="T4">IDE</text:span>) payant dédié au développement Web
HTML5, JavaScript et Node.<text:line-break/>Le logiciel est commercialisé par la société <text:span text:style-name="T4">JetBrains</text:span>.
Cette société est renommée pour ses <text:span text:style-name="T4">IDE</text:span> <text:span text:style-name="T4">Pycharm</text:span> (pour Python),
<text:span text:style-name="T4">PhpStorm</text:span> (pour PHP) et <text:span text:style-name="T4">IntelliJ IDEA</text:span> (pour Java).</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">WebStorm</text:span> est compatible Windows, Linux et macOS.
Ses forces résident dans sa relative légèreté,
une auto-complétion intelligente prenant en compte la résolution
des modules CommonJS et AMD, une intégration des outils populaires
dans l&#8217;écosystème Node (npm, eslint, Mocha, Karma, Bower, etc.)
ainsi qu&#8217;un débogage avancé.</text:p>
<text:p text:style-name="TexteCourant">Le téléchargement de <text:span text:style-name="T4">WebStorm</text:span> inclut une période d&#8217;essai de 30 jours.
La tarification du produit varie selon que vous soyez un individu ou
une entreprise et que le paiement se fasse mensuellement ou annuellement.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Astuce</text:span> Licence open source.</text:h><text:p text:style-name="Remarque">Vous pouvez demander à bénéficier d&#8217;une licence gratuite sous réserve
d&#8217;une preuve de contribution à un ou plusieurs projets open source.</text:p>
<text:p text:style-name="Remarque">Rendez-vous sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://www.jetbrains.com/buy/opensource/" text:visited-style-name="Visited_20_Internet_20_Link">https://www.jetbrains.com/buy/opensource/</text:a></text:span>.</text:p>
<text:bookmark text:name="ref-vs-ide" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Visual Studio IDE</text:h><text:p text:style-name="RemarqueFigureNumero">(chapter-02/images/visual-studio.png)</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">Visual Studio</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://www.visualstudio.com/vs/" text:visited-style-name="Visited_20_Internet_20_Link">https://www.visualstudio.com/vs/</text:a></text:span>)
est un environnement de développement <text:span text:style-name="T4">(IDE)</text:span> édité par <text:span text:style-name="T4">Microsoft</text:span>.
<text:span text:style-name="T4">Visual Studio</text:span> était historiquement dédié au développement applicatif
Windows (Visual Basic, Visual C++).
Ce logiciel gère aujourd&#8217;hui bien plus de langages,
dont C#, HTML, CSS, JavaScript, ASP.Net.
Il est surtout extensible, ce qui permet de lui ajouter le
support de <text:span text:style-name="T4">Python</text:span> ou encore Node, entre autres.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">Visual Studio</text:span> est compatible Windows uniquement.
Il existe en plusieurs éditions dont la <text:span text:style-name="T4">Community Edition</text:span>.
Cette édition est gratuite, elle.</text:p>
<text:p text:style-name="TexteCourant">Afin de bénéficier de l&#8217;intégration complète de l&#8217;écosystème Node,
il est nécessaire d&#8217;installer l&#8217;extension <text:span text:style-name="T4">Node.js Tools for Visual Studio</text:span>
(aussi nommée <text:span text:style-name="T4">NTVS</text:span>).
Elle est gratuite, open source et disponible à cette adresse
<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://www.visualstudio.com/vs/node-js/" text:visited-style-name="Visited_20_Internet_20_Link">https://www.visualstudio.com/vs/node-js/</text:a></text:span>.</text:p>
<text:bookmark text:name="ref-quand_mettre_à_jour_node_js" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Quand mettre à jour Node.js ?</text:h><text:p text:style-name="TexteCourant">Le développement de Node continue pendant que vous lisez ces lignes.
Les sections suivantes présentent les différentes raisons
pour lesquelles de nouvelles versions de Node sont distribuées.</text:p>
<text:p text:style-name="TexteCourant">Quelle que soit la raison, le processus de mise à jour est identique
que pour l'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install"  text:visited-style-name="Visited_20_Internet_20_Link">installation de Node</text:a>&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">si vous aviez utilisé un <text:span text:style-name="T7">installeur</text:span>&#160;: téléchargez et installez-en
la nouvelle version&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">si vous aviez utilisé un <text:span text:style-name="T7">gestionnaire de version</text:span>&#160;: téléchargez la
nouvelle version et faites-en la nouvelle version par défaut&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">si vous aviez <text:span text:style-name="T7">compilé depuis les sources</text:span>&#160;: téléchargez les sources
de la nouvelle version et compilez à nouveau&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">si vous aviez utilisé une <text:span text:style-name="T7">image Docker</text:span>&#160;: téléchargez la nouvelle
version en ayant recourt à la commande <text:span text:style-name="CodeDansTexte">docker pull node:&lt;version&gt;</text:span>.</text:p>
</text:list-item></text:list>
<text:bookmark text:name="ref-mises_à_jour_de_sécurité" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Mises à jour de sécurité</text:h><text:p text:style-name="TexteCourant">Node n&#8217;est pas exempt de bugs.
Il y a une catégorie de bugs qui nécessite d&#8217;être réactif&#160;:
les failles de sécurité.
Ces failles offrent une surface d&#8217;attaque à des personnes
mal intentionnées.
Elles seraient tentées d&#8217;accéder sans permission à des serveurs,
et donc aux données qu&#8217;ils contiennent.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;impact peut être faible pour un site perso à condition de ne pas laisser
trainer de mots de passe ici et là.
Cela peut se révéler beaucoup plus fâcheux pour un site e-commerce
ou une entreprise dont la santé serait mise en jeu.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;équipe de Node livre des <text:span text:style-name="T7">versions corrigeant les failles de sécurité
<text:span text:style-name="T4">aussitôt</text:span> qu&#8217;elle le peut</text:span>.
La faille n&#8217;est d&#8217;ailleurs pas révélée avant que le correctif
soit disponible, par mesure de précaution.</text:p>
<text:p text:style-name="TexteCourant">Que faire si la faille de sécurité affecte la version de Node installée sur&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">notre <text:span text:style-name="T7">ordinateur de développement</text:span>&#160;: c&#8217;est peu risqué - sauf à ce qu&#8217;un module tiers exploite cette faille&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">notre <text:span text:style-name="T7">site web</text:span>&#160;: redéployer aussitôt le site en question avec une version corrigeant la faille.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">Les versions de Node qui corrigent des failles de sécurité ou des bugs connus
n&#8217;ont quasiment aucune chance de casser une application existante.
On les appelle les versions <text:span text:style-name="T4">patch</text:span>.
Une version <text:span text:style-name="T4">patch</text:span> est, par exemple, lorsque la version actuelle
de Node est la <text:span text:style-name="CodeDansTexte">v10.0.0</text:span> et que la nouvelle version est la <text:span text:style-name="CodeDansTexte">v10.0.1</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Plusieurs ressources sont à notre disposition pour se tenir informé·e&#160;:</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>Liste de diffusion (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://groups.google.com/group/nodejs-sec" text:visited-style-name="Visited_20_Internet_20_Link">https://groups.google.com/group/nodejs-sec</text:a></text:span>)</text:span><text:line-break/><text:tab/>Pour recevoir l&#8217;alerte par email (moins d&#8217;un email par mois).</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>Blog Node.js (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://nodejs.org/en/blog/vulnerability/" text:visited-style-name="Visited_20_Internet_20_Link">https://nodejs.org/en/blog/vulnerability/</text:a></text:span>)</text:span><text:line-break/><text:tab/>Une page web à consulter avec un navigateur web.
Les mêmes messages sont relayés sur la <text:span text:style-name="T4">liste de diffusion</text:span>
mentionnée précédemment.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>Fil RSS du blog Node.js (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://nodejs.org/en/feed/vulnerability.xml" text:visited-style-name="Visited_20_Internet_20_Link">https://nodejs.org/en/feed/vulnerability.xml</text:a></text:span>)</text:span><text:line-break/><text:tab/>La même chose que le point précédent mais auquel on peut souscrire
avec un lecteur RSS comme <text:span text:style-name="T4">Feedly</text:span> ou <text:span text:style-name="T4">Mozilla Thunderbird</text:span>.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>Compte Twitter @nodesecurity (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://twitter.com/nodesecurity" text:visited-style-name="Visited_20_Internet_20_Link">https://twitter.com/nodesecurity</text:a></text:span>)</text:span><text:line-break/><text:tab/>Annonce des informations liées à la sécurité générale de Node
et de son écosystème.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Lien</text:span> Groupe de travail Node.js Security</text:h><text:p text:style-name="Remarque">Un groupe de travail (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/nodejs/security-wg" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/nodejs/security-wg</text:a></text:span>) veille à
maintenir et améliorer la sécurité de Node.
Ces personnes se chargent d&#8217;être proactives dans la détection
de failles dans l&#8217;architecture de Node mais aussi dans
l&#8217;intégration de code tiers, comme la brique <text:span text:style-name="T4">OpenSSL</text:span>
ou le module <text:span text:style-name="T4">npm</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-06"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 6</text:a> décrit
comment se maintenir à jour sur les
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-security"  text:visited-style-name="Visited_20_Internet_20_Link">alertes de sécurité</text:a> de nos
applications Node.
Celles-ci peuvent être vulnérables du fait des modules npm dont elles
sont dépendantes&#160;— en plus des vulnérabilités de Node.</text:p>
<text:bookmark text:name="ref-versions_mineures" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Versions mineures</text:h><text:p text:style-name="TexteCourant">Les versions mineures de Node sont des versions qui ajoutent de
nouvelles fonctionnalités à Node.
Ces nouvelles fonctionnalités n&#8217;ont quasiment aucune chance de
casser une application existante.</text:p>
<text:p text:style-name="TexteCourant">Une version mineure est, par exemple, lorsque la version actuelle
de Node est la <text:span text:style-name="CodeDansTexte">v10.0.3</text:span> et que la nouvelle version est la <text:span text:style-name="CodeDansTexte">v10.1.0</text:span>.<text:line-break/>Les versions mineures sortent une petite dizaine de fois par an.
Une migration ne demande pas nécessairement d&#8217;investir beaucoup de temps pour adapter et tester nos applications Node.</text:p>
<text:p text:style-name="TexteCourant">Que faire en cas de sortie d&#8217;une version mineure sur&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">notre <text:span text:style-name="T7">ordinateur de développement</text:span>&#160;: on peut migrer si l&#8217;on veut tester
ou bénéficier des nouvelles fonctionnalités de cette version&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">notre <text:span text:style-name="T7">site web</text:span>&#160;: pas d&#8217;action immédiate requise&#160;;
on peut migrer si l&#8217;on veut bénéficier des nouvelles fonctionnalités
de cette version.</text:p>
</text:list-item></text:list>
<text:bookmark text:name="ref-versions_majeures" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Versions majeures</text:h><text:p text:style-name="TexteCourant">Les versions majeures de Node sont des versions qui ajoutent de
nouvelles fonctionnalités à Node.
En revanche, ces versions peuvent être amenées à changer des comportements
qui casseraient une application existante.</text:p>
<text:p text:style-name="TexteCourant">Une version majeure est, par exemple, lorsque la version actuelle
de Node est la <text:span text:style-name="CodeDansTexte">v10.3.0</text:span> et que la nouvelle version est la <text:span text:style-name="CodeDansTexte">v11.0.0</text:span>.<text:line-break/>Les versions majeures sortent 2 fois par an.
Une migration peut demander d&#8217;investir un certain temps pour adapter
et tester nos applications Node.</text:p>
<text:p text:style-name="TexteCourant">Que faire en cas de sortie d&#8217;une version majeure sur&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">notre <text:span text:style-name="T7">ordinateur de développement</text:span>&#160;: on cherchera à prendre du temps
pour tester nos applications sur cette version
et s&#8217;assurer de leur bon fonctionnement&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">notre <text:span text:style-name="T7">site web</text:span>&#160;: pas d&#8217;action immédiate requise.</text:p>
</text:list-item></text:list>
<text:bookmark text:name="ref-lifecycle" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Comprendre le cycle de vie produit</text:h><text:p text:style-name="TexteCourant">Le développement de la plate-forme Node prend soin de ne pas
aller trop vite ni d&#8217;altérer la stabilité des applications et des
outils en fonctionnement.
Il sort au maximum <text:span text:style-name="T7">deux versions majeures par an</text:span>.
Parmi ces deux versions, <text:span text:style-name="T7">une version majeure est supportée à long terme</text:span> (<text:span text:style-name="T4">Long Term Support</text:span>, <text:span text:style-name="T4">LTS</text:span>).</text:p>
<text:p text:style-name="TexteCourant">La notion de version supportée à long terme (<text:span text:style-name="T4">LTS</text:span>)
a été introduit pour donner un repère de stabilité.
On sait qu&#8217;on peut compter dessus sans se poser de question.
Les versions qui ne sont pas supportées à long terme sont à voir
comme un coup d&#8217;essai, dans l&#8217;anticipation d&#8217;une migration
vers une version suivante, supportée à long terme, elle.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-02/images/schedule.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 15. Calendrier de publication des versions de Node.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Lien</text:span> Calendrier de sorties</text:h><text:p text:style-name="Remarque">Le calendrier des sorties de Node est tenu à jour sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/nodejs/Release" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/nodejs/Release</text:a></text:span>.
Référez-vous à ce calendrier pour des informations à jour sur
les prochaines versions et l&#8217;arrêt de maintenance d&#8217;anciennes versions.</text:p>
<text:p text:style-name="TexteCourant">Si on récapitule&#160;:</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>Les versions <text:span text:style-name="T7">impaires</text:span> (v5, v7, etc.)</text:span></text:p><text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">sont développées pendant <text:span text:style-name="T4">neuf mois</text:span></text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">ne sont pas maintenues au-delà</text:p>
</text:list-item></text:list><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>Les versions <text:span text:style-name="T7">paires</text:span> (<text:span text:style-name="T4">LTS</text:span>, v10, etc.)</text:span></text:p><text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">sont basées sur la version <text:span text:style-name="T4">impaire</text:span> précédente</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">sont développées pendant <text:span text:style-name="T4">six mois</text:span></text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">sont supportées <text:span text:style-name="T4">LTS</text:span> pendant <text:span text:style-name="T4">dix-huit mois</text:span></text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">basculent en maintenance pendant <text:span text:style-name="T4">douze mois</text:span> supplémentaires</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">ne sont pas maintenues au-delà</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">Les patchs de sécurité ne concernent que les versions en <text:span text:style-name="T4">développement</text:span>, <text:span text:style-name="T4">supportées</text:span> ou en <text:span text:style-name="T4">maintenance</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Cette planification garantit une plate-forme et un ensemble de
fonctionnalités stables de manière prédictible,
à la fois pour les projets reposant sur Node mais aussi
pour l&#8217;écosystème de contributeurs de modules <text:span text:style-name="T4">npm</text:span>.</text:p>
<text:bookmark text:name="ref-conclusion_2" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Conclusion</text:h><text:p text:style-name="TexteCourant">Nous sommes désormais en mesure d&#8217;installer et mettre à jour Node
sur notre ordinateur.
Nous savons aussi avec quel(s) logiciel(s) développer nos applications.
Nous savons aussi où nous informer pour savoir quand faire nos mises à jour,
pour corriger des problèmes de sécurité et bénéficier des nouvelles
fonctionnalités du langage.</text:p>
<text:p text:style-name="TexteCourant">Le prochain chapitre nous amènera à reprendre les bases du
langage JavaScript en jouant avec le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-shell"  text:visited-style-name="Visited_20_Internet_20_Link">terminal Node</text:a>.
On découvrira également les différences entre JavaScript, ECMAScript et Node.</text:p>
<text:bookmark text:name="ref-chapter-03" /><text:p text:style-name="ChapitreNumero">3</text:p><text:h text:style-name="ChapitreTitre" text:outline-level="1">Jouer avec JavaScript</text:h><text:p text:style-name="TexteCourant">Programmer une application Node c&#8217;est aussi
l&#8217;occasion d&#8217;apprendre JavaScript.
Ou de se mettre à jour ou de redécouvrir le langage.</text:p>
<text:p text:style-name="TexteCourant">Ce chapitre explique ce qu&#8217;il faut pour
comprendre comment fonctionne JavaScript.
Nous utiliserons une approche par l&#8217;exemple.</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">Qu&#8217;est-ce que JavaScript, pour de vrai&#160;?</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Comprendre l&#8217;évolution de la spécification ECMAScript</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Jongler avec les différentes structures du langage</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">En savoir plus sur des éléments avancés du langage</text:p>
</text:list-item></text:list>
<text:p text:style-name="ChapitreIntroduction"><text:p text:style-name="TexteCourant">JavaScript est souvent raillé.
Parce que ce n&#8217;est pas un vrai langage.
Parce qu&#8217;il a été créé en 6 jours.
Parce qu&#8217;il n&#8217;est pas orienté objet.</text:p>
<text:p text:style-name="TexteCourant">JavaScript est un langage expressif qui a énormément gagné en maturité
depuis les années 2010.
Il se révèle parfaitement opérationnel dès lors que l&#8217;on s&#8217;intéresse
à ses fonctionnalités, sans faire de hors-piste.</text:p>
<text:p text:style-name="TexteCourant">Les types de données et les méthodes de manipulations qu&#8217;elles nous offrent
permettent d&#8217;écrire un code plus simple, à lire et à produire.
Certaines structures de données nous aident à mieux organiser nos données
ainsi qu&#8217;à mieux les traiter.</text:p></text:p>
<text:bookmark text:name="ref-definition" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Qu&#8217;est-ce que JavaScript ?</text:h><text:p text:style-name="TexteCourant">Au lieu d&#8217;écrire plusieurs paragraphes expliquant ce qu&#8217;est et
ce que n&#8217;est <text:span text:style-name="T4">pas</text:span> JavaScript, regardons ensemble
un bloc de code contenant plusieurs <text:span text:style-name="T4">expressions</text:span> écrites
en JavaScript&#160;:</text:p>
<text:p text:style-name="CodeTitre">definition.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">// On concatène 2 chaînes de caractères<text:s text:c="11"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">const baseUrl = 'https://oncletom.io/node.js';</text:p><text:p text:style-name="Code">const filePath = `${baseUrl}/package.json`;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">// On affiche un message au clic sur la page<text:s text:c="6"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">const docBody = document.querySelector('body');</text:p><text:p text:style-name="Code">docBody.addEventListener('click', () =&gt; alert('Hello World!'));</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">// Informations contenues dans un fichier distant <text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">fetch(filePath)</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.then(response =&gt; response.json())</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.then(pkg =&gt; console.log(`${pkg.name}@${pkg.version}`));</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">// On liste le contenu du répertoire utilisateur<text:s text:c="2"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code">const {homedir} = require('os');</text:p><text:p text:style-name="Code">const fs = require('fs');</text:p><text:p text:style-name="Code">fs.readdir(homedir(), (err, files) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>err ? console.error(err) : console.log(files);</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Code JavaScript standard.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Code JavaScript pour manipuler la DOM API (documents web).<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Code JavaScript pour manipuler des Web API (fonctionnalités des navigateurs web).<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Code JavaScript pour manipuler Node.js.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Ce que l&#8217;on peut comprendre de l&#8217;exemple de code ci-dessus,
c&#8217;est que JavaScript permet de s&#8217;interfacer avec plusieurs choses&#160;:</text:p>
<text:p text:style-name="ListeANumero">1.<text:tab/>des documents web représentés par le Document Object Model (DOM)&#160;;</text:p><text:p text:style-name="ListeANumero">2.<text:tab/>des navigateurs web au travers des Web API&#160;;</text:p><text:p text:style-name="ListeANumero">3.<text:tab/>des systèmes informatiques avec Node.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">ECMAScript</text:span> correspond à l&#8217;ensemble des expressions du langage.
Ces expressions sont étendues par des interfaces de programmation (<text:span text:style-name="T4">API</text:span>).
Ces interfaces nous permettent de communiquer avec les documents web, les navigateurs web ou les systèmes informatiques.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Histoire</text:span> À propos de JavaScript</text:h><text:p text:style-name="Remarque">JavaScript a été inventé en 1995 par Brendan Eich alors qu&#8217;il était employé de la société <text:span text:style-name="T4">Netscape Communications</text:span>.
Microsoft lui emboîte le pas en incluant JavaScript dans son logiciel Internet Explorer, alors en version 3.
Pour des raisons de droits de marque, il y est dénommé <text:span text:style-name="T4">JScript</text:span>.</text:p>
<text:p text:style-name="Remarque">La spécification est ensuite validée par l&#8217;organisme <text:span text:style-name="T4">Ecma International</text:span> en juin 1997 sous le nom d'<text:span text:style-name="T4">ECMAScript</text:span>, standard ECMA-262.</text:p>
<text:p text:style-name="Remarque">L&#8217;utilisation du terme <text:span text:style-name="T4">JavaScript</text:span> est resté dans le vocabulaire courant. Mais c&#8217;est bien d'<text:span text:style-name="T4">ECMAScript</text:span> dont on parle, vraiment.</text:p>
<text:p text:style-name="Remarque">Adobe Flash utilise un dérivé d&#8217;ECMAScript&#160;: ActionScript.
Bien des machines virtuelles sont capables d&#8217;interpréter partiellement ou
intégralement ECMAScript&#160;: Rhino, Konq, BESEN en Object Pascal ou encore
Esprima qui est elle-même écrite en ECMAScript.</text:p>
<text:p text:style-name="TexteCourant">Si d&#8217;autres langages de programmation se cantonnent
soit au <text:span text:style-name="T4">côté client</text:span> (VBScript, ActionScript, Elm)
soit au <text:span text:style-name="T4">côté serveur</text:span> (Ruby, Python, Haskell),
JavaScript a débuté <text:span text:style-name="T4">côté client</text:span> pour s&#8217;étendre au <text:span text:style-name="T4">côté serveur</text:span>.
Ce à quoi se réfère l&#8217;expression anglophone <text:span text:style-name="T4">full stack</text:span>.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-03/images/javascript.svg)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 16. Écosystème des technologies JavaScript.</text:p>
<text:p text:style-name="TexteCourant">Le langage <text:span text:style-name="T4">ECMAScript</text:span>&#160;— appelons-le ainsi à partir de maintenant&#160;—
a évolué au fil du temps.
Il s&#8217;est enrichi au fur et à mesure de nouvelles fonctionnalités,
de sucres syntaxiques (raccourcis d&#8217;écriture)
et de rigueur aussi, pour corriger des défauts de <text:span text:style-name="T4">design</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Le comité de travail <text:span text:style-name="T4">TC39</text:span> (<text:span text:style-name="T4">Technical Committee</text:span>,
<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/tc39" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/tc39</text:a></text:span>) est en charge de l&#8217;évolution
du langage, standardisé sous le doux sobriquet de <text:span text:style-name="T4">standard ECMA-262</text:span>.
À charge ensuite aux différents implémenteurs de suivre les changements
et de les incorporer dans leurs machines virtuelles.</text:p>
<text:p text:style-name="TexteCourant">Node se base sur la machine virtuelle <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-v8"  text:visited-style-name="Visited_20_Internet_20_Link">V8 de Google</text:a> pour interpréter les expressions ECMAScript.
De fait, Node comprend les mêmes expressions ECMAScript que <text:span text:style-name="T4">V8</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Nous verrons un peu plus tard dans ce chapitre comment suivre la
compatibilité de Node avec ECMAScript.
Intéressons-nous à l&#8217;évolution du langage, et ce que ça nous apporte.</text:p>
<text:bookmark text:name="ref-ecmascript_5_aka_es5" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">ECMAScript 5 (aka <text:span text:style-name="T4">ES5</text:span>)</text:h><text:p text:style-name="TexteCourant">ECMAScript a été standardisé dans sa version 5 en décembre 2009.
La révision 5.1 de juin 2011 est une correction mineure de la spécification.</text:p>
<text:p text:style-name="TexteCourant">Il s&#8217;agit d&#8217;une évolution majeure dans l&#8217;histoire du langage.
La précédente version&#160;— ECMAScript 3&#160;— était âgée de <text:span text:style-name="T7">dix ans</text:span>.</text:p>
<text:p text:style-name="TexteCourant">ECMAScript 5 limite drastiquement certains effets indésirables du langage
grâce au <text:span text:style-name="T4">mode strict</text:span>.
De nouvelles méthodes de manipulation de tableaux et d&#8217;objets voient le jour
ainsi qu&#8217;un support natif du format de données <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-json"  text:visited-style-name="Visited_20_Internet_20_Link">JSON</text:a>.</text:p>
<text:p text:style-name="TexteCourant">La standardisation de cette version d&#8217;ECMAScript a contribué à redorer
l&#8217;image du langage mais aussi à faire émerger de nouvelles pratiques
de programmation.</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>Table de compatibilité</text:span><text:line-break/><text:tab/><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://kangax.github.io/compat-table/es5/" text:visited-style-name="Visited_20_Internet_20_Link">https://kangax.github.io/compat-table/es5/</text:a></text:span></text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>Spécification</text:span><text:line-break/><text:tab/><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://www.ecma-international.org/ecma-262/5.1/" text:visited-style-name="Visited_20_Internet_20_Link">https://www.ecma-international.org/ecma-262/5.1/</text:a></text:span></text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-03/images/compat-table.png)</text:p>
<text:bookmark text:name="ref-ecmascript_2015_aka_es6_puis_es2015" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">ECMAScript 2015 (aka <text:span text:style-name="T4">ES6</text:span> puis <text:span text:style-name="T4">ES2015</text:span>)</text:h><text:p text:style-name="TexteCourant">La spécification <text:span text:style-name="T7">ECMAScript 2015</text:span> (<text:span text:style-name="T4">ES2015</text:span>) a été publiée en juin 2015.
Elle succède à <text:span text:style-name="T7">ECMAScript 5</text:span> après 6 années de gestation.<text:line-break/>Cette version a successivement été appelée <text:span text:style-name="T4">ECMAScript Harmony</text:span>, <text:span text:style-name="T4">ECMAScript 6</text:span>, puis <text:span text:style-name="T4">ECMAScript 2015</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Le processus de standardisation a mis 6 années pour aboutir,
mais cette fois-ci, les choses se sont déroulées différemment.<text:line-break/>De nombreuses idées ont été piochées dans le langage
<text:span text:style-name="T4">CoffeeScript</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://coffeescript.org" text:visited-style-name="Visited_20_Internet_20_Link">http://coffeescript.org</text:a></text:span>).
Et surtout, un nouveau type d&#8217;outillage s&#8217;est formé pour commencer
à utiliser ce JavaScript du futur avec les compilateurs
<text:span text:style-name="T4">traceur</text:span> de Google dès 2011 (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/google/traceur-compiler" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/google/traceur-compiler</text:a></text:span>)
puis le projet indépendant <text:span text:style-name="T4">6to5</text:span> dès 2014.
<text:span text:style-name="T4">6to5</text:span> a été renommé en <text:span text:style-name="T4">babel</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://babeljs.io" text:visited-style-name="Visited_20_Internet_20_Link">https://babeljs.io</text:a></text:span>)
et son instigateur a par la suite été embauché par Facebook.</text:p>
<text:p text:style-name="TexteCourant">La pratique de compiler du JavaScript en JavaScript était en rupture
avec ce qui se faisait précédemment&#160;:
attendre qu&#8217;une fonctionnalité soit adoptée par un dénominateur commun
de navigateurs web pour s&#8217;en servir.
Cette fois-ci, on pouvait se servir du futur, dès aujourd&#8217;hui.</text:p>
<text:p text:style-name="TexteCourant">De fait, il n&#8217;y a pas eu à attendre 6 ans et l&#8217;implémentation
par les différents implémenteurs pour profiter de ce
qu&#8217;il y avait de meilleur.</text:p>
<text:p text:style-name="TexteCourant">Le prix à payer&#160;? Un ticket d&#8217;entrée plus élevé lié à la maitrise
de l&#8217;outillage associé.</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>Table de compatibilité (navigateurs web)</text:span><text:line-break/><text:tab/><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://kangax.github.io/compat-table/es6/" text:visited-style-name="Visited_20_Internet_20_Link">https://kangax.github.io/compat-table/es6/</text:a></text:span></text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>Table de compatibilité (Node.js)</text:span><text:line-break/><text:tab/><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://node.green/" text:visited-style-name="Visited_20_Internet_20_Link">https://node.green/</text:a></text:span></text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>Spécification</text:span><text:line-break/><text:tab/><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://www.ecma-international.org/ecma-262/6.0/" text:visited-style-name="Visited_20_Internet_20_Link">https://www.ecma-international.org/ecma-262/6.0/</text:a></text:span></text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-03/images/node-green.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 17. Illustration de l&#8217;évolution de la compatibilité ECMAScript au fil des versions de Node.</text:p>
<text:bookmark text:name="ref-ecmascript_2016_etc_aka_es2016" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">ECMAScript 2016, etc. (aka <text:span text:style-name="T4">ES2016</text:span>)</text:h><text:p text:style-name="TexteCourant">Depuis la sortie d'<text:span text:style-name="T4">ECMAScript 2015</text:span>, l&#8217;intention est de publier une
nouvelle spécification par an.
L&#8217;envie était de travailler fonctionnalité par fonctionnalité
et de ne pas attendre trop longtemps avant de les ratifier.
En conséquent, les nouvelles versions annuelles sont beaucoup plus
incrémentales.
Elles se font moins attendre et contiennent moins de grands bouleversements.</text:p>
<text:p text:style-name="TexteCourant">Les fonctionnalités en cours de préparation sont listées
dans ce dépôt GitHub&#160;: <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/tc39/proposals" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/tc39/proposals</text:a></text:span>.
Le dernier stade avant la validation d&#8217;une fonctionnalité est le <text:span text:style-name="T4">stage 3</text:span>.
Dès qu&#8217;une fonctionnalité passe en <text:span text:style-name="T4">stage 4</text:span>, elle est incluse
dans la prochaine version d&#8217;ECMAScript
—&#160;_ECMAScript 2018_ une fois l&#8217;année 2018 terminée.</text:p>
<text:p text:style-name="TexteCourant">Les fonctionnalités approuvées sont consignées dans ce document&#160;:
<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/tc39/proposals/blob/master/finished-proposals.md" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/tc39/proposals/blob/master/finished-proposals.md</text:a></text:span>.</text:p>
<text:bookmark text:name="ref-primitives" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Éléments de base du langage</text:h><text:p text:style-name="TexteCourant">ECMAScript définit plusieurs <text:span text:style-name="T4">types</text:span> de données.
Cette section s&#8217;intéresse à décrire les notions nécessaires
pour s&#8217;approprier le reste des exemples de l&#8217;ouvrage.
On apprendra notamment à créer des variables, à naviguer dans
des listes d&#8217;éléments et à faire la différence
entre un objet et une fonction.</text:p>
<text:p text:style-name="TexteCourant">Mais qu&#8217;entend-t-on par <text:span text:style-name="T4">type de données</text:span>&#160;?
Faisons-nous notre propre idée avec une suite d&#8217;exemples.
Ces notions seront développées dans le reste du chapitre,
pour mieux comprendre ce que l&#8217;on peut en faire.</text:p>
<text:p text:style-name="CodeTitre">base/string.js</text:p><text:p text:style-name="Code">'Node.js'</text:p>
<text:p text:style-name="TexteCourant">Une valeur entourée de guillemets est considérée
par l&#8217;interpréteur ECMAScript comme une <text:span text:style-name="T7">chaîne de caractères</text:span>, du texte.</text:p>
<text:p text:style-name="TexteCourant">Ces guillemets peuvent être des guillemets simples (<text:span text:style-name="CodeDansTexte">'</text:span>),
des guillemets doubles (<text:span text:style-name="CodeDansTexte">"</text:span>) ou des guillemets obliques (<text:span text:style-name="CodeDansTexte">`</text:span>).</text:p>
<text:p text:style-name="TexteCourant">On peut effectuer des opérations d&#8217;identification ou d&#8217;assemblage avec une
valeur de <text:span text:style-name="T4">type chaîne de caractères</text:span>.</text:p>
<text:p text:style-name="CodeTitre">base/number.js</text:p><text:p text:style-name="Code">3</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">12.3</text:p>
<text:p text:style-name="TexteCourant">ECMAScript considère les entiers (<text:span text:style-name="CodeDansTexte">3</text:span> dans cet exemple)
et les nombres flottants (<text:span text:style-name="CodeDansTexte">12.3</text:span> dans cet exemple) comme des nombres.
Il ne fait <text:span text:style-name="T4">pas</text:span> de distinction entre les deux.</text:p>
<text:p text:style-name="TexteCourant">On peut effectuer des <text:span text:style-name="T7">opérations mathématiques</text:span> entre plusieurs
valeurs de <text:span text:style-name="T4">type nombre</text:span>.</text:p>
<text:p text:style-name="CodeTitre">base/boolean.js</text:p><text:p text:style-name="Code">true</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">false</text:p>
<text:p text:style-name="TexteCourant">ECMAScript considère deux valeurs pour signifier <text:span text:style-name="T4">vrai</text:span> ou <text:span text:style-name="T4">faux</text:span>,
respectivement <text:span text:style-name="CodeDansTexte">true</text:span> et <text:span text:style-name="CodeDansTexte">false</text:span>.</text:p>
<text:p text:style-name="TexteCourant">On peut effectuer des <text:span text:style-name="T7">opérations logiques</text:span> avec une
valeur de <text:span text:style-name="T4">type booléen</text:span>.</text:p>
<text:p text:style-name="CodeTitre">base/null.js</text:p><text:p text:style-name="Code">null</text:p>
<text:p text:style-name="TexteCourant">On utilise <text:span text:style-name="CodeDansTexte">null</text:span> pour signifier l'<text:span text:style-name="T7">absence de valeur</text:span>.</text:p>
<text:p text:style-name="CodeTitre">base/undefined.js</text:p><text:p text:style-name="Code">undefined</text:p>
<text:p text:style-name="TexteCourant">La valeur <text:span text:style-name="CodeDansTexte">undefined</text:span> est utilisée pour signifier
qu&#8217;une <text:span text:style-name="T7">valeur est inconnue</text:span>.
Rares sont les cas où on choisira ce type de données par nous-même.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> primitives</text:h>
Rendez-vous sur <text:span text:style-name="T4">MDN web docs</text:span> pour en savoir plus sur primitives.<text:line-break/>
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Data_structures" text:visited-style-name="Visited_20_Internet_20_Link">https://developer.mozilla.org/docs/fr/Web/JavaScript/Data_structures</text:a>

<text:p text:style-name="TexteCourant">Il existe trois autres types de données qui se basent sur ces types
dits <text:span text:style-name="T4">primitifs</text:span>.
Ces autres types sont destinés à ranger, classer et
à exprimer de nouvelles valeurs en fonction d&#8217;autres.</text:p>
<text:p text:style-name="CodeTitre">base/array.js</text:p><text:p text:style-name="Code">[2, 'C', 2, 'G']</text:p>
<text:p text:style-name="TexteCourant">Un tableau se déclare en encadrant une suite de valeurs entre crochets
(<text:span text:style-name="CodeDansTexte">[</text:span> et <text:span text:style-name="CodeDansTexte">]</text:span>).
Un tableau peut contenir n&#8217;importe quel type de valeurs,
et autant que nécessaire.
L&#8217;ordre des valeurs a généralement une importance.</text:p>
<text:p text:style-name="TexteCourant">On peut effectuer des <text:span text:style-name="T7">opérations de tri et de sélection</text:span> avec un
<text:span text:style-name="T4">tableau de valeurs</text:span>.</text:p>
<text:p text:style-name="CodeTitre">base/object.js</text:p><text:p text:style-name="Code">{</text:p><text:p text:style-name="Code"><text:s text:c="2"/>title: 'Node.js',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>isbn: '978-2212139938',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>published: true</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant">Un objet se déclare en encadrant une suite de <text:span text:style-name="T4">paires de valeurs</text:span>
entre accolade (<text:span text:style-name="CodeDansTexte">{</text:span> et <text:span text:style-name="CodeDansTexte">}</text:span>).
Une <text:span text:style-name="T4">clé</text:span> désigne une <text:span text:style-name="T4">valeur</text:span>, qui peut être de n&#8217;importe quel type.
Un objet fonctionne comme un <text:span text:style-name="T4">dictionnaire</text:span>&#160;: on associe une valeur
à un intitulé, un label.
L&#8217;ordre des valeurs n&#8217;a généralement pas d&#8217;importance.</text:p>
<text:p text:style-name="TexteCourant">On peut effectuer des <text:span text:style-name="T7">opérations de sélection</text:span> avec un
<text:span text:style-name="T4">objet de valeurs</text:span>.</text:p>
<text:p text:style-name="CodeTitre">base/function.js</text:p><text:p text:style-name="Code">function double(value) {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>return value * 2;</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">double(3);</text:p>
<text:p text:style-name="TexteCourant">Une fonction accepte des <text:span text:style-name="T4">arguments</text:span>, de n&#8217;importe quel type et
autant que nécessaire.
Une fonction peut être <text:span text:style-name="T4">déclarée</text:span> et être <text:span text:style-name="T4">exécutée</text:span> (dernière ligne de l&#8217;exemple précédent).</text:p>
<text:p text:style-name="TexteCourant">Une fonction <text:span text:style-name="T4">retourne</text:span> un résultat explicite avec le
mot-clé <text:span text:style-name="CodeDansTexte">return</text:span>.
Dans le cas contraire, ECMAScript considère
que la valeur retournée équivaut implicitement à <text:span text:style-name="CodeDansTexte">undefined</text:span>.</text:p>
<text:p text:style-name="TexteCourant">On peut effectuer des <text:span text:style-name="T7">opérations de transformation</text:span> avec une fonction.</text:p>
<text:p text:style-name="TexteCourant">Les fonctions sont destinées à être <text:span text:style-name="T4">appelées</text:span>, pour effectuer
des traitements répétitifs.
Dès que l&#8217;on sent que l&#8217;on doit écrire deux fois la même chose,
on l&#8217;écrit dans une fonction et on l&#8217;appelle deux fois.</text:p>
<text:bookmark text:name="ref-les_variables" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Les variables</text:h><text:p text:style-name="TexteCourant">Les <text:span text:style-name="T7">variables</text:span> servent à ranger des valeurs.
On peut ainsi les réutiliser plus tard, les transmettre et prendre
des décisions en fonction de ce qu&#8217;elles contiennent.</text:p>
<text:p text:style-name="TexteCourant">Les variables nous aident à <text:span text:style-name="T4">donner du sens</text:span> à notre code,
à le rendre intelligible par d&#8217;autres personnes
ainsi qu&#8217;à nommer des choses comme on le ferait dans notre quotidien.</text:p>
<text:p text:style-name="CodeTitre">base/variables.js</text:p><text:p text:style-name="Code">const book = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>title: 'Node.js',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>isbn: '978-2212139938',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>published: true</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const base_price = 13;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">function double(value) {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>return value * 2;</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">book.price = double(base_price);</text:p>
<text:p text:style-name="TexteCourant">À votre avis, combien vaut le prix du livre calculé dans
l&#8217;exemple précédent&#160;?
Il suffirait de suivre le chemin que prend la nouvelle valeur
rangée dans la clé <text:span text:style-name="CodeDansTexte">price</text:span> de l&#8217;objet <text:span text:style-name="CodeDansTexte">book</text:span>, calculée par la fonction
<text:span text:style-name="CodeDansTexte">double</text:span> à qui on passe la valeur contenue dans la variable <text:span text:style-name="CodeDansTexte">base_price</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Le mot-clé <text:span text:style-name="CodeDansTexte">const</text:span> nous a servi à <text:span text:style-name="T4">déclarer</text:span> des variables.
On ne peut étiqueter une variable avec le même nom qu&#8217;une seule fois.
L&#8217;exemple suivant générera une erreur si on déclare deux fois la même variable avec <text:span text:style-name="CodeDansTexte">const</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">variables/const.js</text:p><text:p text:style-name="Code">const base_price = 13;</text:p><text:p text:style-name="Code">const base_price = 14;</text:p>
<text:bookmark text:name="ref-les_instructions" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Les instructions</text:h><text:p text:style-name="TexteCourant">Des <text:span text:style-name="T4">instructions</text:span> nous servent à suivre, éviter ou répéter
des chemins dans notre code.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;instruction <text:span text:style-name="CodeDansTexte">if</text:span> nous aide à exécuter du code qui remplit une condition.
Cette condition peut être une <text:span text:style-name="T4">valeur</text:span> ou une <text:span text:style-name="T4">expression</text:span>.
Cette expression est interprétée pour savoir à quel <text:span text:style-name="T4">booléen</text:span>
elle correspond.</text:p>
<text:p text:style-name="CodeTitre">instructions/if.js</text:p><text:p text:style-name="Code">const book = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>title: 'Node.js',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>published: true</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">if (book.published &amp;&amp; book.title) {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log('Le livre est publié (et a un titre)');</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple précédent vérifie que les deux conditions sont remplies
(opérateur <text:span text:style-name="CodeDansTexte">&amp;&amp;</text:span>) pour afficher un message en conséquent.</text:p>
<text:p text:style-name="TexteCourant">On notera au passage que <text:span text:style-name="CodeDansTexte">book.title</text:span> n&#8217;est pas un booléen.
ECMAScript regarde dans ce cas que la chaîne de caractères
contient <text:span text:style-name="T4">au moins 1 caractère</text:span>.
On expliquera ce comportement plus en détail dans la section
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-boolean"  text:visited-style-name="Visited_20_Internet_20_Link">jongler avec des valeurs vraies ou fausses</text:a>.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;instruction <text:span text:style-name="CodeDansTexte">if</text:span> peut être complétée avec l&#8217;instruction <text:span text:style-name="CodeDansTexte">else</text:span>
pour exécuter du code qui répondrait au cas contraire.
On peut imbriquer plusieurs <text:span text:style-name="CodeDansTexte">else if</text:span> à la suite.</text:p>
<text:p text:style-name="CodeTitre">instructions/else-if.js</text:p><text:p text:style-name="Code">const book = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>title: 'Node.js',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>published: true</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">if (book.published &amp;&amp; book.title) {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log('Le livre est publié avec un titre.');</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code">else if (book.published) {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log('Le livre est publié (sans titre).');</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code">else {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log('Le livre n\'est pas publié.');</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant">Notre exemple n&#8217;empruntera qu&#8217;un seul des chemins, mais on peut
constater qu&#8217;on pourrait en emprunter un autre
en modifiant la valeur des clés <text:span text:style-name="CodeDansTexte">title</text:span> et <text:span text:style-name="CodeDansTexte">published</text:span>.</text:p>
<text:bookmark text:name="ref-scope" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">La portée (<text:span text:style-name="T4">scope</text:span>)</text:h><text:p text:style-name="TexteCourant">La <text:span text:style-name="T4">portée</text:span> est un concept très présent dans ECMAScript.
On y fait souvent référence en parlant de <text:span text:style-name="T4">variable globale</text:span> et
de <text:span text:style-name="T4">variable locale</text:span>.
On peut y sentir une notion de frontière d&#8217;accès à la valeur
d&#8217;une variable.</text:p>
<text:p text:style-name="CodeTitre">scopes/local.js</text:p><text:p text:style-name="Code">function secret(){</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const mot = 'devinette';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>return 'None shall pass';</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(secret());</text:p><text:p text:style-name="Code">console.log(mot);</text:p>
<text:p text:style-name="TexteCourant">Ce que nous dit l&#8217;exemple précédent,
c&#8217;est que la variable <text:span text:style-name="CodeDansTexte">secret</text:span> de type fonction a une portée globale
au script en question.
Qu&#8217;en-est-il de la variable <text:span text:style-name="CodeDansTexte">mot</text:span> encapsulée dans cette fonction&#160;?</text:p>
<text:p text:style-name="TexteCourant">On pourrait le résumer ainsi&#160;:
la variable <text:span text:style-name="CodeDansTexte">mot</text:span> est définie dans la fonction <text:span text:style-name="CodeDansTexte">secret</text:span>
et n&#8217;est donc pas accessible en dehors de la portée de la fonction.
À l&#8217;inverse, ce qui est défini <text:span text:style-name="T4">en dehors</text:span> d&#8217;une fonction
est accessible <text:span text:style-name="T4">à l&#8217;intérieur</text:span> d&#8217;une fonction.</text:p>
<text:p text:style-name="TexteCourant">La portée de la variable <text:span text:style-name="CodeDansTexte">mot</text:span> est locale à la fonction <text:span text:style-name="CodeDansTexte">secret</text:span>.</text:p>
<text:p text:style-name="CodeTitre">scopes/global.js</text:p><text:p text:style-name="Code">const year = 2018;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">function next(value) {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>return value + 1;</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">function nextYear() {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>return next(year);</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(year);</text:p><text:p text:style-name="Code">console.log(nextYear());</text:p><text:p text:style-name="Code">console.log(value);</text:p>
<text:p text:style-name="TexteCourant">Dans le précédent exemple, nous illustrons la portée globale de la variable
<text:span text:style-name="CodeDansTexte">year</text:span>.
Elle est définie un cran au-dessus des fonctions <text:span text:style-name="CodeDansTexte">next</text:span> et <text:span text:style-name="CodeDansTexte">nextYear</text:span>.
On peut y accéder, comme en atteste le code de la fonction <text:span text:style-name="CodeDansTexte">nextYear</text:span>.</text:p>
<text:p text:style-name="TexteCourant">À l&#8217;inverse, la variable <text:span text:style-name="CodeDansTexte">value</text:span> a une portée locale
—&#160;elle est passée en paramètre de la fonction <text:span text:style-name="CodeDansTexte">next</text:span>.
ECMAScript génèrera une erreur si on tente
d&#8217;y accéder en dehors de sa portée.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T7">La portée est délimitée par les fonctions</text:span>.
En l&#8217;absence de fonction, la portée maximale est celle du module (script) dans lequel la variable est déclarée.</text:p>
<text:p text:style-name="TexteCourant">Il existe un deuxième type de portée&#160;: la <text:span text:style-name="T4">portée lexicale</text:span>.
L&#8217;exemple suivant servira à illustrer la nature de sa délimitation.</text:p>
<text:p text:style-name="CodeTitre">scopes/lexical.js</text:p><text:p text:style-name="Code">const book = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>title: 'Node.js',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>published: true</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">if (book.published) {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const price = 32;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(`Le livre ${book.title} coûte ${price}€.`);</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(`Le livre ${book.title} coûte ${price}€.`);</text:p>
<text:p text:style-name="TexteCourant">Le mot-clé <text:span text:style-name="CodeDansTexte">const</text:span> crée une variable certes,
mais une variable dont la portée est <text:span text:style-name="T4">lexicale</text:span>.
<text:span text:style-name="T7">La portée lexicale est délimitée par le bloc d&#8217;instructions</text:span>
dans lequel la variable est déclarée.</text:p>
<text:p text:style-name="TexteCourant">Ainsi la variable <text:span text:style-name="CodeDansTexte">price</text:span> n&#8217;existe que dans le cadre du bloc <text:span text:style-name="CodeDansTexte">if</text:span>.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;utilisation de la portée lexicale sert déclarer
des variables sans <text:span text:style-name="T4">polluer</text:span> le reste du script,
pour que son existence soit oubliée aussitôt le bloc exécuté.</text:p>
<text:bookmark text:name="ref-string" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Jongler avec du texte (chaînes de caractères)</text:h><text:p text:style-name="TexteCourant">Il est commun d&#8217;avoir à travailler avec des chaînes de caractères.
Elles servent à stocker des URL, des titres, des identifiants,
des tweets, des messages et des textes longs, entre autres.</text:p>
<text:p text:style-name="CodeTitre">string/base.js</text:p><text:p text:style-name="Code">// Utilisation de guillemets simples</text:p><text:p text:style-name="Code">console.log('L\'après-midi\nLe soir');<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">// Utilisation de guillemets doubles</text:p><text:p text:style-name="Code">console.log("L'après-midi\nLe soir");<text:s text:c="3"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">// Utilisation de guillemets obliques</text:p><text:p text:style-name="Code">console.log(`L'après-midi</text:p><text:p text:style-name="Code">Le soir`);<text:s text:c="30"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Utilisation de guillemets simples (<text:span text:style-name="CodeDansTexte">\n</text:span> permet de revenir à la ligne).<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Utilisation de guillemets doubles&#160;— évite d&#8217;échapper le guillemet simple.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Utilisation de guillemets obliques&#160;— autorise le multi-ligne.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">On peut utiliser n&#8217;importe quel caractère&#160;: lettres, chiffres,
caractères accentués, émojis et même des sinogrammes ou des kanjis.
Autrement dit, il n&#8217;y a pas de limite.
Les environnements d&#8217;exécution se représentent les caractères au format
UTF-16 (tables de stockage Unicode sur 16 bits de données).</text:p>
<text:p text:style-name="TexteCourant">Il est fréquent d&#8217;avoir à <text:span text:style-name="T4">concaténer</text:span> des chaînes de caractères,
ou à les composer à partir d&#8217;une autre variable.</text:p>
<text:p text:style-name="CodeTitre">string/concat.js</text:p><text:p text:style-name="Code">const mot = 'pot';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(`${mot} de colle`);</text:p><text:p text:style-name="Code">console.log(`${mot} de fleur`);</text:p>
<text:p text:style-name="TexteCourant">Toute chaîne de caractères offre un ensemble
d'<text:span text:style-name="T4">attributs</text:span> (<text:span text:style-name="CodeDansTexte">.quelque-chose</text:span>)
et de <text:span text:style-name="T4">méthodes</text:span> (<text:span text:style-name="CodeDansTexte">.autre-chose()</text:span>) pour en savoir plus
sur la chaine mais aussi pour la transformer.</text:p>
<text:p text:style-name="TexteCourant">Par exemple, on peut connaître la longueur d&#8217;une chaîne via son attribut <text:span text:style-name="CodeDansTexte">length</text:span>.</text:p>
<text:p text:style-name="CodeTitre">string/length.js</text:p><text:p text:style-name="Code">console.log('I ♥ JavaScript'.length); <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(''.length);<text:s text:c="15"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">14</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">0</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">On peut aussi accéder à un caractère spécifique en utilisant
la chaîne comme un tableau, ou en utilisant une méthode dédiée&#160;:</text:p>
<text:p text:style-name="CodeTitre">string/char-at.js</text:p><text:p text:style-name="Code">const mot = 'Node.js';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(mot[0]);<text:s text:c="8"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(mot.charAt(1)); <text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">N</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">o</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Deux autres fonctions transforment
un texte en lettres minuscules et majuscules&#160;:</text:p>
<text:p text:style-name="CodeTitre">string/lower-upper-case.js</text:p><text:p text:style-name="Code">const mot = 'Node.js';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(mot.toLocaleLowerCase()); <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(mot.toLocaleUpperCase()); <text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">node.js</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">NODE.JS</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">D&#8217;autres fonctions nettoient ou complètent les espaces autour,
au début ou à la fin d&#8217;une chaîne de caractères&#160;:</text:p>
<text:p text:style-name="CodeTitre">string/trim-pad.js</text:p><text:p text:style-name="Code">const mot = '<text:s text:c="2"/>Node.js<text:s text:c="2"/>';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(mot.trim());<text:s text:c="6"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(mot.trimLeft());<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">console.log(mot.trimRight()); <text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const swiftCode = 'BARCGB22';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(swiftCode.padEnd(11, 'X')); <text:span text:style-name="PuceCode">4</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">Node.js</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">Node.js&#160;&#160;</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">&#160;&#160;Node.js</text:span>.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Affiche <text:span text:style-name="CodeDansTexte">BARCGB22XXX</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Dans cet exemple, la méthode <text:span text:style-name="CodeDansTexte">padEnd</text:span> complète jusqu&#8217;à <text:span text:style-name="CodeDansTexte">11</text:span> caractères,
avec le caractère <text:span text:style-name="CodeDansTexte">X</text:span>.
La méthode <text:span text:style-name="CodeDansTexte">padStart</text:span> fait la même chose mais avec le début de la chaîne.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="CodeDansTexte">indexOf</text:span> retourne la position de la <text:span text:style-name="T4">première occurrence</text:span>
dans une chaîne.
Si la valeur n&#8217;est pas trouvée, elle renvoie la valeur <text:span text:style-name="CodeDansTexte">-1</text:span>.
À l&#8217;inverse, <text:span text:style-name="CodeDansTexte">lastIndexOf</text:span> retournera la dernière occurrence trouvée&#160;:</text:p>
<text:p text:style-name="CodeTitre">string/index-of.js</text:p><text:p text:style-name="Code">console.log('I ♥ JavaScript'.indexOf('JavaScript')); <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log('I ♥ JavaScript'.indexOf('?'));<text:s text:c="10"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">console.log('I ♥ JavaScript'.indexOf('a'));<text:s text:c="10"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">console.log('I ♥ JavaScript'.lastIndexOf('a'));<text:s text:c="6"/><text:span text:style-name="PuceCode">4</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Retourne <text:span text:style-name="CodeDansTexte">4</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Retourne <text:span text:style-name="CodeDansTexte">-1</text:span>&#160;— aucune occurrence n&#8217;a été trouvée.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Retourne <text:span text:style-name="CodeDansTexte">5</text:span>&#160;— première occurrence de la lettre <text:span text:style-name="CodeDansTexte">a</text:span>.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Retourne <text:span text:style-name="CodeDansTexte">7</text:span>&#160;— dernière occurrence de la lettre <text:span text:style-name="CodeDansTexte">a</text:span>.<text:line-break/></text:p>
<text:bookmark text:name="ref-regexp" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Expressions régulières (<text:span text:style-name="T4">RegExp</text:span>)</text:h><text:p text:style-name="TexteCourant">Si <text:span text:style-name="CodeDansTexte">indexOf</text:span> et <text:span text:style-name="CodeDansTexte">lastIndexOf</text:span> identifient des caractères exacts,
comment faire lorsque l&#8217;on souhaite chercher de manière approximative,
plusieurs fois et selon certaines conditions&#160;?</text:p>
<text:p text:style-name="TexteCourant">Les <text:span text:style-name="T4">expressions régulières</text:span> (<text:span text:style-name="T4">RegExp</text:span>, pour <text:span text:style-name="T4">Regular Expressions</text:span>)
entrent en jeu dans ces cas plus avancés.
Leur mécanisme décrit des <text:span text:style-name="T4">motifs</text:span> à identifier.
Plusieurs <text:span text:style-name="T4">méthodes</text:span> servent ensuite à tester, identifier et remplacer
ces motifs au sein d&#8217;une chaîne de caractères.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Anecdote</text:span> RegExp et Perl</text:h><text:p text:style-name="Remarque">La syntaxe d&#8217;expressions régulières est inspirée de celle du langage
de programmation <text:span text:style-name="T4">Perl</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://www.perl.org" text:visited-style-name="Visited_20_Internet_20_Link">https://www.perl.org</text:a></text:span>) dans sa version 5.</text:p>
<text:p text:style-name="TexteCourant">Une expression régulière est décrite le plus souvent en tant que motif
encadré par les caractères <text:span text:style-name="CodeDansTexte">/</text:span> (<text:span text:style-name="T4">slash</text:span>), suffixé d'<text:span text:style-name="T4">options</text:span> exprimées sous forme de lettres&#160;:</text:p>
<text:p text:style-name="CodeTitre">regexp/base.js</text:p><text:p text:style-name="Code">/[a-z]+.js/i</text:p>
<text:p text:style-name="TexteCourant">Cet exemple utilise l&#8217;option <text:span text:style-name="CodeDansTexte">i</text:span> mais il en existe plusieurs&#160;:</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>insensible à la casse (<text:span text:style-name="CodeDansTexte">i</text:span>)</text:span><text:line-break/><text:tab/>On souhaite identifier du contenu, peu importe s&#8217;il est en majuscules ou non&#160;;</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>multi-ligne (<text:span text:style-name="CodeDansTexte">m</text:span>)</text:span><text:line-break/><text:tab/>La recherche s&#8217;effectue sur <text:span text:style-name="T4">toutes</text:span> les lignes&#160;;</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>global (<text:span text:style-name="CodeDansTexte">g</text:span>)</text:span><text:line-break/><text:tab/>La recherche identifie <text:span text:style-name="T4">tous</text:span> les résultats&#160;— au lieu d&#8217;un seul et le premier&#160;;</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>unicode (<text:span text:style-name="CodeDansTexte">u</text:span>)</text:span><text:line-break/><text:tab/>À utiliser si le motif de recherche exprime des séquences de caractères
Unicode sous la forme <text:span text:style-name="CodeDansTexte">\u{&#8230;&#8203;.}</text:span> (voir les <text:span text:style-name="T4">classes de caractères</text:span> ci-après).</text:p>
<text:p text:style-name="TexteCourant">Illustrons leur utilisation en <text:span text:style-name="T4">identifiant du texte</text:span> répondant (<text:span text:style-name="CodeDansTexte">match</text:span>)
à une <text:span text:style-name="T4">expression régulière</text:span> (<text:span text:style-name="CodeDansTexte">/&#8230;&#8203;/</text:span>)&#160;:</text:p>
<text:p text:style-name="CodeTitre">regexp/flags.js</text:p><text:p text:style-name="Code">const text = 'I ♥ Node.js &amp; Anode';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(text.match(/node/i));<text:s text:c="3"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(text.match(/ode/g));<text:s text:c="4"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">console.log(text.match(/node/ig));<text:s text:c="2"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> identifie et affiche <text:span text:style-name="CodeDansTexte">Node</text:span>, l&#8217;occurrence contenue dans le mot <text:span text:style-name="CodeDansTexte">Node.js</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> affiche 2 fois <text:span text:style-name="CodeDansTexte">ode</text:span>&#160;— les occurrences contenues dans le mot <text:span text:style-name="CodeDansTexte">Node.js</text:span> et <text:span text:style-name="CodeDansTexte">Anode</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> affiche <text:span text:style-name="CodeDansTexte">Node</text:span> et <text:span text:style-name="CodeDansTexte">node</text:span> en combinant les deux options <text:span text:style-name="CodeDansTexte">i</text:span> et <text:span text:style-name="CodeDansTexte">g</text:span>&#160;— les occurrences contenues dans le mot <text:span text:style-name="CodeDansTexte">Node.js</text:span> et <text:span text:style-name="CodeDansTexte">Anode</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Des éléments de syntaxe complètent les options pour
<text:span text:style-name="T7">identifier des motifs</text:span> au sein de chaînes de caractères&#160;:</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>ensemble de caractères (entre <text:span text:style-name="CodeDansTexte">[</text:span> et <text:span text:style-name="CodeDansTexte">]</text:span>)</text:span><text:line-break/><text:tab/>Liste l&#8217;ensemble des caractères recherchés.
Le caractère <text:span text:style-name="CodeDansTexte">-</text:span> correspond à une plage de caractère.<text:line-break/>
Exemple <text:span text:style-name="CodeDansTexte">[a-d]</text:span> correspond à <text:span text:style-name="CodeDansTexte">[abcd]</text:span>, donc <text:span text:style-name="T4">a</text:span> ou <text:span text:style-name="T4">b</text:span> ou <text:span text:style-name="T4">c</text:span> ou <text:span text:style-name="T4">d</text:span>)&#160;;</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>nombre de caractères (entre <text:span text:style-name="CodeDansTexte">{</text:span> et <text:span text:style-name="CodeDansTexte">}</text:span>)</text:span><text:line-break/><text:tab/>Répète un caractère ou ensemble de caractères,
<text:span text:style-name="T4">exactement</text:span> (<text:span text:style-name="CodeDansTexte">{2}</text:span>&#160;— exactement 2)
<text:span text:style-name="T4">au moins</text:span> (<text:span text:style-name="CodeDansTexte">{2,}</text:span>&#160;— au moins 2)
ou <text:span text:style-name="T4">entre</text:span> (<text:span text:style-name="CodeDansTexte">{1,2}</text:span>&#160;— entre 1 et 2 fois)&#160;;</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>nombre de caractères (<text:span text:style-name="CodeDansTexte">?</text:span>, <text:span text:style-name="CodeDansTexte">+</text:span> et <text:span text:style-name="CodeDansTexte">*</text:span>)</text:span><text:line-break/><text:tab/>Version raccourcie du nombre de caractères pour des besoins usuels&#160;:
<text:span text:style-name="T4">0 ou 1 caractère</text:span> avec <text:span text:style-name="CodeDansTexte">?</text:span>,
<text:span text:style-name="T4">1 caractère et plus</text:span> avec <text:span text:style-name="CodeDansTexte">+</text:span> et
<text:span text:style-name="T4">0 caractère et plus</text:span> avec <text:span text:style-name="CodeDansTexte">*</text:span>.</text:p>
<text:p text:style-name="CodeTitre">regexp/syntax.js</text:p><text:p text:style-name="Code">const paris15 = '75015 Paris';</text:p><text:p text:style-name="Code">const avray = '92410 Ville-d\'Avray';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">// test du code postal uniquement</text:p><text:p text:style-name="Code">console.log(paris15.match(/[0-9]{2}/));<text:s text:c="10"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(paris15.match(/[0-9]{2,5}/));<text:s text:c="8"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">// test du code postal et de la ville</text:p><text:p text:style-name="Code">console.log(paris15.match(/[0-9]{5} [a-zA-Z]+/)); <text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">console.log(paris15.match(/[0-9]{5} [a-z]+/i));<text:s text:c="3"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">// test sur un nom de ville composé</text:p><text:p text:style-name="Code">console.log(avray.match(/[0-9]{5} [a-z]+/i));<text:s text:c="5"/><text:span text:style-name="PuceCode">5</text:span></text:p><text:p text:style-name="Code">console.log(avray.match(/[0-9]{5} [a-z'-]+/i));<text:s text:c="3"/><text:span text:style-name="PuceCode">6</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">["75"]</text:span>&#160;— les 2 premiers caractères numériques de la chaîne.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">["75015"]</text:span>&#160;– les 5 premiers caractères numériques (satisfait la condition <text:span text:style-name="CodeDansTexte">5</text:span> de <text:span text:style-name="T4">entre 2 et 5</text:span> de <text:span text:style-name="CodeDansTexte">{2,5}</text:span>).<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">["75015 Paris"]</text:span>.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Affiche <text:span text:style-name="CodeDansTexte">["75015 Paris"]</text:span>&#160;— l&#8217;option <text:span text:style-name="CodeDansTexte">i</text:span> nous permet de nous passer de l&#8217;ensemble <text:span text:style-name="CodeDansTexte">A-Z</text:span>.<text:line-break/><text:span text:style-name="PuceCode">5</text:span> Affiche <text:span text:style-name="CodeDansTexte">["92410 Ville"]</text:span>&#160;— capture les caractères jusqu&#8217;à ce que la condition ne soit plus remplie en rencontrant le <text:span text:style-name="T4">trait d&#8217;union</text:span> (<text:span text:style-name="CodeDansTexte">-</text:span>).<text:line-break/><text:span text:style-name="PuceCode">6</text:span> Affiche <text:span text:style-name="CodeDansTexte">["92410 Ville-d&#8217;Avray"]</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">D&#8217;autres opérateurs <text:span text:style-name="T7">délimitent notre recherche</text:span>&#160;:</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>début et fin de chaîne (<text:span text:style-name="CodeDansTexte">^</text:span> et <text:span text:style-name="CodeDansTexte">$</text:span>)</text:span><text:line-break/><text:tab/>Symbolise le début (<text:span text:style-name="CodeDansTexte">^</text:span>) ou la fin (<text:span text:style-name="CodeDansTexte">$</text:span>) d&#8217;une chaîne de caractères.<text:line-break/>
Quand l&#8217;option multi-ligne (<text:span text:style-name="CodeDansTexte">m</text:span>) est utilisée, les notions de <text:span text:style-name="T4">début</text:span>
et de <text:span text:style-name="T4">fin</text:span> s&#8217;appliquent au niveau de la <text:span text:style-name="T4">ligne</text:span>&#160;;</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>limite de mot (<text:span text:style-name="CodeDansTexte">\b</text:span>)</text:span><text:line-break/><text:tab/>Symbolise tout caractère ne faisant pas partie d&#8217;un mot, y compris le début ou la fin d&#8217;une chaîne&#160;;</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>ou (<text:span text:style-name="CodeDansTexte">|</text:span>)</text:span><text:line-break/><text:tab/>Sépare deux choix l&#8217;un de l&#8217;autre.
Exemple&#160;: <text:span text:style-name="CodeDansTexte">/noir|blanc/</text:span>&#160;;</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>groupe de capture (entre <text:span text:style-name="CodeDansTexte">(</text:span> et <text:span text:style-name="CodeDansTexte">)</text:span>)</text:span><text:line-break/><text:tab/>Délimite un groupe de caractères.
Les groupes peuvent par la suite être <text:span text:style-name="T4">identifiés</text:span> et <text:span text:style-name="T4">remplacés</text:span>.<text:line-break/>
On notera également que l&#8217;emploi des <text:span text:style-name="T4">groupes</text:span> change
la structure des résultats en un tableau de plusieurs éléments.
Ce tableau a la forme <text:span text:style-name="CodeDansTexte">["chaine identifiée", "groupe 1", "groupe 2" &#8230;&#8203;]</text:span>.</text:p>
<text:p text:style-name="CodeTitre">regexp/limits.js</text:p><text:p text:style-name="Code">const postcode = '75015 Paris';</text:p><text:p text:style-name="Code">const cedex = `CODEPOSTAL VILLE CEDEX</text:p><text:p text:style-name="Code">33900 Bordeaux Cedex 9</text:p><text:p text:style-name="Code">33074 BORDEAUX CEDEX</text:p><text:p text:style-name="Code">33700 MERIGNAC Cidex 40`;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const nogroup = /^[0-9]{5} [a-z0-9' -]+/i;</text:p><text:p text:style-name="Code">const group = /^([0-9]{5}) [a-z0-9' -]+/i;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">// avec ou sans groupe de capture</text:p><text:p text:style-name="Code">console.log(postcode.match(nogroup));<text:s text:c="9"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(postcode.match(group));<text:s text:c="11"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">// mode multiligne avec ou sans option globale</text:p><text:p text:style-name="Code">console.log(cedex.match(/^([0-9]{5})/im));<text:s text:c="4"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">console.log(cedex.match(/^([0-9]{5})/gim));<text:s text:c="3"/><text:span text:style-name="PuceCode">4</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">["75015 Paris"]</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">["75015 Paris", "75015"]</text:span>&#160;— le premier élément correspond à la chaîne identifiée tandis que le second élément correspond au <text:span text:style-name="T4">premier</text:span> groupe de capture.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">["33900", "33900"]</text:span>&#160;– l&#8217;option multi-ligne itère de ligne en ligne jusqu&#8217;à trouver un motif.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Affiche <text:span text:style-name="CodeDansTexte">["33900", "33074", "33700"]</text:span>&#160;— l&#8217;option multi-ligne globale retourne tous les groupes de capture.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">On notera qu&#8217;il faut faire attention à ce que l&#8217;on regarde dans les résultats&#160;:
le format de résultat varie selon qu&#8217;on utilise ou non des groupes de capture,
selon qu&#8217;on utilise l&#8217;option globale ou multi-ligne.</text:p>
<text:p text:style-name="TexteCourant">Des classes de caractère servent de raccourcis pour désigner
plusieurs caractères à la fois&#160;:</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>tout caractère (<text:span text:style-name="CodeDansTexte">.</text:span>)</text:span><text:line-break/><text:tab/>Équivalent à <text:span text:style-name="T4">tout caractère</text:span> sauf le saut de ligne.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>caractère de mot (<text:span text:style-name="CodeDansTexte">\w</text:span>)</text:span><text:line-break/><text:tab/>Équivalent à tout caractère pouvant composer un mot anglais&#160;:
les caractères accentués ne sont pas englobés par cette classe de caractères.
Identique à <text:span text:style-name="CodeDansTexte">[A-Za-z0-9_]</text:span>.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>caractère numérique (<text:span text:style-name="CodeDansTexte">\d</text:span>)</text:span><text:line-break/><text:tab/>Équivalent à tout caractère numérique.
Identique à <text:span text:style-name="CodeDansTexte">[0-9]</text:span>.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>caractère d&#8217;espacement (<text:span text:style-name="CodeDansTexte">\s</text:span>)</text:span><text:line-break/><text:tab/>Équivalent à tout caractère d&#8217;espacement
(espace, tabulation, retour chariot, etc.).</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>caractère Unicode (<text:span text:style-name="CodeDansTexte">\u{&#8230;&#8203;.}</text:span>)</text:span><text:line-break/><text:tab/>Doit être combiné avec l&#8217;option <text:span text:style-name="CodeDansTexte">u</text:span> (<text:span text:style-name="CodeDansTexte">/&#8230;&#8203;/u</text:span>).
Exemple&#160;: ♥︎ &#8594; <text:span text:style-name="CodeDansTexte">\u{2665}</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Les alternatives de classes en majuscules sont des <text:span text:style-name="T4">négations</text:span>.
<text:span text:style-name="CodeDansTexte">\W</text:span> pour "tout sauf un caractère de mot", <text:span text:style-name="CodeDansTexte">\S</text:span> pour "tout sauf un caractère
d&#8217;espacement", etc.</text:p>
<text:p text:style-name="CodeTitre">regexp/classes.js</text:p><text:p text:style-name="Code">const text = 'I ♥ RegExp in 2018';</text:p><text:p text:style-name="Code">console.log(text.match(/\u{2665} (\w+)/u));<text:s text:c="3"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const [,iLove,year] = text.match(/^(I \u{2665}).+(\d{4})$/u);</text:p><text:p text:style-name="Code">console.log(`${iLove} ${year}`);<text:s text:c="14"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">["♥ RegExp", "RegExp"]</text:span>&#160;— et s&#8217;arrête là car l&#8217;espace suivant n&#8217;est pas un caractère de mot.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">"I ♥ 2018"</text:span>&#160;— on a extrait le début de la phrase et l&#8217;année placée en fin de chaîne.<text:line-break/></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> expressions régulières</text:h>
Rendez-vous sur <text:span text:style-name="T4">MDN web docs</text:span> pour en savoir plus sur expressions régulières.<text:line-break/>
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/RegExp" text:visited-style-name="Visited_20_Internet_20_Link">https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/RegExp</text:a>

<text:p text:style-name="TexteCourant">La méthode <text:span text:style-name="CodeDansTexte">test</text:span> est pratique si la seule chose qui vous intéresse
est de tester si une chaîne correspond à un motif&#160;:</text:p>
<text:p text:style-name="CodeTitre">regexp/test.js</text:p><text:p text:style-name="Code">const cedex = `CODEPOSTAL VILLE CEDEX</text:p><text:p text:style-name="Code">33900 Bordeaux Cedex 9</text:p><text:p text:style-name="Code">33074 BORDEAUX CEDEX</text:p><text:p text:style-name="Code">33700 MERIGNAC Cidex 40`;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const postcode_tester = /^\d{5}\s/m;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">if (postcode_tester.test(cedex)) {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(cedex.match(/^(\d{5})\b/gm));</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant">Enfin, la méthode <text:span text:style-name="CodeDansTexte">replace</text:span> est très utile pour transformer des chaînes de
caractères, surtout en combinaison avec les groupes de capture&#160;:</text:p>
<text:p text:style-name="CodeTitre">regexp/replace.js</text:p><text:p text:style-name="Code">const t = 'I ♥ JavaScript';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(t.replace('♥', 'love'));<text:s text:c="4"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(t.replace(/\b\w+$/, 'PHP'));<text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const text = t.replace(/^.+(\u{2665}) (\w+)$/u, '$2 $1 me');</text:p><text:p text:style-name="Code">console.log(text);<text:s text:c="22"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">"I love JavaScript"</text:span>&#160;— si le premier argument de <text:span text:style-name="CodeDansTexte">replace</text:span> est une chaîne, elle est convertie automatiquement en expression régulière.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">"I ♥ PHP"</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">JavaScript ♥ me"</text:span>&#160;— les symboles <text:span text:style-name="CodeDansTexte">$&lt;numéro&gt;</text:span> représentent les groupes de capture on peut les placer dans l&#8217;ordre de notre choix.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">D&#8217;ailleurs le second argument accepte une <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-functions"  text:visited-style-name="Visited_20_Internet_20_Link">fonction</text:a>
pour procéder à des remplacements dynamiques&#160;:</text:p>
<text:p text:style-name="CodeTitre">regexp/replace-function.js</text:p><text:p text:style-name="Code">const text = 'I ♥ JavaScript';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const shout = text.replace(/\b(\w+)$/u, (pattern, lang) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>return lang.toLocaleUpperCase();</text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(shout);<text:s text:c="3"/><text:span text:style-name="PuceCode">1</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">"I ♥ JAVASCRIPT"</text:span>&#160;— le dernier mot est transformé en majuscules.<text:line-break/></text:p>
<text:bookmark text:name="ref-boolean" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Jongler avec des valeurs vraies ou fausses (booléens)</text:h><text:p text:style-name="TexteCourant">Un booléen est élément logique dont la valeur est soit <text:span text:style-name="CodeDansTexte">true</text:span> soit <text:span text:style-name="CodeDansTexte">false</text:span>,
c&#8217;est à dire respectivement <text:span text:style-name="T4">vrai</text:span> ou <text:span text:style-name="T4">faux</text:span>.
Ce type de valeur sert à exprimer des résultats de condition
("si ça alors … sinon") ainsi qu&#8217;à affirmer ou infirmer quelque chose.</text:p>
<text:p text:style-name="CodeTitre">boolean/base.js</text:p><text:p text:style-name="Code">const counter = 3;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(counter);<text:s text:c="15"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(counter === 3);<text:s text:c="9"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const check = (counter === 3);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(check);<text:s text:c="17"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">console.log(check === true);<text:s text:c="8"/><text:span text:style-name="PuceCode">4</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">3</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">true</text:span>&#160;— la condition est vérifiée (3 équivaut strictement à 3).<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">true</text:span>&#160;— c&#8217;est la valeur de la variable <text:span text:style-name="CodeDansTexte">check</text:span> suite à son assignation lors de la ligne précédente.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Affiche <text:span text:style-name="CodeDansTexte">true</text:span>&#160;— la variable <text:span text:style-name="CodeDansTexte">check</text:span> équivaut strictement à <text:span text:style-name="CodeDansTexte">true</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Une donnée d&#8217;un autre type peut être convertie en booléen.
La logique qui déterminera si la conversion retournera <text:span text:style-name="CodeDansTexte">true</text:span> ou <text:span text:style-name="CodeDansTexte">false</text:span>
est la suivante&#160;:</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">true</text:span></text:span><text:line-break/><text:tab/>Toute valeur non-nulle.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">false</text:span></text:span><text:line-break/><text:tab/>Toute valeur nulle (<text:span text:style-name="CodeDansTexte">null</text:span>, <text:span text:style-name="CodeDansTexte">0</text:span>, <text:span text:style-name="CodeDansTexte">NaN</text:span>), vide (<text:span text:style-name="CodeDansTexte">''</text:span>)
ou indéfinie (<text:span text:style-name="CodeDansTexte">undefined</text:span>).</text:p>
<text:p text:style-name="CodeTitre">boolean/convert.js</text:p><text:p text:style-name="Code">const counter = 3;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(Boolean(''));<text:s text:c="7"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(Boolean(counter));<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">console.log(Boolean([]));<text:s text:c="7"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">if (counter) {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log('if (counter) équivaut à if (Boolean(counter))');</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">false</text:span>&#160;— il s&#8217;agit d&#8217;une <text:span text:style-name="T4">chaîne vide</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">true</text:span>&#160;— il s&#8217;agit d&#8217;une valeur <text:span text:style-name="T4">non-nulle</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">true</text:span>&#160;— le tableau est vide mais l&#8217;objet en lui-même <text:span text:style-name="T4">vaut</text:span> quelque chose&#160;: un tableau.<text:line-break/></text:p>
<text:bookmark text:name="ref-number" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Jongler avec des valeurs numériques (<text:span text:style-name="T4">Number</text:span>, <text:span text:style-name="T4">Math</text:span>)</text:h><text:p text:style-name="TexteCourant">ECMAScript ne fait pas de distinction entre des nombres entiers et des
nombres contenant des décimales&#160;: ce sont des <text:span text:style-name="T4">nombres</text:span> un point c&#8217;est tout.</text:p>
<text:p text:style-name="CodeTitre">number/base.js</text:p><text:p text:style-name="Code">console.log(40);</text:p><text:p text:style-name="Code">console.log(40.0);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(40 === 40.0);<text:s text:c="3"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(40 === '40.0'); <text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">true</text:span>&#160;— les deux valeurs sont strictement équivalentes.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">false</text:span>&#160;— un élément entre guillemets est une chaîne de caractère.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Les nombres sont représentés par défaut en <text:span text:style-name="T4">base 10</text:span>.
La plage de nombre utilisable démarre à <text:span text:style-name="T4">moins l&#8217;infini</text:span> et va jusqu&#8217;à <text:span text:style-name="T4">plus l&#8217;infini</text:span>.
Des constantes définies par ECMAScript contiennent les valeurs minimales et
maximales que l&#8217;on peut représenter dans un programme&#160;:</text:p>
<text:p text:style-name="CodeTitre">number/constants.js</text:p><text:p text:style-name="Code">console.log(Number.POSITIVE_INFINITY);<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(Number.NEGATIVE_INFINITY);<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(Number.MAX_VALUE);<text:s text:c="10"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">console.log(Number.MIN_VALUE);<text:s text:c="10"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(Number.MAX_SAFE_INTEGER);<text:s text:c="3"/><text:span text:style-name="PuceCode">5</text:span></text:p><text:p text:style-name="Code">console.log(Number.MIN_SAFE_INTEGER);<text:s text:c="3"/><text:span text:style-name="PuceCode">6</text:span></text:p>
<text:p text:style-name="TexteCourant">Il est aussi possible de compter dans d&#8217;autres bases comme la <text:span text:style-name="T4">base 16</text:span>,
c&#8217;est-à-dire une représentation hexadécimale de 0 à 16, exprimée de 0 à F
—&#160;A vaut 10 (car juste après 9), B vaut 11, etc.
Leur notation se fait en préfixant la valeur par <text:span text:style-name="CodeDansTexte">0x</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">number/hexa.js</text:p><text:p text:style-name="Code">console.log(0x0000);</text:p><text:p text:style-name="Code">console.log(0x000A);</text:p><text:p text:style-name="Code">console.log(0x00A0);</text:p><text:p text:style-name="Code">console.log(0x0A00);</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">0</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">10</text:span>&#160;— car <text:span text:style-name="CodeDansTexte">A</text:span> en hexadécimal vaut 10 en décimal.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">160</text:span>&#160;— pour <text:span text:style-name="CodeDansTexte">10 x 16</text:span> (une dizaine vaut 16).<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Affiche <text:span text:style-name="CodeDansTexte">2560</text:span>&#160;— pour <text:span text:style-name="CodeDansTexte">10 x 16 x 16</text:span> (une centaine vaut 16x16).<text:line-break/></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Rumeur</text:span> JavaScript est nul en virgule flottante !</text:h><text:p text:style-name="Remarque">ECMAScript est souvent décrié par son incapacité à gérer les opérations
mathématiques avec précision.</text:p>
<text:p text:style-name="RemarqueCode">0.2 + 0.6</text:p>
<text:p text:style-name="Remarque">ECMAScript respecte le standard <text:span text:style-name="T4">IEEE 754</text:span> de gestion de nombres à virgule flottante sur 64 bits de données.
Qui d&#8217;autre l&#8217;utilise&#160;?
D&#8217;autres langages "inconnus" comme Python, PHP et Ruby, entre autres.</text:p>
<text:p text:style-name="Remarque">Pour en savoir plus&#160;: <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://fr.wikipedia.org/wiki/IEEE_754" text:visited-style-name="Visited_20_Internet_20_Link">https://fr.wikipedia.org/wiki/IEEE_754</text:a></text:span>.</text:p>
<text:bookmark text:name="ref-opérations_mathématiques" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Opérations mathématiques</text:h><text:p text:style-name="TexteCourant">Les nombres s&#8217;utilisent pour effectuer des opérations mathématiques.
Chaque opération est dotée d&#8217;un symbole&#160;:</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>addition</text:span><text:line-break/><text:tab/><text:span text:style-name="CodeDansTexte">+</text:span></text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>soustraction</text:span><text:line-break/><text:tab/><text:span text:style-name="CodeDansTexte">-</text:span></text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>multiplication</text:span><text:line-break/><text:tab/><text:span text:style-name="CodeDansTexte">*</text:span></text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>division</text:span><text:line-break/><text:tab/><text:span text:style-name="CodeDansTexte">/</text:span></text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>modulo (reste de division)</text:span><text:line-break/><text:tab/><text:span text:style-name="CodeDansTexte">%</text:span></text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>exposant (puissance)</text:span><text:line-break/><text:tab/><text:span text:style-name="CodeDansTexte">**</text:span></text:p>
<text:p text:style-name="CodeTitre">number/operations.js</text:p><text:p text:style-name="Code">console.log(2 + 4);<text:s text:c="5"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(2 - 4);<text:s text:c="5"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">console.log(2 * 4);<text:s text:c="5"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">console.log(2 / 4);<text:s text:c="5"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code">console.log(2 % 4);<text:s text:c="5"/><text:span text:style-name="PuceCode">5</text:span></text:p><text:p text:style-name="Code">console.log(2 ** 4);<text:s text:c="4"/><text:span text:style-name="PuceCode">6</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">6</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">-2</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">8</text:span>.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Affiche <text:span text:style-name="CodeDansTexte">0.5</text:span>.<text:line-break/><text:span text:style-name="PuceCode">5</text:span> Affiche <text:span text:style-name="CodeDansTexte">2</text:span>.<text:line-break/><text:span text:style-name="PuceCode">6</text:span> Affiche <text:span text:style-name="CodeDansTexte">16</text:span>.<text:line-break/></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Attention</text:span> Opérations exotiques</text:h><text:p text:style-name="Remarque">Est-ce que vous avez déjà tenté d&#8217;additionner un nombre avec un tableau&#160;?
Pas forcément mais ECMAScript ne vous en empêchera pas.</text:p>
<text:p text:style-name="Remarque">number/operations-types.js</text:p><text:p text:style-name="RemarqueCode">console.log(10 / '1');<text:s text:c="4"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="RemarqueCode">console.log(10 / 0);<text:s text:c="6"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="RemarqueCode">console.log(10 / []);</text:p><text:p text:style-name="RemarqueCode">console.log(10 / {});<text:s text:c="5"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="RemarqueCode">console.log(10 + null);</text:p><text:p text:style-name="RemarqueCode">console.log(10 + true);</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> La chaîne <text:span text:style-name="CodeDansTexte">'1'</text:span> sera convertie en nombre (voir section ci-après).<text:line-break/><text:span text:style-name="PuceCode">2</text:span> On nous a toujours interdit la division par zéro&#160;? En vrai on crée l'<text:span text:style-name="T4">infini</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Seule cette opération retournera autre chose qu&#8217;un nombre.<text:line-break/></text:p>
<text:p text:style-name="Remarque">Rendez-vous à la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-nan"  text:visited-style-name="Visited_20_Internet_20_Link">section suivante</text:a> pour se prémunir des nombres qui n&#8217;en sont pas.</text:p>
<text:bookmark text:name="ref-nan" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Les nombres qui n&#8217;en sont pas (<text:span text:style-name="T4">NaN</text:span>)</text:h><text:p text:style-name="TexteCourant">Certaines opérations n&#8217;aboutiront pas et n&#8217;afficheront pas d&#8217;erreur pour autant.
Dans ce cas, le résultat de l&#8217;opération vaudra <text:span text:style-name="CodeDansTexte">NaN</text:span>.
Pour <text:span text:style-name="T4">not a number</text:span> (littéralement&#160;: "n&#8217;est pas un nombre").</text:p>
<text:p text:style-name="CodeTitre">number/nan.js</text:p><text:p text:style-name="Code">console.log(10 / 'fromage');</text:p>
<text:p text:style-name="TexteCourant">La fonction <text:span text:style-name="CodeDansTexte">Number.isNaN</text:span> nous aidera à vérifier si la valeur d&#8217;une variable
ou le résultat d&#8217;une opération est un <text:span text:style-name="CodeDansTexte">NaN</text:span> ou non.
Cette fonction retourne un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-boolean"  text:visited-style-name="Visited_20_Internet_20_Link">booléen</text:a>.</text:p>
<text:p text:style-name="CodeTitre">number/is-nan.js</text:p><text:p text:style-name="Code">console.log(Number.isNaN(NaN));<text:s text:c="13"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(Number.isNaN(10 / 'fromage'));<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(Number.isNaN(10));<text:s text:c="14"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">console.log(Number.isNaN('fromage'));<text:s text:c="7"/><text:span text:style-name="PuceCode">4</text:span></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Assertion</text:span> <text:span text:style-name="CodeDansTexte">NaN</text:span> n&#8217;est pas un nombre ?</text:h><text:p text:style-name="Remarque">Il faut se méfier de <text:span text:style-name="CodeDansTexte">NaN</text:span> comme de la peste car il est considéré
comme un nombre d&#8217;un point ECMAScript.
Toute opération mathématique impliquant <text:span text:style-name="CodeDansTexte">NaN</text:span> renverra un <text:span text:style-name="CodeDansTexte">NaN</text:span>&#160;:</text:p>
<text:p text:style-name="Remarque">number/nan-number.js</text:p><text:p text:style-name="RemarqueCode">console.log(typeof NaN);</text:p><text:p text:style-name="RemarqueCode">console.log(typeof 10);</text:p>
<text:p text:style-name="Remarque">Il vaut mieux s&#8217;assurer qu&#8217;une variable est à la fois un nombre et
n&#8217;est pas équivalent à <text:span text:style-name="CodeDansTexte">NaN</text:span>&#160;:</text:p>
<text:p text:style-name="Remarque">number/is-not-a-nan.js</text:p><text:p text:style-name="RemarqueCode">const result = 10 / 'fromage';</text:p><text:p text:style-name="RemarqueCode"></text:p><text:p text:style-name="RemarqueCode">if (typeof result === 'number' &amp;&amp; !Number.isNaN(result)) {</text:p><text:p text:style-name="RemarqueCode"><text:s text:c="2"/>console.log('Ceci est un nombre.');</text:p><text:p text:style-name="RemarqueCode">}</text:p><text:p text:style-name="RemarqueCode">else {</text:p><text:p text:style-name="RemarqueCode"><text:s text:c="2"/>console.log('result n\'est pas un nombre.');</text:p><text:p text:style-name="RemarqueCode">}</text:p>
<text:bookmark text:name="ref-convertir_en_nombre" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Convertir en nombre</text:h><text:p text:style-name="TexteCourant">Les lignes qui précédent l&#8217;évoquent un peu&#160;: on peut passer d&#8217;autres types
de données à des nombres.
Idéalement, on voudra transformer explicitement quelque chose en un nombre.</text:p>
<text:p text:style-name="TexteCourant">Pour cela nous avons deux fonctions à disposition&#160;:</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">parseInt</text:span></text:span><text:line-break/><text:tab/>Essaie d&#8217;interpréter un nombre entier&#160;;</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">parseFloat</text:span></text:span><text:line-break/><text:tab/>Essaie d&#8217;interpréter un nombre à virgule.
La fonction s&#8217;arrête dès qu&#8217;elle n&#8217;a plus affaire à un chiffre.</text:p>
<text:p text:style-name="CodeTitre">number/parse.js</text:p><text:p text:style-name="Code">console.log(parseInt('3.141592653589793'));<text:s text:c="3"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(parseFloat('3.141592653589793')); <text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(parseInt('14.10-patch.2'));<text:s text:c="3"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">console.log(parseFloat('14.10-patch.2')); <text:span text:style-name="PuceCode">4</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">3</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">3.141592653589793</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">14</text:span>&#160;— ça ne change rien pour <text:span text:style-name="CodeDansTexte">parseInt</text:span>.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Affiche <text:span text:style-name="CodeDansTexte">14.1</text:span>&#160;— la fonction s&#8217;arrête à la décimale précédant une lettre.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="CodeDansTexte">parseInt</text:span> a cette particularité que l&#8217;on peut choisir la base
de la conversion avec le second argument de la fonction&#160;:</text:p>
<text:p text:style-name="CodeTitre">number/parse-int.js</text:p><text:p text:style-name="Code">console.log(parseInt(10, 16));<text:s text:c="4"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(parseInt('A', 16));<text:s text:c="3"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">console.log(parseInt('A00', 16)); <text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">16</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">10</text:span>&#160;— <text:span text:style-name="CodeDansTexte">A</text:span> étant juste après <text:span text:style-name="CodeDansTexte">10</text:span> en hexadécimal.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">2560</text:span>&#160;— aurait pu s&#8217;écrire <text:span text:style-name="CodeDansTexte">0xF00</text:span>&#160;— cf. le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-number"  text:visited-style-name="Visited_20_Internet_20_Link">début de cette même section</text:a>, à propos des bases.<text:line-break/></text:p>
<text:bookmark text:name="ref-formater_et_arrondir_des_nombres" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Formater et arrondir des nombres</text:h><text:p text:style-name="TexteCourant">Si l&#8217;envie vous prenait de vouloir arrondir des nombres, il existe
quelques fonctions pour nous aider.</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">Math.round</text:span></text:span><text:line-break/><text:tab/>Arrondit à l&#8217;entier le plus proche&#160;;</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">Math.ceil</text:span></text:span><text:line-break/><text:tab/>Arrondit à l&#8217;entier supérieur du nombre donné&#160;;</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">Math.floor</text:span></text:span><text:line-break/><text:tab/>Arrondit à l&#8217;entier inférieur du nombre donné.</text:p>
<text:p text:style-name="TexteCourant">Math.ceil, Math.floor</text:p>
<text:p text:style-name="CodeTitre">number/round.js</text:p><text:p text:style-name="Code">console.log(Math.round(3.1));<text:s text:c="4"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(Math.round(3.8));<text:s text:c="4"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">console.log(Math.round(3.5));<text:s text:c="4"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(Math.ceil(3.14));<text:s text:c="4"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code">console.log(Math.floor(3.99));<text:s text:c="3"/><text:span text:style-name="PuceCode">5</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">3</text:span>&#160;— l&#8217;entier le plus proche est 3.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">4</text:span>&#160;— l&#8217;entier le plus proche est 4.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">4</text:span>&#160;— idem.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Affiche <text:span text:style-name="CodeDansTexte">4</text:span>.<text:line-break/><text:span text:style-name="PuceCode">5</text:span> Affiche <text:span text:style-name="CodeDansTexte">3</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Enfin, on peut préserver le formatage du nombre de décimales
après la virgule en transformant le nombre <text:span text:style-name="T4">en chaîne de caractères</text:span>
grâce à la méthode <text:span text:style-name="CodeDansTexte">toFixed</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">number/to-fixed.js</text:p><text:p text:style-name="Code">console.log(10.0101.toFixed(2));<text:s text:c="5"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(10.0101.toFixed(0));<text:s text:c="5"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">'10.01'</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">'10'</text:span>.<text:line-break/></text:p>
<text:bookmark text:name="ref-functions" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Créer et réutiliser des blocs de code (fonctions)</text:h><text:p text:style-name="TexteCourant">Une fonction est un <text:span text:style-name="T7">bloc de code réutilisable et paramétrable</text:span>.
Elle <text:span text:style-name="T4">retourne</text:span> un résultat dont la valeur se prédit en fonction des
paramètres que nous lui passons.</text:p>
<text:p text:style-name="TexteCourant">Cela se passe en deux temps&#160;:</text:p>
<text:p text:style-name="ListeANumero">1.<text:tab/>la <text:span text:style-name="T4">création</text:span> de la fonction&#160;;</text:p><text:p text:style-name="ListeANumero">2.<text:tab/>l'<text:span text:style-name="T4">exécution</text:span> de la fonction.</text:p>
<text:p text:style-name="TexteCourant">ECMAScript fournit un ensemble de fonctions de base
(<text:span text:style-name="CodeDansTexte">console.log</text:span>, <text:span text:style-name="CodeDansTexte">setTimeout</text:span> etc).
Node ajoute les siennes (comme <text:span text:style-name="CodeDansTexte">require</text:span>).
Nous avons la liberté d&#8217;en créer nous-même, spécifiques à nos besoins.</text:p>
<text:p text:style-name="CodeTitre">functions/base.js</text:p><text:p text:style-name="Code">const hello = (mot) =&gt; `Hello ${mot}`;<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(hello);<text:s text:c="21"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">console.log(hello('World'));<text:s text:c="12"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">console.log(hello('toi'));</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const random = () =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const limit = 100;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>return Math.floor(Math.random() * limit);</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(random());<text:s text:c="18"/><text:span text:style-name="PuceCode">4</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> On <text:span text:style-name="T4">crée</text:span> la fonction <text:span text:style-name="CodeDansTexte">hello</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">[Function: hello]</text:span>&#160;— il s&#8217;agit de la définition de la fonction.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">"Hello World"</text:span>&#160;— il s&#8217;agit de l'<text:span text:style-name="T4">exécution</text:span> de la fonction, qui <text:span text:style-name="T4">retourne</text:span> un résultat.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Affiche un nombre aléatoire entre 0 et 100&#160;— cette fonction est invoquée sans paramètre.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple précédent nous indique qu&#8217;une fonction se découpe en 3 parties&#160;:</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>les <text:span text:style-name="T7">arguments</text:span></text:span><text:line-break/><text:tab/>C&#8217;est la partie à gauche de la flèche (<text:span text:style-name="CodeDansTexte">&#8658;</text:span>).
Les arguments sont séparés par des virgules (exemple&#160;: <text:span text:style-name="CodeDansTexte">(argument1, argument2, etc.)</text:span>)&#160;;</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>le <text:span text:style-name="T7">corps</text:span></text:span><text:line-break/><text:tab/>C&#8217;est la partie entre accolades (<text:span text:style-name="CodeDansTexte">{ &#8230;&#8203; }</text:span>).
Quand la fonction est sur une ligne,
le résultat de l&#8217;opération est <text:span text:style-name="T4">implicitement retourné</text:span>.
On peut dans ce cas se passer du mot-clé <text:span text:style-name="CodeDansTexte">return</text:span>&#160;;</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>la <text:span text:style-name="T7">valeur de retour</text:span></text:span><text:line-break/><text:tab/>C&#8217;est la valeur renvoyée en dehors de la fonction.
La valeur de retour est définie à l&#8217;aide du mot-clé <text:span text:style-name="CodeDansTexte">return</text:span>.
La valeur <text:span text:style-name="CodeDansTexte">undefined</text:span> est retournée de manière implicite
lorsque le mot-clé <text:span text:style-name="CodeDansTexte">return</text:span> est absent.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Rappelle-toi</text:span> Variables et portée</text:h><text:p text:style-name="Remarque">Le corps d&#8217;une fonction constitue une <text:span text:style-name="T4">portée</text:span>&#160;: toute variable définie
dans le corps d&#8217;une fonction est invisible en dehors.</text:p>
<text:p text:style-name="Remarque">On en parle plus en détails dans la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-scope"  text:visited-style-name="Visited_20_Internet_20_Link">section portée</text:a>
en début de section.</text:p>
<text:bookmark text:name="ref-anonymous-function" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Les fonctions anonymes</text:h><text:p text:style-name="TexteCourant">Les fonctions anonymes sont employées en <text:span text:style-name="T7">arguments d&#8217;autres fonctions</text:span>.
On les dit <text:span text:style-name="T4">anonymes</text:span>, car elles ne sont pas consignées dans des <text:span text:style-name="T4">variables</text:span>.
Il est fréquent de les utiliser pour <text:span text:style-name="T4">itérer</text:span> sur des tableaux,
lors d&#8217;événements ou dans des <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-promise"  text:visited-style-name="Visited_20_Internet_20_Link">promesses</text:a>.</text:p>
<text:p text:style-name="TexteCourant">C&#8217;est une manière élégante d&#8217;encapsuler du code à exécuter plus tard.</text:p>
<text:p text:style-name="CodeTitre">functions/anonymous.js</text:p><text:p text:style-name="Code">setTimeout(() =&gt; console.log('Une seconde plus tard'), 1000);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">setTimeout(() =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log('Deux secondes plus tard');<text:s text:c="5"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">}, 2000);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">process.on('exit', () =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log('Le processus se termine');<text:s text:c="5"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">"Deux secondes plus tard"</text:span> deux secondes après le début du script.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">"Le processus se termine"</text:span> quand le processus se termine, une fois que toutes les actions en attente ont été exécutées.<text:line-break/></text:p>
<text:bookmark text:name="ref-callback" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Les fonctions de <text:span text:style-name="T4">callback</text:span></text:h><text:p text:style-name="TexteCourant">Quand une fonction est passée en argument d&#8217;une autre fonction,
on appelle cela un <text:span text:style-name="T4">callback</text:span>.
On l&#8217;appelle plus tard (<text:span text:style-name="T4">to call back</text:span>) que le moment où elle est définie.
La fonction peut recevoir des paramètres qui aident à reconstruire un contexte
<text:span text:style-name="T4">au moment</text:span> de son exécution.</text:p>
<text:p text:style-name="CodeTitre">functions/callback.js</text:p><text:p text:style-name="Code">const printYear = (date) =&gt; {<text:s text:c="13"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(date.getUTCFullYear());<text:s text:c="5"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">setTimeout(printYear, 1000, new Date());<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">// équivalent à</text:p><text:p text:style-name="Code">// setTimeout(date =&gt; printYear(date), 1000, new Date());</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Le troisième argument (et les suivants) de <text:span text:style-name="CodeDansTexte">setTimeout</text:span> sont transmis en paramètre de la fonction de <text:span text:style-name="T4">callback</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Cette fonction sera invoquée une seconde après le début du script, et recevra la date du moment en paramètre.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche l&#8217;année de la date passée en argument&#160;— l&#8217;année en cours dans cet exemple.<text:line-break/></text:p>
<text:bookmark text:name="ref-rest-parameters" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Paramètres du reste (<text:span text:style-name="T4">rest parameters</text:span>)</text:h><text:p text:style-name="TexteCourant">Les <text:span text:style-name="T4">paramètres du reste</text:span> collecte un nombre indéfini de paramètres.
Les paramètres sont <text:span text:style-name="T7">regroupés dans un même <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-array"  text:visited-style-name="Visited_20_Internet_20_Link">tableau</text:a></text:span> (voir ci-après).</text:p>
<text:p text:style-name="CodeTitre">functions/rest.js</text:p><text:p text:style-name="Code">const combien_de = (nom, ...params) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(`On a compté ${params.length} ${nom}.`);</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">combien_de('patates', 'un', 'deux', 'trois'); <text:span text:style-name="PuceCode">1</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">"On a compté 3 patates."</text:span>.<text:line-break/></text:p>
<text:bookmark text:name="ref-array" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Lister, filtrer et trier des éléments (<text:span text:style-name="T4">Array</text:span>)</text:h><text:p text:style-name="TexteCourant">Les tableaux (ou listes indexées) servent à <text:span text:style-name="T7">lister des éléments</text:span>,
de tout type et dans l&#8217;ordre de notre choix.
Chaque élément de tableau se voit attribué un numéro (<text:span text:style-name="T4">index</text:span>).
On peut retrouver l&#8217;élément par son numéro, en itérant à l&#8217;aide de boucles
ou en ayant recours à d&#8217;autres méthodes d&#8217;identification.</text:p>
<text:p text:style-name="CodeTitre">array/base.js</text:p><text:p text:style-name="Code">const weekdays = [</text:p><text:p text:style-name="Code"><text:s text:c="2"/>'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi'</text:p><text:p text:style-name="Code">];</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(weekdays);<text:s text:c="10"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(weekdays.length);<text:s text:c="3"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">console.log(weekdays[1]);<text:s text:c="7"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">console.log(weekdays[0]);</text:p><text:p text:style-name="Code">console.log(weekdays[5]);<text:s text:c="7"/><text:span text:style-name="PuceCode">4</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">["lundi", "mardi", "mercredi", "jeudi", "vendredi"]</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">5</text:span>&#160;— soit la longueur du tableau.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">"mardi"</text:span>&#160;— c&#8217;est l&#8217;élément défini à l&#8217;index <text:span text:style-name="CodeDansTexte">1</text:span>.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Affiche <text:span text:style-name="CodeDansTexte">undefined</text:span>&#160;— il n&#8217;y a aucun élément défini à l&#8217;index <text:span text:style-name="CodeDansTexte">5</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple précédent illustre plusieurs caractéristiques des collections&#160;:</text:p>
<text:p text:style-name="ListeANumero">1.<text:tab/>la numérotation débute à l&#8217;index <text:span text:style-name="CodeDansTexte">0</text:span>&#160;;</text:p><text:p text:style-name="ListeANumero">2.<text:tab/>la propriété <text:span text:style-name="CodeDansTexte">length</text:span> contient la longueur du tableau&#160;;</text:p><text:p text:style-name="ListeANumero">3.<text:tab/>la valeur <text:span text:style-name="CodeDansTexte">undefined</text:span> est retournée quand on tente d&#8217;accéder à un index
qui n&#8217;existe pas.</text:p>
<text:bookmark text:name="ref-créer_des_tableaux_à_partir_dautres_valeurs" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Créer des tableaux à partir d&#8217;autres valeurs</text:h><text:p text:style-name="TexteCourant">La fonction <text:span text:style-name="CodeDansTexte">Array.from</text:span> est une manière de créer
un tableau à partir de quelque chose qui <text:span text:style-name="T4">ressemble à un tableau</text:span>.</text:p>
<text:bookmark text:name="ref-array.from" /><text:p text:style-name="CodeTitre">array/from.js</text:p><text:p text:style-name="Code">console.log(Array.from('fromage'));<text:s text:c="12"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">// utilisation du second argument</text:p><text:p text:style-name="Code">const uppercase = (letter) =&gt; letter.toUpperCase();</text:p><text:p text:style-name="Code">console.log(Array.from('fromage', uppercase)); <text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">["f", "r", "o", "m", "a", "g", "e"]</text:span>&#160;— chaque lettre de la chaîne.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">["F", "R", "O", "M", "A", "G", "E"]</text:span>&#160;— chaque lettre de la chaîne a été passée en majuscules.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Le deuxième argument de <text:span text:style-name="CodeDansTexte">Array.from</text:span> est facultatif.
C&#8217;est une <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-anonymous-function"  text:visited-style-name="Visited_20_Internet_20_Link">fonction anonyme</text:a> qui s&#8217;utilise comme les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-array.forEach"  text:visited-style-name="Visited_20_Internet_20_Link">méthodes d&#8217;itération</text:a> <text:span text:style-name="CodeDansTexte">Array.forEach</text:span> et <text:span text:style-name="CodeDansTexte">Array.map</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Cette méthode est des plus utiles pour itérer sur des listes d&#8217;éléments DOM
obtenues avec les fonctions <text:span text:style-name="CodeDansTexte">document.querySelectorAll</text:span>
et <text:span text:style-name="CodeDansTexte">document.getElementsByTagName</text:span>, entre autres.</text:p>
<text:p text:style-name="Code">const links = document.querySelectorAll('a');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(Array.from(links).map(a =&gt; a.textContent));</text:p><text:p text:style-name="Code">// parce qu'on ne peut pas faire</text:p><text:p text:style-name="Code">// links.map(a =&gt; a.textContent);</text:p>
<text:bookmark text:name="ref-array.concat" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Combiner des tableaux</text:h><text:p text:style-name="TexteCourant">Il est relativement aisé de composer des tableaux en fonction d&#8217;autres tableaux.
Une première manière d&#8217;y parvenir est d&#8217;utiliser la méthode <text:span text:style-name="CodeDansTexte">concat</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">array/concat.js</text:p><text:p text:style-name="Code">const mousquetaires = ['Atos', 'Portos', 'Aramis'];</text:p><text:p text:style-name="Code">const extras = ['d\'Artagnan', 'Albert'];</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(mousquetaires.concat(extras));<text:s text:c="6"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">// autre manière d'obtenir la liste des 5 mousquetaires</text:p><text:p text:style-name="Code">console.log([].concat(mousquetaires, extras));</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">["Atos", "Portos", "Aramis", "d&#8217;Artagnan", "Albert"]</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Cette méthode <text:span text:style-name="T4">crée un nouveau tableau</text:span> à partir d&#8217;une liste de tableaux
passés en paramètre.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Alternative</text:span> Opérateur <text:span text:style-name="CodeDansTexte">&#8230;&#8203;</text:span> (<text:span text:style-name="T4">spread</text:span>)</text:h><text:p text:style-name="Remarque">Une autre manière de faire est d&#8217;utiliser l&#8217;opérateur <text:span text:style-name="CodeDansTexte">&#8230;&#8203;</text:span>
(aussi appelé <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-spread"  text:visited-style-name="Visited_20_Internet_20_Link">spread</text:a>) pour éclater plusieurs tableaux et
les rassembler dans un autre&#160;:</text:p>
<text:p text:style-name="Remarque">array/spread.js</text:p><text:p text:style-name="RemarqueCode">const mousquetaires = ['Atos', 'Portos', 'Aramis'];</text:p><text:p text:style-name="RemarqueCode">const extras = ['d\'Artagnan', 'Albert'];</text:p><text:p text:style-name="RemarqueCode"></text:p><text:p text:style-name="RemarqueCode">console.log([...mousquetaires, ...extras]);<text:s text:c="3"/><text:span text:style-name="PuceCode">1</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">["Atos", "Portos", "Aramis", "d&#8217;Artagnan", "Albert"]</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">À l&#8217;inverse, la méthode <text:span text:style-name="CodeDansTexte">join</text:span> <text:span text:style-name="T4">concatène</text:span> tous les éléments
dans une <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-string"  text:visited-style-name="Visited_20_Internet_20_Link">chaîne de caractères</text:a> avec le séparateur de notre choix.
Ce séparateur est optionnel.</text:p>
<text:p text:style-name="CodeTitre">array/join.js</text:p><text:p text:style-name="Code">const headers = ['ID', 'NOM', 'PRENOM'];</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(headers.join());<text:s text:c="4"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(headers.join(';')); <text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">console.log(headers.join(''));<text:s text:c="2"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">"ID,NOM,PRENOM"</text:span>&#160;— le séparateur par défaut est une virgule (<text:span text:style-name="CodeDansTexte">,</text:span>).<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">"ID;NOM;PRENOM"</text:span>&#160;— on a choisi le séparateur <text:span text:style-name="CodeDansTexte">;</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">"IDNOMPRENOM"</text:span>.<text:line-break/></text:p>
<text:bookmark text:name="ref-array.forEach" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Itérer sur les valeurs avec des boucles</text:h><text:p text:style-name="TexteCourant">Les boucles sont une manière de <text:span text:style-name="T7">parcourir plusieurs valeurs</text:span>.
Elles aident la mise en place d&#8217;automatismes pour éviter de répéter du code.</text:p>
<text:p text:style-name="CodeTitre">array/loop.js</text:p><text:p text:style-name="Code">const weekdays = [</text:p><text:p text:style-name="Code"><text:s text:c="2"/>'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi'</text:p><text:p text:style-name="Code">];</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">for (const day of weekdays) {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(day);<text:s text:c="27"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">// on obtient le même résultat avec la méthode `forEach`</text:p><text:p text:style-name="Code">weekdays.forEach((day) =&gt; console.log(day));</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche successivement chaque valeur du tableau&#160;— <text:span text:style-name="CodeDansTexte">"lundi"</text:span>, <text:span text:style-name="CodeDansTexte">"mardi"</text:span>, <text:span text:style-name="CodeDansTexte">"mercredi"</text:span>, <text:span text:style-name="CodeDansTexte">"jeudi"</text:span>, <text:span text:style-name="CodeDansTexte">"vendredi"</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Prenons le temps de revenir sur cet exemple.
On y découvre plusieurs manières de faire des boucles sur un tableau&#160;:</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">for&#8230;&#8203;of</text:span></text:span><text:line-break/><text:tab/>On assigne une variable pour chaque élément (opérateur <text:span text:style-name="CodeDansTexte">of</text:span>) du tableau.
Les expressions situées entre accolade (<text:span text:style-name="CodeDansTexte">{&#8230;&#8203;}</text:span>) sont exécutées pour
chaque élément du tableau.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">forEach(element &#8658; expression)</text:span></text:span><text:line-break/><text:tab/>La méthode <text:span text:style-name="CodeDansTexte">forEach</text:span> applique une <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-anonymous-function"  text:visited-style-name="Visited_20_Internet_20_Link">fonction anonyme</text:a>
pour chaque élément du tableau.</text:p>
<text:p text:style-name="TexteCourant">Il y a en réalité deux manières d&#8217;itérer avec la boucle <text:span text:style-name="CodeDansTexte">for</text:span>&#160;:
sur les <text:span text:style-name="T4">index</text:span> (avec l&#8217;opérateur <text:span text:style-name="CodeDansTexte">in</text:span>)
et sur les <text:span text:style-name="T4">valeurs</text:span> (avec l&#8217;opérateur <text:span text:style-name="CodeDansTexte">of</text:span>).</text:p>
<text:p text:style-name="CodeTitre">array/for-of-in.js</text:p><text:p text:style-name="Code">const weekend = ['samedi', 'dimanche'];</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">for (const index in weekend) {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(index);<text:s text:c="13"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(weekend[index]);<text:s text:c="4"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">for (const day of weekend) {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(day);<text:s text:c="15"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche successivement <text:span text:style-name="CodeDansTexte">0</text:span> puis <text:span text:style-name="CodeDansTexte">1</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche successivement <text:span text:style-name="CodeDansTexte">"samedi"</text:span> puis <text:span text:style-name="CodeDansTexte">"dimanche"</text:span>&#160;— l&#8217;index permet de retrouver la valeur du tableau.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche successivement <text:span text:style-name="CodeDansTexte">"samedi"</text:span> puis <text:span text:style-name="CodeDansTexte">"dimanche"</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">La méthode <text:span text:style-name="CodeDansTexte">forEach</text:span> propage en réalité 3 arguments à notre fonction anonyme&#160;:
l'<text:span text:style-name="T7">élément</text:span> en cours de l&#8217;itération,
l'<text:span text:style-name="T7">index</text:span> de l&#8217;élément,
le <text:span text:style-name="T7">tableau</text:span> d&#8217;origine.</text:p>
<text:p text:style-name="TexteCourant">Pourquoi passer le tableau d&#8217;origine alors qu&#8217;on itère sur ce même tableau&#160;?
Pour donner du contexte au cas où on opère
avec une <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-function"  text:visited-style-name="Visited_20_Internet_20_Link">fonction nommée</text:a>.
Nous verrons un usage concret de ce troisième argument
dans la section <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-array.map"  text:visited-style-name="Visited_20_Internet_20_Link">transformer les valeurs</text:a>.</text:p>
<text:p text:style-name="CodeTitre">array/foreach-function.js</text:p><text:p text:style-name="Code">const undeux = ['un', 'deux'];</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const printIndex = (element, index, array) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(`${element} : index ${index}`);<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">undeux.forEach(printIndex);<text:s text:c="20"/><text:span text:style-name="PuceCode">1</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Applique la fonction <text:span text:style-name="CodeDansTexte">printIndex</text:span> pour chaque élément du tableau <text:span text:style-name="CodeDansTexte">undeux</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche successivement <text:span text:style-name="CodeDansTexte">"un&#160;: index 0"</text:span> puis <text:span text:style-name="CodeDansTexte">"deux&#160;: index 1"</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Outre l&#8217;inspection et l&#8217;affichage des valeurs, les boucles offrent la liberté
de <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-array.sort"  text:visited-style-name="Visited_20_Internet_20_Link">faire des tris</text:a>, de <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-array.map"  text:visited-style-name="Visited_20_Internet_20_Link">transformer les valeurs</text:a>, de <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-array.filter"  text:visited-style-name="Visited_20_Internet_20_Link">filtrer selon des conditions</text:a>
mais aussi de <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-array.reduce"  text:visited-style-name="Visited_20_Internet_20_Link">créer de nouvelles structures de données</text:a>.</text:p>
<text:p text:style-name="TexteCourant">Ces méthodes sont décrites dans les sections suivantes.</text:p>
<text:bookmark text:name="ref-array.sort" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Trier les valeurs</text:h><text:p text:style-name="TexteCourant">La méthode <text:span text:style-name="CodeDansTexte">sort</text:span> change l&#8217;ordre des éléments d&#8217;un tableau.
Cette méthode utilise une <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-anonymous-function"  text:visited-style-name="Visited_20_Internet_20_Link">fonction anonyme</text:a>.
La fonction anonyme compare deux éléments entre eux.
Elle retourne un nombre positif, négatif ou égal à zéro selon la
logique que l&#8217;on souhaite donner au tri&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">quand la comparaison est <text:span text:style-name="T4">positive</text:span>&#160;:
<text:span text:style-name="CodeDansTexte">sort</text:span> placera le premier élément <text:span text:style-name="T4">avant</text:span> le second&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">quand la comparaison est <text:span text:style-name="T4">négative</text:span>&#160;:
<text:span text:style-name="CodeDansTexte">sort</text:span> placera le premier élément <text:span text:style-name="T4">après</text:span> le second&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">quand la comparaison est nulle ou non spécifiée&#160;:
l&#8217;ordre des éléments restera inchangé.</text:p>
</text:list-item></text:list>
<text:p text:style-name="CodeTitre">array/sort.js</text:p><text:p text:style-name="Code">const sortAsc = (a, b) =&gt; a - b;</text:p><text:p text:style-name="Code">const sortDesc = (a, b) =&gt; b - a;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log([1, 3, 2].sort(sortAsc));<text:s text:c="17"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const undeux = [</text:p><text:p text:style-name="Code"><text:s text:c="2"/>{label: 'deux', order: 2},</text:p><text:p text:style-name="Code"><text:s text:c="2"/>{label: 'un', order: 1}</text:p><text:p text:style-name="Code">];</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(undeux.sort((a, b) =&gt; a.order - b.order));<text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">[1, 2, 3]</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">[ { label: "un", order: 1 }, { label: "deux", order: 2 } ]</text:span>&#160;— le tableau a été trié sur la valeur de <text:span text:style-name="CodeDansTexte">order</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-string"  text:visited-style-name="Visited_20_Internet_20_Link">chaînes de caractères</text:a> peuvent être comparées
avec la méthode <text:span text:style-name="CodeDansTexte">localeCompare</text:span>.
Cette méthode retourne un nombre après une comparaison caractère par caractère
entre deux chaînes&#160;:</text:p>
<text:p text:style-name="CodeTitre">array/sort-strings.js</text:p><text:p text:style-name="Code">const sortAlpha = (a, b) =&gt; a.localeCompare(b);</text:p><text:p text:style-name="Code">console.log(['A', 'b', 'c', 'a'].sort(sortAlpha));<text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const undeux = [</text:p><text:p text:style-name="Code"><text:s text:c="2"/>{label: 'un', order: 1},</text:p><text:p text:style-name="Code"><text:s text:c="2"/>{label: 'deux', order: 2}</text:p><text:p text:style-name="Code">];</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const sortLabel = (a, b) =&gt; a.label.localeCompare(b.label);</text:p><text:p text:style-name="Code">console.log(undeux.sort(sortLabel));<text:s text:c="14"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">["a", "A", "b", "c"]</text:span>&#160;— les majuscules influencent le tri.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">[ { label: "deux", order: 2 }, { label: "un", order: 1 } ]</text:span>&#160;— le tableau a été trié sur la valeur de <text:span text:style-name="CodeDansTexte">label</text:span> cette fois-ci.<text:line-break/></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Alternative</text:span> <text:span text:style-name="CodeDansTexte">Array.reverse</text:span></text:h><text:p text:style-name="Remarque">La méthode <text:span text:style-name="CodeDansTexte">reverse</text:span> transforme le tableau d&#8217;origine
en inversant l&#8217;ordre de ses éléments.</text:p>
<text:p text:style-name="Remarque">array/reverse.js</text:p><text:p text:style-name="RemarqueCode">const weekend = ['samedi', 'dimanche'];</text:p><text:p text:style-name="RemarqueCode"></text:p><text:p text:style-name="RemarqueCode">weekend.reverse();</text:p><text:p text:style-name="RemarqueCode"></text:p><text:p text:style-name="RemarqueCode">console.log(weekend);<text:s text:c="5"/><text:span text:style-name="PuceCode">1</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">["dimanche", "samedi"]</text:span>.<text:line-break/></text:p>
<text:bookmark text:name="ref-array.map" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Transformer les valeurs</text:h><text:p text:style-name="TexteCourant">La méthode <text:span text:style-name="CodeDansTexte">map</text:span> fonctionne quasiment comme la méthode <text:span text:style-name="CodeDansTexte">forEach</text:span>.
À ceci près qu&#8217;elle retourne un nouveau tableau,
constitué des valeurs retournées par la fonction appliquée sur chaque élément.</text:p>
<text:p text:style-name="CodeTitre">array/map.js</text:p><text:p text:style-name="Code">const newArray = ['a', ' b', 'c '].map(value =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>return value.trim().toUpperCase();</text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(newArray); <text:span text:style-name="PuceCode">1</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Retourne <text:span text:style-name="CodeDansTexte">['A', 'B', 'C']</text:span>&#160;— on a passé tous les éléments en lettres majuscules.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Le troisième argument de la méthode <text:span text:style-name="CodeDansTexte">map</text:span> prend ici tout son sens.
Par exemple si l&#8217;on souhaite dédoublonner un tableau&#160;:</text:p>
<text:p text:style-name="CodeTitre">array/map-dedupe.js</text:p><text:p text:style-name="Code">const soundcheck = ['un', 'deux', 'un', 'deux'];</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const dedupe = (element, index, array) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>if (array.slice(index+1).includes(element)) {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>return null;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>return element;</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(soundcheck.map(dedupe));<text:s text:c="10"/><text:span text:style-name="PuceCode">1</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">[null, null, "un", "deux"]</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple précédent vérifie à chaque itération si la valeur de l&#8217;élément
est contenue dans la <text:span text:style-name="T4">suite du tableau</text:span>.
<text:span text:style-name="CodeDansTexte">array.slice(index+1)</text:span> crée un nouveau tableau contenant tous les éléments
situés <text:span text:style-name="T4">après</text:span> l&#8217;élément courant (<text:span text:style-name="CodeDansTexte">index+1</text:span>).</text:p>
<text:p text:style-name="TexteCourant">La méthode <text:span text:style-name="CodeDansTexte">reduce</text:span> est une autre méthode de transformation.
Elle est différente, car elle passe le résultat de la précédente itération
à la suivante.
C&#8217;est comme si elle <text:span text:style-name="T4">accumulait</text:span> les résultats.
<text:span text:style-name="CodeDansTexte">reduce</text:span> retourne une valeur finale qui peut être autre chose qu&#8217;un tableau.</text:p>
<text:p text:style-name="CodeTitre">array/reduce.js</text:p><text:p text:style-name="Code">const stats = [2, 4, 6, 10];</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const sum = (previous, element) =&gt; previous + element;<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(stats.reduce(sum, 0));<text:s text:c="4"/><text:span text:style-name="PuceCode">1</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Effectue une <text:span text:style-name="T4">réduction</text:span> à l&#8217;aide de la fonction <text:span text:style-name="CodeDansTexte">sum</text:span> et d&#8217;une valeur par défaut de <text:span text:style-name="CodeDansTexte">0</text:span>&#160;— affiche <text:span text:style-name="CodeDansTexte">22</text:span> à l&#8217;issue des itérations .<text:line-break/><text:span text:style-name="PuceCode">2</text:span> La valeur de l'<text:span text:style-name="T7">élément</text:span> est le <text:span text:style-name="T4">second paramètre</text:span> le premier paramètre correspond au résultat de l&#8217;itération précédente ou à la valeur initiale, passée en argument à <text:span text:style-name="CodeDansTexte">reduce</text:span>.<text:line-break/></text:p>
<text:bookmark text:name="ref-array.filter" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Filtrer les valeurs</text:h><text:p text:style-name="TexteCourant">La méthode <text:span text:style-name="CodeDansTexte">filter</text:span> retourne un nouveau tableau filtré à l&#8217;aide
d&#8217;une <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-anonymous-function"  text:visited-style-name="Visited_20_Internet_20_Link">fonction anonyme</text:a>.
Seuls les éléments qui satisfont la condition établie par la fonction
se retrouvent dans le nouveau tableau.</text:p>
<text:p text:style-name="CodeTitre">array/filter.js</text:p><text:p text:style-name="Code">const values = [null, 'un', 'deux', 3];</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const is_finite = (value) =&gt; Number.isFinite(value);</text:p><text:p text:style-name="Code">const direct = (value) =&gt; value;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(values.filter(is_finite));<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(values.filter(direct));<text:s text:c="5"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Retourne <text:span text:style-name="CodeDansTexte">[3]</text:span>&#160;— c&#8217;est la seule valeur qui est un nombre.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Retourne <text:span text:style-name="CodeDansTexte">["un", "deux", 3]</text:span>&#160;— ce sont les valeurs non-nulles.<text:line-break/></text:p>
<text:bookmark text:name="ref-array.find" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Identifier une ou plusieurs valeurs</text:h><text:p text:style-name="TexteCourant">Les méthodes <text:span text:style-name="CodeDansTexte">indexOf</text:span>, <text:span text:style-name="CodeDansTexte">lastIndexOf</text:span> et <text:span text:style-name="CodeDansTexte">includes</text:span> identifient une
<text:span text:style-name="T4">valeur exacte</text:span> au sein d&#8217;un tableau.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="CodeDansTexte">indexOf</text:span> et <text:span text:style-name="CodeDansTexte">lastIndexOf</text:span> retournent l'<text:span text:style-name="T4">index</text:span> de la valeur recherchée.
Si aucun élément n&#8217;a été retrouvé, elles retourneront la valeur <text:span text:style-name="CodeDansTexte">-1</text:span>.<text:line-break/><text:span text:style-name="CodeDansTexte">includes</text:span> retourne un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-boolean"  text:visited-style-name="Visited_20_Internet_20_Link">booléen</text:a> indiquant si la recherche
est fructueuse (<text:span text:style-name="CodeDansTexte">true</text:span>) ou non (<text:span text:style-name="CodeDansTexte">false</text:span>).</text:p>
<text:p text:style-name="CodeTitre">array/index-of-includes.js</text:p><text:p text:style-name="Code">const soundcheck = ['un', 'deux', 'un', 'deux'];</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(soundcheck.indexOf('un'));<text:s text:c="8"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(soundcheck.indexOf('deux'));<text:s text:c="6"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">console.log(soundcheck.indexOf('trois'));<text:s text:c="5"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(soundcheck.lastIndexOf('deux'));<text:s text:c="2"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(soundcheck.includes('deux'));<text:s text:c="5"/><text:span text:style-name="PuceCode">5</text:span></text:p><text:p text:style-name="Code">console.log(soundcheck.includes('trois'));<text:s text:c="4"/><text:span text:style-name="PuceCode">6</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">0</text:span>&#160;— le premier <text:span text:style-name="CodeDansTexte">"un"</text:span> est l&#8217;élément <text:span text:style-name="CodeDansTexte">0</text:span> du tableau.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">1</text:span>&#160;— le premier <text:span text:style-name="CodeDansTexte">"deux"</text:span> est l&#8217;élément <text:span text:style-name="CodeDansTexte">1</text:span> du tableau.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">-1</text:span>&#160;— cet élément est absent du tableau.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Affiche <text:span text:style-name="CodeDansTexte">3</text:span>&#160;— le dernier <text:span text:style-name="CodeDansTexte">"deux"</text:span> est l&#8217;élément <text:span text:style-name="CodeDansTexte">3</text:span> du tableau.<text:line-break/><text:span text:style-name="PuceCode">5</text:span> Affiche <text:span text:style-name="CodeDansTexte">true</text:span>&#160;— l&#8217;élément <text:span text:style-name="CodeDansTexte">"un"</text:span> existe dans le tableau.<text:line-break/><text:span text:style-name="PuceCode">6</text:span> Affiche <text:span text:style-name="CodeDansTexte">false</text:span>&#160;— l&#8217;élément <text:span text:style-name="CodeDansTexte">"trois"</text:span> n&#8217;existe pas dans le tableau.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Il existe ensuite d&#8217;autres méthodes comme <text:span text:style-name="CodeDansTexte">find</text:span>, <text:span text:style-name="CodeDansTexte">some</text:span> et <text:span text:style-name="CodeDansTexte">every</text:span>.
Elles <text:span text:style-name="T7">identifient des éléments à partir d&#8217;une fonction</text:span>.
Les conditions de recherche sont plus complètes, car on n&#8217;est pas obligé
de connaître la valeur exacte recherchée.</text:p>
<text:p text:style-name="TexteCourant">La méthode <text:span text:style-name="CodeDansTexte">find</text:span> retourne l'<text:span text:style-name="T4">élément</text:span> qui satisfait la condition en premier.
La méthode <text:span text:style-name="CodeDansTexte">findIndex</text:span> retourne l'<text:span text:style-name="T4">index de l&#8217;élément</text:span>
qui satisfait la condition en premier.</text:p>
<text:p text:style-name="CodeTitre">array/find.js</text:p><text:p text:style-name="Code">const values = [null, 2, 10, 100];</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const biggerThan50 = (value) =&gt; value &gt; 50;<text:s text:c="3"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(values.find(biggerThan50));<text:s text:c="7"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">console.log(values.findIndex(biggerThan50));<text:s text:c="2"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> La fonction <text:span text:style-name="CodeDansTexte">isFinite</text:span> retourne <text:span text:style-name="CodeDansTexte">true</text:span> si la valeur passée en argument est un nombre supérieur à <text:span text:style-name="CodeDansTexte">50</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">100</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">3</text:span>&#160;— c&#8217;est l&#8217;index de la valeur <text:span text:style-name="CodeDansTexte">100</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Les méthodes <text:span text:style-name="CodeDansTexte">some</text:span> et <text:span text:style-name="CodeDansTexte">every</text:span> retournent un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-boolean"  text:visited-style-name="Visited_20_Internet_20_Link">booléen</text:a>
lorsque la condition est satisfaite.
<text:span text:style-name="CodeDansTexte">some</text:span> retourne <text:span text:style-name="CodeDansTexte">true</text:span> si <text:span text:style-name="T4">au moins une itération</text:span> est satisfaisante.
<text:span text:style-name="CodeDansTexte">every</text:span> retourne <text:span text:style-name="CodeDansTexte">true</text:span> si <text:span text:style-name="T4">toutes les itérations</text:span> sont satisfaisantes.</text:p>
<text:p text:style-name="CodeTitre">array/some.js</text:p><text:p text:style-name="Code">const values = [1, 'a', 120, undefined, 4];</text:p><text:p text:style-name="Code">const isUndefined = (value) =&gt; value === undefined;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(values.every(isUndefined));<text:s text:c="16"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(values.some(isUndefined));<text:s text:c="17"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">console.log(values.filter(d =&gt; d).some(isUndefined));<text:s text:c="2"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">false</text:span>&#160;— toutes les valeurs ne sont pas égales à <text:span text:style-name="CodeDansTexte">undefined</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">true</text:span>&#160;— au moins une valeur est égale à <text:span text:style-name="CodeDansTexte">undefined</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">false</text:span>&#160;— il n&#8217;y a plus de valeur <text:span text:style-name="CodeDansTexte">undefined</text:span> dans le tableau, car on a utilisé la méthode <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-array.filter"  text:visited-style-name="Visited_20_Internet_20_Link">filter</text:a> pour supprimer les valeurs non-vides.<text:line-break/></text:p>
<text:bookmark text:name="ref-array-destructuring" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Décomposition de tableau (<text:span text:style-name="T4">destructuring</text:span>)</text:h><text:p text:style-name="TexteCourant">L&#8217;affectation par <text:span text:style-name="T4">décomposition</text:span> (<text:span text:style-name="T4">destructuring</text:span>) est une manière élégante
de piocher une ou plusieurs valeurs dans un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-array"  text:visited-style-name="Visited_20_Internet_20_Link">tableau</text:a>.
La décomposition n&#8217;altère pas le contenu des variables décomposées.
Ce mécanisme existe aussi pour les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-object-destructuring"  text:visited-style-name="Visited_20_Internet_20_Link">objets</text:a>.</text:p>
<text:p text:style-name="CodeTitre">array/destructuring.js</text:p><text:p text:style-name="Code">const weekdays = [</text:p><text:p text:style-name="Code"><text:s text:c="2"/>'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi'</text:p><text:p text:style-name="Code">];</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const [first, second] = weekdays;</text:p><text:p text:style-name="Code">console.log(first);<text:s text:c="15"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(second);<text:s text:c="14"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const [,, third] = weekdays;</text:p><text:p text:style-name="Code">console.log(third);<text:s text:c="15"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">"lundi"</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">"mardi"</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">"mercredi"</text:span>&#160;— l&#8217;utilisation des virgules sans variable a permis de <text:span text:style-name="T4">sauter</text:span> des positions dans la décomposition.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">La décomposition se combine agréablement avec l&#8217;opérateur <text:span text:style-name="CodeDansTexte">&#8230;&#8203;</text:span> (opérateur <text:span text:style-name="T4">spread</text:span>).
Il accumule <text:span text:style-name="T4">le reste</text:span> des éléments dans une variable, sous forme de tableau.</text:p>
<text:p text:style-name="CodeTitre">array/destructuring-rest.js</text:p><text:p text:style-name="Code">const weekdays = [</text:p><text:p text:style-name="Code"><text:s text:c="2"/>'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi'</text:p><text:p text:style-name="Code">];</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const [first, second, ...rest] = weekdays;</text:p><text:p text:style-name="Code">console.log(rest);<text:s text:c="18"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">// revient au même que</text:p><text:p text:style-name="Code">// const [,, ...rest] = weekdays;</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">["mercredi", "jeudi", "vendredi"]</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">La méthode <text:span text:style-name="CodeDansTexte">slice</text:span> offre davantage de souplesse pour gérer les <text:span text:style-name="T4">limites</text:span>.
On choisit <text:span text:style-name="T4">l&#8217;index de début</text:span> et <text:span text:style-name="T4">l&#8217;index de fin</text:span> de la décomposition.</text:p>
<text:p text:style-name="CodeTitre">array/slice.js</text:p><text:p text:style-name="Code">const values = ['un', 'deux', 'trois', 'quatre'];</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(values.slice(1));<text:s text:c="5"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(values.slice(1, 2));<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">["deux", "trois", "quatre"]</text:span>&#160;— à partir de l&#8217;index <text:span text:style-name="CodeDansTexte">1</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">["deux"]</text:span>&#160;— à partir de l&#8217;index <text:span text:style-name="CodeDansTexte">1</text:span> et jusqu&#8217;à l&#8217;index <text:span text:style-name="CodeDansTexte">2</text:span> (non-inclus).<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Si les valeurs de début et/ou de fin sont <text:span text:style-name="T4">négatives</text:span>,
les index sont calculés <text:span text:style-name="T4">à partir de la fin</text:span> du tableau.</text:p>
<text:p text:style-name="CodeTitre">array/slice-negative.js</text:p><text:p text:style-name="Code">const values = ['un', 'deux', 'trois', 'quatre'];</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(values.slice(-1));<text:s text:c="5"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(values.slice(-3));<text:s text:c="5"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(values.slice(0, -1));<text:s text:c="2"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">console.log(values.slice(0, -3));<text:s text:c="2"/><text:span text:style-name="PuceCode">4</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">["quatre"]</text:span>&#160;— premier élément à partir de la fin.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">["deux", "trois", "quatre"]</text:span>&#160;— les trois premiers éléments à partir de la fin.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">["un", "deux", "trois"]</text:span>&#160;— jusqu&#8217;au dernier élément à partir de la fin (non-inclus).<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Affiche <text:span text:style-name="CodeDansTexte">["un"]</text:span>&#160;— jusqu&#8217;au troisième élément à partir de la fin (non-inclus).<text:line-break/></text:p>
<text:bookmark text:name="ref-object" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Représenter et accéder à des structures d&#8217;objet</text:h><text:p text:style-name="TexteCourant">Les structures d&#8217;objet servent à <text:span text:style-name="T7">lister des éléments</text:span> de tout type
au sein d&#8217;une même variable.
L&#8217;indexation se fait <text:span text:style-name="T4">comme dans un dictionnaire</text:span>,
avec un identifiant unique pour chaque valeur.</text:p>
<text:p text:style-name="CodeTitre">object/base.js</text:p><text:p text:style-name="Code">const francine = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>first_name: 'Francine',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>location: 'Drôme',</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(francine.first_name); <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">francine.age = 25;<text:s text:c="16"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">console.log(francine.age);<text:s text:c="8"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">console.log(francine.twitter);<text:s text:c="4"/><text:span text:style-name="PuceCode">4</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">"Francine"</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> On assigne une valeur numérique dans l&#8217;index <text:span text:style-name="CodeDansTexte">age</text:span> une fois l&#8217;objet créé.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">25</text:span>&#160;— la valeur numérique précédemment assignée.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Affiche <text:span text:style-name="CodeDansTexte">undefined</text:span>&#160;— aucune valeur n&#8217;est assignée pour cette clé.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Nous pouvons nous baser sur une autre syntaxe pour <text:span text:style-name="T4">créer</text:span> et <text:span text:style-name="T4">accéder</text:span>
à des valeurs en utilisant des variables en guise d&#8217;identifiant d&#8217;index&#160;:</text:p>
<text:p text:style-name="CodeTitre">object/dynamic.js</text:p><text:p text:style-name="Code">const SOCIAL_NETWORK = 'twitter';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const francine = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>first_name: 'Francine',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>location: 'Drôme',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>[SOCIAL_NETWORK]: '@FrancineDu26',<text:s text:c="4"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(francine[SOCIAL_NETWORK]);<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">// manières équivalentes, sans utilisation de variable</text:p><text:p text:style-name="Code">console.log(francine.twitter);</text:p><text:p text:style-name="Code">console.log(francine['twitter']);</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Assigne la chaîne <text:span text:style-name="CodeDansTexte">@FrancineDu26</text:span> dans l&#8217;index correspondant à la valeur de la variable <text:span text:style-name="CodeDansTexte">SOCIAL_NETWORK</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">"@FrancineDu26"</text:span>.<text:line-break/></text:p>
<text:bookmark text:name="ref-object-destructuring" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Décomposition d&#8217;objet (<text:span text:style-name="T4">destructuring</text:span>)</text:h><text:p text:style-name="TexteCourant">L&#8217;affectation par décomposition (<text:span text:style-name="T4">destructuring</text:span>) est une manière
élégante de piocher une ou plusieurs valeurs dans un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-object"  text:visited-style-name="Visited_20_Internet_20_Link">objet</text:a>.
Ce mécanisme existe aussi pour les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-array-destructuring"  text:visited-style-name="Visited_20_Internet_20_Link">tableaux</text:a>.</text:p>
<text:p text:style-name="CodeTitre">object/destructuring.js</text:p><text:p text:style-name="Code">const francine = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>first_name: 'Francine',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>location: 'Drôme',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>twitter: '@FrancineDu26',</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {location,twitter} = francine;</text:p><text:p text:style-name="Code">console.log(location);<text:s text:c="12"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {first_name:prenom} = francine;</text:p><text:p text:style-name="Code">console.log(prenom);<text:s text:c="14"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {is_admin=false} = francine;</text:p><text:p text:style-name="Code">console.log(is_admin);<text:s text:c="12"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">"Drôme"</text:span>&#160;— on a décomposé la clé <text:span text:style-name="CodeDansTexte">location</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">"Francine"</text:span>&#160;— on a décomposé puis renommé la clé <text:span text:style-name="CodeDansTexte">first_name</text:span> en une nouvelle variable&#160;: <text:span text:style-name="CodeDansTexte">prenom</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">false</text:span>&#160;— on a décomposé la clé <text:span text:style-name="CodeDansTexte">is_admin</text:span> et comme elle n&#8217;existe pas, on a spécifié la valeur par défaut <text:span text:style-name="CodeDansTexte">false</text:span>, au lieu de <text:span text:style-name="CodeDansTexte">undefined</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">La décomposition se combine agréablement avec l&#8217;opérateur <text:span text:style-name="CodeDansTexte">&#8230;&#8203;</text:span>
(opérateur <text:span text:style-name="T4">spread</text:span>).
Il accumule <text:span text:style-name="T4">le reste</text:span> des éléments dans une variable,
sous forme d&#8217;objet.</text:p>
<text:p text:style-name="CodeTitre">object/destructuring-rest.js</text:p><text:p text:style-name="Code">const francine = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>first_name: 'Francine',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>location: 'Drôme',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>twitter: '@FrancineDu26',</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {first_name, ...metadata} = francine;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(first_name);<text:s text:c="10"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(metadata);<text:s text:c="12"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">"Francine"</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">{ location: "Drôme", twitter: "@FrancineDu26" }</text:span>.<text:line-break/></text:p>
<text:bookmark text:name="ref-object.assign" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Combiner des objets</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="CodeDansTexte">Object.assign</text:span> est une méthode qui permet d&#8217;étendre et combiner plusieurs objets.
On a le choix d&#8217;intégrer les nouveaux éléments à un objet existant
ou bien d&#8217;en créer un nouveau.
Les objets sont combinés dans le premier paramètre de la fonction.</text:p>
<text:p text:style-name="CodeTitre">object/assign.js</text:p><text:p text:style-name="Code">const o = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>first_name: 'Francine',</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const o2 = Object.assign({}, o, {location: 'Drôme'});</text:p><text:p text:style-name="Code">console.log(o2);<text:s text:c="8"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(o);<text:s text:c="9"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">Object.assign(o2, {location: 'Paris'}, {location: 'Ardèche'});</text:p><text:p text:style-name="Code">console.log(o2);<text:s text:c="8"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">{ first_name: "Francine", location: "Drôme" }</text:span>&#160;— la nouvelle variable contient nos deux objets combinés.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">{ first_name: "Francine" }</text:span>&#160;— ce sont les valeurs originelles de notre objet.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">{ first_name: "Francine", location: 'Ardèche' }</text:span>&#160;— l&#8217;objet <text:span text:style-name="CodeDansTexte">o2</text:span> a reçu la nouvelle propriété <text:span text:style-name="CodeDansTexte">location</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">À noter que les assignations se font de <text:span text:style-name="T4">gauche à droite</text:span>.
Toute clé existante est remplacée.</text:p>
<text:p text:style-name="TexteCourant">La <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-object-destructuring"  text:visited-style-name="Visited_20_Internet_20_Link">décomposition d&#8217;objet</text:a> sert également à combiner
un ou plusieurs objets entre eux.</text:p>
<text:p text:style-name="CodeTitre">object/destructuring-spread.js</text:p><text:p text:style-name="Code">const francine = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>first_name: 'Francine',</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const francine26 = {...francine, location: 'Drôme'};</text:p><text:p text:style-name="Code">console.log(francine26);<text:s text:c="6"/><text:span text:style-name="PuceCode">1</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">{ first_name: "Francine", location: "Drôme" }</text:span>.<text:line-break/></text:p>
<text:bookmark text:name="ref-itérer_sur_des_objets" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Itérer sur des objets</text:h><text:p text:style-name="TexteCourant">La méthode <text:span text:style-name="CodeDansTexte">Object.entries</text:span> est probablement la méthode
la plus adaptée pour itérer à la fois sur les <text:span text:style-name="T4">clés</text:span> et sur les <text:span text:style-name="T4">valeurs</text:span>
d&#8217;un objet.
<text:span text:style-name="CodeDansTexte">Object.entries</text:span> est une fonction qui retourne un tableau.
Ce tableau contient autant de paires de <text:span text:style-name="CodeDansTexte">[clé, valeur]</text:span> qu&#8217;il y a
d&#8217;éléments dans l&#8217;objet.</text:p>
<text:p text:style-name="CodeTitre">object/entries.js</text:p><text:p text:style-name="Code">const francine = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>first_name: 'Francine',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>location: 'Drôme',</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(Object.entries(francine)); <text:span text:style-name="PuceCode">1</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">[[ "first_name", "Francine" ], [ "location", "Drôme" ]]</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Libre à nous d'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-array.forEach"  text:visited-style-name="Visited_20_Internet_20_Link">itérer sur les valeurs</text:a>
et d&#8217;utiliser la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-array-destructuring"  text:visited-style-name="Visited_20_Internet_20_Link">décomposition de tableaux</text:a>
pour rendre notre code explicite&#160;:</text:p>
<text:p text:style-name="CodeTitre">object/entries-loop.js</text:p><text:p text:style-name="Code">const francine = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>first_name: 'Francine',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>location: 'Drôme',</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">Object.entries(francine).forEach(([key, value]) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(`francine.${key} vaut ${value}`);<text:s text:c="3"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">})</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">// même résultat, autre méthode</text:p><text:p text:style-name="Code">for (const [key, value] of Object.entries(francine)) {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(`francine.${key} vaut ${value}`);<text:s text:c="3"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche successivement <text:span text:style-name="CodeDansTexte">"francine.first_name vaut Francine"</text:span> puis <text:span text:style-name="CodeDansTexte">"francine.location vaut Drôme"</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Idem.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Deux autres méthodes récupèrent
soit <text:span text:style-name="T4">la liste des clés</text:span> d&#8217;un objet (<text:span text:style-name="CodeDansTexte">Object.keys</text:span>)
soit <text:span text:style-name="T4">la liste des valeurs</text:span> d&#8217;un objet (<text:span text:style-name="CodeDansTexte">Object.values</text:span>).
Dans les deux cas, les résultats sont retournés
sous forme d&#8217;un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-array"  text:visited-style-name="Visited_20_Internet_20_Link">tableau</text:a>.</text:p>
<text:p text:style-name="CodeTitre">object/keys.js</text:p><text:p text:style-name="Code">const francine = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>first_name: 'Francine',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>location: 'Drôme',</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(Object.keys(francine));<text:s text:c="5"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(Object.values(francine));<text:s text:c="3"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">["first_name", "location"]</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">["Francine", "Drôme"]</text:span>.<text:line-break/></text:p>
<text:bookmark text:name="ref-identifier_une_ou_plusieurs_valeurs" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Identifier une ou plusieurs valeurs</text:h><text:p text:style-name="TexteCourant">Il y a trois manières d&#8217;identifier si un objet contient une valeur
associée à une clé.</text:p>
<text:p text:style-name="TexteCourant">Le plus simple est d&#8217;utiliser la méthode <text:span text:style-name="CodeDansTexte">hasOwnProperty</text:span>.
Elle prend en argument le nom de la clé à tester et
retourne un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-boolean"  text:visited-style-name="Visited_20_Internet_20_Link">booléen</text:a>.</text:p>
<text:p text:style-name="CodeTitre">object/has-own-property.js</text:p><text:p text:style-name="Code">const francine = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>first_name: 'Francine',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>location: 'Drôme',</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(francine.hasOwnProperty('location'));<text:s text:c="3"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(francine.hasOwnProperty('twitter'));<text:s text:c="4"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">true</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">false</text:span>&#160;— cette clé n&#8217;existe pas dans cet objet.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">La seconde manière est d&#8217;utiliser l&#8217;opérateur <text:span text:style-name="CodeDansTexte">in</text:span>.
On l&#8217;aura déjà rencontré lors des <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-array.forEach"  text:visited-style-name="Visited_20_Internet_20_Link">boucles</text:a>.
Sauf que cette fois, on l&#8217;utilise une seule fois&#160;— et non dans une boucle.</text:p>
<text:p text:style-name="CodeTitre">object/key-in.js</text:p><text:p text:style-name="Code">const francine = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>first_name: 'Francine',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>location: 'Drôme',</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log('location' in francine);<text:s text:c="3"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log('twitter' in francine);<text:s text:c="4"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">true</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">false</text:span>&#160;— cette clé n&#8217;existe pas dans cet objet.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Enfin, on peut tester la valeur associée avec la syntaxe standard <text:span text:style-name="CodeDansTexte">objet.clé</text:span>.</text:p>
<text:p text:style-name="CodeTitre">object/key.js</text:p><text:p text:style-name="Code">const francine = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>first_name: 'Francine',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>location: 'Drôme',</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(Boolean(francine.location));<text:s text:c="3"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(Boolean(francine.twitter));<text:s text:c="4"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">true</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">false</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Attention toutefois, car cette méthode <text:span text:style-name="T4">teste uniquement la valeur</text:span>.
Si la clé existe et contient <text:span text:style-name="CodeDansTexte">undefined</text:span>, vous ne verrez pas la différence.</text:p>
<text:p text:style-name="CodeTitre">object/key-undefined.js</text:p><text:p text:style-name="Code">const francine = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>first_name: 'Francine',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>location: 'Drôme',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>twitter: undefined</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(Boolean(francine.twitter));<text:s text:c="10"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(francine.twitter !== undefined);<text:s text:c="5"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(francine.hasOwnProperty('twitter')); <text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">console.log('twitter' in francine);<text:s text:c="14"/><text:span text:style-name="PuceCode">4</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">false</text:span>&#160;— la valeur <text:span text:style-name="CodeDansTexte">undefined</text:span> est convertie en <text:span text:style-name="CodeDansTexte">false</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">false</text:span>&#160;— la clé existe bien, mais elle contient la valeur <text:span text:style-name="CodeDansTexte">undefined</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">true</text:span>&#160;— le test se fait sur l&#8217;existence de la clé.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Affiche <text:span text:style-name="CodeDansTexte">true</text:span>&#160;— idem.<text:line-break/></text:p>
<text:bookmark text:name="ref-json" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Lire et écrire des données au format JSON</text:h><text:p text:style-name="TexteCourant">JSON (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://json.org" text:visited-style-name="Visited_20_Internet_20_Link">http://json.org</text:a></text:span>) est un format de données textuel standardisé.
Son but est de pouvoir <text:span text:style-name="T7">représenter des données informatiques</text:span> de manière
interopérable entre différents langages.</text:p>
<text:p text:style-name="CodeTitre">json/base.json</text:p><text:p text:style-name="Code">{</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"title": "Node.js",</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"price_tag": 32,</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"keywords": [</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"JavaScript",</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"Node.js",</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"Apprendre par l'exemple"</text:p><text:p text:style-name="Code"><text:s text:c="2"/>]</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant">Le format JSON ressemble beaucoup à une structure d'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-object"  text:visited-style-name="Visited_20_Internet_20_Link">objet</text:a> ECMAScript.
La représentation est plus stricte car <text:span text:style-name="T4">toute donnée</text:span> doit être représentée
de manière textuelle.
Ainsi, toutes les clés sont entourées de <text:span text:style-name="T4">guillemets doubles</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Les types de données autorisés sont les nombres, les chaînes de caractère,
les booléens, les tableaux, les objets et la valeur <text:span text:style-name="CodeDansTexte">null</text:span>.
On ne peut donc pas représenter de <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-function"  text:visited-style-name="Visited_20_Internet_20_Link">fonction</text:a>,
d'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-class"  text:visited-style-name="Visited_20_Internet_20_Link">instance d&#8217;objet</text:a> ni même la valeur <text:span text:style-name="CodeDansTexte">undefined</text:span>.</text:p>
<text:p text:style-name="TexteCourant">ECMAScript embarque le nécessaire pour <text:span text:style-name="T4">parser</text:span> depuis et <text:span text:style-name="T4">convertir</text:span> en JSON.
Cela se fait respectivement avec les fonctions <text:span text:style-name="CodeDansTexte">JSON.parse</text:span> et <text:span text:style-name="CodeDansTexte">JSON.stringify</text:span>.</text:p>
<text:p text:style-name="TexteCourant">La fonction <text:span text:style-name="CodeDansTexte">JSON.parse</text:span> consomme du texte.
Elle retourne une représentation ECMAScript ou lance une <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-error"  text:visited-style-name="Visited_20_Internet_20_Link">erreur</text:a>
en cas de problème.</text:p>
<text:p text:style-name="CodeTitre">json/parse.js</text:p><text:p text:style-name="Code">const json_object = '{ "title": "Node.js", "price_tag": 32 }';</text:p><text:p text:style-name="Code">const json_string = '"Hello World!"';</text:p><text:p text:style-name="Code">const json_number = '32';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(JSON.parse(json_string)); <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(JSON.parse(json_number)); <text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">console.log(JSON.parse(json_object)); <text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">"Hello World!"</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">32</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">{price_tag: 32, title: "Node.js"}</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">À l&#8217;inverse, la fonction <text:span text:style-name="CodeDansTexte">JSON.stringify</text:span> convertit une structure ECMAScript
en chaîne de caractères au format JSON&#160;:</text:p>
<text:p text:style-name="CodeTitre">json/stringify.js</text:p><text:p text:style-name="Code">const location = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>lat: 48.8503439,</text:p><text:p text:style-name="Code"><text:s text:c="2"/>lon: 2.34658949</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(JSON.stringify(location));<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">"{\"lat\":48.8503439,\"lon\":2.34658949}"</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">La fonction <text:span text:style-name="CodeDansTexte">JSON.stringify</text:span> parcourt tous les éléments
pour les sérialiser en forme textuelle.
Quand la fonction de sérialisation rencontre la la clé spéciale <text:span text:style-name="CodeDansTexte">toJSON</text:span>,
elle l&#8217;utilisera pour effectuer la conversion&#160;:</text:p>
<text:p text:style-name="CodeTitre">json/to-json.js</text:p><text:p text:style-name="Code">const location = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>lat: 48.8503439,</text:p><text:p text:style-name="Code"><text:s text:c="2"/>lon: 2.34658949,</text:p><text:p text:style-name="Code"><text:s text:c="2"/>toJSON() {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>return `geo=${this.lat},${this.lon}`;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(JSON.stringify(location));<text:s text:c="4"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">delete location.toJSON;</text:p><text:p text:style-name="Code">console.log(JSON.stringify(location));<text:s text:c="4"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">"\"geo=48.8503439,2.34658949\""</text:span>&#160;— c&#8217;est la sérialisation definie par notre fonction <text:span text:style-name="CodeDansTexte">toJSON</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">"{\"lat\":48.8503439,\"lon\":2.34658949}"</text:span>&#160;— sans la clé <text:span text:style-name="CodeDansTexte">toJSON</text:span>, notre objet initial est sérialisé tel quel.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Notre implémentation contenue dans la fonction <text:span text:style-name="CodeDansTexte">toJSON</text:span> est
responsable de <text:span text:style-name="T7">renvoyer du texte seulement</text:span> <text:span text:style-name="T4">et</text:span> de <text:span text:style-name="T7">choisir les clés</text:span>
à sérialiser.</text:p>
<text:p text:style-name="CodeTitre">json/to-json-extra.js</text:p><text:p text:style-name="Code">const location = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>lat: 48.8503439,</text:p><text:p text:style-name="Code"><text:s text:c="2"/>lon: 2.34658949,</text:p><text:p text:style-name="Code"><text:s text:c="2"/>city: 'Paris',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>toJSON() {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>return `geo=${this.lat},${this.lon}`;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(JSON.stringify(location));<text:s text:c="4"/><text:span text:style-name="PuceCode">1</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">"\"geo=48.8503439,2.34658949\""</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Dans cette variante d&#8217;exemple, la clé <text:span text:style-name="CodeDansTexte">city</text:span> n&#8217;a pas été sérialisée
car notre fonction <text:span text:style-name="CodeDansTexte">toJSON</text:span> se préoccupait seulement des clés <text:span text:style-name="CodeDansTexte">lat</text:span> et <text:span text:style-name="CodeDansTexte">lon</text:span>.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> JSON</text:h>
Rendez-vous sur <text:span text:style-name="T4">MDN web docs</text:span> pour en savoir plus sur JSON.<text:line-break/>
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/JSON" text:visited-style-name="Visited_20_Internet_20_Link">https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/JSON</text:a>

<text:bookmark text:name="ref-date" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Interagir avec des dates</text:h><text:p text:style-name="TexteCourant">Les calculs de date s&#8217;effectuent à l&#8217;aide des objets <text:span text:style-name="CodeDansTexte">Date</text:span>.
Chaque instance de <text:span text:style-name="CodeDansTexte">Date</text:span> représente un moment dans le temps, à un jour
et à une heure donnée.</text:p>
<text:p text:style-name="CodeTitre">date/base.js</text:p><text:p text:style-name="Code">const now = new Date();</text:p><text:p text:style-name="Code">const past = new Date('2013-12-04 10:00:00'); <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(past.getUTCFullYear());<text:s text:c="11"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">console.log(now.getUTCFullYear());<text:s text:c="12"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> On initialise l&#8217;objet date <text:span text:style-name="CodeDansTexte">past</text:span> au 04 décembre 2013.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">2013</text:span>&#160;— l&#8217;année liée à l&#8217;objet <text:span text:style-name="CodeDansTexte">past</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">2018</text:span>&#160;— l&#8217;année liée à l&#8217;objet <text:span text:style-name="CodeDansTexte">now</text:span> (aujourd&#8217;hui).<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Un certain nombre de méthodes <text:span text:style-name="T4">retournent</text:span> différents éléments de la date
contenue dans l&#8217;objet&#160;: année, secondes, jour de la semaine, etc.
Il en existe tout autant pour <text:span text:style-name="T4">modifier</text:span> ces éléments de date.</text:p>
<text:p text:style-name="CodeTitre">date/set.js</text:p><text:p text:style-name="Code">const past = new Date('2013-12-04 10:00:00');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">past.setUTCFullYear('2015');<text:s text:c="11"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(past.toISOString());<text:s text:c="7"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">past.setUTCMonth(1);<text:s text:c="19"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">console.log(past.toISOString());<text:s text:c="7"/><text:span text:style-name="PuceCode">4</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Change la date vers l&#8217;année <text:span text:style-name="CodeDansTexte">2015</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">"2015-12-04T10:00:00.000Z"</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Change la date vers le mois <text:span text:style-name="CodeDansTexte">1</text:span>.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Affiche <text:span text:style-name="CodeDansTexte">"2015-02-04T10:00:00.000Z"</text:span>&#160;— pourquoi le mois de février&#160;??<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple précédent illustre l&#8217;ambiguïté de la notion de <text:span text:style-name="T4">mois</text:span>.
Il s&#8217;agit en réalité de l'<text:span text:style-name="T4">index du mois</text:span>&#160;:
0 correspond à janvier, 1 à février, etc.</text:p>
<text:p text:style-name="TexteCourant">La plupart des méthodes natives font référence à l&#8217;anglais.
Elles offrent peu de confort de manipulation&#160;— on aimerait pouvoir
compter facilement le nombre de jours entre deux dates, ou retirer 30 jours.</text:p>
<text:p text:style-name="TexteCourant">Quand nous utiliserons <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-../chapter-04/index.adoc"  text:visited-style-name="Visited_20_Internet_20_Link">Node</text:a> et
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-../chapter-05/index.adoc"  text:visited-style-name="Visited_20_Internet_20_Link">npm</text:a>, nous verrons que nous aurons
à disposition des librairies facilitant les manipulations de dates.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> Date</text:h>
Rendez-vous sur <text:span text:style-name="T4">MDN web docs</text:span> pour en savoir plus sur Date.<text:line-break/>
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/Date" text:visited-style-name="Visited_20_Internet_20_Link">https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/Date</text:a>

<text:bookmark text:name="ref-intl.datetimeformat" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Formatage internationalisé (<text:span text:style-name="T4">Intl.DateTimeFormat</text:span>)</text:h><text:p text:style-name="TexteCourant">La spécification <text:span text:style-name="T4">ECMA Intl</text:span> a été conçue pour ajouter des
fonctionnalités relatives aux langues.
Cette spécification est complémentaire.
Son comportement varie en fonction du système d&#8217;exploitation
—&#160;mode d&#8217;installation de Node et/ou version du navigateur web.</text:p>
<text:p text:style-name="TexteCourant">Les méthodes de date <text:span text:style-name="CodeDansTexte">toLocaleString</text:span>, <text:span text:style-name="CodeDansTexte">toLocaleDateString</text:span> et
<text:span text:style-name="CodeDansTexte">toLocaleTimeString</text:span> renvoient une version localisée
d&#8217;une date complète, d&#8217;une date et d&#8217;une heure, respectivement.</text:p>
<text:p text:style-name="CodeTitre">date/to-locale-date.js</text:p><text:p text:style-name="Code">const past = new Date('2013-12-04 10:00:00');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(past.toLocaleDateString());<text:s text:c="17"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const options = { month: 'long' };</text:p><text:p text:style-name="Code">console.log(past.toLocaleDateString('fr-FR', options)); <text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">04/12/2013</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">décembre</text:span>.<text:line-break/></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Attention</text:span> Tu vois M01, M02, etc. ?</text:h><text:p text:style-name="Remarque">Si en formatant une date, les caractères <text:span text:style-name="CodeDansTexte">M01</text:span>, <text:span text:style-name="CodeDansTexte">M02</text:span> ou autre s&#8217;affiche,
c&#8217;est que le système n&#8217;est pas configuré avec les libellés de la langue
demandée.</text:p>
<text:p text:style-name="Remarque">La langue par défaut est l&#8217;anglais.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> Date/toLocaleDateString</text:h>
Rendez-vous sur <text:span text:style-name="T4">MDN web docs</text:span> pour en savoir plus sur Date/toLocaleDateString.<text:line-break/>
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString" text:visited-style-name="Visited_20_Internet_20_Link">https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString</text:a>

<text:p text:style-name="TexteCourant">Une version plus verbeuse consiste à créer un formateur avec
<text:span text:style-name="CodeDansTexte">Intl.DateTimeFormat</text:span>.
Ce formateur se réutilise pour transformer plusieurs fois
des dates différentes avec les mêmes réglages
ou une même date avec des formatages différents.</text:p>
<text:p text:style-name="CodeTitre">date/intl.js</text:p><text:p text:style-name="Code">const past = new Date('2013-12-04 10:00:00');</text:p><text:p text:style-name="Code">const options = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>year: 'numeric', month: 'short', day: 'numeric'</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code">const longOptions = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>year: 'numeric', month: 'long', day: 'numeric',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>weekday: 'long'</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const fr = new Intl.DateTimeFormat('fr-FR', options);</text:p><text:p text:style-name="Code">const frLong = new Intl.DateTimeFormat('fr-FR', longOptions);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(fr.format(past));<text:s text:c="9"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(frLong.format(past));<text:s text:c="5"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">4 déc. 2013</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">mercredi 4 décembre 2013</text:span>.<text:line-break/></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> DateTimeFormat</text:h>
Rendez-vous sur <text:span text:style-name="T4">MDN web docs</text:span> pour en savoir plus sur DateTimeFormat.<text:line-break/>
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/DateTimeFormat" text:visited-style-name="Visited_20_Internet_20_Link">https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/DateTimeFormat</text:a>

<text:bookmark text:name="ref-class" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Partager une logique avec des objets de même nature (<text:span text:style-name="T4">Class</text:span>)</text:h><text:p text:style-name="TexteCourant">Une classe est une <text:span text:style-name="T7">structure qui partage des propriétés</text:span>
et des méthodes entre objets qui l&#8217;instancient.
Une instance de classe est créée en préfixant un appel de fonction
par l&#8217;opérateur <text:span text:style-name="CodeDansTexte">new</text:span>.</text:p>
<text:p text:style-name="Code">const date1 = new Date();</text:p><text:p text:style-name="Code">const date2 = new Date('2013-12-04');</text:p>
<text:p text:style-name="TexteCourant">Si on se réfère à l&#8217;exemple précédent,
nos deux variables sont des objets issus de la <text:span text:style-name="T4">classe</text:span> <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-date"  text:visited-style-name="Visited_20_Internet_20_Link">Date</text:a>.
Chacune des variables bénéficie des méthodes définies par la classe <text:span text:style-name="CodeDansTexte">Date</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Autrement dit, si les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-object"  text:visited-style-name="Visited_20_Internet_20_Link">structures d&#8217;objet</text:a> définissent des données,
les classes définissent des <text:span text:style-name="T7">comportements partagés</text:span>.</text:p>
<text:p text:style-name="CodeTitre">class/base.js</text:p><text:p text:style-name="Code">class Book {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>constructor({ title, ean13 }) {<text:s text:c="5"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>this.title = title;<text:s text:c="15"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>this.ean13 = ean13;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>toJSON() {<text:s text:c="26"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>const {title, ean13} = this;</text:p><text:p text:style-name="Code"><text:s text:c="4"/>return {title, ean13};</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>get isbn() {<text:s text:c="24"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>return this.ean13.split(3)[1];</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>static clean(value) {<text:s text:c="15"/><text:span text:style-name="PuceCode">5</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>return value.replace(/\D/g, '');</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Le constructeur reçoit un ou plusieurs arguments lors de l&#8217;instanciation de la classe.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> <text:span text:style-name="CodeDansTexte">this</text:span> fait référence à <text:span text:style-name="T4">ce contexte</text:span>, c&#8217;est-à-dire à <text:span text:style-name="T4">cette instance de classe</text:span>&#160;; deux instances peuvent être initialisées avec des données différentes.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> <text:span text:style-name="CodeDansTexte">toJSON</text:span> est une méthode de la classe.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> <text:span text:style-name="CodeDansTexte">isbn</text:span> est un accesseur (préfixe <text:span text:style-name="CodeDansTexte">get</text:span>)&#160;— une propriété dont la valeur est calculée à chaque fois qu&#8217;elle est appelée.<text:line-break/><text:span text:style-name="PuceCode">5</text:span> <text:span text:style-name="CodeDansTexte">clean</text:span> est une méthode dite <text:span text:style-name="T4">statique</text:span>&#160;— elle est appelée en dehors d&#8217;une instance.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Nous développerons cet exemple dans les sections qui suivent.
On peut d&#8217;ores et déjà noter que la structure d&#8217;une classe
se décompose en plusieurs parties&#160;:</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>la définition</text:span><text:line-break/><text:tab/>Définit le nom de la classe que l&#8217;on pourra instancier.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>le constructeur</text:span><text:line-break/><text:tab/>Partie exécutée lorsque la classe est instanciée.
On y met le moins de choses possibles.
En général on copie les données passées en argument.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>les méthodes</text:span><text:line-break/><text:tab/>Fonctions partagées entre toutes les instances de la classe.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>les méthodes statiques</text:span><text:line-break/><text:tab/>Fonctions partagées sans avoir à instancier la classe.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>les accesseurs et mutateurs</text:span><text:line-break/><text:tab/>Fonctions qui définissent le comportement de propriétés dynamiques.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>le contexte (<text:span text:style-name="CodeDansTexte">this</text:span>)</text:span><text:line-break/><text:tab/>On peut y référer dans les méthodes de la classe pour dire
<text:span text:style-name="T4">je fais référence à cet objet</text:span>.
Et donc d&#8217;appeler les données et méthodes attenantes.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> Classes</text:h>
Rendez-vous sur <text:span text:style-name="T4">MDN web docs</text:span> pour en savoir plus sur Classes.<text:line-break/>
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Classes" text:visited-style-name="Visited_20_Internet_20_Link">https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Classes</text:a>

<text:bookmark text:name="ref-class.method" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Méthodes d&#8217;instance</text:h><text:p text:style-name="TexteCourant">Les méthodes définissent des comportements partagés entre chaque instance
de la classe.
Elles servent à <text:span text:style-name="T4">retourner</text:span> ou <text:span text:style-name="T4">transformer</text:span> des valeurs rattachées à l&#8217;objet.</text:p>
<text:p text:style-name="CodeTitre">class/methods.js</text:p><text:p text:style-name="Code">class Book {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>constructor({ title }) {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>this.title = title;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>isPublished() {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>return this.is_published === true;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>publish() {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>this.is_published = true;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const book1 = new Book({ title: 'Node.js' });</text:p><text:p text:style-name="Code">console.log(book1.isPublished());<text:s text:c="3"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">book1.publish();</text:p><text:p text:style-name="Code">console.log(book1.isPublished());<text:s text:c="3"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const book2 = new Book({ title: 'CSS maintenables' });</text:p><text:p text:style-name="Code">console.log(book2.isPublished());<text:s text:c="3"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">false</text:span>&#160;— la propriété n&#8217;existe pas.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">true</text:span>&#160;— la propriété <text:span text:style-name="CodeDansTexte">is_published</text:span> a été changée à la ligne précédente.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">false</text:span>&#160;— les données sont étanches entre chaque instance.<text:line-break/></text:p>
<text:bookmark text:name="ref-class.static" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Méthodes statiques</text:h><text:p text:style-name="TexteCourant">Les méthodes statiques sont pratiques pour mettre à disposition du code
métier de manière organisée.
Elles se caractérisent par le préfixe <text:span text:style-name="CodeDansTexte">static</text:span> devant un nom de fonction.</text:p>
<text:p text:style-name="CodeTitre">class/static.js</text:p><text:p text:style-name="Code">class Book {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>constructor({ title, ean13 }) {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>this.title = title;</text:p><text:p text:style-name="Code"><text:s text:c="4"/>this.ean13 = ean13;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>static clean(value) {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>return value.replace(/\D/g, '');</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const nodebook = new Book({</text:p><text:p text:style-name="Code"><text:s text:c="2"/>title: 'Node.js',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>ean13: Book.clean('978-2212139938'),<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(nodebook.ean13);<text:s text:c="12"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">console.log(nodebook.clean);<text:s text:c="12"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> On appelle la méthode statique <text:span text:style-name="CodeDansTexte">Book.clean</text:span> pour nettoyer le code EAN13.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">"9782212139938"</text:span>&#160;— la valeur a bien été nettoyée.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">undefined</text:span>&#160;— les méthodes statiques ne sont pas accessibles depuis l&#8217;instance de classe.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">On verra dans le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-../chapter-04/index.adoc"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre sur Node</text:a>
qu&#8217;on peut se baser sur les modules pour partager du code
sans avoir à l&#8217;affecter à une classe.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> Classes/static</text:h>
Rendez-vous sur <text:span text:style-name="T4">MDN web docs</text:span> pour en savoir plus sur Classes/static.<text:line-break/>
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Classes/static" text:visited-style-name="Visited_20_Internet_20_Link">https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Classes/static</text:a>

<text:bookmark text:name="ref-object-getset" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Accesseurs et mutateurs</text:h><text:p text:style-name="TexteCourant">Ce type de méthode définit des <text:span text:style-name="T4">attributs</text:span> dont la lecture ou l&#8217;écriture
sont dynamiques.</text:p>
<text:p text:style-name="TexteCourant">L'<text:span text:style-name="T4">accesseur</text:span> est une fonction préfixée par le mot-clé <text:span text:style-name="CodeDansTexte">get</text:span>&#160;; elle retourne
la valeur d&#8217;un attribut.</text:p>
<text:p text:style-name="CodeTitre">getters.js</text:p><text:p text:style-name="Code">const book = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>title: 'Node.js',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>ean13: '9782212139938',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>get isbn() {<text:s text:c="12"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>return this.ean13.slice(3);</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(book.ean13);<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">console.log(book.isbn);<text:s text:c="3"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Définition de l'<text:span text:style-name="T4">accesseur</text:span> <text:span text:style-name="CodeDansTexte">isbn</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">"9782212139938"</text:span>&#160;— c&#8217;est une propriété de l&#8217;objet <text:span text:style-name="CodeDansTexte">nodebook</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">"2212139938"</text:span>&#160;— <text:span text:style-name="CodeDansTexte">isbn</text:span> s&#8217;utilise comme un attribut mais sa valeur est calculée à chaque fois qu&#8217;elle est appelée.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Le <text:span text:style-name="T4">mutateur</text:span> est une fonction préfixée par le mot-clé <text:span text:style-name="CodeDansTexte">set</text:span>&#160;; elle définit
la valeur d&#8217;un ou plusieurs attributs.</text:p>
<text:p text:style-name="CodeTitre">setters.js</text:p><text:p text:style-name="Code">const book = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>title: 'Node.js',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>set ean13 (value) {<text:s text:c="5"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>this.issn = value.slice(0, 3);</text:p><text:p text:style-name="Code"><text:s text:c="4"/>this.isbn = value.slice(3);</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">book.ean13 = '9782212139938';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(book.issn);<text:s text:c="3"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">console.log(book.isbn);<text:s text:c="3"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">console.log(book.ean13);<text:s text:c="2"/><text:span text:style-name="PuceCode">4</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Définition du <text:span text:style-name="T4">mutateur</text:span> <text:span text:style-name="CodeDansTexte">ean13</text:span>&#160;— il accepte un seul argument.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">978</text:span>&#160;— l&#8217;attribut a été créé lors de l&#8217;appel du mutateur.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">2212139938</text:span>&#160;— idem.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Affiche <text:span text:style-name="CodeDansTexte">undefined</text:span>&#160;— il faudrait créer un <text:span text:style-name="T4">accesseur</text:span> <text:span text:style-name="CodeDansTexte">get ean13()</text:span> pour recomposer dynamiquement sa valeur.<text:line-break/></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> Functions/get</text:h>
Rendez-vous sur <text:span text:style-name="T4">MDN web docs</text:span> pour en savoir plus sur Functions/get.<text:line-break/>
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Functions/get" text:visited-style-name="Visited_20_Internet_20_Link">https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Functions/get</text:a>

<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> Functions/set</text:h>
Rendez-vous sur <text:span text:style-name="T4">MDN web docs</text:span> pour en savoir plus sur Functions/set.<text:line-break/>
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Functions/set" text:visited-style-name="Visited_20_Internet_20_Link">https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Functions/set</text:a>

<text:bookmark text:name="ref-class.extends" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Héritage</text:h><text:p text:style-name="TexteCourant">L&#8217;héritage est un mécanisme d&#8217;extension de classe.
C&#8217;est une pratique peu employée en JavaScript,
principalement de par sa nature modulaire et fonctionnelle.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;héritage se caractérise par l&#8217;usage de l&#8217;opérateur <text:span text:style-name="CodeDansTexte">extends</text:span> lors de la
définition de la classe et aussi par l&#8217;utilisation du mot-clé <text:span text:style-name="CodeDansTexte">super</text:span>
dans le constructeur.</text:p>
<text:p text:style-name="CodeTitre">class/extends.js</text:p><text:p text:style-name="Code">class Product {<text:s text:c="15"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>constructor() {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>this.title = 'Sans titre';</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">class Book extends Product {<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>constructor(options) {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>super(options);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="4"/>if (options.title) {</text:p><text:p text:style-name="Code"><text:s text:c="6"/>this.title = options.title;</text:p><text:p text:style-name="Code"><text:s text:c="4"/>}</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const book = new Book({ title: 'Node.js' });</text:p><text:p text:style-name="Code">console.log(book.title);<text:s text:c="4"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const product = new Product({ title: 'Node.js' });</text:p><text:p text:style-name="Code">console.log(product.title); <text:span text:style-name="PuceCode">4</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> La classe <text:span text:style-name="CodeDansTexte">Product</text:span> assigne un titre par défaut lorsqu&#8217;un nouvel objet est initialisé.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> La classe <text:span text:style-name="CodeDansTexte">Book</text:span> assigne un titre donné en argument et sinon, elle se base sur la valeur par défaut de la classe <text:span text:style-name="CodeDansTexte">Product</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">'Node.js'</text:span>.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Affiche <text:span text:style-name="CodeDansTexte">'Sans titre'</text:span>&#160;— la propriété <text:span text:style-name="CodeDansTexte">title</text:span> ne se définit par dans le constructeur (cf. <text:span text:style-name="CodeDansTexte">class Product</text:span>)<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">En pratique, c&#8217;est comme si on empilait les classes les unes sur les autres.
On lègue des méthodes aux classes qui héritent.
Si une méthode porte le même nom, la méthode "en haut de la pile" a la priorité.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;appel à la fonction <text:span text:style-name="CodeDansTexte">super()</text:span> <text:span text:style-name="T4">appelle le constructeur de la classe étendue</text:span>.
Si on ne l&#8217;appelle pas, le constructeur de la classe parent ne sera pas invoqué.</text:p>
<text:p text:style-name="TexteCourant">On reparlera de l&#8217;héritage dans la
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-react"  text:visited-style-name="Visited_20_Internet_20_Link">section React</text:a>
du <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-../chapter-09/index.adoc"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 9</text:a>.
C&#8217;est un exemple populaire d&#8217;héritage appliqué aux composants visuels.</text:p>
<text:bookmark text:name="ref-promise" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Coordonner des actions asynchrones (<text:span text:style-name="T4">Promise</text:span>)</text:h><text:p text:style-name="TexteCourant">Une promesse est <text:span text:style-name="T7">un objet retourné immédiatement</text:span>.
Le <text:span text:style-name="T7">résultat est obtenu plus tard</text:span>.
Cette résolution peut être soit <text:span text:style-name="T4">positive</text:span> soit <text:span text:style-name="T4">négative</text:span>.
On dit alors que l&#8217;action est <text:span text:style-name="T4">asynchrone</text:span>.</text:p>
<text:p text:style-name="CodeTitre">promise/base.js</text:p><text:p text:style-name="Code">const p = new Promise((resolve) =&gt; resolve('promesse tenue'));</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(p);<text:s text:c="27"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log('un');<text:s text:c="24"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">p.then(message =&gt; console.log(message));<text:s text:c="2"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code">console.log('deux');<text:s text:c="22"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">Promise</text:span>&#160;— ce n&#8217;est pas le résultat que l&#8217;on voit mais l&#8217;objet avec lequel interagir pour être prévenu de la mise à disposition du résultat.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">"un"</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">"deux"</text:span>&#160;— c&#8217;est parce que la ligne d&#8217;avant a mis en attente la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-anonymous-function"  text:visited-style-name="Visited_20_Internet_20_Link">fonction anonyme</text:a>.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Affiche <text:span text:style-name="CodeDansTexte">"promesse tenue"</text:span> en dernier.<text:line-break/></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Design Pattern</text:span> Executor</text:h><text:p text:style-name="Remarque">Le fait qu&#8217;une fonction nous passe d'<text:span text:style-name="T4">autres fonctions</text:span> pour commander
un résultat s&#8217;appelle le <text:span text:style-name="T4">pattern Executor</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Une <text:span text:style-name="CodeDansTexte">Promise</text:span> s&#8217;orchestre en deux temps.
L'<text:span text:style-name="T7">initialisation</text:span>&#160;: on décide de la manière dont le traitement asynchrone
sera effectué.
Puis la <text:span text:style-name="T7">résolution</text:span>&#160;: <text:span text:style-name="T4">positive</text:span> en appelant <text:span text:style-name="CodeDansTexte">resolve()</text:span>
ou <text:span text:style-name="T4">négative</text:span>, en appelant <text:span text:style-name="CodeDansTexte">reject()</text:span>.
Le résultat passé à <text:span text:style-name="CodeDansTexte">resolve</text:span> sera transmis au premier argument de <text:span text:style-name="CodeDansTexte">then</text:span>.
Le résultat passé à <text:span text:style-name="CodeDansTexte">reject</text:span> sera transmis au deuxième argument de <text:span text:style-name="CodeDansTexte">then</text:span>
mais aussi au premier argument de <text:span text:style-name="CodeDansTexte">catch</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Une instance de <text:span text:style-name="CodeDansTexte">Promise</text:span> expose plusieurs méthodes
pour propager le statut de son exécution.</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">then(onSuccess[, onError])</text:span></text:span><text:line-break/><text:tab/>Fonction acceptant un <text:span text:style-name="T4">callback</text:span> de résolution et
un <text:span text:style-name="T4">callback</text:span> de rejet (facultatif).</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">catch(onError)</text:span></text:span><text:line-break/><text:tab/>Fonction acceptant un <text:span text:style-name="T4">callback</text:span> de rejet.</text:p>
<text:p text:style-name="CodeTitre">promise/then-catch.js</text:p><text:p text:style-name="Code">const oddTime = (date) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>return new Promise((resolve, reject) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>parseInt(date.getTime() / 1000) % 2<text:s text:c="17"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="6"/>? resolve('le nombre de secondes est impair :-)')</text:p><text:p text:style-name="Code"><text:s text:c="6"/>: reject('le nombre de secondes n\'est pas impair :-(');</text:p><text:p text:style-name="Code"><text:s text:c="2"/>});</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const now = new Date();</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">oddTime(now)<text:s text:c="44"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>.then(msg =&gt; console.log(msg), msg =&gt; console.error(msg));</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">oddTime(new Date(now.getTime() + 1000))<text:s text:c="17"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>.then(msg =&gt; console.log(msg))<text:s text:c="24"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>.catch(msg =&gt; console.error(msg))<text:s text:c="21"/><text:span text:style-name="PuceCode">5</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> La fonction <text:span text:style-name="CodeDansTexte">oddTime</text:span> accepte un argument de type &lt;&lt;date,Date&gt;. Elle résout la promesse <text:span text:style-name="T4">positivement</text:span> (<text:span text:style-name="CodeDansTexte">resolve</text:span>) si le nombre de secondes est impair, sinon elle résout la promesse <text:span text:style-name="T4">négativement</text:span> (<text:span text:style-name="CodeDansTexte">reject</text:span>).<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Utilisation de la forme compacte de <text:span text:style-name="CodeDansTexte">then</text:span> avec deux <text:span text:style-name="T4">callbacks</text:span>&#160;: un de succès (associé à <text:span text:style-name="CodeDansTexte">resolve</text:span>) et un d&#8217;échec (associé à <text:span text:style-name="CodeDansTexte">reject</text:span>).<text:line-break/><text:span text:style-name="PuceCode">3</text:span> On crée une nouvelle promesse, avec une date calée une seconde plus tard c&#8217;est histoire de s&#8217;assurer que les deux appels aboutissent à une résolution différente.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Affiche <text:span text:style-name="CodeDansTexte">"le nombre de secondes est impair&#160;:-)"</text:span> si la résolution est positive.<text:line-break/><text:span text:style-name="PuceCode">5</text:span> Affiche <text:span text:style-name="CodeDansTexte">"le nombre de secondes n&#8217;est pas impair&#160;:-("</text:span> si la résolution est négativement.<text:line-break/></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Histoire</text:span> Standard <text:span text:style-name="CodeDansTexte">Promise/A+</text:span></text:h><text:p text:style-name="Remarque">Historiquement, de nombreuses librairies ont proposé leur propre implémentation de promesses.
Elles avaient le défaut de ne pas être interopérables entre elles.
La spécification <text:span text:style-name="T4">Promise/A+</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/promises-aplus/promises-spec" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/promises-aplus/promises-spec</text:a></text:span>)
a émergé pour établir un standard de compatibilité.</text:p>
<text:p text:style-name="Remarque">ECMAScript 2015 introduit nativement cette API.
Plus besoin de <text:span text:style-name="T4">polyfill</text:span> ou de librairie pour en bénéficier nativement.</text:p>
<text:p text:style-name="TexteCourant">En général, on utilise les promesses <text:span text:style-name="T7">pour aller plus vite</text:span>.
Parce qu&#8217;on peut continuer à traiter d&#8217;autres actions
<text:span text:style-name="T7">en attendant l&#8217;arrivée du résultat</text:span>.</text:p>
<text:p text:style-name="TexteCourant">C&#8217;est comme quand on se rend au restaurant&#160;:
les personnes en cuisine effectuent le traitement des commandes
(actions longues) tandis que les personnes au service gèrent
des interactions plus courtes mais plus fréquentes.
Au final, le ticket de commande contient la liste des promesses dont
on attend la résolution.</text:p>
<text:p text:style-name="TexteCourant">Nous verrons d&#8217;autres utilisations des promesses
dans le reste de l&#8217;ouvrage, et plus particulièrement
avec <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-io-fetch"  text:visited-style-name="Visited_20_Internet_20_Link">fetch()</text:a> au chapitre 9
ainsi qu&#8217;avec <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-util.promisify"  text:visited-style-name="Visited_20_Internet_20_Link">promisify</text:a> au chapitre 4.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> Promise</text:h>
Rendez-vous sur <text:span text:style-name="T4">MDN web docs</text:span> pour en savoir plus sur Promise.<text:line-break/>
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/Promise" text:visited-style-name="Visited_20_Internet_20_Link">https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/Promise</text:a>

<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Lien</text:span> Guide des promesses</text:h><text:p text:style-name="Remarque">Le guide <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://www.w3.org/2001/tag/doc/promises-guide" text:visited-style-name="Visited_20_Internet_20_Link">https://www.w3.org/2001/tag/doc/promises-guide</text:a></text:span> est <text:span text:style-name="T4">très</text:span> complet.
Il est en anglais ainsi qu&#8217;en libre consultation sur le site du W3C.</text:p>
<text:p text:style-name="Remarque">Son dépôt GitHub <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/w3ctag/promises-guide" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/w3ctag/promises-guide</text:a></text:span> permet
d&#8217;y contribuer.</text:p>
<text:bookmark text:name="ref-promise.all" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Collection de promesses</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="CodeDansTexte">Promise.all</text:span> est une <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-class.static"  text:visited-style-name="Visited_20_Internet_20_Link">méthode statique</text:a> de la class <text:span text:style-name="T4">Promise</text:span>.
Elle accepte un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-array"  text:visited-style-name="Visited_20_Internet_20_Link">tableau</text:a> de promesses.
<text:span text:style-name="CodeDansTexte">Promise.all</text:span> retourne elle-même une promesse.
Cette promesse est résolue positivement si toutes les promesses réussissent.
Elle est résolue négativement dès que l'<text:span text:style-name="T4">une d&#8217;entre elles</text:span> échoue.</text:p>
<text:p text:style-name="CodeTitre">promise/all.js</text:p><text:p text:style-name="Code">const asyncRandom = () =&gt; new Promise((resolve) =&gt; {<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>const timing = Math.floor(Math.random() * 2000);</text:p><text:p text:style-name="Code"><text:s text:c="2"/>setTimeout(() =&gt; resolve(`résolu en ${timing}ms`), timing);</text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const all = Promise.all([<text:s text:c="29"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>asyncRandom(),</text:p><text:p text:style-name="Code"><text:s text:c="2"/>asyncRandom(),</text:p><text:p text:style-name="Code"><text:s text:c="2"/>asyncRandom()</text:p><text:p text:style-name="Code">]);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">all.then(messages =&gt; console.log(messages));<text:s text:c="10"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Cette fonction résout la promesse après un délai aléatoire compris entre 0 et 2000 millisecondes.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> On passe 3 promesses à <text:span text:style-name="CodeDansTexte">Promise.all</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> La résolution est déclenchée dès que les 3 promesses sont résolues&#160;— l&#8217;argument contient un tableau listant les résultats <text:span text:style-name="T4">dans l&#8217;ordre initial</text:span> des promesses.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple précédent illustre la <text:span text:style-name="T7">parallélisation des actions</text:span>.
Si la promesse la plus longue prend 1 seconde à être résolue,
alors le temps d&#8217;attente pour la résolution de <text:span text:style-name="T4">toutes les promesses</text:span>
est de 1 seconde.<text:line-break/>Si on avait été dans un enchainement séquentiel, le temps d&#8217;attente
final aurait été l&#8217;accumulation des temps d&#8217;attente de la résolution
de chacune des promesses.</text:p>
<text:p text:style-name="TexteCourant">Les promesses sont un des meilleurs moyens à notre disposition pour
<text:span text:style-name="T7">modulariser</text:span>, <text:span text:style-name="T7">linéariser</text:span> et <text:span text:style-name="T7">clarifier le sens</text:span> du flot de notre code.</text:p>
<text:bookmark text:name="ref-async-await" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">async/await</text:h><text:p text:style-name="TexteCourant">Les opérateurs <text:span text:style-name="CodeDansTexte">async</text:span> et <text:span text:style-name="CodeDansTexte">await</text:span> aident à mettre en pause
l&#8217;interpréteur ECMAScript, en attendant le résultat d&#8217;une
fonction asynchrone (préfixée par <text:span text:style-name="CodeDansTexte">async</text:span>).
Les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-promise"  text:visited-style-name="Visited_20_Internet_20_Link">promesses</text:a> sont implicitement compatibles.
On peut donc les mettre à plat pour obtenir un résultat
sans avoir à utiliser <text:span text:style-name="CodeDansTexte">then</text:span> ni <text:span text:style-name="CodeDansTexte">catch</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Transformons l&#8217;exemple de la section <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-promise.all"  text:visited-style-name="Visited_20_Internet_20_Link">Promise.all</text:a>
pour comprendre l&#8217;impact de <text:span text:style-name="CodeDansTexte">async</text:span> et de <text:span text:style-name="CodeDansTexte">await</text:span>.</text:p>
<text:p text:style-name="CodeTitre">promise/async-await.js</text:p><text:p text:style-name="Code">function asyncRandom() {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>return new Promise((resolve) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>const timing = Math.floor(Math.random() * 2000);</text:p><text:p text:style-name="Code"><text:s text:c="4"/>setTimeout(() =&gt; resolve(`résolu en ${timing}ms`), timing);</text:p><text:p text:style-name="Code"><text:s text:c="2"/>});</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">(async () =&gt; {<text:s text:c="18"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>const all = [<text:s text:c="17"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>await asyncRandom(),</text:p><text:p text:style-name="Code"><text:s text:c="4"/>await asyncRandom(),</text:p><text:p text:style-name="Code"><text:s text:c="4"/>await asyncRandom()</text:p><text:p text:style-name="Code"><text:s text:c="2"/>];</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(all);<text:s text:c="13"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">})();</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> On crée une <text:span text:style-name="T4">fonction asynchrone auto-invoquée</text:span>&#160;— c&#8217;est pas pour frimer mais parce qu&#8217;on ne peut pas encore utiliser de fonction asynchrone directement au niveau principal d&#8217;un script.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Chaque utilisation de <text:span text:style-name="CodeDansTexte">await</text:span> met l&#8217;interpréteur en pause.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> L&#8217;affichage du temps d&#8217;exécution de chaque promesse se fait lorsque les 3 promesses sont résolues.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">On gagne en lisibilité, mais <text:span text:style-name="T7">on perd en vitesse</text:span>.
Les promesses sont exécutées <text:span text:style-name="T4">les unes à la suite des autres</text:span>
et non plus en parallèle.
Il est important d&#8217;arbitrer les choix de <text:span text:style-name="T4">design</text:span> et d&#8217;éviter de bloquer
l&#8217;exécution de vos scripts sans raison explicite.</text:p>
<text:bookmark text:name="ref-conclusion_3" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Conclusion</text:h><text:p text:style-name="TexteCourant">ECMAScript est un langage bien plus riche, complet et élégant qu&#8217;il n&#8217;y parait.</text:p>
<text:p text:style-name="TexteCourant">Ce chapitre nous a <text:span text:style-name="T7">appris les différentes structures de langage</text:span>
communes à toutes les environnements comprenant ECMAScript.
Cela s&#8217;applique aussi bien à Node qu&#8217;aux navigateurs web.<text:line-break/>Je vous invite à revenir à ce chapitre pour vous rafraîchir la mémoire
mais aussi pour <text:span text:style-name="T7">jouer avec les exemples</text:span> afin de confirmer votre compréhension
du langage.</text:p>
<text:p text:style-name="TexteCourant">Dans le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-../chapter-04/index.adoc"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre suivant</text:a>, nous allons
<text:span text:style-name="T7">relier ces apprentissages avec Node</text:span>&#160;— l&#8217;interpréteur et l&#8217;environnement
d&#8217;exécution JavaScript que nous avons appris à installer au
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-../chapter-02/index.adoc"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 2</text:a>.</text:p>
<text:bookmark text:name="ref-chapter-04" /><text:p text:style-name="ChapitreNumero">4</text:p><text:h text:style-name="ChapitreTitre" text:outline-level="1">Jouer avec Node.js</text:h><text:p text:style-name="TexteCourant">On peut utiliser Node en parlant directement avec l&#8217;interpréteur, en créant
un script ou en programmant une application plus complexe.</text:p>
<text:p text:style-name="TexteCourant">Ce chapitre explique ce qu&#8217;il faut savoir pour interagir avec l&#8217;exécutable
<text:span text:style-name="CodeDansTexte">node</text:span>, le fonctionnement des <text:span text:style-name="T4">modules</text:span> et les variables à disposition.</text:p>
<text:p text:style-name="TexteCourant">Nous en profiterons aussi pour passer en revue la variété de modules
disponibles par défaut.</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">Interagir avec l&#8217;interpréteur Node</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Les modules de base</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Créer ses propres modules</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">S&#8217;en sortir quand ça ne se passe pas comme prévu</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Les différences de JavaScript entre Node et les navigateurs web</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Options utiles pour démarrer Node</text:p>
</text:list-item></text:list>
<text:p text:style-name="ChapitreIntroduction"><text:p text:style-name="TexteCourant">TBD.</text:p></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Remarque</text:span> Versions de Node et npm</text:h><text:p text:style-name="Remarque">Le contenu de ce chapitre utilise les versions <text:span text:style-name="T7">Node v10</text:span> et <text:span text:style-name="T7">npm v6</text:span>.
Ce sont les versions stables recommandées en 2018.
J&#8217;explique comment les installer au <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 2</text:a>.</text:p>
<text:bookmark text:name="ref-interagir_avec_linterpréteur_node" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Interagir avec l&#8217;interpréteur Node</text:h><text:p text:style-name="TexteCourant">L'<text:span text:style-name="T7">interpréteur Node</text:span> est le programme qui nous permet d&#8217;obtenir des résultats
en échange d&#8217;instructions ECMAScript.
Le <text:span text:style-name="T7">terminal</text:span> est un autre programme qui nous permet de dialoguer avec
un ordinateur et les programmes installés.</text:p>
<text:p text:style-name="TexteCourant">Le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-02"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 2</text:a> détaille comment installer
<text:span text:style-name="T4">Node</text:span> et un <text:span text:style-name="T4">terminal</text:span> sur son ordinateur.
Il contient également des conseils pour utiliser Node depuis un
navigateur web.
Cela peut rendre l&#8217;accès au terminal plus facile.</text:p>
<text:p text:style-name="TexteCourant">La suite de ce chapitre se base sur le principe que vous avez un terminal
sous le nez, prêt·e à saisir des instructions ECMAScript.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-04/images/terminal.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 18. Exemple de <text:span text:style-name="T4">terminal</text:span> sous macOS.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Jouer avec les exemples dans un terminal</text:h><text:p text:style-name="Remarque">Les exemples titrés d&#8217;un nom de fichier peuvent être installés sur votre ordinateur.
Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de
votre lecture pour voir ce qui change.</text:p>
<text:p text:style-name="Remarque">Installation des exemples via le module npm <text:span text:style-name="CodeDansTexte">nodebook</text:span>.</text:p><text:p text:style-name="RemarqueCode">$ npm install --global nodebook</text:p><text:p text:style-name="RemarqueCode">$ nodebook install chapter-04</text:p><text:p text:style-name="RemarqueCode">$ cd $(nodebook dir chapter-04)</text:p>
<text:p text:style-name="Remarque">La commande suivante devrait afficher un résultat qui confirme que vous êtes
au bon endroit&#160;:</text:p>
<text:p text:style-name="RemarqueCode">$ node hello.js</text:p>
<text:p text:style-name="Remarque">Suivez à nouveau les installations d&#8217;instruction pour rétablir les exemples
dans leur état initial.</text:p>
<text:bookmark text:name="ref-node-version" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Afficher la version</text:h><text:p text:style-name="TexteCourant">Nous pourrions commencer par afficher la version de l&#8217;interpréteur Node.
Nous nous assurons ainsi que nous pouvons interagir avec
l&#8217;interpréteur Node avec succès <text:span text:style-name="T4">et</text:span> que l&#8217;interpréteur
est celui que nous attendons, dans la bonne version.
La version de Node conditionne la liste des fonctionnalités du langage
ECMAScript à disposition.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Compatibilité</text:span> Syntaxe ECMAScript</text:h><text:p text:style-name="Remarque">Le site web <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://node.green" text:visited-style-name="Visited_20_Internet_20_Link">https://node.green</text:a></text:span> liste le niveau de compatibilité
des fonctionnalités ECMAScript.</text:p>
<text:p text:style-name="Remarque">Cette page vous aidera à comprendre quelles fonctionnalités utiliser en toute
sécurité, version par version de Node.</text:p>
<text:p text:style-name="TexteCourant">Une fois votre terminal ouvert, saisissez la commande suivante&#160;:</text:p>
<text:p text:style-name="Code">$ node --version</text:p>
<text:p text:style-name="TexteCourant">Le numéro de version de l&#8217;interpréteur Node s&#8217;affiche alors.
Par exemple&#160;: <text:span text:style-name="CodeDansTexte">v10.3.0</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Si c&#8217;est ce à quoi vous vous attendiez, nous pouvons passer à la suite.
À l&#8217;inverse, si une erreur se produit ou que le numéro de version
n&#8217;est pas celui que vous attendiez, jetez un œil à la
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install"  text:visited-style-name="Visited_20_Internet_20_Link">section <text:span text:style-name="T4">Installer Node.js</text:span></text:a> du chapitre 2.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Jouer avec les exemples dans un terminal</text:h><text:p text:style-name="Remarque">Les exemples titrés d&#8217;un nom de fichier peuvent être installés sur votre ordinateur.
Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de
votre lecture pour voir ce qui change.</text:p>
<text:p text:style-name="Remarque">Installation des exemples via le module npm <text:span text:style-name="CodeDansTexte">nodebook</text:span>.</text:p><text:p text:style-name="RemarqueCode">$ npm install --global nodebook</text:p><text:p text:style-name="RemarqueCode">$ nodebook install chapter-04</text:p><text:p text:style-name="RemarqueCode">$ cd $(nodebook dir chapter-04)</text:p>
<text:p text:style-name="Remarque">La commande suivante devrait afficher un résultat qui confirme que vous êtes
au bon endroit&#160;:</text:p>
<text:p text:style-name="RemarqueCode">$ node hello.js</text:p>
<text:p text:style-name="Remarque">Suivez à nouveau les installations d&#8217;instruction pour rétablir les exemples
dans leur état initial.</text:p>
<text:bookmark text:name="ref-script" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Avec un script</text:h><text:p text:style-name="TexteCourant">L&#8217;exécution d&#8217;un script Node est très certainement la pratique la plus courante.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;interpréteur Node lit le contenu d&#8217;un fichier et exécute les instructions.
L&#8217;interpréteur reste actif jusqu&#8217;à ce que toutes les instructions
soient traitées.</text:p>
<text:p text:style-name="CodeTitre">script.js</text:p><text:p text:style-name="Code">console.log(2 + 2);</text:p><text:p text:style-name="Code">console.log('abc'.toLocaleUpperCase());</text:p>
<text:p text:style-name="TexteCourant">Dans cet exemple, le fichier <text:span text:style-name="CodeDansTexte">script.js</text:span> contient <text:span text:style-name="T4">deux instructions</text:span>.
Node les interprète lorsqu&#8217;on lui passe le chemin du fichier en paramètre
dans une invite de commande&#160;:</text:p>
<text:p text:style-name="Code">$ node script.js</text:p><text:p text:style-name="Code">4</text:p><text:p text:style-name="Code">ABC</text:p>
<text:p text:style-name="TexteCourant">Node interprète le contenu du fichier <text:span text:style-name="CodeDansTexte">script.js</text:span>.
Il nous rend ensuite la main pour exécuter d&#8217;autres commandes.</text:p>
<text:p text:style-name="TexteCourant">On apprendra à passer des <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.argv"  text:visited-style-name="Visited_20_Internet_20_Link">arguments d&#8217;exécution</text:a>
dans la section <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">process</text:span></text:a>.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Performances</text:span> Ressources machine</text:h><text:p text:style-name="Remarque">Démarrer un processus Node a un coût incompressible en ressources machine&#160;:
environ <text:span text:style-name="T7">30Mo de RAM</text:span> et <text:span text:style-name="T7">environ 40 millisecondes de CPU</text:span> avant d&#8217;exécuter nos
instructions.</text:p>
<text:bookmark text:name="ref-repl" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Avec l&#8217;invite de commande interactive (<text:span text:style-name="T4">REPL</text:span>)</text:h><text:p text:style-name="TexteCourant">L&#8217;invite de commande interactive est une manière de parler
à l&#8217;interpréteur Node sans écrire de fichier.</text:p>
<text:p text:style-name="TexteCourant">J&#8217;utilise l&#8217;invite de commande pour tester des idées et des éléments de syntaxe
quand je ne m&#8217;en rappelle plus.</text:p>
<text:p text:style-name="TexteCourant">Le mode interactif s&#8217;active en exécutant Node sans aucun autre argument&#160;:</text:p>
<text:p text:style-name="Code">$ node</text:p><text:p text:style-name="Code">&gt; </text:p>
<text:p text:style-name="TexteCourant">On notera au passage que l&#8217;invite est préfixée par le caractère <text:span text:style-name="CodeDansTexte">&gt;</text:span>
afin de marquer notre présence dans un environnement différent.
On retrouve un comportement similaire dans les invites de commande
des langages Ruby (<text:span text:style-name="CodeDansTexte">irb</text:span>), Python (<text:span text:style-name="CodeDansTexte">python</text:span>) et PHP (<text:span text:style-name="CodeDansTexte">php -a</text:span>)</text:p>
<text:p text:style-name="TexteCourant">Lorsque nous sommes dans l&#8217;interpréteur interactif,
toutes les expressions sont interprétées par Node&#160;:</text:p>
<text:p text:style-name="Code">$ node</text:p><text:p text:style-name="Code">&gt; 2 + 2</text:p><text:p text:style-name="Code">4</text:p><text:p text:style-name="Code">&gt; "abc".toLocaleUpperCase()</text:p><text:p text:style-name="Code">'ABC'</text:p><text:p text:style-name="Code">&gt; </text:p>
<text:p text:style-name="TexteCourant">Des expressions sont réservées pour obtenir de l&#8217;aide, sortir de l&#8217;interpréteur
ou simplement pour nettoyer ce que l&#8217;on voit à l&#8217;écran.
Pour cela on fait appel à l&#8217;instruction <text:span text:style-name="CodeDansTexte">.help</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ node</text:p><text:p text:style-name="Code">&gt; .help</text:p><text:p text:style-name="Code">.break<text:s text:c="4"/>Sometimes you get stuck, this gets you out</text:p><text:p text:style-name="Code">.clear<text:s text:c="4"/>Alias for .break</text:p><text:p text:style-name="Code">.editor<text:s text:c="3"/>Enter editor mode</text:p><text:p text:style-name="Code">.exit<text:s text:c="5"/>Exit the repl</text:p><text:p text:style-name="Code">.help<text:s text:c="5"/>Print this help message</text:p><text:p text:style-name="Code">.load<text:s text:c="5"/>Load JS from a file into the REPL session</text:p><text:p text:style-name="Code">.save<text:s text:c="5"/>Save all evaluated commands in this REPL session to a file</text:p>
<text:p text:style-name="TexteCourant">Ces touches ou combinaisons de touches sont utiles pour naviguer dans
l&#8217;invite de commande&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">la combinaison de touches <text:span text:style-name="Menu">[Ctrl+C]</text:span> annule
la saisie de la ligne en cours&#160;— c&#8217;est <text:span text:style-name="Menu">[⌃+C]</text:span> sous macOS&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">les touches <text:span text:style-name="T4">flèche haut</text:span> (<text:span text:style-name="Menu">[&#11014;]</text:span>) et <text:span text:style-name="T4">flèche bas</text:span>
(<text:span text:style-name="Menu">[&#11015;]</text:span>) aident à naviguer dans l&#8217;historique des commandes&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">la touche <text:span text:style-name="T4">tabulation</text:span> (<text:span text:style-name="Menu">[TAB]</text:span>) tente de compléter la saisie avec une
expression ou variable connue.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">La touche <text:span text:style-name="Menu">[TAB]</text:span> complètera automatiquement la saisie,
offrira une liste de choix de complétion&#160;:</text:p>
<text:p text:style-name="Code">$ node</text:p><text:p text:style-name="Code">&gt; conso<text:span text:style-name="Menu">[TAB]</text:span></text:p><text:p text:style-name="Code">&gt; console</text:p><text:p text:style-name="Code">&gt; console.<text:span text:style-name="Menu">[TAB]</text:span></text:p><text:p text:style-name="Code">...</text:p><text:p text:style-name="Code">console.assert<text:s text:c="16"/>console.clear<text:s text:c="17"/>console.count</text:p><text:p text:style-name="Code">...</text:p>
<text:p text:style-name="TexteCourant">On notera que l&#8217;utilisation de <text:span text:style-name="Menu">[TAB]</text:span> après un caractère <text:span text:style-name="T4">point</text:span> (<text:span text:style-name="CodeDansTexte">.</text:span>)
listera l&#8217;intégralité des propriétés de cet objet.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Raccourci</text:span> Afficher tous les variables connues</text:h><text:p text:style-name="Remarque">L&#8217;utilisation de la touche <text:span text:style-name="Menu">[TAB]</text:span> affichera <text:span text:style-name="T4">toutes</text:span> les variables connues
de la session interactive en cours.
Il suffit d&#8217;appuyer une ou deux fois sur la touche <text:span text:style-name="Menu">[TAB]</text:span>
dans une invite vide&#160;:</text:p>
<text:p text:style-name="RemarqueCode">$ node</text:p><text:p text:style-name="RemarqueCode">&gt; <text:span text:style-name="Menu">[TAB]</text:span><text:span text:style-name="Menu">[TAB]</text:span></text:p><text:p text:style-name="RemarqueCode">Array<text:s text:c="25"/>Boolean<text:s text:c="23"/>Date</text:p><text:p text:style-name="RemarqueCode">Error<text:s text:c="25"/>EvalError<text:s text:c="21"/>Function</text:p><text:p text:style-name="RemarqueCode">Infinity<text:s text:c="22"/>JSON<text:s text:c="26"/>Math</text:p><text:p text:style-name="RemarqueCode">NaN<text:s text:c="27"/>Number<text:s text:c="24"/>Object</text:p><text:p text:style-name="RemarqueCode">...</text:p>
<text:p text:style-name="Remarque">C&#8217;est un excellent moyen de <text:span text:style-name="T7">découvrir des éléments du langage</text:span> qui nous
étaient inconnus jusque-là.</text:p>
<text:p text:style-name="TexteCourant">La sortie de l&#8217;invite de commande se fait à l&#8217;aide de
l&#8217;utilisation répétée de la combinaison de touches <text:span text:style-name="Menu">[Ctrl+C]</text:span>
(ou <text:span text:style-name="Menu">[⌃+C]</text:span> sous macOS).
On revient ainsi à l&#8217;état initial où l&#8217;on était avant de
saisir la commande <text:span text:style-name="CodeDansTexte">node</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ node</text:p><text:p text:style-name="Code">&gt; </text:p><text:p text:style-name="Code">(To exit, press ^C again or type .exit)</text:p><text:p text:style-name="Code">&gt; </text:p><text:p text:style-name="Code">$ </text:p>
<text:p text:style-name="TexteCourant">Ce même résultat s&#8217;obtient en saisissant <text:span text:style-name="CodeDansTexte">.exit</text:span>
ou en utilisant la combinaison de touches <text:span text:style-name="Menu">[Ctrl+D]</text:span> (ou <text:span text:style-name="Menu">[⌃+D]</text:span> sous macOS).</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Raccourci</text:span> Variable magique <text:span text:style-name="CodeDansTexte">_</text:span></text:h><text:p text:style-name="Remarque">La variable <text:span text:style-name="CodeDansTexte">_</text:span> est spécifique à l&#8217;invite de commande Node.
Elle contient systématiquement le _résultat retourné_ par
la dernière évaluation de code&#160;:</text:p>
<text:p text:style-name="RemarqueCode">$ node</text:p><text:p text:style-name="RemarqueCode">&gt; 2 + 2</text:p><text:p text:style-name="RemarqueCode">4</text:p><text:p text:style-name="RemarqueCode">&gt; _ + 2</text:p><text:p text:style-name="RemarqueCode">6</text:p>
<text:p text:style-name="Remarque">Cette variable magique est équivalente à la variable <text:span text:style-name="CodeDansTexte">$_</text:span> dans la console
des outils de développement des navigateurs web.</text:p>
<text:bookmark text:name="ref-modules-builtin" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Les modules de base</text:h><text:p text:style-name="TexteCourant">Les modules de base <text:span text:style-name="T7">étendent le champ d&#8217;action de Node</text:span>.
Ils servent d&#8217;interface pour communiquer avec le système d&#8217;exploitation,
le système de fichier, des ressources HTTP et des connexions réseau, entre autres.<text:line-break/>Ces modules sont inclus avec chaque installation de Node.
On peut donc en bénéficier sans effort supplémentaire.</text:p>
<text:p text:style-name="TexteCourant">Le chargement d&#8217;un module de base s&#8217;effectue en passant son identifiant
à la fonction <text:span text:style-name="CodeDansTexte">require()</text:span>.
Cette fonction retourne alors un objet avec un certain nombre de <text:span text:style-name="T4">propriétés</text:span> et
de <text:span text:style-name="T4">fonctions</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Ainsi, on chargera le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-fs"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">fs</text:span></text:a> (pour <text:span text:style-name="T4">file system</text:span>&#160;— <text:span text:style-name="T4">système de fichiers</text:span>)
afin d&#8217;interagir avec les fichiers et les répertoires présents sur l&#8217;ordinateur&#160;:</text:p>
<text:p text:style-name="CodeTitre">fs/read-dir.js</text:p><text:p text:style-name="Code">const fs = require('fs');<text:s text:c="13"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">fs.readdir('.', (error, files) =&gt; {<text:s text:c="3"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(files);<text:s text:c="17"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> On assigne les fonctions et attributs du module <text:span text:style-name="CodeDansTexte">fs</text:span> dans la variable <text:span text:style-name="CodeDansTexte">fs</text:span>&#160;— on pourrait l&#8217;appeler autrement si on en avait envie.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> L&#8217;appel à la fonction <text:span text:style-name="CodeDansTexte">fs.readdir</text:span> passe un objet d&#8217;erreur ainsi que la liste des fichiers et répertoires contenus dans le chemin indiqué.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche un tableau contenant les noms de fichiers et de répertoires présents dans le dossier courant.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Ces modules de base représentent la pierre angulaire de nos applications Node.
Ils fournissent le nécessaire pour tout faire&#160;!
On apprendra à étendre encore plus le champ des possibles dans
le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-05"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 5</text:a>
grâce aux <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-modules"  text:visited-style-name="Visited_20_Internet_20_Link">modules npm</text:a>.</text:p>
<text:p text:style-name="TexteCourant">Les modules de base changent au fil du temps&#160;:
les nouvelles versions de Node ajoutent, corrigent et complètent les modules et
fonctions existantes.
La documentation officielle de Node reflète ces changements et
affiche un indice de stabilité pour savoir à quoi s&#8217;en tenir.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-04/images/api-fs.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 19. Documentation du module <text:span text:style-name="CodeDansTexte">fs</text:span> et son indice de stabilité.</text:p>
<text:p text:style-name="TexteCourant">Exceptionnellement, un module de base (ou une de ses fonctions) peut être supprimé.
L&#8217;équipe de Node annonce ces changements en <text:span text:style-name="T7">dépréciant</text:span> le module en question&#160;:
le code reste en place et sera supprimé dans une version ultérieure.
En général, c&#8217;est une question de mois voire d&#8217;années.<text:line-break/>On verra plus loin comment <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deprecation"  text:visited-style-name="Visited_20_Internet_20_Link">afficher les alertes de dépréciation</text:a>.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-04/images/api-deprecation-fs-exists.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 20. Documentation de la fonction <text:span text:style-name="CodeDansTexte">fs.exists</text:span>, affichée comme dépréciée depuis Node v1.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> Lecture des indices de stabilité</text:h><text:p text:style-name="Remarque">Node communique un indice de stabilité pour les modules de base.
Cette échelle se décompose en trois niveaux&#160;:</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="T7">déprécié</text:span></text:span><text:line-break/><text:tab/>Le module sera supprimé dans une prochaine version majeure.
À l&#8217;avenir, il vaut mieux ne pas se compter dessus.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="T7">expérimental</text:span></text:span><text:line-break/><text:tab/>Le module est en cours de développement.
Une fonctionnalité expérimentale peut changer radicalement entre deux
versions de Node.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="T7">stable</text:span></text:span><text:line-break/><text:tab/>On peut faire confiance à ce module.
Des choses peuvent changer exceptionnellement mais l&#8217;intention est d&#8217;offrir
une stabilité.</text:p>
<text:p text:style-name="Remarque">L&#8217;indice est parfois appliqué à des fonctions dont les attentes
changeraient d&#8217;une version à l&#8217;autre de Node.</text:p>
<text:p text:style-name="TexteCourant">Les sections suivantes illustrent des usages courants des modules de base
pour mieux comprendre quoi en attendre et comment les utiliser.</text:p>
<text:bookmark text:name="ref-console" /><text:h text:style-name="TitreNiveau2" text:outline-level="3"><text:span text:style-name="">console</text:span> : déboguer rapidement des variables</text:h><text:p text:style-name="TexteCourant">L&#8217;objet <text:span text:style-name="CodeDansTexte">console</text:span> est une boîte à outils pour afficher
ce qu&#8217;il se passe à un moment donné dans un de nos scripts.</text:p>
<text:p text:style-name="CodeTitre">console/log.js</text:p><text:p text:style-name="Code">let count = 0;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">count++; count++; count++;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log('Valeur de count :', count);</text:p>
<text:p text:style-name="TexteCourant">La fonction écrit les messages et la valeur des variables dans la
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.std"  text:visited-style-name="Visited_20_Internet_20_Link">sortie standard</text:a> du terminal&#160;:</text:p>
<text:p text:style-name="Code">$ node console/log.js</text:p><text:p text:style-name="Code">Valeur de count : 3</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Raccourci</text:span> Variable globale <text:span text:style-name="CodeDansTexte">console</text:span></text:h><text:p text:style-name="Remarque">Node charge automatiquement le module pour nous et
le rend utilisable à tout moment à travers la variable globale <text:span text:style-name="CodeDansTexte">console</text:span>.</text:p>
<text:p text:style-name="Remarque">Nul besoin de charger le module manuellement avec <text:span text:style-name="CodeDansTexte">require('console')</text:span>.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="CodeDansTexte">console.log</text:span> sait interpoler les valeurs passées en argument avec le marqueur <text:span text:style-name="CodeDansTexte">%s</text:span>.
C&#8217;est utile pour structurer un message complexe en gardant les variables à part&#160;:</text:p>
<text:p text:style-name="CodeTitre">console/interpolate.js</text:p><text:p text:style-name="Code">console.log('Soupe %s et carottes', 'lentilles');<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">Soupe lentilles et carottes</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="CodeDansTexte">%s</text:span> ne sait afficher que des chaînes de caractères.
D&#8217;autres marqueurs savent afficher d&#8217;autres types de données&#160;:</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">%d</text:span></text:span><text:line-break/><text:tab/>Affiche la valeur en tant que <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-number"  text:visited-style-name="Visited_20_Internet_20_Link">nombre</text:a>.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">%j</text:span></text:span><text:line-break/><text:tab/>Affiche la valeur en tant que <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-json"  text:visited-style-name="Visited_20_Internet_20_Link">structure JSON</text:a>.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">%O</text:span></text:span><text:line-break/><text:tab/>Affiche l&#8217;objet avec une profondeur maximum de 4 éléments.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">%o</text:span></text:span><text:line-break/><text:tab/>Idem que <text:span text:style-name="CodeDansTexte">%O</text:span> mais sur une profondeur maximum de 2 éléments.</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">console.log()</text:span></text:span><text:line-break/><text:tab/>Affichage de messages et de variables dans le terminal.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">console.error()</text:span></text:span><text:line-break/><text:tab/>Comportement identique à <text:span text:style-name="CodeDansTexte">console.log()</text:span> mais à réserver aux erreurs.
La fonction écrit dans la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.std"  text:visited-style-name="Visited_20_Internet_20_Link">sortie erreur</text:a>.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">console.dir()</text:span></text:span><text:line-break/><text:tab/>Affichage dédié aux objets et tableaux.
On peut paramétrer la profondeur d&#8217;affichage
(par défaut, jusqu&#8217;à 2 niveaux).</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">console.group()</text:span></text:span><text:line-break/><text:tab/>Regroupe visuellement les appels à <text:span text:style-name="CodeDansTexte">console.log</text:span> et <text:span text:style-name="CodeDansTexte">console.error</text:span>.<text:line-break/>
Un groupe se clôt avec <text:span text:style-name="CodeDansTexte">console.groupEnd()</text:span>.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">console.time()</text:span></text:span><text:line-break/><text:tab/>Démarre un chronomètre en lui attribuant un nom.<text:line-break/>
Le chronomètre s&#8217;arrête et sa durée s&#8217;affiche avec <text:span text:style-name="CodeDansTexte">console.timeEnd()</text:span>.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>classe <text:span text:style-name="CodeDansTexte">Console</text:span></text:span><text:line-break/><text:tab/>Crée un objet similaire à <text:span text:style-name="CodeDansTexte">console</text:span> mais en dirigeant l&#8217;affichage ailleurs
que vers les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.std"  text:visited-style-name="Visited_20_Internet_20_Link">flux standards</text:a>.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Web</text:span> Console et navigateurs web</text:h><text:p text:style-name="Remarque">L&#8217;objet <text:span text:style-name="CodeDansTexte">console</text:span> est originaire du monde des navigateurs web.
C&#8217;est un onglet de la boîte à outils de développement.
On peut y lire des messages placés dans le code JavaScript de la page web.
On l&#8217;utilise aussi pour inspecter et interagir la page avec du code.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-04/images/web-console.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 21. Console web dans le navigateur web Firefox.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> <text:span text:style-name="CodeDansTexte">console</text:span></text:h><text:p text:style-name="Remarque">La documentation du module <text:span text:style-name="CodeDansTexte">console</text:span> est disponible sur le site officiel de Node&#160;:
<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://nodejs.org/docs/latest-v10.x/api/console.html" text:visited-style-name="Visited_20_Internet_20_Link">https://nodejs.org/docs/latest-v10.x/api/console.html</text:a></text:span></text:p>
<text:bookmark text:name="ref-path" /><text:h text:style-name="TitreNiveau2" text:outline-level="3"><text:span text:style-name="">path</text:span> : manipuler des chemins de fichier</text:h><text:p text:style-name="TexteCourant">Le module <text:span text:style-name="CodeDansTexte">path</text:span> offre un ensemble de fonctions et de propriétés pour
manipuler et construire des chemins vers des fichiers et répertoires.</text:p>
<text:p text:style-name="TexteCourant">Ces opérations permettent à notre code de fonctionner de manière identique
sur des systèmes d&#8217;exploitation exprimant les chemins de manière différente&#160;—
comme Linux et Windows par exemple.</text:p>
<text:p text:style-name="CodeTitre">path/intro.js</text:p><text:p text:style-name="Code">const path = require('path');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(path.dirname('/tmp/package.json'));<text:s text:c="3"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(path.basename('/tmp/package.json'));<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">console.log(path.extname('/tmp/package.json'));<text:s text:c="3"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">/tmp</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">package.json</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">.json</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Certaines fonctions comme <text:span text:style-name="CodeDansTexte">path.join</text:span> tiennent compte de la nature du système
d&#8217;exploitation.
Le résultat d&#8217;un même appel de fonction sera différent <text:span text:style-name="T4">mais</text:span> correspondra
à la même intention&#160;:</text:p>
<text:p text:style-name="CodeTitre">path/platform.js</text:p><text:p text:style-name="Code">const path = require('path');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(path.sep);<text:s text:c="26"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(path.join('tmp', 'package.json'));<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">/</text:span>&#160;— <text:span text:style-name="CodeDansTexte">\</text:span> sous Windows.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">tmp/package.json</text:span>&#160;— <text:span text:style-name="CodeDansTexte">tmp\package.json</text:span> sous Windows.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">On constate que <text:span text:style-name="CodeDansTexte">path.join</text:span> assemble les chemins en utilisant la valeur de
<text:span text:style-name="CodeDansTexte">path.sep</text:span>.
Ce qui est bien pour nous, c&#8217;est qu&#8217;on n&#8217;a pas besoin d&#8217;y penser&#160;:
<text:span text:style-name="T7">Node se charge de la compatibilité</text:span> avec le système d&#8217;exploitation.</text:p>
<text:p text:style-name="TexteCourant">La différence de résultats se précise un peu plus lorsque l&#8217;on tente de calculer
des chemins complets, <text:span text:style-name="T4">relatifs à notre emplacement</text:span> actuel&#160;:</text:p>
<text:p text:style-name="CodeTitre">path/relative.js</text:p><text:p text:style-name="Code">const path = require('path');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const relative_diff = path.relative(</text:p><text:p text:style-name="Code"><text:s text:c="2"/>'/tmp/package.json', '/tmp/source'</text:p><text:p text:style-name="Code">);</text:p><text:p text:style-name="Code">const resolve_diff = path.resolve(</text:p><text:p text:style-name="Code"><text:s text:c="2"/>'/tmp/package.json', '..', './source'</text:p><text:p text:style-name="Code">);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(relative_diff);<text:s text:c="5"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(resolve_diff);<text:s text:c="6"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">../source</text:span>&#160;— <text:span text:style-name="CodeDansTexte">..\source</text:span> sous Windows&#160;— c&#8217;est le chemin à parcourir pour aller du premier chemin au second chemin.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">/tmp/source</text:span>&#160;— <text:span text:style-name="CodeDansTexte">C:\tmp\source</text:span> sous Windows&#160;— on constate que le chemin <text:span text:style-name="T4">résolu</text:span> est absolu, et intègre la lettre du lecteur sous Windows.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Les résultats produits par les fonctions du module <text:span text:style-name="CodeDansTexte">path</text:span>
se combinent particulièrement bien avec celles <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-fs"  text:visited-style-name="Visited_20_Internet_20_Link">du module <text:span text:style-name="CodeDansTexte">fs</text:span></text:a>, pour
accéder aux fichiers en question.</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">path.basename()</text:span></text:span><text:line-break/><text:tab/>Retourne le nom de fichier.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">path.dirname()</text:span></text:span><text:line-break/><text:tab/>Retourne le nom de répertoire.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">path.extname()</text:span></text:span><text:line-break/><text:tab/>Retourne l&#8217;extension d&#8217;un fichier.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">path.isAbsolute()</text:span></text:span><text:line-break/><text:tab/>Indique si le chemin est <text:span text:style-name="T4">absolu</text:span> ou non.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">path.join()</text:span></text:span><text:line-break/><text:tab/>Assemble des bouts de chemin.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">path.parse()</text:span></text:span><text:line-break/><text:tab/>Retourne des informations liées à la compréhension d&#8217;un chemin
(extension, nom de fichier, nom de répertoire).</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">path.relative()</text:span></text:span><text:line-break/><text:tab/>Calcule le chemin relatif entre un chemin source et un chemin de destination.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">path.resolve()</text:span></text:span><text:line-break/><text:tab/>Calcule un chemin absolu à partir de plusieurs bouts de chemin.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>attribut <text:span text:style-name="CodeDansTexte">path.sep</text:span></text:span><text:line-break/><text:tab/>Retourne le caractère servant de séparateur de répertoires
pour le système d&#8217;exploitation sur lequel est exécuté le script.
Par exemple <text:span text:style-name="CodeDansTexte">/</text:span> pour Linux et macOS&#160;; <text:span text:style-name="CodeDansTexte">\</text:span> pour Windows.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Compatibilité</text:span> Manipuler des chemins Windows sous Linux et vice-versa</text:h><text:p text:style-name="Remarque">On peut avoir besoin de manipuler des chemins Windows avec du code
exécuté sur un autre système d&#8217;exploitation comme Linux et macOS.
C&#8217;est exactement ce que proposent les fonctions de <text:span text:style-name="CodeDansTexte">path.win32</text:span>.</text:p>
<text:p text:style-name="Remarque">path/win32.js</text:p><text:p text:style-name="RemarqueCode">const {join,resolve} = require('path').win32; <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="RemarqueCode"></text:p><text:p text:style-name="RemarqueCode">console.log(join('tmp', 'package.json'));<text:s text:c="5"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="RemarqueCode">console.log(resolve('C:\\tmp', '../etc'));<text:s text:c="7"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> On déstructure les fonctions depuis la variante <text:span text:style-name="CodeDansTexte">win32</text:span> du module <text:span text:style-name="CodeDansTexte">path</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">tmp\package.json</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">C:\etc</text:span>.<text:line-break/></text:p>
<text:p text:style-name="Remarque">L&#8217;objet <text:span text:style-name="CodeDansTexte">path.posix</text:span> fonctionne de la même manière pour des chemins Linux.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> <text:span text:style-name="CodeDansTexte">path</text:span></text:h><text:p text:style-name="Remarque">La documentation du module <text:span text:style-name="CodeDansTexte">path</text:span> est disponible sur le site officiel de Node&#160;:
<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://nodejs.org/docs/latest-v10.x/api/path.html" text:visited-style-name="Visited_20_Internet_20_Link">https://nodejs.org/docs/latest-v10.x/api/path.html</text:a></text:span></text:p>
<text:bookmark text:name="ref-url" /><text:h text:style-name="TitreNiveau2" text:outline-level="3"><text:span text:style-name="">url</text:span> : manipuler des URL</text:h><text:p text:style-name="TexteCourant">Le module <text:span text:style-name="CodeDansTexte">url</text:span> offre des outils pour interpréter des URL, les transformer
et les assembler à nouveau sous forme de chaîne de caractères.
La variable <text:span text:style-name="CodeDansTexte">URL</text:span> (en majuscules) est disponible de manière globale.</text:p>
<text:p text:style-name="CodeTitre">url/intro.js</text:p><text:p text:style-name="Code">const example = new URL('https://oncletom.io/node.js/');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(example.hostname);<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(example.pathname);<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">oncletom.io</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">/node.js/</text:span>.<text:line-break/></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Web</text:span> Compatibilité avec les navigateurs</text:h><text:p text:style-name="Remarque">La classe <text:span text:style-name="CodeDansTexte">URL</text:span> que nous utilisons dans Node est la même que dans les
navigateurs web modernes.
Son fonctionnement suit le standard <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://url.spec.whatwg.org" text:visited-style-name="Visited_20_Internet_20_Link">https://url.spec.whatwg.org</text:a></text:span>.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;objet retourné par le constructeur de <text:span text:style-name="CodeDansTexte">URL</text:span> est modifiable.
Il est ainsi possible de modifier les parties de l&#8217;URL qui nous intéressent
et de récupérer une URL sous forme d&#8217;une chaîne de caractères&#160;:</text:p>
<text:p text:style-name="CodeTitre">url/to-string.js</text:p><text:p text:style-name="Code">const example = new URL('https://oncletom.io/node.js/');</text:p><text:p text:style-name="Code">example.pathname = '/';</text:p><text:p text:style-name="Code">example.hash = '#top';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(example.toString());<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://oncletom.io/#top" text:visited-style-name="Visited_20_Internet_20_Link">https://oncletom.io/#top</text:a></text:span>&#160;— le chemin et le fragment ont été modifiées.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">La fonction <text:span text:style-name="CodeDansTexte">format()</text:span> va plus loin que <text:span text:style-name="CodeDansTexte">url.toString()</text:span>.
Ses options contrôlent plus finement ce qui sera conservé ou retiré lors
de la conversion en chaîne de caractères&#160;:</text:p>
<text:p text:style-name="CodeTitre">url/format.js</text:p><text:p text:style-name="Code">const {format} = require('url');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const url = 'https://user:password@oncletom.io/#top?test=1';</text:p><text:p text:style-name="Code">const example = new URL(url);</text:p><text:p text:style-name="Code">const options = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>auth: false,</text:p><text:p text:style-name="Code"><text:s text:c="2"/>search: false,</text:p><text:p text:style-name="Code"><text:s text:c="2"/>fragment: false,</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(format(example, options));<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://oncletom.io/" text:visited-style-name="Visited_20_Internet_20_Link">https://oncletom.io/</text:a></text:span>&#160;— les identifiants, l&#8217;ancre et les arguments ont été retirés par la fonction <text:span text:style-name="CodeDansTexte">format()</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Le constructeur <text:span text:style-name="CodeDansTexte">URL</text:span> accepte une URL de référence en second argument.
Cette adresse résout un chemin absolu à partir du premier argument&#160;:</text:p>
<text:p text:style-name="CodeTitre">url/resolve.js</text:p><text:p text:style-name="Code">const url1 = new URL('/node.js/', 'https://oncletom.io');</text:p><text:p text:style-name="Code">const url2 = new URL('../', 'https://oncletom.io/node.js/');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(url1.toString()); <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(url2.toString()); <text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://oncletom.io/node.js/" text:visited-style-name="Visited_20_Internet_20_Link">https://oncletom.io/node.js/</text:a></text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://oncletom.io/" text:visited-style-name="Visited_20_Internet_20_Link">https://oncletom.io/</text:a></text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">url.parse()</text:span></text:span><text:line-break/><text:tab/>Transforme une chaîne de caractères en un objet utilisable avec la fonction
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-http.request"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="CodeDansTexte">http.request()</text:span></text:a>.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>classe <text:span text:style-name="CodeDansTexte">URL</text:span></text:span><text:line-break/><text:tab/>Représentation de la structure d&#8217;une URL.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>classe <text:span text:style-name="CodeDansTexte">URLSearchParams</text:span></text:span><text:line-break/><text:tab/>Représentation des paramètres d&#8217;URL.</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">url.format()</text:span></text:span><text:line-break/><text:tab/>Transforme un objet <text:span text:style-name="CodeDansTexte">URL</text:span> en chaîne de caractères grâce à des contrôles fins.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">url.toString()</text:span></text:span><text:line-break/><text:tab/>Transforme l&#8217;objet <text:span text:style-name="CodeDansTexte">URL</text:span> en chaîne de caractères.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>attribut <text:span text:style-name="CodeDansTexte">url.hash</text:span></text:span><text:line-break/><text:tab/>Fragment de l&#8217;URL.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>attribut <text:span text:style-name="CodeDansTexte">url.hostname</text:span></text:span><text:line-break/><text:tab/>Nom de l&#8217;hôte.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>attribut <text:span text:style-name="CodeDansTexte">url.pathname</text:span></text:span><text:line-break/><text:tab/>Chemin d&#8217;accès à la ressource.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>attribut <text:span text:style-name="CodeDansTexte">url.protocol</text:span></text:span><text:line-break/><text:tab/>Protocole spécifié.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>attribut <text:span text:style-name="CodeDansTexte">url.search</text:span></text:span><text:line-break/><text:tab/>Paramètres de l&#8217;URL, caractère <text:span text:style-name="CodeDansTexte">?</text:span> inclus.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>attribut <text:span text:style-name="CodeDansTexte">url.searchParams</text:span></text:span><text:line-break/><text:tab/>Objet permettant de manipuler les paramètres.
Voir ci-après.</text:p>
<text:p text:style-name="TexteCourant">Manipuler une URL est plus aisé lorsqu&#8217;elle est structurée sous forme d&#8217;objet.
Les paramètres ne sont pas en reste avec l&#8217;attribut <text:span text:style-name="CodeDansTexte">searchParams</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">url/search-params.js</text:p><text:p text:style-name="Code">const example = new URL('https://oncletom.io/');</text:p><text:p text:style-name="Code">example.searchParams.set('search', 'node.js');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(example.toString());<text:s text:c="15"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(example.searchParams.toString());<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">example.searchParams.delete('search');</text:p><text:p text:style-name="Code">console.log(example.toString());<text:s text:c="15"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://oncletom.io/?search=node.js" text:visited-style-name="Visited_20_Internet_20_Link">https://oncletom.io/?search=node.js</text:a></text:span>&#160;— représentation de l&#8217;URL complète.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">search=node.js</text:span>&#160;— représentation des paramètres seulement.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://oncletom.io/" text:visited-style-name="Visited_20_Internet_20_Link">https://oncletom.io/</text:a></text:span>&#160;— le paramètre <text:span text:style-name="CodeDansTexte">search</text:span> et sa valeur ont été supprimés de l&#8217;URL.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">searchParams.append()</text:span></text:span><text:line-break/><text:tab/>Ajoute un paramètre à la suite de l&#8217;URL.
Cette fonction permet d&#8217;ajouter plusieurs fois une même clé, peu importe sa valeur.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">searchParams.delete()</text:span></text:span><text:line-break/><text:tab/>Supprime un paramètre d&#8217;URL.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">searchParams.get()</text:span></text:span><text:line-break/><text:tab/>Retoure la valeur d&#8217;un paramètre donné.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">searchParams.getAll()</text:span></text:span><text:line-break/><text:tab/>Retourne toutes les valeurs d&#8217;un paramètre donné.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">searchParams.has()</text:span></text:span><text:line-break/><text:tab/>Retourne <text:span text:style-name="CodeDansTexte">true</text:span> si les paramètres contiennent une clé donnée.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">searchParams.set()</text:span></text:span><text:line-break/><text:tab/>Assigne une valeur à un paramètre d&#8217;URL.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">searchParams.toString()</text:span></text:span><text:line-break/><text:tab/>Retourne une représentation de l&#8217;objet sous forme d&#8217;une chaîne
de caractères exploitable dans une URL.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> <text:span text:style-name="CodeDansTexte">url</text:span></text:h><text:p text:style-name="Remarque">La documentation du module <text:span text:style-name="CodeDansTexte">url</text:span> est disponible sur le site officiel de Node&#160;:
<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://nodejs.org/docs/latest-v10.x/api/url.html" text:visited-style-name="Visited_20_Internet_20_Link">https://nodejs.org/docs/latest-v10.x/api/url.html</text:a></text:span></text:p>
<text:bookmark text:name="ref-fs" /><text:h text:style-name="TitreNiveau2" text:outline-level="3"><text:span text:style-name="">fs</text:span> : manipuler le système de fichiers</text:h><text:p text:style-name="TexteCourant">Le module <text:span text:style-name="CodeDansTexte">fs</text:span> est un incontournable.
On y a recours dès que l&#8217;on a besoin de lire ou d&#8217;écrire dans un fichier.
On s&#8217;en sert également pour créer, déplacer ou supprimer des fichiers
et des répertoires.</text:p>
<text:p text:style-name="CodeTitre">fs/intro.js</text:p><text:p text:style-name="Code">const fs = require('fs');</text:p><text:p text:style-name="Code">const path = require('path');</text:p><text:p text:style-name="Code">const filename = path.join(__dirname, 'package.json');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">fs.readFile(filename, (err, content) =&gt; {<text:s text:c="3"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(String(content));<text:s text:c="13"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Lorsque la lecture du fichier aboutit, la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-callbacks"  text:visited-style-name="Visited_20_Internet_20_Link">fonction de callback</text:a> est appelée avec 2 paramètres&#160;: un objet d&#8217;erreur et le contenu.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche le contenu d&#8217;un fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>.<text:line-break/></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Raccourci</text:span> Variables <text:span text:style-name="CodeDansTexte">__filename</text:span> et <text:span text:style-name="CodeDansTexte">__dirname</text:span></text:h><text:p text:style-name="Remarque"><text:span text:style-name="CodeDansTexte">__filename</text:span> est une chaîne de caractères faisant référence au fichier actuel.<text:line-break/><text:span text:style-name="CodeDansTexte">__dirname</text:span> fait référence au répertoire du fichier actuel.</text:p>
<text:p text:style-name="Remarque">dirname-filename.js</text:p><text:p text:style-name="RemarqueCode">console.log(__filename);<text:s text:c="22"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="RemarqueCode">console.log(module.filename === __filename);<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="RemarqueCode"></text:p><text:p text:style-name="RemarqueCode">console.log(__dirname);<text:s text:c="23"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">/&#8230;&#8203;/chapter-04/examples/dirname-filename.js</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">true</text:span>&#160;— ça ne serait pas un <text:span text:style-name="T4">raccourci</text:span> sinon&#160;;-).<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">/&#8230;&#8203;/chapter-04/examples</text:span>.<text:line-break/></text:p>
<text:p text:style-name="Remarque">Ces variables sont utiles pour opérer sur
des <text:span text:style-name="T4">chemins relatifs au fichier actuel</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Dans l&#8217;exemple précédent, nous avons parcouru le contenu d&#8217;un fichier.
<text:span text:style-name="CodeDansTexte">fs.readdir()</text:span> parcourt un répertoire&#160;:</text:p>
<text:p text:style-name="CodeTitre">fs/ls.js</text:p><text:p text:style-name="Code">const {readdir} = require('fs');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">readdir('.', (error, files) =&gt; console.log(files));</text:p>
<text:p text:style-name="TexteCourant">En l&#8217;exécutant, nous obtenons ces résultats&#160;:</text:p>
<text:p text:style-name="Code">$ node fs/ls.js</text:p><text:p text:style-name="Code">[ '.eslintrc.yaml',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>'console',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>'debug.txt',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>'deprecation-warning.js',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>'process/env.js',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>...</text:p><text:p text:style-name="Code"><text:s text:c="2"/>'util' ]</text:p>
<text:p text:style-name="TexteCourant">Dans les environnements UNIX, le <text:span text:style-name="CodeDansTexte">.</text:span> fait référence au <text:span text:style-name="T4">répertoire courant</text:span>
et <text:span text:style-name="CodeDansTexte">..</text:span> au <text:span text:style-name="T4">répertoire parent</text:span>.
C&#8217;est le cas avec Node également.
Par la notion de <text:span text:style-name="T4">courant</text:span> fait référence
à l&#8217;emplacement depuis lequel nous appelons l&#8217;exécutable <text:span text:style-name="CodeDansTexte">node</text:span>.<text:line-break/>Changeons de répertoire pour voir&#160;:</text:p>
<text:p text:style-name="Code">$ cd ../..</text:p><text:p text:style-name="Code">$ node chapter-04/examples/fs/ls.js</text:p><text:p text:style-name="Code">[ '.eslintignore',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>'README.md',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>'chapter-01'</text:p><text:p text:style-name="Code"><text:s text:c="2"/>'chapter-02'</text:p><text:p text:style-name="Code"><text:s text:c="2"/>...</text:p><text:p text:style-name="Code"><text:s text:c="2"/>'tests' ]</text:p>
<text:p text:style-name="TexteCourant">Les <text:span text:style-name="T4">chemins relatifs</text:span> sont
<text:span text:style-name="T7">relatifs à l&#8217;emplacement depuis lequel on exécute la commande <text:span text:style-name="CodeDansTexte">node</text:span></text:span>.
<text:span text:style-name="CodeDansTexte">__dirname</text:span> et de <text:span text:style-name="CodeDansTexte">__filename</text:span> sont déterminés par rapport
à l&#8217;emplacement du script qui fait référence à ces variables.</text:p>
<text:p text:style-name="TexteCourant">Puisque les opérations liées au système de fichier ne sont pas immédiates
alors la majorité des fonctions de ce module est <text:span text:style-name="T7">asynchrone</text:span>.
Leur rapidité d&#8217;exécution varie en fonction du support de stockage utilisé
(à disque, à mémoire), de son usure et de la capacité de traitement du CPU
de l&#8217;ordinateur.</text:p>
<text:p text:style-name="TexteCourant">Cela veut aussi dire que les erreurs sont obtenues de manière asynchrone&#160;:</text:p>
<text:p text:style-name="CodeTitre">fs/rmdir.js</text:p><text:p text:style-name="Code">const fs = require('fs');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">fs.rmdir(__dirname, (error) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.error(error.message);<text:s text:c="3"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Indique que la suppression n&#8217;a pas abouti car le répertoire en question n&#8217;est pas vide&#160;— et pour cause, c&#8217;est celui qui contient notre fichier d&#8217;exemple.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">On peut articuler plusieurs opérations entre elles.
Et utiliser le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-path"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">path</text:span></text:a> pour construire des chemins robustes
qui fonctionnent avec tous les systèmes d&#8217;exploitation, sans effort.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple suivant crée un répertoire dans un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-os"  text:visited-style-name="Visited_20_Internet_20_Link">dossier temporaire</text:a>,
effectue une copie de fichier sous un autre nom et liste le contenu du répertoire
une fois la copie effectuée&#160;:</text:p>
<text:p text:style-name="CodeTitre">fs/copy-tmp.js</text:p><text:p text:style-name="Code">const {tmpdir} = require('os');</text:p><text:p text:style-name="Code">const {join} = require('path');</text:p><text:p text:style-name="Code">const fs = require('fs');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const dest_dir = join(tmpdir(), 'test');<text:s text:c="10"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">fs.mkdir(dest_dir, (error) =&gt; {<text:s text:c="19"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>const dest = join(dest_dir, 'example-copy.js');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>fs.copyFile(__filename, dest, (error) =&gt; {<text:s text:c="6"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>if (error === null) {</text:p><text:p text:style-name="Code"><text:s text:c="6"/>console.log(`La copie vers ${dest} s'est bien passée.`);</text:p><text:p text:style-name="Code"><text:s text:c="4"/>}</text:p><text:p text:style-name="Code"><text:s text:c="2"/>});</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> On assemble un chemin composé à partir du <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-os"  text:visited-style-name="Visited_20_Internet_20_Link">répertoire temporaire</text:a> fourni par le système d&#8217;exploitation.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Crée le répertoire en question.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Copie le contenu de ce script d&#8217;exemple vers le répertoire en question en lui attribuant un nouveau nom.<text:line-break/></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Sécurité</text:span> Utilisateur et permissions</text:h><text:p text:style-name="Remarque">Le script Node exécuté a le droit d&#8217;accéder, d&#8217;altérer et de supprimer
au même titre que l&#8217;utilisateur système qui lance le script.</text:p>
<text:p text:style-name="Remarque">Ce n&#8217;est pas grave si on exécute du code écrit soi-même.
Il faut être vigilant·e et pouvoir faire confiance si le code exécuté provient
d&#8217;une autre personne.</text:p>
<text:p text:style-name="TexteCourant">Si l&#8217;exemple précédent semble agréable à lire, il révèle <text:span text:style-name="T7">deux points de vigilance</text:span>.</text:p>
<text:p text:style-name="TexteCourant">J&#8217;ai écrit le code de manière <text:span text:style-name="T4">optimiste</text:span>, pour des questions de lisibilité.
Pourtant à chaque opération, il y a une <text:span text:style-name="T7">possibilité d&#8217;erreur</text:span> à gérer&#160;:
de la création du répertoire jusqu&#8217;à la lecture des fichiers de ce répertoire.<text:line-break/>Il faudrait vérifier l&#8217;argument <text:span text:style-name="CodeDansTexte">error</text:span> à chaque fois et décider quoi faire
en fonction de la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-errors"  text:visited-style-name="Visited_20_Internet_20_Link">nature du problème</text:a>.</text:p>
<text:p text:style-name="TexteCourant">Je vous invite à modifier le code de l&#8217;exemple précédent
pour afficher la valeur des variables <text:span text:style-name="CodeDansTexte">error</text:span> à l&#8217;aide des
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-console"  text:visited-style-name="Visited_20_Internet_20_Link">fonctions du module <text:span text:style-name="CodeDansTexte">console</text:span></text:a>.
Certaines erreurs apparaissent quand nous invoquons le script une seconde fois.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;imbrication des <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-callbacks"  text:visited-style-name="Visited_20_Internet_20_Link">fonctions de callback</text:a> fait qu&#8217;il est
<text:span text:style-name="T7">difficile d&#8217;interrompre une suite de <text:span text:style-name="T4">callbacks</text:span></text:span>.
Une bonne piste serait d&#8217;appliquer l'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-util"  text:visited-style-name="Visited_20_Internet_20_Link">utilitaire <text:span text:style-name="CodeDansTexte">promisify</text:span></text:a>
sur les fonctions du module <text:span text:style-name="CodeDansTexte">fs</text:span> afin de créer une
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-promise"  text:visited-style-name="Visited_20_Internet_20_Link">chaine de promesses</text:a>.<text:line-break/>Nous apprendrons à faire ça dans la section du <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-util"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">util</text:span></text:a>.</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">fs.appendFile()</text:span></text:span><text:line-break/><text:tab/>Ajoute un contenu à la suite d&#8217;un fichier existant.
Le fichier sera créé le cas échéant.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">fs.copyFile()</text:span></text:span><text:line-break/><text:tab/>Copie un fichier depuis un emplacement vers un autre.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">fs.mkdir()</text:span></text:span><text:line-break/><text:tab/>Crée un nouveau répertoire.
Le répertoire parent doit déjà exister.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">fs.readdir()</text:span></text:span><text:line-break/><text:tab/>Obtient la liste des fichiers et dossiers contenus dans un répertoire donné.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">fs.readFile()</text:span></text:span><text:line-break/><text:tab/>Lit le contenu d&#8217;un fichier.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">fs.rename()</text:span></text:span><text:line-break/><text:tab/>Renomme un fichier ou un répertoire.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">fs.rmdir()</text:span></text:span><text:line-break/><text:tab/>Supprime un répertoire.
Il doit être vide.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">fs.stat()</text:span></text:span><text:line-break/><text:tab/>Retourne des informations à propos d&#8217;un chemin d&#8217;accès&#160;:
est-ce que c&#8217;est un fichier, un répertoire, un lecteur, un lien symbolique etc.
Des attributs clarifient la taille du fichier (en octets), l&#8217;identifiant
système de son propriétaire, la date de création/modification/dernier accès etc.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">fs.symlink()</text:span></text:span><text:line-break/><text:tab/>Crée un lien symbolique vers un emplacement.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">fs.truncate()</text:span></text:span><text:line-break/><text:tab/>Raccourcit le contenu d&#8217;un fichier à une longueur donnée (en nombre d&#8217;octets).
Si aucun argument n&#8217;est donné, le contenu du fichier est remis à zéro.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">fs.createReadStream()</text:span></text:span><text:line-break/><text:tab/>Crée un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-stream"  text:visited-style-name="Visited_20_Internet_20_Link">flux de lecture</text:a>, pour lire un fichier en continu.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">fs.createWriteStream()</text:span></text:span><text:line-break/><text:tab/>Crée un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-stream"  text:visited-style-name="Visited_20_Internet_20_Link">flux d&#8217;écriture</text:a>, pour écrire en continu dans un fichier.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Définition</text:span> Lien symbolique</text:h><text:p text:style-name="Remarque">Fichier qui fait référence à un autre fichier&#160;— c&#8217;est comme un <text:span text:style-name="T4">alias</text:span>.
Toutes les modifications effectuées sur le lien symbolique sont
répercutées sur le fichier d&#8217;origine.</text:p>
<text:p text:style-name="Remarque">En savoir plus sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://fr.wikipedia.org/wiki/Lien_symbolique" text:visited-style-name="Visited_20_Internet_20_Link">https://fr.wikipedia.org/wiki/Lien_symbolique</text:a></text:span>.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> <text:span text:style-name="CodeDansTexte">fs</text:span></text:h><text:p text:style-name="Remarque">La documentation du module <text:span text:style-name="CodeDansTexte">fs</text:span> est disponible sur le site officiel de Node&#160;:
<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://nodejs.org/docs/latest-v10.x/api/fs.html" text:visited-style-name="Visited_20_Internet_20_Link">https://nodejs.org/docs/latest-v10.x/api/fs.html</text:a></text:span></text:p>
<text:bookmark text:name="ref-events" /><text:h text:style-name="TitreNiveau2" text:outline-level="3"><text:span text:style-name="">events</text:span> : programmer des événements</text:h><text:p text:style-name="TexteCourant">Le module <text:span text:style-name="CodeDansTexte">events</text:span> contient le nécessaire pour créer du code communiquant
à l&#8217;aide de fonctions d&#8217;écoute et d&#8217;émission de messages.
C&#8217;est comme un <text:span text:style-name="T4">centre de tri postal</text:span> mais pour Node avec des variables
en guise de courriers.</text:p>
<text:p text:style-name="CodeTitre">events/intro.js</text:p><text:p text:style-name="Code">const EventEmitter = require('events');</text:p><text:p text:style-name="Code">const emitter = new EventEmitter();<text:s text:c="15"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">emitter.on('date', (date) =&gt; {<text:s text:c="20"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log('Année : %d', date.getFullYear());</text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">emitter.emit('date', new Date('2018-03-01'));<text:s text:c="5"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">emitter.emit('date', new Date('1983-03-24'));</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Création d&#8217;un gestionnaire d&#8217;événements.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Enregistrement d&#8217;une fonction d&#8217;écoute&#160;— elle sera exécutée à chaque émission de l&#8217;événement <text:span text:style-name="CodeDansTexte">date</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Émission d&#8217;un événement <text:span text:style-name="CodeDansTexte">date</text:span> avec comme argument, un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-date"  text:visited-style-name="Visited_20_Internet_20_Link">objet <text:span text:style-name="CodeDansTexte">Date</text:span></text:a>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Un événement se décompose en 3 parties&#160;: les <text:span text:style-name="T7">fonctions d&#8217;écoute</text:span>,
les <text:span text:style-name="T7">émissions de message</text:span> et un <text:span text:style-name="T7">objet <text:span text:style-name="CodeDansTexte">EventEmitter</text:span></text:span>
qui fait le lien entre les deux.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Langage</text:span> ECMAScript n&#8217;est pas événementiel</text:h><text:p text:style-name="Remarque">Contrairement à ce que l&#8217;on pourrait penser, le langage ECMAScript ne possède
aucune structure de gestion d&#8217;événements.</text:p>
<text:p text:style-name="Remarque">S&#8217;il est possible de réagir à des événements dans les navigateurs web,
c&#8217;est grâce à la spécification DOM&#160;— l&#8217;API JavaScript pour manipuler
une structure de document HTML.</text:p>
<text:p text:style-name="Remarque">Pour en savoir plus&#160;: <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://developer.mozilla.org/fr/docs/Web/Events" text:visited-style-name="Visited_20_Internet_20_Link">https://developer.mozilla.org/fr/docs/Web/Events</text:a></text:span>.</text:p>
<text:p text:style-name="TexteCourant">On peut décider d&#8217;écouter un événement une seule fois avec <text:span text:style-name="CodeDansTexte">emitter.once()</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">events/once.js</text:p><text:p text:style-name="Code">const EventEmitter = require('events');</text:p><text:p text:style-name="Code">const emitter = new EventEmitter();</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">emitter.once('date', (date) =&gt; {<text:s text:c="18"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log('Année : %d', date.getFullYear());</text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">emitter.emit('date', new Date('2018-03-01'));</text:p><text:p text:style-name="Code">emitter.emit('date', new Date('1983-03-24'));</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Bien que l&#8217;événement <text:span text:style-name="CodeDansTexte">date</text:span> soit appelé deux fois, la fonction d&#8217;écoute ne réagira qu&#8217;une seule fois.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">La fonction <text:span text:style-name="CodeDansTexte">emitter.remove</text:span> débranche une fonction d&#8217;écoute selon
les critères de notre choix&#160;:</text:p>
<text:p text:style-name="CodeTitre">events/remove.js</text:p><text:p text:style-name="Code">const EventEmitter = require('events');</text:p><text:p text:style-name="Code">const emitter = new EventEmitter();</text:p><text:p text:style-name="Code">const tick = () =&gt; process.stdout.write('.');</text:p><text:p text:style-name="Code">let counter = 0;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">setInterval(() =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>counter++;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>emitter.emit('date', new Date());<text:s text:c="13"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>if (counter === 5) {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>process.exit(0);</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}, 1000);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">emitter.on('date', tick);<text:s text:c="23"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">emitter.on('date', () =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>if (counter === 3) {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>emitter.removeListener('date', tick);<text:s text:c="7"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> L&#8217;événement <text:span text:style-name="CodeDansTexte">date</text:span> est émis toutes les secondes.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> La fonction <text:span text:style-name="CodeDansTexte">tick</text:span> est appelée toutes les secondes.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> La fonction <text:span text:style-name="CodeDansTexte">tick</text:span> est débranchée de l&#8217;événement <text:span text:style-name="CodeDansTexte">date</text:span> au bout de 3 incréments.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">On remarquera qu&#8217;il faut pouvoir faire référence à la fonction d&#8217;écoute
afin de la débrancher.</text:p>
<text:p text:style-name="TexteCourant">Une utilisation alternative des événements consiste à étendre la classe <text:span text:style-name="CodeDansTexte">EventEmitter</text:span>.
Une fois étendue, notre nouvelle classe bénéficiera des méthodes <text:span text:style-name="CodeDansTexte">.on()</text:span> etc.</text:p>
<text:p text:style-name="CodeTitre">events/class.js</text:p><text:p text:style-name="Code">const EventEmitter = require('events');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">class Car extends EventEmitter {<text:s text:c="19"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>constructor (name) {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>super();<text:s text:c="39"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>this.name = name;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>start () {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>this.emit('action', this, 'démarrer');<text:s text:c="9"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const auto = new Car('Boombo');</text:p><text:p text:style-name="Code">auto.on('action', (car, action) =&gt; {<text:s text:c="15"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log('%s est en train de %s', car.name, action);</text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">auto.start();</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Extension de la classe <text:span text:style-name="CodeDansTexte">EventEmitter</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> L&#8217;utilisation de la fonction spéciale <text:span text:style-name="CodeDansTexte">super()</text:span> est indispensable. Elle revient à invoquer <text:span text:style-name="CodeDansTexte">new EventEmitter()</text:span> par mécanisme de cascade.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> La méthode <text:span text:style-name="CodeDansTexte">.start()</text:span> encapsule un appel à la méthode <text:span text:style-name="CodeDansTexte">.emit()</text:span>.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> La fonction réagira à l&#8217;émission de l&#8217;événement <text:span text:style-name="CodeDansTexte">action</text:span> quand la méthode <text:span text:style-name="CodeDansTexte">.start()</text:span> sera appelée.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Ce <text:span text:style-name="T7">mécanisme est utile</text:span> pour cacher de la complexité applicative,
pour exécuter une fonction plusieurs fois lors d&#8217;un événement donné,
pour exposer une surface d&#8217;action compréhensible,
tout en rendant notre code communiquant vers l&#8217;extérieur.</text:p>
<text:p text:style-name="TexteCourant">Plusieurs modules Node utilisent les événements pour nous permettre d&#8217;y
réagir de manière totalement optionnelle.
Tout ce que l&#8217;on vient d&#8217;expliquer s&#8217;applique à l&#8217;identique
au <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">process</text:span></text:a>, au <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-child_process"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">child_process</text:span></text:a>
ainsi qu&#8217;au <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-http"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">http</text:span></text:a>.</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">on()</text:span></text:span><text:line-break/><text:tab/>Enregistre une nouvelle fonction réagissant à un événement donné.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">once()</text:span></text:span><text:line-break/><text:tab/>Enregistre une nouvelle fonction réagissant <text:span text:style-name="T4">une seule fois</text:span> à un événement donné.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">emit()</text:span></text:span><text:line-break/><text:tab/>Émet un événement.
Si un ou plusieurs arguments additonnels sont présents,
ils sont transmis aux fonctions écoutant cet événement.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">eventNames()</text:span></text:span><text:line-break/><text:tab/>Liste les événements pour lesquels on a enregistré au moins une fonction d&#8217;écoute.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">listeners()</text:span></text:span><text:line-break/><text:tab/>Liste les fonctions écoutant les événements.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">removeListener()</text:span></text:span><text:line-break/><text:tab/>Supprime une fonction d&#8217;écoute d&#8217;un événement donné.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">removeAllListeners()</text:span></text:span><text:line-break/><text:tab/>Supprime toutes les fonctions d&#8217;écoute d&#8217;un événement donné.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">setMaxListeners()</text:span></text:span><text:line-break/><text:tab/>Change le nombre maximum de fonctions d&#8217;écoute possibles.<text:line-break/>
Par défaut cette limite est de <text:span text:style-name="T4">10 fonctions maximum</text:span>.
Ça paraît peu.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> <text:span text:style-name="CodeDansTexte">events</text:span></text:h><text:p text:style-name="Remarque">La documentation du module <text:span text:style-name="CodeDansTexte">events</text:span> est disponible sur le site officiel de Node&#160;:
<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://nodejs.org/docs/latest-v10.x/api/events.html" text:visited-style-name="Visited_20_Internet_20_Link">https://nodejs.org/docs/latest-v10.x/api/events.html</text:a></text:span></text:p>
<text:bookmark text:name="ref-util" /><text:h text:style-name="TitreNiveau2" text:outline-level="3"><text:span text:style-name="">util</text:span> : transformer des <text:span text:style-name="T4">callbacks</text:span> en promesses</text:h><text:p text:style-name="TexteCourant">Le module <text:span text:style-name="CodeDansTexte">util</text:span> est un petit module contenant des fonctions utilitaires
qui ne rentreraient pas dans le périmètre d&#8217;autres modules.</text:p>
<text:p text:style-name="TexteCourant">On y trouve <text:span text:style-name="CodeDansTexte">util.format()</text:span>, une fonction qui fait beaucoup penser à
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-console"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="CodeDansTexte">console.log</text:span></text:a> mais sans afficher le message&#160;:</text:p>
<text:p text:style-name="CodeTitre">util/format.js</text:p><text:p text:style-name="Code">const {format} = require('util');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const message = format(<text:s text:c="11"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>'Il fait %s aujourd\'hui',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>'☀️ '</text:p><text:p text:style-name="Code">);</text:p><text:p text:style-name="Code">// console.log(message);</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Assigne le message formaté dans une variable sans l&#8217;afficher.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Pour afficher la valeur de la variable <text:span text:style-name="CodeDansTexte">message</text:span> de l&#8217;exemple précédent,
il suffirait de décommenter la dernière ligne et de (re)lancer le script.</text:p>
<text:p text:style-name="TexteCourant">La fonction <text:span text:style-name="CodeDansTexte">util.debuglog()</text:span> formate aussi des messages.
Son affichage est toutefois conditionnel.
Ce qui est pratique quand on veut déboguer des variables sans toucher au code
entre deux exécutions&#160;:</text:p>
<text:p text:style-name="CodeTitre">util/debuglog.js</text:p><text:p text:style-name="Code">const {debuglog} = require('util');</text:p><text:p text:style-name="Code">const {cpus} = require('os');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const debug = debuglog('nodebook');<text:s text:c="21"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">const infos = cpus().map(cpu =&gt; cpu.model);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log('Cet ordinateur a %d CPU.', infos.length);<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">debug('Le modèle de CPU est %s.', infos[0]);<text:s text:c="12"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Création d&#8217;un débogueur nommé <text:span text:style-name="CodeDansTexte">nodebook</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Ce message s&#8217;affiche systématiquement quand on exécute le script.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Le modèle de CPU sera affiché en invoquant Node en présence de la variable d&#8217;environnement <text:span text:style-name="CodeDansTexte">NODE_DEBUG</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">En lançant la commande suivante, seul le message de <text:span text:style-name="CodeDansTexte">console.log</text:span> s&#8217;affiche&#160;:</text:p>
<text:p text:style-name="Code">$ node util/debuglog.js</text:p><text:p text:style-name="Code">Cet ordinateur a 4 CPU.</text:p>
<text:p text:style-name="TexteCourant">Il nous faut alors utiliser la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.env"  text:visited-style-name="Visited_20_Internet_20_Link">variable d&#8217;environnement</text:a> <text:span text:style-name="CodeDansTexte">NODE_DEBUG</text:span>.
En lui attribuant la même valeur que notre débogueur, celui-ci affichera alors
le contenu attendu&#160;:</text:p>
<text:p text:style-name="Code">$ NODE_DEBUG=nodebook node util/debuglog.js</text:p><text:p text:style-name="Code">Cet ordinateur a 4 CPU.</text:p><text:p text:style-name="Code">NODEBOOK 32486: Le modèle de CPU est Intel(R) Core(TM) i5-6267U CPU @ 2.90GHz.</text:p>
<text:p text:style-name="TexteCourant">Si l&#8217;on souhaite avoir plusieurs débogueurs, dans un ou plusieurs scripts,
il suffit de séparer leur nom par une virgule.
Par exemple <text:span text:style-name="CodeDansTexte">NODE_DEBUG=nodebook,test,fromage</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Une de mes fonctions préférées est <text:span text:style-name="CodeDansTexte">util.promisify()</text:span>.
Elle convertit une fonction acceptant un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-callback"  text:visited-style-name="Visited_20_Internet_20_Link">callback</text:a> en une fonction
retournant une <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-promise"  text:visited-style-name="Visited_20_Internet_20_Link">promesse</text:a>.
C&#8217;est d&#8217;autant plus pratique quand on n&#8217;a pas la maitrise du
code source original&#160;:</text:p>
<text:p text:style-name="CodeTitre">util/fs-readdir-promisified.js</text:p><text:p text:style-name="Code">const {promisify} = require('util');</text:p><text:p text:style-name="Code">const readdir = promisify(require('fs').readdir);<text:s text:c="3"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">readdir(__dirname)<text:s text:c="34"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>.then((files) =&gt; console.log(files))<text:s text:c="14"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>.catch((error) =&gt; console.error(error.message));</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Assigne une version transformée de <text:span text:style-name="CodeDansTexte">fs.readdir</text:span> grâce à <text:span text:style-name="CodeDansTexte">util.promisify</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> On ne passe pas de <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-callbacks"  text:visited-style-name="Visited_20_Internet_20_Link">callback</text:a> contrairement à <text:span text:style-name="CodeDansTexte">fs.readdir</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Le résultat de l&#8217;opération est passé à la résolution de promesse.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Ça paraît rien mais ça ouvre un potentiel de simplification énorme pour nous.
Fini l&#8217;argument <text:span text:style-name="CodeDansTexte">error</text:span> qui nous embête&#160;: on peut le collecter quand ça
nous arrange grâce à <text:span text:style-name="CodeDansTexte">.catch()</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Ça nous évite aussi d&#8217;avoir à écrire toutes ces lignes de code
pour arriver au même résultat&#160;:</text:p>
<text:p text:style-name="CodeTitre">util/fs-readdir-promise.js</text:p><text:p text:style-name="Code">const fs = require('fs');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const readdir = (path) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>return new Promise((resolve, reject) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>fs.readdir(path, (error, files) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="6"/>error ? reject(error) : resolve(files);</text:p><text:p text:style-name="Code"><text:s text:c="4"/>});</text:p><text:p text:style-name="Code"><text:s text:c="2"/>});</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">readdir(__dirname)</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.then((files) =&gt; console.log(files))</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.catch((error) =&gt; console.error(error.message));</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">util.debuglog()</text:span></text:span><text:line-break/><text:tab/>Crée une fonction de débogage similaire à <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-console"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="CodeDansTexte">console.error</text:span></text:a>.
Les messages ne s&#8217;afficheront que si la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.env"  text:visited-style-name="Visited_20_Internet_20_Link">variable d&#8217;environnement</text:a>
<text:span text:style-name="CodeDansTexte">NODE_DEBUG</text:span> mentionne l&#8217;identifiant du débogueur.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">util.deprecate()</text:span></text:span><text:line-break/><text:tab/>Affiche un message d&#8217;avertissement lorsque vous souhaitez retirer une fonction
partagée dans une version ultérieure de votre code.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">util.format()</text:span></text:span><text:line-break/><text:tab/>Retourne une chaîne de caractères formatée, comme <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-console"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="CodeDansTexte">console.log</text:span></text:a>
mais sans l&#8217;envoyer dans un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.std"  text:visited-style-name="Visited_20_Internet_20_Link">flux de sortie</text:a>.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">util.promisify()</text:span></text:span><text:line-break/><text:tab/>Transforme une <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-callbacks"  text:visited-style-name="Visited_20_Internet_20_Link">fonction de callback</text:a> en
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-promise"  text:visited-style-name="Visited_20_Internet_20_Link">promesse</text:a>.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> <text:span text:style-name="CodeDansTexte">util</text:span></text:h><text:p text:style-name="Remarque">La documentation du module <text:span text:style-name="CodeDansTexte">util</text:span> est disponible sur le site officiel de Node&#160;:
<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://nodejs.org/docs/latest-v10.x/api/util.html" text:visited-style-name="Visited_20_Internet_20_Link">https://nodejs.org/docs/latest-v10.x/api/util.html</text:a></text:span></text:p>
<text:bookmark text:name="ref-http" /><text:h text:style-name="TitreNiveau2" text:outline-level="3"><text:span text:style-name="">http</text:span> : créer et interroger des ressources via le protocole HTTP</text:h><text:p text:style-name="TexteCourant">Le module <text:span text:style-name="CodeDansTexte">http</text:span> est un module incontournable de Node.
Il a <text:span text:style-name="T4">2 facettes</text:span>&#160;: la création de <text:span text:style-name="T7">requêtes HTTP</text:span> et la création
de <text:span text:style-name="T7">serveurs HTTP</text:span>.
Dans un cas on utilise le protocole HTTP pour <text:span text:style-name="T7">accéder à une ressource distante</text:span>
et recevoir une <text:span text:style-name="T4">réponse</text:span>.
Dans l&#8217;autre cas on utilise le protocole HTTP pour
<text:span text:style-name="T7">mettre à disposition des ressources</text:span> et les envoyer en <text:span text:style-name="T4">réponse</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Le module <text:span text:style-name="CodeDansTexte">https</text:span> offre exactement les mêmes propriétés.
Il est à privilégier pour établir des connections sécurisées
vers des adresses commençant par <text:span text:style-name="CodeDansTexte">https://</text:span>.</text:p>
<text:p text:style-name="CodeTitre">http/intro.js</text:p><text:p text:style-name="Code">const {get} = require('https');</text:p><text:p text:style-name="Code">const url = 'https://oncletom.io/node.js/package.json';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">get(url, (response) =&gt; {<text:s text:c="24"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>response.on('data', (data) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>console.log(data.toString());<text:s text:c="15"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>});</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Initialisation de la requête&#160;— un objet représentant la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-http.IncomingMessage"  text:visited-style-name="Visited_20_Internet_20_Link">réponse du serveur distant</text:a> nous est transmis. À ce stade là, le serveur n&#8217;a pas encore commencé à renvoyer des données.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> On en est à l&#8217;étape où on reçoit des données. Le contenu du fichier <text:span text:style-name="CodeDansTexte">package.json</text:span> est affiché sous forme de chaînes de caractères.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Ce premier exemple met en lumière <text:span text:style-name="T7">la nature asynchrone et non-bloquante par défaut de Node</text:span>.
La création d&#8217;une requête et l&#8217;obtention de la réponse sont séparées d&#8217;un délai
variable pendant lequel Node ne bloque pas le reste du code de s&#8217;exécuter.
Les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-callbacks"  text:visited-style-name="Visited_20_Internet_20_Link">callbacks</text:a> sont appelés lorque l&#8217;action est terminée.</text:p>
<text:p text:style-name="TexteCourant">En regardant le code de l&#8217;exemple précédent, on en apprend un peu plus sur
le fonctionnement d&#8217;une requête HTTP&#160;:</text:p>
<text:p text:style-name="ListeANumero">1.<text:tab/>envoi de la requête au serveur distant (<text:span text:style-name="CodeDansTexte">get()</text:span>)</text:p><text:p text:style-name="ListeANumero">2.<text:tab/>obtention d&#8217;une réponse (objet <text:span text:style-name="CodeDansTexte">response</text:span> dans le callback)</text:p><text:p text:style-name="ListeANumero">3.<text:tab/>transmission d&#8217;informations (événement <text:span text:style-name="CodeDansTexte">data</text:span>)</text:p><text:p text:style-name="ListeANumero">4.<text:tab/>clôture de la transmission (événement <text:span text:style-name="CodeDansTexte">end</text:span>&#160;— cf. exemple suivant)</text:p>
<text:p text:style-name="TexteCourant">Pour rester rapide, Node fait aussi le choix de transmettre les données
au fur et à mesure.
L'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-events"  text:visited-style-name="Visited_20_Internet_20_Link">événement</text:a> <text:span text:style-name="CodeDansTexte">data</text:span> renvoie en réalité environ <text:span text:style-name="CodeDansTexte">10Ko</text:span> de données.
L&#8217;exemple précédent a tout renvoyé d&#8217;un coup car le volume des données
était inférieur à 10Ko.</text:p>
<text:p text:style-name="TexteCourant">Voyons maintenant ce qu&#8217;il se passe lorsqu&#8217;on fait appel à un fichier
plus volumineux&#160;:</text:p>
<text:p text:style-name="CodeTitre">http/get.js</text:p><text:p text:style-name="Code">const {get} = require('https');</text:p><text:p text:style-name="Code">let count = 0;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">get('https://oncletom.io/node.js/index.html', (response) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>response.on('data', (data) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>count = count + 1;</text:p><text:p text:style-name="Code"><text:s text:c="4"/>const ko = data.length/1024;</text:p><text:p text:style-name="Code"><text:s text:c="4"/>console.log('Morceau #%d : %iKo', count, ko); <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>response.on('end', () =&gt; {<text:s text:c="22"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>console.log('Fini (%d morceaux)', count);<text:s text:c="5"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>});</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche ce message à chaque morceau/paquet reçu.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> L&#8217;événement <text:span text:style-name="CodeDansTexte">end</text:span> se déclenche lorsque la requête n&#8217;a plus de données à recevoir.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche le nombre de morceaux reçus pour obtenir une <text:span text:style-name="T4">réponse complète</text:span>.<text:line-break/></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Paramètre URL</text:h><text:p text:style-name="Remarque">Les fonctions <text:span text:style-name="CodeDansTexte">http.get()</text:span> et <text:span text:style-name="CodeDansTexte">http.request()</text:span> accepte une chaîne de caractères
comme premier argument.</text:p>
<text:p text:style-name="Remarque">Il est aussi possible de lui passer un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-url"  text:visited-style-name="Visited_20_Internet_20_Link">objet URL</text:a>.
Pratique si vous manipulez des URL complexes ou si vous paginez.</text:p>
<text:p text:style-name="TexteCourant">En clair, on peut recevoir une réponse en plusieurs fois, petit bout par petit bout.
Les données reçues ne sont pas forcément complètes.
Ça pose problème à des fonctions comme
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-json"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="CodeDansTexte">JSON.parse</text:span></text:a>.
Elle nécessite un document JSON complet pour produire un résultat.</text:p>
<text:p text:style-name="TexteCourant">Une solution consiste accumuler les morceaux de réponse et à les assembler.
Cela veut aussi dire que l&#8217;on consomme autant de mémoire que l&#8217;on reçoit de données.</text:p>
<text:p text:style-name="TexteCourant">Une autre solution repose sur l&#8217;utilisation des <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-stream"  text:visited-style-name="Visited_20_Internet_20_Link">flux de données</text:a>.
Ils pompent et brassent les données comme du liquide, en consommant peu de mémoire.
On en parle plus loin, dans la section sur le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-stream"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">streams</text:span></text:a>.</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">http.createServer()</text:span></text:span><text:line-break/><text:tab/>Initialise un serveur HTTP et fournit une boîte à outil pour
gérer les connexions entrantes via <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-http.Server"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="CodeDansTexte">http.Server</text:span></text:a></text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">http.get()</text:span></text:span><text:line-break/><text:tab/>Crée une connexion HTTP de type <text:span text:style-name="CodeDansTexte">GET</text:span>.
Il s&#8217;agit d&#8217;une version simplifiée de <text:span text:style-name="CodeDansTexte">http.request()</text:span>.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">http.request()</text:span></text:span><text:line-break/><text:tab/>Crée une connexion HTTP du type de son choix (<text:span text:style-name="CodeDansTexte">GET</text:span>, <text:span text:style-name="CodeDansTexte">POST</text:span>, <text:span text:style-name="CodeDansTexte">OPTION</text:span>, <text:span text:style-name="CodeDansTexte">PUT</text:span>,
etc.).</text:p>
<text:bookmark text:name="ref-http.request" /><text:p text:style-name="TexteCourant">La fonction <text:span text:style-name="CodeDansTexte">http.request()</text:span> gère une requête plus finement.
On peut aisément régler les entêtes, le verbe HTTP et les modalités de
transmission des données.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple suivant illustre l&#8217;envoi d&#8217;une requête <text:span text:style-name="CodeDansTexte">HEAD</text:span>.
Ce verbe HTTP indique au serveur distant de répondre avec les métadonnées
de la ressource mais sans les données (<text:span text:style-name="CodeDansTexte">response.on('data')</text:span>)&#160;:</text:p>
<text:p text:style-name="CodeTitre">http/request.js</text:p><text:p text:style-name="Code">const https = require('https');</text:p><text:p text:style-name="Code">const options = {<text:s text:c="33"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>protocol: 'https:',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>host: 'oncletom.io',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>path: '/node.js/package.json',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>method: 'HEAD',</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const request = https.request(options);</text:p><text:p text:style-name="Code">request.setHeader('Accept', 'application/json');<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">request.end();<text:s text:c="36"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">request.on('response', (response) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const lastModified = response.headers['last-modified'];</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log('Modifié le %s', lastModified);<text:s text:c="5"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Construction des paramètres de requête pour <text:span text:style-name="CodeDansTexte">http.request()</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Explicite au serveur distant la nature du contenu que l&#8217;on s&#8217;apprête à recevoir.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Déclenche l&#8217;envoi de la requête sur le réseau.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Affiche la date de modification de la ressource distante.<text:line-break/></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Avancé</text:span> Parser, destructurer, combiner</text:h><text:p text:style-name="Remarque">La fonction <text:span text:style-name="CodeDansTexte">url.parse</text:span> du <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-url"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">url</text:span></text:a> est une alternative à la
construction manuelle de l&#8217;URL.
Les opérateurs de <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-object"  text:visited-style-name="Visited_20_Internet_20_Link">manipulation d&#8217;objets</text:a>
comme le <text:span text:style-name="T4">destructuring</text:span> et l&#8217;expansion (<text:span text:style-name="T4">rest</text:span>) favorisent
une écriture concise et élégante.</text:p>
<text:p text:style-name="Remarque">http/request-advanced.js</text:p><text:p text:style-name="RemarqueCode">const https = require('https');</text:p><text:p text:style-name="RemarqueCode">const {parse} = require('url');</text:p><text:p text:style-name="RemarqueCode">const url = parse('https://oncletom.io/node.js/package.json');</text:p><text:p text:style-name="RemarqueCode"></text:p><text:p text:style-name="RemarqueCode">const request = https.request({ ...url, method: 'HEAD'});</text:p>
<text:p text:style-name="TexteCourant">L&#8217;utilisation de <text:span text:style-name="CodeDansTexte">http.get</text:span> et <text:span text:style-name="CodeDansTexte">http.request</text:span> est simple tant qu&#8217;on évite
la personnalisation de la requête.
On ajoute progressivement de plus en plus de travail pour bien envoyer une
requête, collecter les données et gérer les erreurs.</text:p>
<text:p text:style-name="TexteCourant">Nous verrons comment arriver au même résultat en écrivant moins de code grâce aux
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-modules"  text:visited-style-name="Visited_20_Internet_20_Link">modules npm</text:a>
(<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-05"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 5</text:a>).</text:p>
<text:bookmark text:name="ref-http.ClientRequest" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">request.on('response')</text:span></text:span><text:line-break/><text:tab/>Déclenché lorsque la ressource distante a accepté la requête et s&#8217;apprête
à nous transmettre les données.</text:p><text:bookmark text:name="ref-http.ClientRequest" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">request.on('end')</text:span></text:span><text:line-break/><text:tab/>Délenché lorsque la ressource distante a signalé ne plus avoir de données
à nous transmettre.</text:p><text:bookmark text:name="ref-http.ClientRequest" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">request.end()</text:span></text:span><text:line-break/><text:tab/>Termine l&#8217;initialisation et entame la connexion vers la ressource distante.<text:line-break/>
Dans le cas d&#8217;une requête <text:span text:style-name="CodeDansTexte">POST</text:span>, <text:span text:style-name="CodeDansTexte">PUT</text:span> ou <text:span text:style-name="CodeDansTexte">DELETE</text:span>, le premier paramètre
sert à passer une donnée au serveur distant.</text:p><text:bookmark text:name="ref-http.ClientRequest" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">request.getHeader()</text:span></text:span><text:line-break/><text:tab/>Retourne la valeur d&#8217;une entête de requête.</text:p><text:bookmark text:name="ref-http.ClientRequest" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">request.setHeader()</text:span></text:span><text:line-break/><text:tab/>Change la valeur d&#8217;une entête de requête.
C&#8217;est une pratique courante pour préciser nos intentions auprès du serveur
distant&#160;: format de fichier à réponse attendu (<text:span text:style-name="CodeDansTexte">Accept</text:span>), agent utilisateur
(<text:span text:style-name="CodeDansTexte">User-Agent</text:span>), nature des données envoyées (<text:span text:style-name="CodeDansTexte">Content-Type</text:span>), etc.</text:p><text:bookmark text:name="ref-http.ClientRequest" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">request.setTimeout()</text:span></text:span><text:line-break/><text:tab/>Définit un chronomètre pour déclarer la requête en erreur si aucune réponse
n&#8217;a été obtenue dans ce délai imparti.</text:p><text:bookmark text:name="ref-http.ClientRequest" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">request.write()</text:span></text:span><text:line-break/><text:tab/>Transmets un morceau de contenu vers la ressource distante.
Cette méthode s&#8217;utilise lorsque l&#8217;on effectue un téléversement progressif.</text:p>
<text:bookmark text:name="ref-http.IncomingMessage" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">message.on('data')</text:span></text:span><text:line-break/><text:tab/>Déclenché quand un morceau de données est obtenu par le client.</text:p><text:bookmark text:name="ref-http.IncomingMessage" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">message.on('end')</text:span></text:span><text:line-break/><text:tab/>Déclenché quand nous avons obtenu toutes les données émises par le serveur.</text:p><text:bookmark text:name="ref-http.IncomingMessage" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">message.on('readable')</text:span></text:span><text:line-break/><text:tab/>Déclenché quand nous pouvons commencer à lire les données.</text:p><text:bookmark text:name="ref-http.IncomingMessage" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">message.read()</text:span></text:span><text:line-break/><text:tab/>Obtient un morceau de données manuellement&#160;— au lieu d&#8217;utiliser
l&#8217;événement <text:span text:style-name="CodeDansTexte">data</text:span>, automatique.
On apprendra mieux comment manipuler cette fonction dans la section
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-stream"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">streams</text:span></text:a>.</text:p><text:bookmark text:name="ref-http.IncomingMessage" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">message.destroy()</text:span></text:span><text:line-break/><text:tab/>Termine la transmission des données sans que le serveur distant
nous aie tout transmis.</text:p><text:bookmark text:name="ref-http.IncomingMessage" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>attribut <text:span text:style-name="CodeDansTexte">message.headers</text:span></text:span><text:line-break/><text:tab/>Objet contenant les entêtes de la réponse&#160;— c&#8217;est le serveur distant qui décide
de leur contenu.</text:p><text:bookmark text:name="ref-http.IncomingMessage" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>attribut <text:span text:style-name="CodeDansTexte">message.statusCode</text:span></text:span><text:line-break/><text:tab/>Code qui reflète l&#8217;état de compréhension de notre requête par le serveur distant.
<text:span text:style-name="CodeDansTexte">200</text:span> correspond à <text:span text:style-name="T4">tout va bien</text:span>, <text:span text:style-name="CodeDansTexte">404</text:span> à <text:span text:style-name="T4">ressource introuvable</text:span>,
<text:span text:style-name="CodeDansTexte">301</text:span> à <text:span text:style-name="T4">la ressource a été déplacée</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Il est temps de nous pencher sur l&#8217;autre versant du module&#160;: la création
d&#8217;un serveur HTTP.</text:p>
<text:p text:style-name="CodeTitre">http/server.js</text:p><text:p text:style-name="Code">const http = require('http');</text:p><text:p text:style-name="Code">const server = http.createServer();</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">server.listen(4000, 'localhost');<text:s text:c="19"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">server.on('listening', () =&gt; {<text:s text:c="22"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log('Serveur démarré !');</text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">server.on('request', (request, response) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const {method, url} = request;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log('URL demandée : %s %s', method, url); <text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>response.end('Coucou');<text:s text:c="27"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Ouverture de l&#8217;acceptation des connexions réseaux sur le port <text:span text:style-name="CodeDansTexte">8000</text:span>, uniquement sur la boucle locale (<text:span text:style-name="CodeDansTexte">localhost</text:span>)&#160;— une erreur sera affichée si ce port réseau est déjà pris par un autre processus.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">Serveur démarré&#160;!</text:span> quand Node a fini de négocier l&#8217;accès aux ressources réseau avec le système d&#8217;exploitation&#160;— à ce stade, le serveur est prêt à recevoir des <text:span text:style-name="T4">connexions entrantes</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Lorsqu&#8217;une requête arrive, affiche l&#8217;URL demandée par le client.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Termine la connexion avec le client&#160;— ce dernier considère sa <text:span text:style-name="T4">requête</text:span> comme terminée.<text:line-break/></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Apparté</text:span> Pourquoi démarrer un serveur HTTP ?</text:h><text:p text:style-name="Remarque">Ce concept peut sembler étrange lorsqu&#8217;on vient d&#8217;un autre langage de programmation.
Après tout, Apache ou nginx s&#8217;en chargent très bien pour nous.</text:p>
<text:p text:style-name="Remarque">Un serveur HTTP embarqué avec Node, c&#8217;est avant tout
<text:span text:style-name="T7">une question d&#8217;autonomie et d&#8217;interopérabilité</text:span>.
Pas besoin de module spécial pour Apache.
Pas besoin de module spécial pour nginx.</text:p>
<text:p text:style-name="Remarque">On peut développer un site web et le faire fonctionner instantément sans
installer autre chose.
L&#8217;intégration avec un serveur Apache, nginx ou autre nécessite ensuite
très peu d&#8217;efforts.</text:p>
<text:p text:style-name="TexteCourant">Le serveur se démarre de la même manière qu&#8217;un script ordinaire&#160;:</text:p>
<text:p text:style-name="Code">$ node http/server.js</text:p><text:p text:style-name="Code">Serveur démarré !</text:p>
<text:p text:style-name="TexteCourant">Le serveur continuera d&#8217;accepter les requêtes entrantes jusqu&#8217;à ce que le
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process"  text:visited-style-name="Visited_20_Internet_20_Link">processus</text:a> soit interrompu par une erreur ou par un
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-signals"  text:visited-style-name="Visited_20_Internet_20_Link">signal d&#8217;arrêt</text:a>
—&#160;en utilisant la combinaison de touches <text:span text:style-name="Menu">[Ctrl+C]</text:span> par exemple.</text:p>
<text:p text:style-name="TexteCourant">Accédez au serveur HTTP en ouvrant un navigateur web comme Firefox ou Chrome
puis en inscrivant <text:span text:style-name="CodeDansTexte"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://localhost:4000" text:visited-style-name="Visited_20_Internet_20_Link">http://localhost:4000</text:a></text:span> dans la barre d&#8217;adresses.
Dirigez ensuite le navigateur vers <text:span text:style-name="CodeDansTexte"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://localhost:4000/test" text:visited-style-name="Visited_20_Internet_20_Link">http://localhost:4000/test</text:a></text:span> et observez les
changements.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Parler au serveur depuis le terminal</text:h><text:p text:style-name="Remarque">La commande Unix <text:span text:style-name="CodeDansTexte">curl</text:span> sait envoyer des requêtes HTTP.
On peut l&#8217;utiliser pour <text:span text:style-name="T4">lire</text:span> les réponses de notre serveur&#160;:</text:p>
<text:p text:style-name="RemarqueCode">$ curl -i http://localhost:4000/test</text:p><text:p text:style-name="RemarqueCode">$ curl -i -XHEAD http://localhost:4000/test</text:p>
<text:p text:style-name="Remarque">L&#8217;option <text:span text:style-name="CodeDansTexte">-i</text:span> affiche les entêtes de réponse.
C&#8217;est l&#8217;équivalent de <text:span text:style-name="CodeDansTexte">response.headers</text:span>.</text:p>
<text:p text:style-name="TexteCourant">On a posé les bases d&#8217;un serveur HTTP minimaliste sur lequel on va
pouvoir construire pas à pas tout type d&#8217;applications web.
Et qu&#8217;est-ce qu&#8217;il manque pour en faire un serveur web&#160;?
De pouvoir <text:span text:style-name="T4">typer</text:span> les ressources renvoyées afin qu&#8217;elles soient comprises
par un navigateur web.
c&#8217;est-à-dire de pouvoir signaler que nos réponses contiennent du HTML, du CSS,
des images etc.</text:p>
<text:p text:style-name="TexteCourant">Modifions notre exemple précédent pour renvoyer du HTML&#160;:</text:p>
<text:p text:style-name="CodeTitre">http/web-server.js</text:p><text:p text:style-name="Code">const http = require('http');</text:p><text:p text:style-name="Code">const server = http.createServer();</text:p><text:p text:style-name="Code">server.listen(4000, 'localhost');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">server.on('request', (request, response) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>response.write('&lt;h1&gt;Salut à toi&lt;/h1&gt;');</text:p><text:p text:style-name="Code"><text:s text:c="2"/>response.end();</text:p><text:p text:style-name="Code">});</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Important</text:span> La fonction <text:span text:style-name="CodeDansTexte">response.end()</text:span></text:h><text:p text:style-name="Remarque">L&#8217;appel de la fonction <text:span text:style-name="CodeDansTexte">response.end()</text:span> est impératif.
Sans ça, le client&#160;— ici, le navigateur web&#160;— pense que des données peuvent
encore arriver.</text:p>
<text:p text:style-name="Remarque">Si on supprime l&#8217;appel à <text:span text:style-name="CodeDansTexte">response.end()</text:span> dans l&#8217;exemple précédent,
l&#8217;indicateur de chargement du navigateur sera actif pendant 2 minutes,
suite à quoi Node interrompra la connexion, considérant qu&#8217;elle met trop
de temps pour aboutir.</text:p>
<text:p text:style-name="TexteCourant">Dirigeons notre navigateur web vers <text:span text:style-name="CodeDansTexte"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://localhost:4000" text:visited-style-name="Visited_20_Internet_20_Link">http://localhost:4000</text:a></text:span> pour observer
le résultat.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-04/images/web-server.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 22. Rendu navigateur de l&#8217;exemple <text:span text:style-name="CodeDansTexte">http/web-server.js</text:span>.</text:p>
<text:p text:style-name="TexteCourant">La balise HTML <text:span text:style-name="CodeDansTexte">&lt;h1&gt;</text:span> a bien été prise en compte mais qu&#8217;en est-il du
caractère <text:span text:style-name="CodeDansTexte">Ã&#160;</text:span>&#160;?
Il semblerait que le caractère accentué n&#8217;aie pas été compris par le navigateur.</text:p>
<text:p text:style-name="TexteCourant">Si le serveur distant ne précise pas l'<text:span text:style-name="T4">encodage des caractères</text:span>,
le navigateur va l&#8217;interpréter en <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-ascii"  text:visited-style-name="Visited_20_Internet_20_Link">ASCII</text:a>.
Or les éditeurs de code enregistrent les fichiers avec un autre encodage&#160;: <text:span text:style-name="T4">UTF-8</text:span>.
Ce standard englobe les alphabets du monde entier, dont les accents et
caractères diacritique de la langue française.</text:p>
<text:bookmark text:name="ref-ascii" /><text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Histoire</text:span> American Standard Code for Information Interchange (<text:span text:style-name="T4">ASCII</text:span>)</text:h><text:p text:style-name="Remarque">L&#8217;informatique contemporaine a débuté aux États-Unis.
Les systèmes ont été conçus à cette époque pour comprendre l&#8217;alphabet anglais,
les signes de ponctuations et des caractères spéciaux.
On parle alors de standard d&#8217;encodage ASCII.</text:p>
<text:p text:style-name="Remarque">L&#8217;émergence d&#8217;Internet et du World Wide Web ont popularisé l&#8217;encodage UTF-8
afin d&#8217;exprimer de manière commune les caractères spéciaux de toutes les
langues du monde entier.</text:p>
<text:p text:style-name="TexteCourant">Ce qui nous intéresse, c&#8217;est de pouvoir indiquer aux navigateurs web
quel est l&#8217;encodage utilisé pour qu&#8217;il soit respecté à l&#8217;affichage.<text:line-break/>Le protocole HTTP dispose justement de l&#8217;entête <text:span text:style-name="CodeDansTexte">Content-Type</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">http/web-server-ok.js</text:p><text:p text:style-name="Code">const http = require('http');</text:p><text:p text:style-name="Code">const server = http.createServer();</text:p><text:p text:style-name="Code">server.listen(4000, 'localhost');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">server.on('request', (request, response) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const content_type = 'text/html; charset=utf-8';</text:p><text:p text:style-name="Code"><text:s text:c="2"/>response.setHeader('Content-Type', content_type); <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>response.write('&lt;h1&gt;Salut à toi&lt;/h1&gt;');</text:p><text:p text:style-name="Code"><text:s text:c="2"/>response.end();</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> L&#8217;entête HTTP <text:span text:style-name="CodeDansTexte">Content-Type</text:span> indique explicitement que le contenu transféré est du HTML, encodé en UTF-8.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Cette indication suffit au navigateur pour décoder les caractères
et les afficher comme on l&#8217;espérait.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-04/images/web-server-ok.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 23. Rendu navigateur de l&#8217;exemple <text:span text:style-name="CodeDansTexte">http/web-server-ok.js</text:span>.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;étape suivante consisterait à transmettre deux contenus différents selon
l&#8217;URL demandée.
Par exemple, une page HTML et un fichier CSS habillant la page HTML.</text:p>
<text:p text:style-name="CodeTitre">http/web-server-routes.js</text:p><text:p text:style-name="Code">const http = require('http');</text:p><text:p text:style-name="Code">const server = http.createServer();</text:p><text:p text:style-name="Code">server.listen(4000, 'localhost');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">server.on('request', (request, response) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>if (request.url === '/main.css') {<text:s text:c="21"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>response.setHeader('Content-Type', 'text/css');<text:s text:c="6"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>response.write('body{ font-size: 18px; color: blue; }');</text:p><text:p text:style-name="Code"><text:s text:c="4"/>response.end();</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code"><text:s text:c="2"/>else {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>const content_type = 'text/html; charset=utf-8';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="4"/>response.setHeader('Content-Type', content_type);</text:p><text:p text:style-name="Code"><text:s text:c="4"/>response.write('&lt;link rel="stylesheet" href="/main.css"&gt;');</text:p><text:p text:style-name="Code"><text:s text:c="4"/>response.end('&lt;h1&gt;Salut à toi&lt;/h1&gt;');</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Si la requête entrante indique <text:span text:style-name="CodeDansTexte">/main.css</text:span> comme chemin, alors on lui renvoie du contenu interprétable comme du CSS.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> On indique au client que ce contenu est du texte contenant une feuille de style CSS.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Si tout se passe bien, le chargement de la page HTML devrait déclencher
une requête vers <text:span text:style-name="CodeDansTexte"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://localhost:4000/main.css" text:visited-style-name="Visited_20_Internet_20_Link">http://localhost:4000/main.css</text:a></text:span>.
La confirmation est visuelle en visitant notre serveur avec un navigateur web&#160;:</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-04/images/web-server-routes.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 24. Rendu navigateur de l&#8217;exemple <text:span text:style-name="CodeDansTexte">http/web-server-routes.js</text:span>.</text:p>
<text:p text:style-name="TexteCourant">On est en situation de contrôle&#160;: on décide de ce qu&#8217;on répond.
C&#8217;est une manière d&#8217;apprendre petit à petit comment fonctionne
le protocole HTTP sur lequel repose une majorité de notre activité sur Internet.</text:p>
<text:p text:style-name="TexteCourant">On a couvert les principes du module <text:span text:style-name="CodeDansTexte">http</text:span> mais il reste beaucoup de choses
à apprendre pour développer une application web maintenable.
C&#8217;est justement le sujet du <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-../chapter-07/index.adoc"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 7</text:a>,
aidé par les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-modules"  text:visited-style-name="Visited_20_Internet_20_Link">modules npm</text:a> que l&#8217;on apprendra
à manipuler dans le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-05"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 5</text:a>.</text:p>
<text:bookmark text:name="ref-http.Server" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">server.close()</text:span></text:span><text:line-break/><text:tab/>Arrête l&#8217;écoute de nouvelles connexions.
Les connexions existantes sont maintenues jusqu&#8217;à ce qu&#8217;elles soient honorées.</text:p><text:bookmark text:name="ref-http.Server" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">server.listen()</text:span></text:span><text:line-break/><text:tab/>Démarre l&#8217;acceptation des connexions sur un port et une adresse donnée.
Combinée avec <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-os"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="CodeDansTexte">os.networkInterfaces()</text:span></text:a>, vous pourriez choisir
sur quelle carte/adresse réseau écouter les requêtes entrantes.</text:p><text:bookmark text:name="ref-http.Server" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">server.on('close')</text:span></text:span><text:line-break/><text:tab/>Déclenché lorsque le serveur s&#8217;arrête et a terminé d&#8217;honorer toutes les
connexions déjà ouvertes.</text:p><text:bookmark text:name="ref-http.Server" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">server.on('connection')</text:span></text:span><text:line-break/><text:tab/>Déclenché lorsqu&#8217;une nouvelle connexion réseau est établie.</text:p><text:bookmark text:name="ref-http.Server" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">server.on('request')</text:span></text:span><text:line-break/><text:tab/>Déclenché lorsqu&#8217;une nouvelle requête entrante est adressée au serveur.</text:p><text:bookmark text:name="ref-http.Server" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">server.on('upgrade')</text:span></text:span><text:line-break/><text:tab/>Déclenché lorsqu&#8217;une requête entrante demande un changement de protocole.
Utilisé pour basculer vers HTTP/2 et
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-io-websocket"  text:visited-style-name="Visited_20_Internet_20_Link">WebSocket</text:a>.</text:p>
<text:bookmark text:name="ref-http.ServerResponse" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">response.on('close')</text:span></text:span><text:line-break/><text:tab/>Déclenché lorsque la requête a été terminée par le client,
avant qu&#8217;on ait pu transmettre l&#8217;intégralité des données.</text:p><text:bookmark text:name="ref-http.ServerResponse" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">response.on('finish')</text:span></text:span><text:line-break/><text:tab/>Déclenché lorsqu&#8217;on a envoyé le dernier morceau de données au client
ayant initié la requête.</text:p><text:bookmark text:name="ref-http.ServerResponse" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">response.end()</text:span></text:span><text:line-break/><text:tab/>Signale au client que nous n&#8217;avons plus de données à transmettre.</text:p><text:bookmark text:name="ref-http.ServerResponse" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">response.getHeader()</text:span></text:span><text:line-break/><text:tab/>Retourne la valeur d&#8217;une entête de la réponse.</text:p><text:bookmark text:name="ref-http.ServerResponse" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">response.removeHeader()</text:span></text:span><text:line-break/><text:tab/>Supprime une entête de la réponse.</text:p><text:bookmark text:name="ref-http.ServerResponse" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">response.setHeader()</text:span></text:span><text:line-break/><text:tab/>Assigne une valeur à une entête de la réponse.</text:p><text:bookmark text:name="ref-http.ServerResponse" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">response.write()</text:span></text:span><text:line-break/><text:tab/>Transmet un morceau de données au client.</text:p><text:bookmark text:name="ref-http.ServerResponse" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">response.writeHead()</text:span></text:span><text:line-break/><text:tab/>Transmet le code de réponse et un ensemble d&#8217;entêtes au client.</text:p><text:bookmark text:name="ref-http.ServerResponse" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>attribut <text:span text:style-name="CodeDansTexte">response.statusCode</text:span></text:span><text:line-break/><text:tab/>Contient le code de réponse qui sera transmis au client.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> <text:span text:style-name="CodeDansTexte">http</text:span></text:h><text:p text:style-name="Remarque">La documentation du module <text:span text:style-name="CodeDansTexte">http</text:span> est disponible sur le site officiel de Node&#160;:
<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://nodejs.org/docs/latest-v10.x/api/http.html" text:visited-style-name="Visited_20_Internet_20_Link">https://nodejs.org/docs/latest-v10.x/api/http.html</text:a></text:span></text:p>
<text:bookmark text:name="ref-os" /><text:h text:style-name="TitreNiveau2" text:outline-level="3"><text:span text:style-name="">os</text:span> : en savoir plus sur les capacités de l&#8217;ordinateur</text:h><text:p text:style-name="TexteCourant">Le module <text:span text:style-name="CodeDansTexte">os</text:span> permet d&#8217;en savoir plus sur l&#8217;environnement système dans lequel
le script est exécuté.
Ça permet par exemple de <text:span text:style-name="T7">prendre des décisions par rapport aux ressources disponibles</text:span>
(mémoire, CPU, réseau, etc.).
Idem par rapport au type de système d&#8217;exploitation (Windows, Linux, etc.).</text:p>
<text:p text:style-name="CodeTitre">os/intro.js</text:p><text:p text:style-name="Code">const os = require('os');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {username} = os.userInfo();</text:p><text:p text:style-name="Code">const cpus = os.cpus().length;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(</text:p><text:p text:style-name="Code"><text:s text:c="2"/>`Salut ${username}, cet ordinateur a ${cpus} CPU.` <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">);</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche un message du genre <text:span text:style-name="CodeDansTexte">Salut anonymous, cet ordinateur a 4 CPU.</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Node a pour vocation de nous abstraire du système d&#8217;exploitation
en faisant en sorte que notre code fonctionne partout pareil.
Pourtant des situations nous obligent à prendre en compte certains critères
pour déterminer un choix.</text:p>
<text:p text:style-name="TexteCourant">Par exemple, lister les applications installées sur l&#8217;ordinateur.
Leur emplacement d&#8217;installation est différent sous Linux, Windows et macOS.</text:p>
<text:p text:style-name="CodeTitre">os/apps.js</text:p><text:p text:style-name="Code">const {type} = require('os');</text:p><text:p text:style-name="Code">const {readdir} = require('fs');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const log = (error, modules) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>return error</text:p><text:p text:style-name="Code"><text:s text:c="4"/>? console.error(error.message)</text:p><text:p text:style-name="Code"><text:s text:c="4"/>: console.log(modules);</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">switch (type()) {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>case 'Windows_NT': readdir('C:\\Program Files', log); break;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>case 'Linux':<text:s text:c="6"/>readdir('/usr/bin', log);<text:s text:c="10"/>break;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>case 'Darwin':<text:s text:c="5"/>readdir('/Applications', log);<text:s text:c="5"/>break;</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple précédent se base sur la valeur retournée par la fonction <text:span text:style-name="CodeDansTexte">os.type()</text:span>
afin de choisir quel est le bon répertoire à lister.</text:p>
<text:p text:style-name="TexteCourant">On pourrait combiner ce mécanisme avec le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-child_process"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">child_process</text:span></text:a>,
pour appeler une application système différent pour parvenir
à un résultat similaire.</text:p>
<text:p text:style-name="TexteCourant">À l&#8217;inverse, on peut <text:span text:style-name="T7">accéder à une ressource de manière uniforme</text:span>, peu importe
le nom du compte utilisateur ou du type de système d&#8217;exploitation.
Nous allons maintenant lire le contenu du fichier <text:span text:style-name="CodeDansTexte">.npmrc</text:span>,
le fichier de configuration de
l'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-cli"  text:visited-style-name="Visited_20_Internet_20_Link">exécutable npm</text:a>&#160;:</text:p>
<text:p text:style-name="CodeTitre">os/npmrc.js</text:p><text:p text:style-name="Code">const {homedir} = require('os');</text:p><text:p text:style-name="Code">const {readFile} = require('fs');</text:p><text:p text:style-name="Code">const {join} = require('path');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const file = join(homedir(), '.npmrc');<text:s text:c="5"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">readFile(file, (error, content='') =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>if (error &amp;&amp; error.code !== 'ENOENT') {<text:s text:c="3"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>return console.log(error);</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(String(content));</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Construit un chemin agnostique du système d&#8217;exploitation. Par exemple <text:span text:style-name="CodeDansTexte">C:\Users\anonymous\.npmrc</text:span> pour Windows, <text:span text:style-name="CodeDansTexte">/Users/anonymous/.npmrc</text:span> pour macOS et <text:span text:style-name="CodeDansTexte">/home/anonymous/.npmrc</text:span> pour Linux.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> <text:span text:style-name="CodeDansTexte">ENOENT</text:span> est un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-fs.errors"  text:visited-style-name="Visited_20_Internet_20_Link">code d&#8217;erreur</text:a> indiquant que le fichier n&#8217;existe pas&#160;; on se permet de l&#8217;ignorer et de considérer que le fichier est vide.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">os.arch()</text:span></text:span><text:line-break/><text:tab/>Retourne l&#8217;architecture du CPU.
Les valeurs les plus courantes sont généralement <text:span text:style-name="CodeDansTexte">x64</text:span>, <text:span text:style-name="CodeDansTexte">arm</text:span> et <text:span text:style-name="CodeDansTexte">arm64</text:span>.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">os.cpus()</text:span></text:span><text:line-break/><text:tab/>Retourne un tableau contenant des informations à propos du ou des CPU.<text:line-break/>
Parmi ces informations, on retrouve leur modèle, leur fréquence et
le temps passé en attente ou en action depuis le démarrage de l&#8217;ordinateur.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">os.homedir()</text:span></text:span><text:line-break/><text:tab/>Retourne le chemin vers le répertoire utilisateur.<text:line-break/>
Équivalent à la variable <text:span text:style-name="CodeDansTexte">$HOME</text:span> sous Unix et <text:span text:style-name="CodeDansTexte">%USERPROFILE%</text:span> ou <text:span text:style-name="CodeDansTexte">%AppData%</text:span>
sous Windows.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">os.hostname()</text:span></text:span><text:line-break/><text:tab/>Retourne l&#8217;identifiant réseau de la machine.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">os.networkInterfaces()</text:span></text:span><text:line-break/><text:tab/>Retourne un tableau contenant des informations à propos de la ou des
cartes réseaux de l&#8217;ordinateur.<text:line-break/>
Parmi ces informations, on retrouve l&#8217;adresse IP (IPv4, IPv6), l&#8217;adresse MAC
et le masque réseau.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">os.platform()</text:span></text:span><text:line-break/><text:tab/>Retourne la nature du système d&#8217;exploitation.<text:line-break/>
Les valeurs les plus courantes sont généralement <text:span text:style-name="CodeDansTexte">win32</text:span>, <text:span text:style-name="CodeDansTexte">linux</text:span>, <text:span text:style-name="CodeDansTexte">darwin</text:span>
et <text:span text:style-name="CodeDansTexte">freebsd</text:span>.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">os.tmpdir()</text:span></text:span><text:line-break/><text:tab/>Retourne l&#8217;emplacement du <text:span text:style-name="T4">répertoire temporaire</text:span> fourni par
le système d&#8217;exploitation.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">os.type()</text:span></text:span><text:line-break/><text:tab/>Retourne une forme normalisée de nature de système d&#8217;exploitation.
La valeur est équivalente à ce que retournerait la commande Unix <text:span text:style-name="CodeDansTexte">uname -s</text:span>.<text:line-break/>
Les valeurs les plus courantes sont généralement
<text:span text:style-name="CodeDansTexte">Windows_NT</text:span>, <text:span text:style-name="CodeDansTexte">Linux</text:span>, <text:span text:style-name="CodeDansTexte">Darwin</text:span> et <text:span text:style-name="CodeDansTexte">FreeBSD</text:span>.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>attribut <text:span text:style-name="CodeDansTexte">os.constants</text:span></text:span><text:line-break/><text:tab/>Objet contenant la liste des <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-signals"  text:visited-style-name="Visited_20_Internet_20_Link">signaux système</text:a> et des codes d&#8217;erreur.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>attribut <text:span text:style-name="CodeDansTexte">os.EOL</text:span></text:span><text:line-break/><text:tab/>Caractère utilisé pour marquer les fins de ligne.<text:line-break/>
En général le caractère <text:span text:style-name="CodeDansTexte">\n</text:span> sous Unix et <text:span text:style-name="CodeDansTexte">\r\n</text:span> sous Windows.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> <text:span text:style-name="CodeDansTexte">os</text:span></text:h><text:p text:style-name="Remarque">La documentation du module <text:span text:style-name="CodeDansTexte">os</text:span> est disponible sur le site officiel de Node&#160;:
<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://nodejs.org/docs/latest-v10.x/api/os.html" text:visited-style-name="Visited_20_Internet_20_Link">https://nodejs.org/docs/latest-v10.x/api/os.html</text:a></text:span></text:p>
<text:bookmark text:name="ref-child_process" /><text:h text:style-name="TitreNiveau2" text:outline-level="3"><text:span text:style-name="">child_process</text:span> : appeler un exécutable système</text:h><text:p text:style-name="TexteCourant">Le module <text:span text:style-name="CodeDansTexte">child_process</text:span> <text:span text:style-name="T7">exécute des programmes externes</text:span>,
leur transmet des données et consulte leurs résultats via
les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.std"  text:visited-style-name="Visited_20_Internet_20_Link">flux standards</text:a>.</text:p>
<text:p text:style-name="CodeTitre">child_process/intro.js</text:p><text:p text:style-name="Code">const {exec} = require('child_process');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">exec('npm --version', (error, stdout, stderr) =&gt; {<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(`npm version ${stdout.trim()}`);<text:s text:c="6"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> L&#8217;exécution de la commande exécute la fonction de callback, avec comme arguments la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.std"  text:visited-style-name="Visited_20_Internet_20_Link">sortie standard</text:a> et la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.std"  text:visited-style-name="Visited_20_Internet_20_Link">sortie erreur</text:a> du processus enfant.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">npm version 6.1.0</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">L&#8217;utilisation du module <text:span text:style-name="CodeDansTexte">child_process</text:span> se justifie quand un programme
externe fournit une fonctionnalité <text:span text:style-name="T4">mais</text:span> ne s&#8217;interface pas avec Node.
Ou encore quand on veut sortir l&#8217;exécution d&#8217;un script Node du processus courant
pour tirer parti des autres CPU de l&#8217;ordinateur sans ralentir l&#8217;application principale.</text:p>
<text:p text:style-name="TexteCourant">La fonction <text:span text:style-name="CodeDansTexte">child_process.exec</text:span> accepte un deuxième argument optionnel.<text:line-break/><text:span text:style-name="CodeDansTexte">cwd</text:span> (<text:span text:style-name="T4">current working directory</text:span>) est une des options utiles de cet argument.</text:p>
<text:p text:style-name="CodeTitre">child_process/ls.js</text:p><text:p text:style-name="Code">const {exec} = require('child_process');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">exec('ls .', {cwd: null}, (error, stdout, stderr) =&gt; {<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(stdout);</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> On lance la commande système <text:span text:style-name="CodeDansTexte">ls</text:span> sans spécifier le répertoire de travail.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Exécutons le script pour observer le résultat&#160;:</text:p>
<text:p text:style-name="Code">$ node child_process/ls.js</text:p>
<text:p text:style-name="TexteCourant">Le constat est similaire à celui produit avec le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-fs"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">fs</text:span></text:a>&#160;:
les fichiers listés sont ceux du <text:span text:style-name="T4">répertoire courant</text:span>,
notre emplacement dans le terminal.</text:p>
<text:p text:style-name="TexteCourant">Modifions maintenant la valeur de l&#8217;option <text:span text:style-name="CodeDansTexte">cwd</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">child_process/ls-root.js</text:p><text:p text:style-name="Code">const {exec} = require('child_process');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">exec('ls .', {cwd: '/'}, (error, stdout, stderr) =&gt; { <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(stdout);</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> La valeur de <text:span text:style-name="CodeDansTexte">cwd</text:span> est réglée sur <text:span text:style-name="CodeDansTexte">/</text:span>, c&#8217;est-à-dire le répertoire racine du système de fichiers.<text:line-break/></text:p>
<text:p text:style-name="Code">$ node child_process/ls-root.js</text:p>
<text:p text:style-name="TexteCourant">La liste des fichiers et répertoires affichée est désormais différente,
même si la commande passée à <text:span text:style-name="CodeDansTexte">child_process.exec</text:span> est la même.
<text:span text:style-name="CodeDansTexte">cwd</text:span> a changé le <text:span text:style-name="T4">répertoire courant</text:span> l&#8217;espace d&#8217;une commande.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Performance</text:span> commande <text:span text:style-name="CodeDansTexte">ls</text:span> vs. <text:span text:style-name="CodeDansTexte">fs.readdir</text:span></text:h><text:p text:style-name="Remarque">Si on arrive au même résultat en utilisant <text:span text:style-name="CodeDansTexte">exec('ls')</text:span>, pourquoi utiliser
la fonction <text:span text:style-name="CodeDansTexte">fs.readdir</text:span> du <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-fs"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">fs</text:span></text:a>&#160;?
<text:span text:style-name="CodeDansTexte">fs.readdir</text:span> a au moins 3 avantages&#160;:</text:p>
<text:p text:style-name="RemarqueNumero">1.<text:tab/>elle est <text:span text:style-name="T7">plus rapide</text:span>&#160;— à écrire, à exécuter, à diagnostiquer</text:p><text:p text:style-name="RemarqueNumero">2.<text:tab/>on <text:span text:style-name="T7">économise</text:span> la création d&#8217;un processus système</text:p><text:p text:style-name="RemarqueNumero">3.<text:tab/><text:span text:style-name="T7">compatibilité</text:span> avec <text:span text:style-name="T4">tous</text:span> les systèmes d&#8217;exploitation</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="CodeDansTexte">env</text:span> est une deuxième option à passer à <text:span text:style-name="CodeDansTexte">child_process.exec</text:span>.
Elle redéfinit les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.env"  text:visited-style-name="Visited_20_Internet_20_Link">variables d&#8217;environnement</text:a> utilisables
par le processus enfant&#160;:</text:p>
<text:p text:style-name="CodeTitre">child_process/ping.js</text:p><text:p text:style-name="Code">const {exec} = require('child_process');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const env = {PING_COUNT: 1, ...process.env};<text:s text:c="4"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">const cmd = 'ping -c $PING_COUNT oncletom.io';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">exec(cmd, {env}, (error, stdout) =&gt; {<text:s text:c="11"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>return error</text:p><text:p text:style-name="Code"><text:s text:c="4"/>? console.error(error)</text:p><text:p text:style-name="Code"><text:s text:c="4"/>: console.log(stdout);</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> On transmet les variables d&#8217;environnement existantes au processus enfant.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Utilisation de la variable d&#8217;environnement <text:span text:style-name="CodeDansTexte">PING_COUNT</text:span> comme valeur d&#8217;option du programme <text:span text:style-name="CodeDansTexte">ping</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Si on ne transmettait pas les valeurs de <text:span text:style-name="CodeDansTexte">process.env</text:span> au processus enfant,
la variable d&#8217;environnement <text:span text:style-name="CodeDansTexte">PATH</text:span> ne serait pas définie.
Le processus enfant ne saurait plus où chercher l&#8217;exécutable <text:span text:style-name="CodeDansTexte">ping</text:span>.<text:line-break/>On aurait pu appeler le programme <text:span text:style-name="CodeDansTexte">ping</text:span> en utilisant un chemin absolu comme
<text:span text:style-name="CodeDansTexte">/sbin/ping</text:span> mais son emplacement varie selon les systèmes d&#8217;exploitation.</text:p>
<text:p text:style-name="Code">$ node child_process/ping.js</text:p><text:p text:style-name="Code">PING oncletom.io (185.31.40.11): 56 data bytes</text:p><text:p text:style-name="Code">64 bytes from 185.31.40.11: icmp_seq=0 ttl=56 time=23.763 ms</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">--- oncletom.io ping statistics ---</text:p><text:p text:style-name="Code">1 packets transmitted, 1 packets received, 0.0% packet loss</text:p><text:p text:style-name="Code">round-trip min/avg/max/stddev = 23.763/23.763/23.763/0.000 ms</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Compatibilité</text:span> Mon programme ne fonctionne pas sous Windows/Linux/macOS</text:h><text:p text:style-name="Remarque">Le programme externe peut ne pas exister sur tous les systèmes d&#8217;exploitation,
voire il ne s&#8217;appelle pas avec les mêmes arguments, ni avec le même nom.</text:p>
<text:p text:style-name="Remarque">Une des solutions pourrait consister à se reposer sur le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-os"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">os</text:span></text:a>
et adapter la commande en fonction du système d&#8217;exploitation.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="CodeDansTexte">child_process.spawn</text:span> est une <text:span text:style-name="T4">autre approche</text:span> de démarrage
et de communication avec un processus externe.</text:p>
<text:p text:style-name="CodeTitre">child_process/spawn.js</text:p><text:p text:style-name="Code">const {spawn} = require('child_process');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const subprocess = spawn('cat', ['package.json']);<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">subprocess.stdout.on('data', (data) =&gt; {<text:s text:c="12"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(String(data));<text:s text:c="24"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> <text:span text:style-name="CodeDansTexte">cat</text:span> est un programme qui affiche le contenu d&#8217;un fichier&#160;— un peu comme <text:span text:style-name="CodeDansTexte">fs.readFile</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Les données retournées par la commande externe se lisent depuis les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.std"  text:visited-style-name="Visited_20_Internet_20_Link">flux de sorties</text:a>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche le contenu du fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Les arguments et options à transmettre au programme sont passées dans un tableau.
Dans le programme externe, on y accède avec <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.argv"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="CodeDansTexte">process.argv</text:span></text:a>.</text:p>
<text:p text:style-name="TexteCourant">Pour transmettre un volume de données plus important en paramètre,
il vaut mieux faire appel appel à la propriété <text:span text:style-name="CodeDansTexte">stdin</text:span>.
C&#8217;est un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-stream"  text:visited-style-name="Visited_20_Internet_20_Link">Stream d&#8217;écriture</text:a> dont le fonctionnement est identique
à <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.std"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="CodeDansTexte">process.stdin</text:span></text:a>&#160;:</text:p>
<text:p text:style-name="CodeTitre">child_process/spawn-stdin.js</text:p><text:p text:style-name="Code">const {spawn} = require('child_process');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const subprocess = spawn('tr', ['0-9a-f', 'a-p']);</text:p><text:p text:style-name="Code">subprocess.stdout.on('data', (data) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(String(data));<text:s text:c="14"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">subprocess.stdin.write('0123 abcd');<text:s text:c="6"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">subprocess.stdin.end();<text:s text:c="19"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Écrit <text:span text:style-name="CodeDansTexte">0123 abcd</text:span> dans le flux d&#8217;entrée.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Signale au processus externe qu&#8217;il n&#8217;aura plus de donnée&#160;— le programme <text:span text:style-name="CodeDansTexte">tr</text:span> rendra la main dès qu&#8217;il nous aura tout transmis.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">abcd klmn</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">L&#8217;exécutable <text:span text:style-name="CodeDansTexte">tr</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://fr.wikipedia.org/wiki/Tr_(Unix" text:visited-style-name="Visited_20_Internet_20_Link">https://fr.wikipedia.org/wiki/Tr_(Unix</text:a>)</text:span>)
substitue des plages de caractères.
On lui a transmis des caractères en entrée et spécifié les plages de traduction
en arguments.
Nous avons utilisé la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.std"  text:visited-style-name="Visited_20_Internet_20_Link">sortie standard</text:a> pour lire les résultats.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple précédent revient au même que cette commande&#160;:</text:p>
<text:p text:style-name="Code">$ echo -n '0123 abcd' | tr 0-9a-f a-p</text:p><text:p text:style-name="Code">abcd klmn</text:p>
<text:p text:style-name="TexteCourant">Dans ce cas précis, je trouve que le <text:span text:style-name="T4">scripting shell</text:span> est plus concis
que l&#8217;utilisation d&#8217;un script Node faisant appel à <text:span text:style-name="CodeDansTexte">child_process.spawn</text:span>.
J&#8217;aurais plutôt tendance à transmettre le résultat de cette commande
à l'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.std"  text:visited-style-name="Visited_20_Internet_20_Link">entrée standard</text:a> d&#8217;un script Node.</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">child_process.exec()</text:span></text:span><text:line-break/><text:tab/>Exécute une commande et retourne son <text:span text:style-name="T4">résultat</text:span>.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">child_process.spawn()</text:span></text:span><text:line-break/><text:tab/>Exécute une commande et retourne un objet <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process"  text:visited-style-name="Visited_20_Internet_20_Link">processus</text:a>.
Le script Node et le nouveau processus peuvent communiquer entre eux.</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">process.on('message')</text:span></text:span><text:line-break/><text:tab/>Déclenché lorsque le processus enfant reçoit un message envoyé par l&#8217;autre script.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">process.kill()</text:span></text:span><text:line-break/><text:tab/>Envoie un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-signals"  text:visited-style-name="Visited_20_Internet_20_Link">signal d&#8217;arrêt</text:a> au processus enfant.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">process.send()</text:span></text:span><text:line-break/><text:tab/>Envoie un message au processus enfant.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">process.stdin</text:span>, <text:span text:style-name="CodeDansTexte">process.stdout</text:span>, <text:span text:style-name="CodeDansTexte">process.stderr</text:span></text:span><text:line-break/><text:tab/><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.std"  text:visited-style-name="Visited_20_Internet_20_Link">Flux standards</text:a> du processus enfant.
Idéal pour envoyer et récupérer des données en continu.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> <text:span text:style-name="CodeDansTexte">child_process</text:span></text:h><text:p text:style-name="Remarque">La documentation du module <text:span text:style-name="CodeDansTexte">child_process</text:span> est disponible sur le site officiel de Node&#160;:
<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://nodejs.org/docs/latest-v10.x/api/child_process.html" text:visited-style-name="Visited_20_Internet_20_Link">https://nodejs.org/docs/latest-v10.x/api/child_process.html</text:a></text:span></text:p>
<text:bookmark text:name="ref-process" /><text:h text:style-name="TitreNiveau2" text:outline-level="3"><text:span text:style-name="">process</text:span> : en savoir plus sur le processus en cours</text:h><text:p text:style-name="TexteCourant">La module <text:span text:style-name="CodeDansTexte">process</text:span> retourne des informations
sur l&#8217;environnement dans lequel le script est exécuté.
À l&#8217;instar du <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-console"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">console</text:span></text:a>, la variable <text:span text:style-name="CodeDansTexte">process</text:span>
est globale.</text:p>
<text:p text:style-name="CodeTitre">process/intro.js</text:p><text:p text:style-name="Code">const variables = Object.keys(process.env);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(variables);<text:s text:c="21"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(process.argv);<text:s text:c="18"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche quelque chose comme <text:span text:style-name="CodeDansTexte">['LANG', 'SHELL', 'PATH', 'HOME', 'USER', &#8230;&#8203;]</text:span>&#160;— cf.&#160;<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.env"  text:visited-style-name="Visited_20_Internet_20_Link">variables d&#8217;environnement</text:a>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">[ '&#8230;&#8203;/v10.3.0/bin/node', '&#8230;&#8203;/chapter-04/examples/process/intro.js' ]</text:span>&#160;— cf.&#160;<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.argv"  text:visited-style-name="Visited_20_Internet_20_Link">arguments d&#8217;exécution</text:a>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Notre code peut être interprété par Node
sur plusieurs types de machines
(ordinateur récent ou fatigué, Raspberry Pi, etc.),
sur différents systèmes d&#8217;exploitation (Windows, Linux, macOS, etc.).<text:line-break/>Nous avons ainsi tout le loisir d&#8217;adapter notre code
à ces différents environnements.</text:p>
<text:bookmark text:name="ref-process.env" /><text:p text:style-name="TexteCourant">Les variables d&#8217;environnement sont des
<text:span text:style-name="T7">variables définies au niveau du système d&#8217;exploitation</text:span>.
Elles contiennent des informations comme le <text:span text:style-name="T4">répertoire courant</text:span>, langue du système d&#8217;exploitation, l&#8217;utilisateur système courant, le type de terminal, les emplacements d&#8217;installation des exécutables, etc.</text:p>
<text:p text:style-name="TexteCourant">On retrouve ces variables sous la forme d&#8217;un
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-object"  text:visited-style-name="Visited_20_Internet_20_Link">objet ECMAScript</text:a> nommé <text:span text:style-name="CodeDansTexte">process.env</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ node -p 'process.env'</text:p><text:p text:style-name="Code">{ ITERM_PROFILE: 'Default',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>LANG: 'en_GB.UTF-8',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>PWD: '/Users/oncletom/workspace/nodebook',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>SHELL: '/bin/zsh',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>TERM_PROGRAM_VERSION: '3.1.5',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>TERM_PROGRAM: 'iTerm.app',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>...</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant">Nous pouvons créer des variables d&#8217;environnement pour
<text:span text:style-name="T7">transmettre des informations contextuelles</text:span> à nos programmes&#160;:
des chemins d&#8217;accès à une base de données, si on est en situation de test
ou de production, l&#8217;emplacement de fichiers nécessaires au fonctionnement
de notre programme, etc.</text:p>
<text:p text:style-name="TexteCourant">Par exemple et par convention, la variable <text:span text:style-name="CodeDansTexte">NODE_ENV</text:span> est utilisée pour indiquer au programme
s&#8217;il est lancé dans le cadre du développement, de l&#8217;exécution des tests
ou s&#8217;il tourne sur le serveur de production.</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>Variable d&#8217;environnement éphémère</text:span><text:line-break/><text:tab/>La variable n&#8217;existe que pendant la durée de vie du programme.
La définition <text:span text:style-name="CodeDansTexte">CLÉ=valeur</text:span> est placée sur la même ligne que le programme
en question.</text:p>
<text:p text:style-name="Code">$ NODE_ENV=production node process/env.js</text:p><text:p text:style-name="Code">mode : production</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>Variable d&#8217;environnement permanente</text:span><text:line-break/><text:tab/>La variable existe pendant la durée de la session
grâce à l&#8217;opérateur <text:span text:style-name="CodeDansTexte">export</text:span> sous Linux et macOS et
avec l&#8217;opérateur <text:span text:style-name="CodeDansTexte">set</text:span> sous Windows.<text:line-break/>
La définition <text:span text:style-name="CodeDansTexte">export CLÉ=valeur</text:span> est placée sur sa propre ligne.
Elle restera accessible à <text:span text:style-name="T4">tout programme</text:span> jusqu&#8217;à la fin de la session
ou jusqu&#8217;à ce qu&#8217;on efface la variable.</text:p>
<text:p text:style-name="Code">$ export NODE_ENV=production</text:p><text:p text:style-name="Code">$ node process/env.js</text:p><text:p text:style-name="Code">mode : production</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Revenir en arrière</text:span> Effacer une variable d&#8217;environnement</text:h><text:p text:style-name="Remarque">L&#8217;opérateur <text:span text:style-name="CodeDansTexte">unset</text:span> dans un terminal efface le contenu
d&#8217;une variable d&#8217;environnement.</text:p>
<text:p text:style-name="RemarqueCode">$ export NODE_ENV=dev</text:p><text:p text:style-name="RemarqueCode">$ echo $NODE_ENV</text:p><text:p text:style-name="RemarqueCode">$ unset NODE_ENV</text:p><text:p text:style-name="RemarqueCode">$ echo $NODE_ENV</text:p>
<text:p text:style-name="TexteCourant">Voici le contenu du fichier <text:span text:style-name="CodeDansTexte">process/env.js</text:span> utilisé dans les exemples précédents&#160;:</text:p>
<text:p text:style-name="CodeTitre">process/env.js</text:p><text:p text:style-name="Code">const {NODE_ENV} = process.env;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">if (NODE_ENV === 'dev') {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log('On est en mode développement.');</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log('mode : %s', NODE_ENV);</text:p>
<text:p text:style-name="TexteCourant">On notera que son comportement s&#8217;adapte à la <text:span text:style-name="T4">présence</text:span> et à la <text:span text:style-name="T4">valeur</text:span>
de la variable d&#8217;environnement <text:span text:style-name="CodeDansTexte">NODE_ENV</text:span>.
Elle est accessible dans Node en tant que <text:span text:style-name="CodeDansTexte">process.env.NODE_ENV</text:span>.</text:p>
<text:p text:style-name="Code">$ NODE_ENV=dev node process/env.js</text:p><text:p text:style-name="Code">On est en mode développement.</text:p><text:p text:style-name="Code">mode : dev</text:p>
<text:p text:style-name="TexteCourant">Nous verrons d&#8217;autres mises en situation des variables d&#8217;environnement pour
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-configuration"  text:visited-style-name="Visited_20_Internet_20_Link">configurer une application</text:a>
dans le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-06"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 6</text:a> et pour
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-debug"  text:visited-style-name="Visited_20_Internet_20_Link">déboguer une application en ligne de commande</text:a>
dans le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-08"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 8</text:a>.</text:p>
<text:bookmark text:name="ref-process.argv" /><text:p text:style-name="TexteCourant">Les arguments d&#8217;exécution sont des morceaux d&#8217;information transmis
à un script Node.
On les place à la droite du nom du fichier, comme illustré dans cet exemple&#160;:</text:p>
<text:p text:style-name="Code">$ node print-first.js salut</text:p><text:p text:style-name="Code">"salut"</text:p>
<text:p text:style-name="TexteCourant">On utilise les <text:span text:style-name="T4">arguments</text:span> pour affiner le comportement d&#8217;un programme.
Je pense par exemple au numéro du port sur lequel lancer un serveur web,
une liste de fichiers à traiter ou
encore de fonctionnalités à activer ou à désactiver.</text:p>
<text:p text:style-name="TexteCourant">Il faut imaginer les arguments comme des <text:span text:style-name="T7">paramètres de fonction</text:span>,
accessibles dans un programme Node dans
le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-array"  text:visited-style-name="Visited_20_Internet_20_Link">tableau</text:a> <text:span text:style-name="CodeDansTexte">process.argv</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">print-first.js</text:p><text:p text:style-name="Code">const [,,first_arg] = process.argv;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(first_arg);</text:p>
<text:p text:style-name="TexteCourant">Les deux premiers éléments de <text:span text:style-name="CodeDansTexte">process.argv</text:span> sont rarement utilisés.
Ils correspondent respectivement à l&#8217;emplacement de l&#8217;exécutable Node
et à l&#8217;emplacement du script.</text:p>
<text:p text:style-name="TexteCourant">Tous les autres arguments sont accessibles à partir de l&#8217;index 2 de
<text:span text:style-name="CodeDansTexte">process.argv</text:span>, dans l&#8217;ordre où ils sont placés&#160;:</text:p>
<text:p text:style-name="Code">$ node print-first.js salut ça va ?</text:p><text:p text:style-name="Code">"salut"</text:p>
<text:p text:style-name="TexteCourant">Le script <text:span text:style-name="CodeDansTexte">print-first.js</text:span> affiche le premier argument.
On peut en conclure que les arguments sont séparés par le caractère "espace".</text:p>
<text:p text:style-name="TexteCourant">Dans le cas où un argument doit contenir un espace, on l&#8217;encadre alors
entre guillemets&#160;:</text:p>
<text:p text:style-name="Code">$ node print-first.js "salut ça va ?" "oui et toi ?"</text:p><text:p text:style-name="Code">"salut ça va ?"</text:p>
<text:p text:style-name="TexteCourant">L&#8217;inconvénient des arguments est que leur ordre compte
et qu&#8217;il devient difficile de connaitre leur rôle sans se référer
au manuel d&#8217;utilisation.</text:p>
<text:p text:style-name="TexteCourant">C&#8217;est là qu&#8217;interviennent les <text:span text:style-name="T7">options</text:span>.
Comme le nom l&#8217;indique, ce sont des <text:span text:style-name="T4">arguments optionnels</text:span>.
Elles sont préfixées de deux <text:span text:style-name="T4">traits d&#8217;union</text:span> (<text:span text:style-name="CodeDansTexte">--</text:span>).
On peut choisir de leur associer ou non une valeur.</text:p>
<text:p text:style-name="Code">$ node print-text.js "salut ça va ?" --uppercase</text:p><text:p text:style-name="Code">SALUT ÇA VA ?</text:p>
<text:p text:style-name="TexteCourant">Quand on n&#8217;associe pas de valeur à une option,
on considère qu&#8217;elle équivaut à un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-boolean"  text:visited-style-name="Visited_20_Internet_20_Link">booléen</text:a>
de valeur <text:span text:style-name="CodeDansTexte">true</text:span>.</text:p>
<text:p text:style-name="CodeTitre">print-text.js</text:p><text:p text:style-name="Code">let [,,text] = process.argv;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">if (process.argv.includes('--uppercase')) { <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>text = text.toLocaleUpperCase();</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(text);</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> La condition est positive si l&#8217;on détecte <text:span text:style-name="CodeDansTexte">--uppercase</text:span> dans la liste des arguments.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Les <text:span text:style-name="T4">options</text:span> se combinent très bien avec les <text:span text:style-name="T4">arguments</text:span>.
Il faut les imaginer comme des interrupteurs.</text:p>
<text:p text:style-name="TexteCourant">Dans d&#8217;autres situations, on a besoin de <text:span text:style-name="T7">passer une valeur à une option</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ node print-text-limit.js "salut ça va ?" --limit 2</text:p><text:p text:style-name="Code">salut ça</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple précédent illustre la césure d&#8217;une phrase à 2 mots
lorsque l&#8217;option <text:span text:style-name="CodeDansTexte">--limit</text:span> est associée à la valeur <text:span text:style-name="CodeDansTexte">2</text:span>.</text:p>
<text:p text:style-name="CodeTitre">print-text-limit.js</text:p><text:p text:style-name="Code">let [,,text] = process.argv;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const limitIndex = process.argv.indexOf('--limit');<text:s text:c="5"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">if (limitIndex &gt;= 2) {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const limitValue = process.argv[limitIndex + 1];<text:s text:c="6"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>text = text.split(' ').slice(0, limitValue).join(' ');<text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(text);</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> On récupère l&#8217;index de l&#8217;option <text:span text:style-name="CodeDansTexte">--limit</text:span> dans le tableau <text:span text:style-name="CodeDansTexte">process.argv</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> On récupère la valeur de l&#8217;élément suivant <text:span text:style-name="CodeDansTexte">--limit</text:span> dans <text:span text:style-name="CodeDansTexte">process.argv</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> La troncature est paramétrée en fonction de la valeur associée à <text:span text:style-name="CodeDansTexte">--limit</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Au fond, <text:span text:style-name="T7">les options sont des repères pour les utilisateurs</text:span> de nos programmes.
Elles leur permettent de s&#8217;interfacer avec leurs fonctionnalités.
Un peu à la manière des différents boutons qu&#8217;on retrouve
en façade d&#8217;une machine à laver.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple suivant est totalement fictif mais il illustre comment
on s&#8217;interfacerait avec une machine à laver
si elle mettait à disposition en ligne de commande&#160;:</text:p>
<text:p text:style-name="Code">$ machine-a-laver P-ECO 40 --fast --no-dry --room kitchen</text:p>
<text:p text:style-name="TexteCourant">Ce qu&#8217;il faut en comprendre, c&#8217;est qu&#8217;on démarrerait la machine située
dans la cuisine avec un programme économique <text:span text:style-name="T4">et</text:span> à 40°C,
en activant l&#8217;option rapide et <text:span text:style-name="T4">en désactivant</text:span> l&#8217;option séchage.</text:p>
<text:p text:style-name="TexteCourant">Nous verrons d&#8217;autres mises en situation pour
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-argv"  text:visited-style-name="Visited_20_Internet_20_Link">passer des paramètres à une application en ligne de commande</text:a>
dans le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-08"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 8</text:a>.</text:p>
<text:bookmark text:name="ref-process.std" /><text:p text:style-name="TexteCourant">Chaque processus système est doté de 3 flux de données&#160;:
le flux d'<text:span text:style-name="T7">entrée</text:span> (<text:span text:style-name="CodeDansTexte">stdin</text:span>), le flux de <text:span text:style-name="T7">sortie</text:span> (<text:span text:style-name="CodeDansTexte">stdout</text:span>)
et le flux d'<text:span text:style-name="T7">erreur</text:span> (<text:span text:style-name="CodeDansTexte">stderr</text:span>).</text:p>
<text:p text:style-name="TexteCourant">Les flux standards peuvent être alimentés pendant la durée de vie du processus
en utilisant peu de mémoire.
On les utilisera pour <text:span text:style-name="T7">passer le résultat d&#8217;un autre programme</text:span>
à notre script Node, pour <text:span text:style-name="T7">informer l&#8217;utilisateur</text:span> de notre programme
mais aussi pour <text:span text:style-name="T7">consigner les erreurs</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Node expose ces flux standards via les variables <text:span text:style-name="CodeDansTexte">process.stdin</text:span> (entrée),
<text:span text:style-name="CodeDansTexte">process.stdout</text:span> (sortie) et <text:span text:style-name="CodeDansTexte">process.stderr</text:span> (erreur).
Chacune de ces variables possède des méthodes pour <text:span text:style-name="T4">écouter</text:span> ce qu&#8217;il s&#8217;y passe,
pour y <text:span text:style-name="T4">écrire</text:span> du contenu et pour <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-stream"  text:visited-style-name="Visited_20_Internet_20_Link">rediriger leur flux</text:a>.</text:p>
<text:p text:style-name="TexteCourant">Commençons par l&#8217;utilisation de <text:span text:style-name="CodeDansTexte">process.stdout</text:span> pour écrire un message
dans notre terminal&#160;:</text:p>
<text:p text:style-name="Code">$ node process/stdout.js</text:p><text:p text:style-name="Code">un deuxtrois</text:p><text:p text:style-name="Code">quatre</text:p>
<text:p text:style-name="TexteCourant">Le code source de <text:span text:style-name="CodeDansTexte">process/stdout.js</text:span> fait appel à la fonction
<text:span text:style-name="CodeDansTexte">process.stdout.write</text:span> par deux fois.<text:line-break/>On notera que le caractère <text:span text:style-name="CodeDansTexte">\n</text:span> symbolise un retour à la ligne
(<text:span text:style-name="CodeDansTexte">\r\n</text:span> sous Windows)&#160;:</text:p>
<text:p text:style-name="CodeTitre">process/stdout.js</text:p><text:p text:style-name="Code">process.stdout.write('un deux');</text:p><text:p text:style-name="Code">process.stdout.write('trois\nquatre');</text:p>
<text:p text:style-name="TexteCourant">Ça ne vous rappelle pas nos précédentes utilisations de la fonction
<text:span text:style-name="CodeDansTexte">console.log</text:span>&#160;?
Pas étonnant puisque <text:span text:style-name="CodeDansTexte">console.log</text:span> se repose sur <text:span text:style-name="CodeDansTexte">process.stdout</text:span>
(voir encadré ci-contre).</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Raccourci</text:span> Les fonctions <text:span text:style-name="CodeDansTexte">console.log</text:span> et <text:span text:style-name="CodeDansTexte">console.error</text:span></text:h><text:p text:style-name="Remarque">La fonction d&#8217;affichage <text:span text:style-name="CodeDansTexte">console.log</text:span> écrit dans le flux de sortie
<text:span text:style-name="CodeDansTexte">process.stdout</text:span>.
Sans surprise, <text:span text:style-name="CodeDansTexte">console.error</text:span> écrit dans le flux d&#8217;erreur
<text:span text:style-name="CodeDansTexte">process.stderr</text:span>.</text:p>
<text:p text:style-name="Remarque">Elles ajoutent un <text:span text:style-name="T4">retour à la ligne</text:span> et des options de formatage pour
notre confort.</text:p>
<text:p text:style-name="Remarque">On en parlera davantage dans la section <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-console"  text:visited-style-name="Visited_20_Internet_20_Link">console</text:a>.</text:p>
<text:p text:style-name="TexteCourant">Les flux de <text:span text:style-name="T4">sortie</text:span> et d'<text:span text:style-name="T4">erreur</text:span> sont manipulables en continu.
Comment&#160;?
À l&#8217;aide d&#8217;utilitaires systèmes existants (<text:span text:style-name="CodeDansTexte">grep</text:span>, <text:span text:style-name="CodeDansTexte">awk</text:span> etc.)
ou des programmes spécifiques (analyse de <text:span text:style-name="T4">logs</text:span>, etc.).<text:line-break/>On peut ainsi se concentrer sur un programme qui
fait <text:span text:style-name="T7">juste ce dont on a besoin</text:span>.
On laisse le travail de spécialisation à d&#8217;autres programmes.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">Filtrons</text:span> la sortie de l&#8217;exemple précédent sans écrire une ligne de code de plus.
Le programme <text:span text:style-name="T4">grep</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://fr.wikipedia.org/wiki/Grep" text:visited-style-name="Visited_20_Internet_20_Link">https://fr.wikipedia.org/wiki/Grep</text:a></text:span>)
est fourni par défaut sur les systèmes Linux et macOS.
Il ne retourne que les lignes qui contiennent le motif
donné en <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.arv"  text:visited-style-name="Visited_20_Internet_20_Link">argument</text:a>&#160;:</text:p>
<text:p text:style-name="Code">$ node process/stdout.js | grep 'tre'</text:p><text:p text:style-name="Code">qua<text:span text:style-name="CodeExergue">tre</text:span></text:p>
<text:p text:style-name="TexteCourant">La <text:span text:style-name="T4">sortie standard</text:span> de <text:span text:style-name="CodeDansTexte">process/stdout.js</text:span> est devenue l'<text:span text:style-name="T4">entrée standard</text:span>
de <text:span text:style-name="CodeDansTexte">grep</text:span> grâce à l&#8217;utilisation du <text:span text:style-name="T4">pipe</text:span> (<text:span text:style-name="CodeDansTexte">|</text:span>).</text:p>
<text:p text:style-name="TexteCourant">C&#8217;est le moment idéal pour regarder du côté de l'<text:span text:style-name="T4">entrée standard</text:span> de Node.
Implémentons quelque chose qui transforme un message&#160;:</text:p>
<text:p text:style-name="Code">$ echo "un deuxtrois\nquatre" | node process/stdin-uppercase.js</text:p><text:p text:style-name="Code">UN DEUXTROIS</text:p><text:p text:style-name="Code">QUATRE</text:p>
<text:p text:style-name="TexteCourant">On aurait aussi pu réutiliser la <text:span text:style-name="T4">sortie</text:span> de l&#8217;exemple <text:span text:style-name="CodeDansTexte">process/stdout.js</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ node process/stdout.js | node process/stdin-uppercase.js</text:p><text:p text:style-name="Code">UN DEUXTROIS</text:p><text:p text:style-name="Code">QUATRE</text:p>
<text:p text:style-name="TexteCourant">Voyons comment ça fonctionne sous le capot&#160;:</text:p>
<text:p text:style-name="CodeTitre">process/stdin-uppercase.js</text:p><text:p text:style-name="Code">process.stdin.on('data', (chunk) =&gt; {<text:s text:c="13"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>const text = chunk.toString();<text:s text:c="18"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>process.stdout.write(text.toLocaleUpperCase()); <text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Chaque afflux de donnée appelle notre fonction en lui fournissant un seul paramètre contenant les données en question.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Le paramètre est de <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-buffer"  text:visited-style-name="Visited_20_Internet_20_Link">type Buffer</text:a>&#160;— on souhaite le transformer en <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-string"  text:visited-style-name="Visited_20_Internet_20_Link">chaîne de caractères</text:a>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> La <text:span text:style-name="T4">chaîne de caractères</text:span> est transformable en majuscules, que l&#8217;on écrit dans le flux de sortie.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Terminons avec la <text:span text:style-name="T4">sortie erreur</text:span> (<text:span text:style-name="CodeDansTexte">process.stderr</text:span>).
Elle fonctionne de manière identique à la <text:span text:style-name="T4">sortie standard</text:span> (<text:span text:style-name="CodeDansTexte">process.stdout</text:span>).
S&#8217;il n&#8217;y a visuellement aucune différence, la <text:span text:style-name="T4">sortie erreur</text:span> écrit son contenu
dans un canal différent&#160;— un <text:span text:style-name="T4">descripteur</text:span> différent.<text:line-break/>On l&#8217;utilise pour <text:span text:style-name="T7">déboguer des programmes</text:span>, pour <text:span text:style-name="T7">lister des erreurs</text:span> ou des
contenus que l&#8217;on souhaite dissocier de la sortie standard.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple suivant affiche un nombre toutes les demi-secondes et l&#8217;état
du compteur de nombres tous les 10 affichages&#160;:</text:p>
<text:p text:style-name="Code">$ node process/stdout-long.js</text:p><text:p text:style-name="Code">7</text:p><text:p text:style-name="Code">24</text:p><text:p text:style-name="Code">3</text:p><text:p text:style-name="Code">19</text:p><text:p text:style-name="Code">25</text:p><text:p text:style-name="Code">Compteur = 5</text:p><text:p text:style-name="Code">22</text:p><text:p text:style-name="Code">...</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Rappel</text:span> Interrompre un programme avec <text:span text:style-name="Menu">[Ctrl+C]</text:span></text:h><text:p text:style-name="Remarque">Un programme peut être interrompu à tout moment en utilisant la combinaison
de touches <text:span text:style-name="Menu">[Ctrl+C]</text:span>.</text:p>
<text:p text:style-name="CodeTitre">process/stdout-long.js</text:p><text:p text:style-name="Code">const random = (limit) =&gt; Math.floor(Math.random() * limit);</text:p><text:p text:style-name="Code">let counter = 0;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">setInterval(() =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>counter++;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>process.stdout.write(`${random(30)}\n`);<text:s text:c="12"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>if (Number.isInteger(counter / 5)) {<text:s text:c="16"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>process.stderr.write(`Compteur = ${counter}\n`);<text:s text:c="2"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}, 500);</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Écrit un nombre entre 0 et 30 dans la <text:span text:style-name="T4">sortie standard</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> On vérifie si la valeur du compteur est divisible par 5&#160;— c&#8217;est le cas si la division produit un entier au lieu d&#8217;un nombre à virgule.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">Compteur = 5</text:span> puis <text:span text:style-name="CodeDansTexte">Compteur = 10</text:span> (et ainsi de suite) dans la <text:span text:style-name="T4">sortie erreur</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">On pourrait décider de n&#8217;afficher que le flux d&#8217;erreur.
Utilisons l&#8217;opérateur <text:span text:style-name="CodeDansTexte">&gt;</text:span> pour <text:span text:style-name="T7">rediriger la sortie standard vers un fichier</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ node process/stdout-long.js &gt; stdout.txt</text:p><text:p text:style-name="Code">Compteur = 5</text:p><text:p text:style-name="Code">Compteur = 10</text:p><text:p text:style-name="Code">...</text:p>
<text:p text:style-name="TexteCourant">En ouvrant le fichier <text:span text:style-name="CodeDansTexte">stdout.txt</text:span>, on voit
la liste de nombre générée par notre programme.</text:p>
<text:p text:style-name="TexteCourant">En maitrisant les flux standards, on peut <text:span text:style-name="T7">créer des programmes modulaires</text:span>
qui consomment du contenu sans avoir à connaître leur provenance.
<text:span text:style-name="T7">Les données peuvent aller et venir</text:span> <text:span text:style-name="T4">depuis</text:span> et <text:span text:style-name="T4">vers</text:span> des programmes externes,
des fichiers ou des sites web distants.</text:p>
<text:p text:style-name="TexteCourant">Pour mieux comprendre la logique de <text:span text:style-name="T4">flux continu</text:span> que l&#8217;on vient de découvrir,
je vous invite à lire la section liée au <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-stream"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">stream</text:span></text:a>
de ce même chapitre.
On y détaillera la liste des événements à écouter ainsi que les différentes
méthodes d&#8217;écriture, de pause et de lecture.</text:p>
<text:bookmark text:name="ref-process.on" /><text:p text:style-name="TexteCourant">Un processus système reçoit et émet des données mais il peut aussi
<text:span text:style-name="T7">écouter des événements</text:span> grâce à la fonction <text:span text:style-name="CodeDansTexte">process.on</text:span>.</text:p>
<text:p text:style-name="CodeTitre">process/exit.js</text:p><text:p text:style-name="Code">console.log('Le processus démarre');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">process.on('exit', (code) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(`Le processus termine avec le code ${code}`);</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple ci-dessus illustre l&#8217;événement <text:span text:style-name="CodeDansTexte">exit</text:span>.
Cet événement est déclenché quand le processus se termine.
À ce titre, un <text:span text:style-name="T7">code de sortie</text:span> est fourni pour signaler l&#8217;état dans
lequel le programme se termine.
On parlera davantage du code de sortie et de leur signification
dans la section ci-après, <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.exit"  text:visited-style-name="Visited_20_Internet_20_Link">Mettre fin au processus</text:a>.</text:p>
<text:p text:style-name="TexteCourant">Essayons de lancer l&#8217;exemple précédent pour voir&#160;:</text:p>
<text:p text:style-name="Code">$ node process/exit.js</text:p><text:p text:style-name="Code">Le processus démarre</text:p><text:p text:style-name="Code">Le processus termine avec le code 0</text:p>
<text:p text:style-name="TexteCourant">Tout s&#8217;est passé correctement.
Le <text:span text:style-name="T4">code de sortie</text:span> équivaut alors à <text:span text:style-name="CodeDansTexte">0</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Si le programme venait à se terminer de manière imprévue, nous pouvons
supposer que le code serait différent.<text:line-break/>L&#8217;exemple suivant provoque volontairement une erreur en faisant
référence à une variable qui n&#8217;existe pas&#160;:</text:p>
<text:p text:style-name="CodeTitre">process/exit-error.js</text:p><text:p text:style-name="Code">process.on('exit', (code) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(`Le processus termine avec le code ${code}`);</text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">/* eslint-disable-next-line no-undef */</text:p><text:p text:style-name="Code">console.log(jenexistepas);</text:p>
<text:p text:style-name="TexteCourant">Que verrions-nous si on lançait le script&#160;?</text:p>
<text:p text:style-name="Code">$ node process/exit-error.js</text:p><text:p text:style-name="Code">Le processus termine avec le code 1</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:span text:style-name="CodeExergue">ReferenceError</text:span>: jenexistepas is not defined</text:p><text:p text:style-name="Code"><text:s text:c="4"/>at Object.&lt;anonymous&gt; (/.../examples/process/<text:span text:style-name="CodeExergue">exit-error.js</text:span>:<text:span text:style-name="CodeExergue">5</text:span>:13)</text:p>
<text:p text:style-name="TexteCourant">Cette fois-ci le code de sortie est <text:span text:style-name="CodeDansTexte">1</text:span>.
Cela correspond à une <text:span text:style-name="T4">erreur qui n&#8217;a pas été capturée</text:span>.
Le reste du message décrit <text:span text:style-name="T4">pourquoi</text:span> l&#8217;erreur s&#8217;est manifestée.</text:p>
<text:p text:style-name="TexteCourant">On peut écouter d&#8217;autres événements liés au cycle de vie de nos applications&#160;:</text:p>
<text:p text:style-name="TableauTitre">Table 1. Événements liés au cycle de vie du processus Node</text:p><table:table table:style-name="Tableau1"><table:table-column />,<table:table-column />,<table:table-column /><table:table-row><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Événement</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Paramètres</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Raison du déclenchement</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">exit</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">(exitCode)</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Le programme se termine et va rendre la main au système d&#8217;exploitation.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">unhandledRejection</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">(reason, promise)</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Une <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-promise"  text:visited-style-name="Visited_20_Internet_20_Link">promesse</text:a> a échoué
et n&#8217;a pas été capturée à l&#8217;aide de la méthode <text:span text:style-name="CodeDansTexte">.catch()</text:span>.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">uncaughtException</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">(error)</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Une erreur s&#8217;est produite et n&#8217;a pas été capturée.
Si rien n&#8217;est fait, le processus va s&#8217;arrêter avec un code erreur.<text:line-break/>
<text:span text:style-name="T7">Note</text:span> : il vaut mieux qu&#8217;un programme s&#8217;arrête en cas de problème.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">message</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">(message, sourceSocket)</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-child_process"  text:visited-style-name="Visited_20_Internet_20_Link">processus parent</text:a> nous envoie un message.</text:p></table:table-cell></table:table-row></table:table>
<text:bookmark text:name="ref-signals" /><text:p text:style-name="TexteCourant">La méthode <text:span text:style-name="CodeDansTexte">process.on</text:span> est à l&#8217;écoute des <text:span text:style-name="T7">signaux système</text:span>.
Vous vous souvenez de la combinaison de touches <text:span text:style-name="Menu">[Ctrl+C]</text:span>
utilisée précédemment&#160;?
Cette combinaison émet en réalité un <text:span text:style-name="T4">signal d&#8217;interruption</text:span>.
Un signal d&#8217;interruption répond à l&#8217;identifiant <text:span text:style-name="CodeDansTexte">SIGINT</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Node gère ces signaux pour nous.
Mais on peut aussi se mettre à les écouter et décider de faire autrement
que son comportement par défaut.</text:p>
<text:p text:style-name="TexteCourant">On pourrait par exemple afficher l&#8217;heure de l&#8217;arrêt
du processus avant de rendre la main&#160;:</text:p>
<text:p text:style-name="CodeTitre">process/interrupt.js</text:p><text:p text:style-name="Code">const log = (msg) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(`${new Date().toISOString()} - ${msg}`);</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">log('Processus démarré');<text:s text:c="21"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">process.on('SIGINT', () =&gt; {<text:s text:c="18"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>log('Processus terminé (manuellement)');</text:p><text:p text:style-name="Code"><text:s text:c="2"/>process.exit(0);<text:s text:c="28"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">setTimeout(() =&gt; {<text:s text:c="28"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>log('Processus terminé (timeout)');</text:p><text:p text:style-name="Code"><text:s text:c="2"/>process.exit(0);</text:p><text:p text:style-name="Code">}, 5000)</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Un premier message s&#8217;affichera au démarrage du script.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Cette <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-function"  text:visited-style-name="Visited_20_Internet_20_Link">fonction</text:a> se déclenche lors de la réception du <text:span text:style-name="T4">signal d&#8217;interruption</text:span> (<text:span text:style-name="CodeDansTexte">SIGINT</text:span>), lorsque le système d&#8217;exploitation lui relaie notre combinaison de touches <text:span text:style-name="Menu">[Ctrl+C]</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> La fonction <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.exit"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="CodeDansTexte">process.exit</text:span></text:a> nous permet de mettre fin manuellement au processus (voir section ci-après).<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Sinon ce <text:span text:style-name="T4">timer</text:span> mettra fin au processus au bout de 5 secondes.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">En pratique le résultat ressemblerait à ceci&#160;:</text:p>
<text:p text:style-name="Code">$ node process/interrupt.js</text:p><text:p text:style-name="Code">2018-03-16T10:58:32.855Z - Processus démarré</text:p><text:p text:style-name="Code"><text:span text:style-name="Menu">[Ctrl+C]</text:span></text:p><text:p text:style-name="Code">2018-03-16T10:58:40.000Z - Processus terminé (manuellement)</text:p>
<text:p text:style-name="TexteCourant">En plus du signal <text:span text:style-name="CodeDansTexte">SIGINT</text:span>, Node nous relaie les signaux suivants&#160;:</text:p>
<text:p text:style-name="TableauTitre">Table 2. Événements liés aux <text:span text:style-name="T4">signaux</text:span> systèmes</text:p><table:table table:style-name="Tableau1"><table:table-column />,<table:table-column /><table:table-row><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Événement</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Raison du déclenchement</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">SIGINT</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Interruption de la commande en cours</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">SIGTERM</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Demande au processus de s&#8217;arrêter</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">SIGUSR1</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Node reçoit le signal d&#8217;attacher l'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-inspect"  text:visited-style-name="Visited_20_Internet_20_Link">inspecteur</text:a></text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">SIGHUP</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Le terminal est en train d&#8217;être fermé</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">SIGWINCH</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Le terminal a été redimensionné</text:p></table:table-cell></table:table-row></table:table>
<text:p text:style-name="TexteCourant"><text:span text:style-name="CodeDansTexte">SIGKILL</text:span> est un autre événement important mais on ne peut <text:span text:style-name="T4">pas</text:span> l&#8217;écouter.
Quand il est émis, le processus doit être arrêté quoiqu&#8217;il arrive.
On l&#8217;utilise justement en cas de dernier recours, quand <text:span text:style-name="CodeDansTexte">SIGINT</text:span>
et <text:span text:style-name="CodeDansTexte">SIGTERM</text:span> ne font pas effet&#160;; par exemple à cause d&#8217;un bug dans notre code,
ou une ressource qui ne rend pas la main.</text:p>
<text:bookmark text:name="ref-process.exit" /><text:p text:style-name="TexteCourant"><text:span text:style-name="T7">Un processus Node se termine quand il n&#8217;a plus d&#8217;instructions à exécuter</text:span>.
Un processus Node peut être terminé via
l'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-signals"  text:visited-style-name="Visited_20_Internet_20_Link">émission d&#8217;un signal extérieur</text:a>.
Mais on peut aussi y mettre fin <text:span text:style-name="T4">de l&#8217;intérieur</text:span> par l&#8217;intermédiaire
de la fonction <text:span text:style-name="CodeDansTexte">process.exit</text:span>.</text:p>
<text:p text:style-name="TexteCourant">On utilise cette fonction car le <text:span text:style-name="T7">programme a atteint son but</text:span>.
On le fait aussi lorsqu&#8217;on intercepte une erreur en souhaitant
effectuer un <text:span text:style-name="T7">traitement spécial avant de mettre fin au processus</text:span>.
Il se peut aussi qu&#8217;il vaille mieux terminer l&#8217;application en cas de perte
d&#8217;accès à des ressources distantes (base de données, stockage de fichiers, etc)
et ce, <text:span text:style-name="T7">au lieu de présenter une application web instable</text:span>.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple suivant illustre que l&#8217;on souhaite clôturer notre script
si on trouve le bon nombre&#160;:</text:p>
<text:p text:style-name="Code">$ node process/exit-devinette.js</text:p><text:p text:style-name="Code">JEU ! Trouve le nombre auquel je pense :</text:p><text:p text:style-name="Code">10<text:span text:style-name="Menu">[ENTER]</text:span></text:p><text:p text:style-name="Code">Hm hm, essaie encore.</text:p><text:p text:style-name="Code">3<text:span text:style-name="Menu">[ENTER]</text:span></text:p><text:p text:style-name="Code">Tu as trouvé, bravo !</text:p>
<text:p text:style-name="TexteCourant">Dans cet exemple, on écoute l&#8217;utilisateur de manière indéfinie, jusqu&#8217;à ce qu&#8217;il
ou elle trouve le bon nombre.
Lorsque c&#8217;est le cas, on peut interrompre le programme en transmettant
un code de sortie <text:span text:style-name="T4">de réussite</text:span>&#160;: le code <text:span text:style-name="CodeDansTexte">0</text:span> (zéro).</text:p>
<text:p text:style-name="CodeTitre">process/exit-devinette.js</text:p><text:p text:style-name="Code">const secret_number = Number(process.argv[2] || 3); <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log('JEU ! Trouve le nombre auquel je pense :');</text:p><text:p text:style-name="Code">process.stdin.on('data', (chunk) =&gt; {<text:s text:c="15"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>if (parseFloat(chunk) === secret_number) {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>console.log('Tu as trouvé, bravo !');</text:p><text:p text:style-name="Code"><text:s text:c="4"/>process.exit(0);<text:s text:c="32"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code"><text:s text:c="2"/>else {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>console.log('Hm hm, essaie encore.');<text:s text:c="11"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Le nombre secret est <text:span text:style-name="CodeDansTexte">3</text:span> par défaut, sauf s&#8217;il est passé <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.argv"  text:visited-style-name="Visited_20_Internet_20_Link">en argument</text:a> du script.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Cette fonction est invoquée à chaque saisie suivie de l&#8217;utilisation de la touche <text:span text:style-name="Menu">[ENTER]</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Cette ligne met fin immédiatement au script, après avoir affiché un message de félicitations.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Ce message s&#8217;affichera à chaque saisie erronée, jusqu&#8217;à ce que le nombre secret soit trouvé.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">On pourrait tout à fait imaginer une variante de ce script dans laquelle
on limiterait le nombre de mauvaises réponses.
Lorsqu&#8217;on attendrait cette limite, le programme utiliserait un code de sortie
différent de zéro.
Le code <text:span text:style-name="CodeDansTexte">9</text:span> ferait l&#8217;affaire puisqu&#8217;il indique qu&#8217;un <text:span text:style-name="T4">argument invalide</text:span> a été
passé.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Avancé</text:span> <text:span text:style-name="CodeDansTexte">process.abort</text:span></text:h><text:p text:style-name="Remarque">À la manière de <text:span text:style-name="CodeDansTexte">process.exit</text:span>, le programme est terminé immédiatement.
On l&#8217;utilise quand quelque chose d&#8217;inopiné et nécessitant un débogage
avancé se produit.</text:p>
<text:p text:style-name="Remarque">La fonction génère un fichier de débogage qui contient tout le contenu
de la mémoire utilisée par Node (<text:span text:style-name="T4">core file</text:span>).
Ce fichier dit <text:span text:style-name="T4">core file</text:span> s&#8217;analyse avec des logiciels avancés comme <text:span text:style-name="CodeDansTexte">mdb_v8</text:span>.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> <text:span text:style-name="CodeDansTexte">process</text:span></text:h><text:p text:style-name="Remarque">La documentation du module <text:span text:style-name="CodeDansTexte">process</text:span> est disponible sur le site officiel de Node&#160;:
<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://nodejs.org/docs/latest-v10.x/api/process.html" text:visited-style-name="Visited_20_Internet_20_Link">https://nodejs.org/docs/latest-v10.x/api/process.html</text:a></text:span></text:p>
<text:bookmark text:name="ref-stream" /><text:h text:style-name="TitreNiveau2" text:outline-level="3"><text:span text:style-name="">stream</text:span> : manipuler des flux de données</text:h><text:p text:style-name="TexteCourant">Le module <text:span text:style-name="CodeDansTexte">stream</text:span> contient les éléments de base pour lire, écrire et
transformer des flux de données rapidement et avec peu de mémoire.</text:p>
<text:p text:style-name="TexteCourant">Créer ses propres flux est une chose assez compliquée à réaliser.
Dans cette section nous allons nous focaliser sur l&#8217;utilisation des modules
Node qui génèrent de tels flux.</text:p>
<text:p text:style-name="CodeTitre">stream/intro.js</text:p><text:p text:style-name="Code">const {createReadStream} = require('fs');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">createReadStream(__filename)<text:s text:c="20"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>.on('data', (data) =&gt; {<text:s text:c="23"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>console.log('%d octets lus', data.length);<text:s text:c="2"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> On crée un <text:span text:style-name="T4">flux de lecture</text:span> qui ouvre le fichier courant (<text:span text:style-name="CodeDansTexte">__filename</text:span>).<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Invoque cette fonction à chaque morceau de données lu.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche le nombre d&#8217;octets lus dans ce morceau.<text:line-break/></text:p>
<text:p text:style-name="Code">$ node stream/intro.js</text:p><text:p text:style-name="Code">214 octets lus</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T7">Un <text:span text:style-name="T4">flux</text:span> de lecture consomme les données en <text:span text:style-name="T4">morceaux</text:span></text:span>.
Il correspond à une instance de l&#8217;objet <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-stream.Readable"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="CodeDansTexte">stream.Readable</text:span></text:a>.
L&#8217;exemple précédent n&#8217;a affiché qu&#8217;un seul morceau car la taille maximale
par défaut est d&#8217;environ <text:span text:style-name="CodeDansTexte">16Ko</text:span>.</text:p>
<text:p text:style-name="CodeTitre">stream/read.js</text:p><text:p text:style-name="Code">const {createReadStream} = require('fs');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">createReadStream(__filename, {highWaterMark: 100})<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>.on('end', () =&gt; console.log('Lecture terminée')) <text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>.on('data', (data) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>console.log('%d octets reçus', data.length);</text:p><text:p text:style-name="Code"><text:s text:c="2"/>});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> On spécifie cette fois qu&#8217;on lit <text:span text:style-name="CodeDansTexte">100 octets</text:span> à la fois.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">Lecture terminée</text:span> lorsque tous les morceaux ont été lus.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">L&#8217;option <text:span text:style-name="CodeDansTexte">highWaterMark</text:span> adapte le débit de lecture.
Cette valeur est exprimé en <text:span text:style-name="T4">octets</text:span>.
Plus ce nombre est petit, moins Node utilise de mémoire&#160;:</text:p>
<text:p text:style-name="Code">$ node stream/read.js</text:p><text:p text:style-name="Code">100 octets lus</text:p><text:p text:style-name="Code">100 octets lus</text:p><text:p text:style-name="Code">78 octets lus</text:p><text:p text:style-name="Code">Lecture terminée</text:p>
<text:p text:style-name="TexteCourant">Le mécanisme de flux s&#8217;applique également à l&#8217;écriture.
<text:span text:style-name="T7">Un flux d&#8217;écriture nous permet d&#8217;écrire des données par morceaux</text:span>.
Il correspond à une instance de l&#8217;objet <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-stream.Writeable"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="CodeDansTexte">stream.Writeable</text:span></text:a>.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple suivant illustre une succession d&#8217;écriture dans un même flux&#160;:</text:p>
<text:p text:style-name="CodeTitre">stream/write.js</text:p><text:p text:style-name="Code">const {createWriteStream, readFile} = require('fs');</text:p><text:p text:style-name="Code">const {join} = require('path');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const dest = join(__dirname, 'debug.txt');</text:p><text:p text:style-name="Code">const stream = createWriteStream(dest);<text:s text:c="5"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">stream.on('finish', () =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>readFile(dest, (error, data) =&gt; {<text:s text:c="9"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>console.log(String(data));</text:p><text:p text:style-name="Code"><text:s text:c="2"/>});</text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">stream.write('Hell');<text:s text:c="23"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">stream.write('o Worl');</text:p><text:p text:style-name="Code">stream.end('d!');<text:s text:c="27"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> On crée un <text:span text:style-name="T4">flux d&#8217;écriture</text:span> vers le fichier <text:span text:style-name="CodeDansTexte">stream/debug.txt</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Écrit <text:span text:style-name="CodeDansTexte">Hell</text:span> dans le flux.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Écrit <text:span text:style-name="CodeDansTexte">d!</text:span> dans le flux et signale que nous n&#8217;avons plus de données à transmettre.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> L&#8217;utilisation de <text:span text:style-name="CodeDansTexte">stream.end()</text:span> déclenche l&#8217;événement <text:span text:style-name="CodeDansTexte">finish</text:span>&#160;— nous lisons le contenu du fichier à ce moment là.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Cette écriture par morceaux a pour effet de réduire la pression mémoire
exercée par Node sur le système d&#8217;exploitation <text:span text:style-name="T4">et</text:span> pour le reste du programme.
Ce mécanisme est particulièrement adapté lorsque l&#8217;écriture prendra du temps
ou implique un certain volume de données.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T7">Les flux de lecture et d&#8217;écriture peuvent être combinés</text:span>.
Les données lues depuis une source (<text:span text:style-name="CodeDansTexte">Readable</text:span>) sont redirigées vers
une destination (<text:span text:style-name="CodeDansTexte">Writeable</text:span>) à l&#8217;aide de la fonction <text:span text:style-name="CodeDansTexte">pipe()</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">stream/pipe.js</text:p><text:p text:style-name="Code">const {createReadStream, createWriteStream} = require('fs');</text:p><text:p text:style-name="Code">const {join} = require('path');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const filename_copy = join(__dirname, 'copie.js');</text:p><text:p text:style-name="Code">const source = createReadStream(__filename);<text:s text:c="12"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">const dest = createWriteStream(filename_copy);<text:s text:c="10"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">source.pipe(dest)<text:s text:c="39"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>.on('finish', () =&gt; console.log('Copie terminée !')); <text:span text:style-name="PuceCode">4</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> On crée un flux de lecture.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> On crée un flux d&#8217;écriture.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> On <text:span text:style-name="T4">redirige</text:span> le flux de lecture <text:span text:style-name="T4">vers</text:span> le flux d&#8217;écriture.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> La redirection retourne le flux d&#8217;écriture, que l&#8217;on écoute pour savoir quand il a terminé d&#8217;écrire sur le disque.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Dans cet exemple, nous avons pris deux fichiers comme source de lecture
et destination d&#8217;écriture.
Nous avons assemblé les deux flux avec <text:span text:style-name="CodeDansTexte">pipe()</text:span> puis détecté la fin de la copie.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Unix</text:span> Opérateur <text:span text:style-name="T4">pipe</text:span> (<text:span text:style-name="CodeDansTexte">|</text:span>)</text:h><text:p text:style-name="Remarque">La fonction <text:span text:style-name="CodeDansTexte">stream.pipe()</text:span> correspond littéralement à l&#8217;opérateur Unix <text:span text:style-name="CodeDansTexte">|</text:span>.</text:p>
<text:p text:style-name="Remarque">Les morceaux de données d&#8217;un premier programme sont transmis en entrée à un
second programme.
Ici, le mécanisme s&#8217;applique à des fonctions Node.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;utilisation de <text:span text:style-name="CodeDansTexte">pipe()</text:span> peut paraitre superflue pour copier des fichiers.
À vrai dire, la fonction <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-fs"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="CodeDansTexte">fs.copyFile</text:span></text:a> fait exactement la même chose.<text:line-break/>Le mécanisme de redirection proposé par <text:span text:style-name="CodeDansTexte">pipe()</text:span> est modulaire et composable.</text:p>
<text:p text:style-name="TexteCourant">On peut par exemple diriger une source de données vers <text:span text:style-name="T7">plusieurs flux d&#8217;écriture</text:span>.
En même temps&#160;:</text:p>
<text:p text:style-name="CodeTitre">stream/pipe-multi.js</text:p><text:p text:style-name="Code">const fs = require('fs');</text:p><text:p text:style-name="Code">const {join} = require('path');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const filename_copy = join(__dirname, 'copie.js');</text:p><text:p text:style-name="Code">const read = fs.createReadStream(__filename);</text:p><text:p text:style-name="Code">read.on('end', () =&gt; console.log('Lecture terminée !'));</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">read.pipe(fs.createWriteStream(filename_copy)); <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">read.pipe(process.stdout);<text:s text:c="22"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Écrit une copie du fichier comme dans l&#8217;exemple <text:span text:style-name="CodeDansTexte">stream/pipe.js</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Redirige le contenu de lecture vers la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.std"  text:visited-style-name="Visited_20_Internet_20_Link">sortie standard</text:a> de notre terminal.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Cette technique agit comme une gare de triage&#160;: nous avons la liberté
d&#8217;agir sur les données avant de les envoyer vers leur flux d&#8217;écriture distinct.</text:p>
<text:p text:style-name="TexteCourant">On peut aussi <text:span text:style-name="T7">transformer les contenus à la volée</text:span> en utilisant plusieurs
fois la fonction <text:span text:style-name="CodeDansTexte">pipe()</text:span>.
Les données sont passées à des objets capable de lire et d&#8217;écrire des flux.
C&#8217;est le cas du <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-extras"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">zlib</text:span></text:a>, responsable de compresser et de
décompresser des données&#160;:</text:p>
<text:p text:style-name="CodeTitre">stream/pipe-transform.js</text:p><text:p text:style-name="Code">const {createReadStream} = require('fs');</text:p><text:p text:style-name="Code">const {createGzip} = require('zlib');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">createReadStream(__filename)</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.pipe(createGzip())<text:s text:c="9"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>.pipe(process.stdout);<text:s text:c="6"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Compresse les données à la volée.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Les données compressées sont transmises à la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.std"  text:visited-style-name="Visited_20_Internet_20_Link">sortie standard</text:a>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Cet exemple devrait afficher le contenu de notre fichier source avec une taille
réduite grâce à la compression <text:span text:style-name="T4">gzip</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ node stream/pipe-transform.js</text:p>
<text:p text:style-name="TexteCourant">L&#8217;affichage semble bizarre et c&#8217;est normal&#160;: ce sont des données compressées
au format <text:span text:style-name="T4">gzip</text:span>&#160;— un format de compression libre.</text:p>
<text:p text:style-name="TexteCourant">Le programme Unix <text:span text:style-name="CodeDansTexte">gzip</text:span> sait décoder des données compressées dans ce format.
Il sait aussi les décoder à la volée avec un <text:span text:style-name="T4">pipe</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ node stream/pipe-transform.js | gzip</text:p>
<text:p text:style-name="TexteCourant">Nous avons vu comment transmettre des <text:span text:style-name="T7">flux de données de manière interopérable</text:span>
entre un script Node et un programme externe, entre deux programmes externes
et entre deux scripts Node.</text:p>
<text:bookmark text:name="ref-stream.Readable" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">stream.pipe()</text:span></text:span><text:line-break/><text:tab/>Redirige un flux de lecture vers un flux d&#8217;écriture.</text:p><text:bookmark text:name="ref-stream.Readable" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">stream.on('data')</text:span></text:span><text:line-break/><text:tab/>Déclenché lorsqu&#8217;un morceau de données a été lu.</text:p><text:bookmark text:name="ref-stream.Readable" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">stream.on('error')</text:span></text:span><text:line-break/><text:tab/>Déclenché lorqu&#8217;une erreur se produit.</text:p><text:bookmark text:name="ref-stream.Readable" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">stream.on('end')</text:span></text:span><text:line-break/><text:tab/>Déclenché lorsqu&#8217;il n&#8217;y a plus de données à lire.</text:p><text:bookmark text:name="ref-stream.Readable" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">stream.on('readable')</text:span></text:span><text:line-break/><text:tab/>Déclenché lorsque la lecture de données est prête à démarrer.</text:p>
<text:bookmark text:name="ref-stream.Writeable" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">stream.write()</text:span></text:span><text:line-break/><text:tab/>Écrit des données dans le flux.</text:p><text:bookmark text:name="ref-stream.Writeable" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">stream.end()</text:span></text:span><text:line-break/><text:tab/>Signale que nous n&#8217;avons plus de données à transmettre.</text:p><text:bookmark text:name="ref-stream.Writeable" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">stream.on('drain')</text:span></text:span><text:line-break/><text:tab/>Déclenché lorque la mémoire d&#8217;écriture est vide et prête à accepter
de nouvelles données.</text:p><text:bookmark text:name="ref-stream.Writeable" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">stream.on('error')</text:span></text:span><text:line-break/><text:tab/>Déclenché lorqu&#8217;une erreur se produit.</text:p><text:bookmark text:name="ref-stream.Writeable" /><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">stream.on('finish')</text:span></text:span><text:line-break/><text:tab/>Déclenché lorsqu&#8217;on a clôturé le flux d&#8217;écriture.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> <text:span text:style-name="CodeDansTexte">stream</text:span></text:h><text:p text:style-name="Remarque">La documentation du module <text:span text:style-name="CodeDansTexte">stream</text:span> est disponible sur le site officiel de Node&#160;:
<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://nodejs.org/docs/latest-v10.x/api/stream.html" text:visited-style-name="Visited_20_Internet_20_Link">https://nodejs.org/docs/latest-v10.x/api/stream.html</text:a></text:span></text:p>
<text:bookmark text:name="ref-dautres_modules_pour_aller_plus_loin" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">D&#8217;autres modules pour aller plus loin</text:h><text:p text:style-name="TexteCourant">Node embarque d&#8217;autres modules que ceux listés précédemment.
Ils nécessitent des connaissances sur des sujets bas niveau,
plus proches du matériel et des protocoles réseaux.</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:bookmark text:name="ref-cluster" />module <text:span text:style-name="CodeDansTexte">cluster</text:span></text:span><text:line-break/><text:tab/>Gère la distribution d&#8217;une application sur plusieurs CPU d&#8217;un même ordinateur.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:bookmark text:name="ref-crypto" />module <text:span text:style-name="CodeDansTexte">crypto</text:span></text:span><text:line-break/><text:tab/>Fonctions cryptographiques pour chiffrer, signer et vérifier des données.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:bookmark text:name="ref-dgram" />module <text:span text:style-name="CodeDansTexte">dgram</text:span></text:span><text:line-break/><text:tab/>Création et consommation de ressources UDP.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:bookmark text:name="ref-dns" />module <text:span text:style-name="CodeDansTexte">dns</text:span></text:span><text:line-break/><text:tab/>Fonctions de résolution et de lecture d&#8217;enregistrements DNS.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:bookmark text:name="ref-net" />module <text:span text:style-name="CodeDansTexte">net</text:span></text:span><text:line-break/><text:tab/>Création et consommation de ressources TCP.<text:line-break/>
Les modules <text:span text:style-name="CodeDansTexte">http</text:span>, <text:span text:style-name="CodeDansTexte">https</text:span> et <text:span text:style-name="CodeDansTexte">http2</text:span> se basent dessus.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:bookmark text:name="ref-readline" />module <text:span text:style-name="CodeDansTexte">readline</text:span></text:span><text:line-break/><text:tab/>Manipulation ligne par ligne d&#8217;un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-stream"  text:visited-style-name="Visited_20_Internet_20_Link">stream</text:a>.
Le module est particulièrement utilisé dans des
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-08"  text:visited-style-name="Visited_20_Internet_20_Link">applications en ligne de commande</text:a> (chapitre 8),
pour mettre à jour une barre de progression et animer des éléments d&#8217;affichage.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:bookmark text:name="ref-tty" />module <text:span text:style-name="CodeDansTexte">tty</text:span></text:span><text:line-break/><text:tab/>Gestion d&#8217;interface de terminal en mode texte.
Le module <text:span text:style-name="CodeDansTexte">readline</text:span> se base dessus.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:bookmark text:name="ref-v8" />module <text:span text:style-name="CodeDansTexte">v8</text:span></text:span><text:line-break/><text:tab/>Fonctions de lecture et d&#8217;écriture d&#8217;instructions de la machine virtuelle V8
dans le processus actuel.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:bookmark text:name="ref-vm" />module <text:span text:style-name="CodeDansTexte">vm</text:span></text:span><text:line-break/><text:tab/>Fonctions de création de nouveaux contextes d&#8217;interprétation de la machine virtuelle V8.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:bookmark text:name="ref-zlib" />module <text:span text:style-name="CodeDansTexte">zlib</text:span></text:span><text:line-break/><text:tab/>Fonctions de compression et de décompression de données (Gzip, Inflate/Deflate).<text:line-break/>
Ces formats sont utilisés pour la compression de requêtes HTTP.</text:p>
<text:bookmark text:name="ref-modules" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Créer ses propres modules Node</text:h><text:p text:style-name="TexteCourant">Le chargement des <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-modules-builtin"  text:visited-style-name="Visited_20_Internet_20_Link">modules de base</text:a> nous a aidé à utiliser
des fonctionnalités fournies directement par Node.
Nous pouvons exploiter ce mécanisme pour
<text:span text:style-name="T7">organiser son code dans plusieurs fichiers</text:span>.
C&#8217;est un mécanisme comparable à ce que l&#8217;on retrouve en Python (<text:span text:style-name="CodeDansTexte">import</text:span>),
PHP (<text:span text:style-name="CodeDansTexte">require</text:span>) et Ruby (<text:span text:style-name="CodeDansTexte">require</text:span> et <text:span text:style-name="CodeDansTexte">require_relative</text:span>).</text:p>
<text:bookmark text:name="ref-modules.require" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Importer et exporter des valeurs</text:h><text:p text:style-name="CodeTitre">modules/enfant.js</text:p><text:p text:style-name="Code">const number = 42;</text:p>
<text:p text:style-name="TexteCourant">Le fichier d&#8217;exemple <text:span text:style-name="CodeDansTexte">modules/enfant.js</text:span> contient une variable, <text:span text:style-name="CodeDansTexte">number</text:span>.
Essayons de la réutiliser dans le fichier <text:span text:style-name="CodeDansTexte">modules/parent.js</text:span>
à l&#8217;aide de la fonction <text:span text:style-name="CodeDansTexte">require()</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">modules/parent.js</text:p><text:p text:style-name="Code">const enfant = require('./enfant.js');<text:s text:c="4"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(enfant.number);<text:s text:c="15"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">console.log(enfant);<text:s text:c="22"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Contrairement aux <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-modules-builtin"  text:visited-style-name="Visited_20_Internet_20_Link">modules de base</text:a>, on passe un <text:span text:style-name="T7">chemin relatif au fichier courant</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Est-ce que cela affichera la valeur de la variable <text:span text:style-name="CodeDansTexte">number</text:span>&#160;?<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Mais au fond, que contient notre variable <text:span text:style-name="CodeDansTexte">enfant</text:span>&#160;?<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Exécutons le fichier <text:span text:style-name="CodeDansTexte">modules/parent.js</text:span> avec Node pour en avoir le cœur net&#160;:</text:p>
<text:p text:style-name="Code">$ node modules/parent.js</text:p><text:p text:style-name="Code">undefined</text:p><text:p text:style-name="Code">{}</text:p>
<text:p text:style-name="TexteCourant">De là nous pouvons en tirer un apprentissage important&#160;:
<text:span text:style-name="T7">on ne peut pas voir ce qu&#8217;il y a <text:span text:style-name="T4">dans</text:span> un module depuis <text:span text:style-name="T4">l&#8217;extérieur</text:span></text:span>.</text:p>
<text:p text:style-name="TexteCourant">Choisissons maintenant ce que l&#8217;on souhaite exporter en assignant
la valeur de notre choix à <text:span text:style-name="CodeDansTexte">module.exports</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">modules/enfant-export.js</text:p><text:p text:style-name="Code">const number = 42;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">module.exports = number;</text:p>
<text:p text:style-name="TexteCourant">Comment est-ce que ça se traduit lorsqu&#8217;on l&#8217;appelle avec <text:span text:style-name="CodeDansTexte">require()</text:span>&#160;?</text:p>
<text:p text:style-name="CodeTitre">modules/parent-export.js</text:p><text:p text:style-name="Code">const enfant = require('./enfant-export.js');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(enfant.number);<text:s text:c="15"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(enfant);<text:s text:c="22"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">undefined</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">42</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T7"><text:span text:style-name="CodeDansTexte">module.exports</text:span> rend visible ce qui est exporté par un module</text:span>.
Les éléments exportés sont visibles depuis l&#8217;extérieur.
Par défaut, <text:span text:style-name="CodeDansTexte">module.exports</text:span> est un objet.</text:p>
<text:p text:style-name="TexteCourant">Essayons maintenant d&#8217;exporter plusieurs valeurs en une seule fois&#160;:</text:p>
<text:p text:style-name="CodeTitre">modules/enfant-export-multiple.js</text:p><text:p text:style-name="Code">const number = 42;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">module.exports.number = number;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">module.exports.random = (limit = 100) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>return Math.floor(Math.random() * limit)</text:p><text:p text:style-name="Code">};</text:p>
<text:p text:style-name="TexteCourant">Nous avons créé deux nouvelles valeurs&#160;: <text:span text:style-name="CodeDansTexte">number</text:span> (un nombre) et
<text:span text:style-name="CodeDansTexte">random</text:span> (une fonction).</text:p>
<text:p text:style-name="CodeTitre">modules/parent-export-multiple.js</text:p><text:p text:style-name="Code">const enfant = require('./enfant-export-multiple.js');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(enfant.number);<text:s text:c="15"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(enfant.random());<text:s text:c="13"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">module.exports = enfant.random;<text:s text:c="11"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">42</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche un nombre aléatoire entre 0 et 100.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Réexporte la fonction <text:span text:style-name="CodeDansTexte">enfant.number</text:span>.<text:line-break/></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Raccourci</text:span> Exporter un objet</text:h><text:p text:style-name="Remarque">L&#8217;utilisation de la syntaxe d&#8217;objet raccourcie évite la répétition
du nom des variables lors de l&#8217;export.</text:p>
<text:p text:style-name="RemarqueCode">const number = 42;</text:p><text:p text:style-name="RemarqueCode"></text:p><text:p text:style-name="RemarqueCode">const random = (limit = 100) =&gt; {</text:p><text:p text:style-name="RemarqueCode"><text:s text:c="2"/>return Math.floor(Math.random() * limit);</text:p><text:p text:style-name="RemarqueCode">};</text:p><text:p text:style-name="RemarqueCode"></text:p><text:p text:style-name="RemarqueCode">module.exports = {number, random};<text:s text:c="10"/><text:span text:style-name="PuceCode">1</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Liste des valeurs retournée par l&#8217;objet <text:span text:style-name="CodeDansTexte">module.exports</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">En résumé, <text:span text:style-name="T7">pour Node tout fichier <text:span text:style-name="CodeDansTexte">.js</text:span> est un module</text:span>.
Le mécanisme d&#8217;import et d&#8217;export est basé sur des chemins de fichiers.
Si on n&#8217;utilise pas de chemin de fichiers, Node pense que l&#8217;on fait
référence à un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-modules-builtin"  text:visited-style-name="Visited_20_Internet_20_Link">module de base</text:a> ou à un
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-modules"  text:visited-style-name="Visited_20_Internet_20_Link">module npm</text:a>
(cf. <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-05"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 5</text:a>).</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Histoire</text:span> Modules <text:span text:style-name="T4">CommonJS</text:span></text:h><text:p text:style-name="Remarque">Le mécanisme de modules implémenté dans Node est <text:span text:style-name="T4">basé sur</text:span> la
spécification <text:span text:style-name="T4">CommonJS</text:span>, à peu de choses près.</text:p>
<text:p text:style-name="Remarque">Pour en savoir plus&#160;: <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://www.commonjs.org/specs/modules/1.0/" text:visited-style-name="Visited_20_Internet_20_Link">http://www.commonjs.org/specs/modules/1.0/</text:a></text:span>.</text:p>
<text:bookmark text:name="ref-aller_plus_loin_avec_require" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Aller plus loin avec <text:span text:style-name="">require()</text:span></text:h><text:p text:style-name="TexteCourant">Lorsqu&#8217;on fait appel à la fonction <text:span text:style-name="CodeDansTexte">require()</text:span>, Node effectue la <text:span text:style-name="T7">liste d&#8217;actions</text:span> suivantes&#160;:</text:p>
<text:p text:style-name="ListeANumero">1.<text:tab/>résolution du chemin vers le module en question</text:p><text:p text:style-name="ListeANumero">2.<text:tab/>lecture du fichier</text:p><text:p text:style-name="ListeANumero">3.<text:tab/>interprétation du code</text:p><text:p text:style-name="ListeANumero">4.<text:tab/>exécution du code</text:p><text:p text:style-name="ListeANumero">5.<text:tab/>retourne la valeur de <text:span text:style-name="CodeDansTexte">module.exports</text:span></text:p>
<text:p text:style-name="TexteCourant">L&#8217;utilisation de <text:span text:style-name="CodeDansTexte">require()</text:span> est <text:span text:style-name="T7">synchrone</text:span> et <text:span text:style-name="T7">bloquante</text:span>.
Si l&#8217;exécution du code dans le module chargé prend du temps
—&#160;code <text:span text:style-name="T4">lent</text:span>, accès à une ressource distante&#160;— le chargement
du module en prendra un coup.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="CodeDansTexte">require()</text:span> permet de <text:span text:style-name="T7">charger 3 types de modules</text:span>&#160;:</text:p>
<text:p text:style-name="ListeANumero">1.<text:tab/>des <text:span text:style-name="T7">fichiers relatifs au module actuel</text:span><text:line-break/>
<text:span text:style-name="CodeDansTexte">require('./module.js')</text:span> cherchera le fichier <text:span text:style-name="CodeDansTexte">module.js</text:span> dans le <text:span text:style-name="T4">répertoire courant</text:span>.
<text:span text:style-name="CodeDansTexte">require('../module.js')</text:span> cherchera <text:span text:style-name="CodeDansTexte">module.js</text:span> dans le <text:span text:style-name="T4">répertoire parent</text:span>.</text:p><text:p text:style-name="ListeANumero">2.<text:tab/>des <text:span text:style-name="T7">modules Node</text:span><text:line-break/>
Ils sont disponibles avec chaque installation de Node.
On en parle plus en détail dans la section <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-modules-builtin"  text:visited-style-name="Visited_20_Internet_20_Link">modules Node</text:a>
de ce même chapitre.</text:p><text:p text:style-name="ListeANumero">3.<text:tab/>des <text:span text:style-name="T7">modules npm</text:span><text:line-break/>
Ils sont disponibles avec une étape d&#8217;installation supplémentaire.
On en parle plus en détails dans le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-05"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 5</text:a>
consacré à <text:span text:style-name="T4">npm</text:span>.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T7">Node met les modules en cache</text:span>.
Si on inclut deux fois le même module, le deuxième import ira directement
à la dernière étape de la <text:span text:style-name="T4">liste d&#8217;actions</text:span>.
Ça implique aussi que si le module modifie une de ses variables privée,
cette modification impactera le deuxième import.</text:p>
<text:p text:style-name="TexteCourant">Voici un module illustrant une variable privée et une variable exportée&#160;:</text:p>
<text:p text:style-name="CodeTitre">modules/increment.js</text:p><text:p text:style-name="Code">let counter = 0;<text:s text:c="22"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const increment = () =&gt; ++counter;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">module.exports = increment;<text:s text:c="11"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Variable privée.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> <text:span text:style-name="CodeDansTexte">increment</text:span> est rendue publique à cet endroit&#160;— la fonction incrémente la variable privée <text:span text:style-name="CodeDansTexte">counter</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Nous allons importer ce module par deux fois, dans deux variables différentes&#160;:</text:p>
<text:p text:style-name="CodeTitre">modules/double-import.js</text:p><text:p text:style-name="Code">const first = require('./increment.js');</text:p><text:p text:style-name="Code">const second = require('./increment.js');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(first());<text:s text:c="3"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(first());<text:s text:c="3"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">console.log(second());<text:s text:c="2"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">1</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">2</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">1</text:span> ou <text:span text:style-name="CodeDansTexte">3</text:span>&#160;?<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Quel est le verdict à votre avis&#160;?
Rien ne vaut une vérification, quitte à remettre en question
notre avis initial&#160;:</text:p>
<text:p text:style-name="Code">$ node modules/double-import.js</text:p><text:p text:style-name="Code">1</text:p><text:p text:style-name="Code">2</text:p><text:p text:style-name="Code">3</text:p>
<text:p text:style-name="TexteCourant">Il faut garder cette information en tête lorsqu&#8217;on importe un module.
Sans oublier que ce mécanisme se transforme en atout afin de partager
une variable entre plusieurs modules.
Pratique dans le cas d&#8217;un <text:span text:style-name="T4">cache de données</text:span> ou d&#8217;une <text:span text:style-name="T4">configuration partagée</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Enfin, plusieurs <text:span text:style-name="T7">problèmes</text:span> peuvent apparaitre lors du chargement d&#8217;un module&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">le chemin vers le module est erroné&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">le module contient une erreur de syntaxe.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">Node lancera une <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-errors"  text:visited-style-name="Visited_20_Internet_20_Link">exception</text:a> et
le programme s&#8217;arrêtera aussitôt.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> Module <text:span text:style-name="T4">modules</text:span></text:h><text:p text:style-name="Remarque">L&#8217;intégralité des variables, fonctions et classes du module <text:span text:style-name="CodeDansTexte">modules</text:span>
est documentée sur le site web du projet Node.
La documentation contient des informations à jour et qui ne sont pas
forcément listées dans cet ouvrage.</text:p>
<text:p text:style-name="Remarque"><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://nodejs.org/docs/latest-v10.x/api/modules.html" text:visited-style-name="Visited_20_Internet_20_Link">https://nodejs.org/docs/latest-v10.x/api/modules.html</text:a></text:span></text:p>
<text:bookmark text:name="ref-esm" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Le futur : les modules ECMAScript</text:h><text:p text:style-name="TexteCourant">Pendant que le mécanisme de modules de Node montait en puissance,
les navigateurs web étaient en attente d&#8217;une solution native.
La spécification des modules ECMAScript a été validée en 2013
mais les navigateurs ont tardé à implémenter le mécanisme.</text:p>
<text:p text:style-name="TexteCourant">La plupart d&#8217;entre eux ont implémenté les modules ECMAScript en 2017.
C&#8217;est le cas du navigateur web Chrome et de
sa <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-v8"  text:visited-style-name="Visited_20_Internet_20_Link">machine virtuelle V8</text:a>.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Attention</text:span> Fonctionnalité expérimentale</text:h><text:p text:style-name="Remarque">Si la syntaxe des modules ECMAScript est standardisée,
ce n&#8217;est pas encore aussi stable du côté de Node.</text:p>
<text:p text:style-name="Remarque">Les modules ECMAScript sont suffixés de l&#8217;extension <text:span text:style-name="CodeDansTexte">.mjs</text:span>
et nécessitent l&#8217;utilisation de l'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-options"  text:visited-style-name="Visited_20_Internet_20_Link">option de démarrage</text:a>
<text:span text:style-name="CodeDansTexte">--experimental-modules</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Reprenons l&#8217;exemple <text:span text:style-name="CodeDansTexte">modules/increment.js</text:span> pour le
transformer en module ECMAScript&#160;:</text:p>
<text:p text:style-name="CodeTitre">modules/increment.mjs</text:p><text:p text:style-name="Code">let counter = 0;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">export default () =&gt; ++counter;<text:s text:c="11"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">export const reset = () =&gt; counter = 0;<text:s text:c="3"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Export <text:span text:style-name="T4">par défaut</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Export <text:span text:style-name="T4">nommé</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">La syntaxe <text:span text:style-name="CodeDansTexte">export</text:span> sert à exporter des variables.
Elle se combine avec <text:span text:style-name="CodeDansTexte">import</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">modules/ecmascript.mjs</text:p><text:p text:style-name="Code">import increment from './increment.js';<text:s text:c="5"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(increment());</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> On n&#8217;importe ici que la <text:span text:style-name="T4">valeur par défaut</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Il ne nous reste maintenant plus qu&#8217;à exécuter notre script <text:span text:style-name="CodeDansTexte">.mjs</text:span>
pour observer le résultat.
On notera l&#8217;utilisation de <text:span text:style-name="CodeDansTexte">--experimental-modules</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ node --experimental-modules modules/ecmascript.mjs</text:p><text:p text:style-name="Code">(node:35074) ExperimentalWarning: The ESM module loader is experimental.</text:p><text:p text:style-name="Code">1</text:p>
<text:p text:style-name="TexteCourant">Reprenons cet exemple pour <text:span text:style-name="T4">importer plusieurs exports d&#8217;un coup</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">modules/ecmascript-multiple.mjs</text:p><text:p text:style-name="Code">import increment, {reset} from './increment.mjs'; <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">increment();</text:p><text:p text:style-name="Code">console.log(increment());</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">reset();<text:s text:c="42"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">console.log(increment());</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> On importe la <text:span text:style-name="T4">valeur par défaut</text:span> ainsi qu&#8217;une <text:span text:style-name="T4">valeur nommée</text:span>&#160;— c&#8217;est particulièrement pratique pour sélectionner avec finesse ce que l&#8217;on veut utiliser d&#8217;un module.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> La fonction <text:span text:style-name="CodeDansTexte">reset</text:span> remet le compteur à zéro.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">On notera au passage qu&#8217;on utilise la
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-object-destructuring"  text:visited-style-name="Visited_20_Internet_20_Link">destructuration d&#8217;objet</text:a>
pour extraire un <text:span text:style-name="T4">export nommé</text:span> depuis un module ECMAScript.</text:p>
<text:p text:style-name="Code">$ node --experimental-modules modules/ecmascript-multiple.mjs</text:p><text:p text:style-name="Code">(node:35074) ExperimentalWarning: The ESM module loader is experimental.</text:p><text:p text:style-name="Code">2</text:p><text:p text:style-name="Code">1</text:p>
<text:p text:style-name="TexteCourant">La fonction <text:span text:style-name="CodeDansTexte">reset</text:span> a bien remis à zéro le compteur entre temps.
Objectif accompli&#160;!</text:p>
<text:p text:style-name="TexteCourant">Résumons les différences notables avec le mécanisme de modules Node&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">tous les appels à <text:span text:style-name="CodeDansTexte">import</text:span> doivent se faire en début de fichier</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">on ne peut pas utiliser <text:span text:style-name="CodeDansTexte">import</text:span> de manière dynamique
(dans un <text:span text:style-name="CodeDansTexte">if/else</text:span> par exemple)</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">on peut exporter une <text:span text:style-name="T4">variable par défaut</text:span> <text:span text:style-name="T7">et</text:span> plusieurs <text:span text:style-name="T4">variables nommées</text:span></text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">on peut importer des modules Node depuis un module ECMAScript&#160;—
l&#8217;inverse n&#8217;est pas vrai</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">les fichiers doivent être suffixés par <text:span text:style-name="CodeDansTexte">.mjs</text:span></text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">Ce dernier point est le plus embêtant car il ralentit l&#8217;interopérabilité
entre les scripts destinés au développement web front-end et les scripts Node.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;histoire nous dira si les modalités s&#8217;assoupliront avec le temps.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">npm</text:span> Module <text:span text:style-name="CodeDansTexte">esm</text:span></text:h><text:p text:style-name="Remarque">Le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-modules"  text:visited-style-name="Visited_20_Internet_20_Link">module npm</text:a> <text:span text:style-name="CodeDansTexte">esm</text:span>
(<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/esm" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/esm</text:a></text:span>) a pris le parti de déblayer le chemin
de l&#8217;interopérabilité.
Il suffit de charger le module <text:span text:style-name="CodeDansTexte">esm</text:span> avant de démarrer un script Node,
peu importe son mécanisme de chargement de modules&#160;:
<text:span text:style-name="CodeDansTexte">esm</text:span> rendra le chargement des modules totalement transparent.</text:p>
<text:p text:style-name="RemarqueCode">$ node -r esm modules/ecmascript.js</text:p><text:p text:style-name="RemarqueCode">1</text:p><text:p text:style-name="RemarqueCode">$ node -r esm modules/ecmascript.mjs</text:p><text:p text:style-name="RemarqueCode">1</text:p>
<text:p text:style-name="Remarque">Pour en savoir plus sur l&#8217;option <text:span text:style-name="CodeDansTexte">-r</text:span>, rendez-vous
dans la section <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-require"  text:visited-style-name="Visited_20_Internet_20_Link">précharger un module</text:a></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> Modules ECMAScript</text:h><text:p text:style-name="Remarque">L&#8217;intégralité des fonctionnalités des modules ECMAScript
est documentée sur le site web du projet Node.
La documentation contient des informations à jour et qui ne sont pas
forcément listées dans cet ouvrage.</text:p>
<text:p text:style-name="Remarque"><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://nodejs.org/docs/latest-v10.x/api/esm.html" text:visited-style-name="Visited_20_Internet_20_Link">https://nodejs.org/docs/latest-v10.x/api/esm.html</text:a></text:span></text:p>
<text:bookmark text:name="ref-errors" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">S&#8217;en sortir quand ça ne se passe pas comme prévu</text:h><text:p text:style-name="TexteCourant">On fait toutes et tous des erreurs.
Du coup forcément, notre code va mener à des plantages applicatifs.
La nature des causes varie et impacte notre lecture des messages d&#8217;erreur.</text:p>
<text:p text:style-name="TexteCourant">Cette section a pour intention de nous aider à prendre confiance dans ce qu&#8217;on
voit et de piocher l&#8217;information qui va nous aider à résoudre le problème.</text:p>
<text:bookmark text:name="ref-une_erreur_est_nichée_dans_notre_code" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Une erreur est nichée dans notre code</text:h><text:p text:style-name="TexteCourant">Il y a 2 familles d&#8217;erreurs dans du code ECMAScript&#160;: les <text:span text:style-name="T7">erreurs de syntaxe</text:span>
et les <text:span text:style-name="T7">erreurs d&#8217;exécution</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Dans tous les cas, Node <text:span text:style-name="T7">lance une exception</text:span> complétée d&#8217;une <text:span text:style-name="T7">trace d&#8217;erreurs</text:span>.
Le but est de comprendre où l&#8217;interpréteur se prend les pieds dans le tapis
et quel est le chemin parcouru au sein du code pour y parvenir.</text:p>
<text:p text:style-name="TexteCourant">Commençons avec une <text:span text:style-name="T4">erreur de syntaxe</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ node <text:span text:style-name="CodeExergue">syntax-error.js</text:span></text:p><text:p text:style-name="Code">console.log(<text:span text:style-name="CodeExergue">'oups j'</text:span>ai fait une erreur de guillemets);</text:p><text:p text:style-name="Code"><text:s text:c="12"/>^^^^^^^^</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:span text:style-name="CodeExergue">SyntaxError</text:span>: <text:span text:style-name="CodeExergue">missing ) after argument list</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>at new Script (vm.js:74:7)</text:p><text:p text:style-name="Code"><text:s text:c="4"/>at createScript (vm.js:246:10)</text:p><text:p text:style-name="Code"><text:s text:c="4"/>at Object.runInThisContext (vm.js:298:10)</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T7">Une erreur de syntaxe est immédiate</text:span>.
Node la détecte lorsqu&#8217;il <text:span text:style-name="T4">parse</text:span> notre code.</text:p>
<text:p text:style-name="TexteCourant">Dans l&#8217;exemple précédent, Node indique qu&#8217;il manque une parenthèse après le
deuxième guillemet, car c&#8217;est le symbole que l&#8217;interpréteur attend.<text:line-break/>Pourquoi Node attend-il une parenthèse&#160;?
Car le guillemet indique une intention incorrecte&#160;: on ne veut pas qu&#8217;il
signifie la fin de la chaîne mais qu&#8217;il représente un caractère apostrophe dans
la chaîne.</text:p>
<text:p text:style-name="TexteCourant">La correction à entreprendre ne sera pas d&#8217;ajouter une parenthèse après le
guillemet mais bien de l'<text:span text:style-name="T4">échapper</text:span> en le préfixant d&#8217;un caractère <text:span text:style-name="CodeDansTexte">\</text:span>.
Node l&#8217;interprétera alors comme un caractère.</text:p>
<text:p text:style-name="TexteCourant">Penchons-nous à présent sur les <text:span text:style-name="T4">erreurs d&#8217;exécution</text:span>,
<text:span text:style-name="T7">provoquée lorsque le code est exécuté</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ node process/exit-error.js</text:p><text:p text:style-name="Code">console.log(<text:span text:style-name="CodeExergue">jenexistepas</text:span>);</text:p><text:p text:style-name="Code"><text:s text:c="12"/>^</text:p><text:p text:style-name="Code"><text:span text:style-name="CodeExergue">ReferenceError</text:span>: <text:span text:style-name="CodeExergue">jenexistepas</text:span> <text:span text:style-name="CodeExergue">is not defined</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>at Object.&lt;anonymous&gt; (/.../chapter-04/examples/process/<text:span text:style-name="CodeExergue">exit-error.js</text:span>:<text:span text:style-name="CodeExergue">5</text:span>:13)</text:p><text:p text:style-name="Code"><text:s text:c="4"/>at Module._compile (module.js:643:30)</text:p>
<text:p text:style-name="TexteCourant">Le marqueur <text:span text:style-name="CodeDansTexte">^</text:span> indique l&#8217;emplacement où le problème est rencontré.
La ligne en-dessous documente le <text:span text:style-name="T4">type d&#8217;erreur</text:span> (<text:span text:style-name="CodeDansTexte">ReferenceError</text:span>)
en précisant ce qui n&#8217;est pas défini (la variable <text:span text:style-name="CodeDansTexte">jenexistepas</text:span>).<text:line-break/>La notation <text:span text:style-name="CodeDansTexte">exit-error.js:5:13</text:span> indique que l&#8217;origine de l&#8217;erreur
se trouve à la <text:span text:style-name="T4">ligne 5</text:span> du fichier <text:span text:style-name="CodeDansTexte">exit-error.js</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Comment y remédier&#160;?
En vérifiant si on appelle bien la bonne variable ou en la créant
avec la valeur attendue le cas échéant.</text:p>
<text:p text:style-name="TexteCourant">Les erreurs d&#8217;exécution sont pernicieuses elles sont parfois
provoquées après le démarrage de l&#8217;application.
Dans, elle se produit deux secondes après le démarrage du script&#160;:</text:p>
<text:p text:style-name="Code">$ node runtime-error.js</text:p><text:p text:style-name="Code">setTimeout(() =&gt; console.log(<text:span text:style-name="CodeExergue">secret.toLocaleUperCase()</text:span>), 2000);</text:p><text:p text:style-name="Code"><text:s text:c="36"/>^</text:p><text:p text:style-name="Code"><text:span text:style-name="CodeExergue">TypeError</text:span>: <text:span text:style-name="CodeExergue">secret.toLocaleUperCase</text:span> <text:span text:style-name="CodeExergue">is not a function</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>at Timeout.setTimeout [as _onTimeout] (/.../chapter-04/examples/runtime-error.js:4:37)</text:p>
<text:p text:style-name="TexteCourant">La notation <text:span text:style-name="CodeDansTexte">runtime-error.js:4:37</text:span> indique que l&#8217;origine de l&#8217;erreur
se trouve à la <text:span text:style-name="T4">ligne 4</text:span> du fichier <text:span text:style-name="CodeDansTexte">runtime-error.js</text:span>, <text:span text:style-name="T4">colonne 37</text:span>.
Le type d&#8217;erreur (<text:span text:style-name="CodeDansTexte">TypeError</text:span>) signifie qu&#8217;on cherche à manipuler une variable
de manière <text:span text:style-name="T7">inattendue par rapport à son type</text:span>.
Le message d&#8217;erreur nous précise qu&#8217;on appelle comme une fonction quelque chose
qui ne serait donc pas une fonction.</text:p>
<text:p text:style-name="TexteCourant">Pourquoi <text:span text:style-name="CodeDansTexte">toLocaleUperCase</text:span> n&#8217;est pas une fonction&#160;?
Une typo s&#8217;est introduite dans notre code&#160;: <text:span text:style-name="CodeDansTexte">secret.toLocaleUperCase</text:span> vaut <text:span text:style-name="CodeDansTexte">undefined</text:span>.
L&#8217;erreur serait corrigée en utilisant <text:span text:style-name="CodeDansTexte">secret.toLocaleUpperCase</text:span> (avec 2 <text:span text:style-name="T4">p</text:span>).</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">npm</text:span> Module <text:span text:style-name="CodeDansTexte">eslint</text:span></text:h><text:p text:style-name="Remarque">Le module npm <text:span text:style-name="CodeDansTexte">eslint</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/eslint" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/eslint</text:a></text:span>)
est un vérificateur syntaxique.
Son intention est de s&#8217;accorder sur le style d&#8217;écriture et d&#8217;éviter des
effets de bord du langage
qui causent des problèmes difficiles à déceler.</text:p>
<text:p text:style-name="Remarque">On apprendra à le configurer dans l'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-eslint"  text:visited-style-name="Visited_20_Internet_20_Link">annexe A</text:a>.</text:p>
<text:p text:style-name="TexteCourant">Les erreurs affichées affichent des informations importantes.
Si elles n&#8217;indiquent pas forcément le chemin de résolution évident,
elles demandent à ce qu&#8217;on cherche à <text:span text:style-name="T7">comprendre la nature de l&#8217;erreur</text:span>.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">npm</text:span> Module <text:span text:style-name="CodeDansTexte">pretty-error</text:span></text:h><text:p text:style-name="Remarque">Le module npm <text:span text:style-name="CodeDansTexte">pretty-error</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/pretty-error" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/pretty-error</text:a></text:span>) enjolive
l&#8217;affichage des erreurs.
Il suffit de l&#8217;installer, de le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-require"  text:visited-style-name="Visited_20_Internet_20_Link">précharger</text:a> et
d&#8217;exécuter un script pour en bénéficier.</text:p>
<text:p text:style-name="RemarqueCode">$ node -r pretty-error/start process/exit-error.js</text:p>
<text:p text:style-name="Remarque">On apprendra au <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-05"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 5</text:a> comment installer
des modules npm.</text:p>
<text:bookmark text:name="ref-une_erreur_est_retournée_dans_un_callback" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Une erreur est retournée dans un <text:span text:style-name="T4">callback</text:span></text:h><text:p text:style-name="TexteCourant">La fonction de <text:span text:style-name="T4">callback</text:span> est un des moyen de retourner le résultat
d&#8217;une exécution asynchrone.
Par convention, le <text:span text:style-name="T7">premier paramètre est une erreur</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Ce paramètre est nul (<text:span text:style-name="CodeDansTexte">null</text:span>) ou indéfini (<text:span text:style-name="CodeDansTexte">undefined</text:span>) lorsqu&#8217;il n&#8217;y a pas eu
d&#8217;erreurs en cours de route.
En revanche ce paramètre contient un <text:span text:style-name="T7">objet d&#8217;erreur</text:span> lorsque un problème
s&#8217;est produit&#160;:</text:p>
<text:p text:style-name="CodeTitre">errors/callback.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {readFile} = require('fs');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">readFile('je-n-existe-pas.txt', (error, content) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>if (error) {<text:s text:c="42"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>console.error(error.message);<text:s text:c="23"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>console.error(error);<text:s text:c="31"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>return;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(String(content));</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> On vérifie la présence de l&#8217;erreur.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> <text:span text:style-name="CodeDansTexte">error.message</text:span> contient une raison textuelle de l&#8217;erreur.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affichage de l&#8217;objet d&#8217;erreur complet.<text:line-break/></text:p>
<text:p text:style-name="Code">$ node errors/callback.js</text:p><text:p text:style-name="Code"><text:span text:style-name="CodeExergue">ENOENT</text:span>: <text:span text:style-name="CodeExergue">no such file or directory</text:span>, open '<text:span text:style-name="CodeExergue">je-n-existe-pas.txt</text:span>'</text:p><text:p text:style-name="Code">{ Error: ENOENT: no such file or directory, open 'je-n-existe-pas.txt'</text:p><text:p text:style-name="Code"><text:s text:c="2"/>errno: -2,</text:p><text:p text:style-name="Code"><text:s text:c="2"/>code: 'ENOENT',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>syscall: 'open',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>path: 'je-n-existe-pas.txt' }</text:p>
<text:p text:style-name="TexteCourant">L&#8217;erreur affichée nous précise que le fichier demandé n&#8217;existe pas.
Son code (<text:span text:style-name="CodeDansTexte">ENOENT</text:span>) signifie la même chose mais a l&#8217;avantage d&#8217;être plus
facile à vérifier dans une condition.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;objet <text:span text:style-name="CodeDansTexte">error</text:span> donné en argument de la fonction de callback est utile
pour vérifier des détails précis de l&#8217;erreur et mieux interagir avec
au niveau du code.
Nous y retrouvons le type d&#8217;erreur (<text:span text:style-name="CodeDansTexte">errno</text:span>),
la référence vers la ressource concernée (<text:span text:style-name="CodeDansTexte">path</text:span>) et le nom de la fonction
système utilisée par Node pour accéder à la ressource (<text:span text:style-name="CodeDansTexte">syscall</text:span>).</text:p>
<text:p text:style-name="TexteCourant">La valeur et la signification du code d&#8217;erreur varie en fonction
du module Node employé à ce moment là.
Le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-fs"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">fs</text:span></text:a> ne retourne pas les mêmes codes
que le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-http"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">http</text:span></text:a>.<text:line-break/>Les appels à des ressources système retournent
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-errors.system"  text:visited-style-name="Visited_20_Internet_20_Link">une variété de codes d&#8217;erreur</text:a>.</text:p>
<text:p text:style-name="TexteCourant">La décision nous appartient de savoir quoi faire quand l&#8217;erreur se produit.
Doit-on arrêter le programme (avec <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.exit"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="CodeDansTexte">process.exit()</text:span></text:a>)&#160;?
Est-ce que ce n&#8217;est pas grave et on passe à la suite&#160;?
Ou peut-être que ce fichier était censé exister et qu&#8217;on devrait
notifier l&#8217;équipe de maintenance et
afficher une page d&#8217;erreur côté utilisateur.</text:p>
<text:bookmark text:name="ref-une_erreur_est_retournée_dans_une_promesse" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Une erreur est retournée dans une promesse</text:h><text:p text:style-name="TexteCourant">La gestion d&#8217;erreurs des <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-promise"  text:visited-style-name="Visited_20_Internet_20_Link">promesses</text:a>
s&#8217;effectue à l&#8217;aide de la fonction <text:span text:style-name="CodeDansTexte">.catch()</text:span>.</text:p>
<text:p text:style-name="CodeTitre">errors/promise.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">Promise.resolve('ok')</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.then((message) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>throw new Error('Oops !');<text:s text:c="22"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>})</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.catch((error) =&gt; console.error(error));<text:s text:c="10"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> On génère une erreur dans notre code.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> L&#8217;objet d&#8217;erreur est transmis à la prochaine occurrence de <text:span text:style-name="CodeDansTexte">.catch()</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Le contenu de l&#8217;erreur est accessible dans le premier et seul argument de
la fonction de <text:span text:style-name="T4">callback</text:span> passée à <text:span text:style-name="CodeDansTexte">.catch()</text:span>.</text:p>
<text:p text:style-name="Code">$ node errors/promise.js</text:p><text:p text:style-name="Code">Error: <text:span text:style-name="CodeExergue">Oops !</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>at <text:span text:style-name="CodeExergue">Promise.resolve</text:span>.<text:span text:style-name="CodeExergue">then</text:span> (/.../chapter-04/examples/errors/<text:span text:style-name="CodeExergue">promise.js</text:span>:<text:span text:style-name="CodeExergue">5</text:span>:11)</text:p><text:p text:style-name="Code"><text:s text:c="4"/>at process._tickCallback (internal/process/next_tick.js:178:7)</text:p>
<text:p text:style-name="TexteCourant">La trace indique que l&#8217;erreur s&#8217;est produite à la ligne 5,
dans la méthode <text:span text:style-name="CodeDansTexte">.then()</text:span> suite à l&#8217;utilisation de <text:span text:style-name="CodeDansTexte">Promise.resolve()</text:span>.</text:p>
<text:p text:style-name="TexteCourant">L'<text:span text:style-name="T7">utilisation multiple de <text:span text:style-name="CodeDansTexte">.catch()</text:span></text:span> nous aide à gérer finement les erreurs&#160;:</text:p>
<text:p text:style-name="CodeTitre">errors/promise-chain.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">Promise.reject(new Error('Oops !'))</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.catch((error) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>console.error('Erreur : %s', error.message);<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>return 'Aaah';<text:s text:c="32"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>})</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.then((message) =&gt; console.log(message))<text:s text:c="8"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>.catch((error) =&gt; console.error(error));<text:s text:c="8"/><text:span text:style-name="PuceCode">4</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> On gère l&#8217;erreur en la signalant dans le terminal.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Le <text:span text:style-name="T4">callback</text:span> d&#8217;erreur a la possibilité de retourner un résultat.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Ce résultat est transmis à la prochaine occurrence de <text:span text:style-name="CodeDansTexte">.then()</text:span>.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Dans ce cas, le dernier <text:span text:style-name="CodeDansTexte">.catch()</text:span> n&#8217;affiche rien car nous n&#8217;avons pas rencontré d&#8217;autre erreur entre temps.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">L&#8217;absence de <text:span text:style-name="CodeDansTexte">.catch()</text:span> provoque un plantage applicatif et le délenchement
de l'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.on"  text:visited-style-name="Visited_20_Internet_20_Link">événement de processus</text:a> <text:span text:style-name="CodeDansTexte">unhandledRejection</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">errors/promise-no-catch.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">Promise.resolve('ok')</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.then(() =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>throw new Error('Oops !');</text:p><text:p text:style-name="Code"><text:s text:c="2"/>});</text:p>
<text:p text:style-name="Code">$ node errors/promise-no-catch.js</text:p><text:p text:style-name="Code">(node:27412) <text:span text:style-name="CodeExergue">UnhandledPromiseRejectionWarning</text:span>: Error: Oops !</text:p><text:p text:style-name="Code"><text:s text:c="4"/>at <text:span text:style-name="CodeExergue">Promise.resolve</text:span>.<text:span text:style-name="CodeExergue">then</text:span> (/.../chapter-04/examples/errors/<text:span text:style-name="CodeExergue">promise-no-catch.js</text:span>:<text:span text:style-name="CodeExergue">5</text:span>:11)</text:p><text:p text:style-name="Code"><text:s text:c="4"/>at process._tickCallback (internal/process/next_tick.js:178:7)</text:p>
<text:p text:style-name="TexteCourant">L&#8217;affichage de <text:span text:style-name="CodeDansTexte">UnhandledPromiseRejectionWarning</text:span> indique que l&#8217;erreur s&#8217;est
produite mais qu&#8217;aucun <text:span text:style-name="CodeDansTexte">.catch()</text:span> ne l&#8217;a pris en charge.
Nous savons cependant que l&#8217;erreur s&#8217;est produite dans la méthode <text:span text:style-name="CodeDansTexte">.then()</text:span>
suite à l&#8217;utilisation de <text:span text:style-name="CodeDansTexte">Promise.resolve()</text:span>.</text:p>
<text:bookmark text:name="ref-une_erreur_est_retournée_dans_un_événement" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Une erreur est retournée dans un événement</text:h><text:p text:style-name="TexteCourant">Tout élément dôté d&#8217;une méthode <text:span text:style-name="CodeDansTexte">.on()</text:span> a un événement spécial&#160;: <text:span text:style-name="CodeDansTexte">.on('error')</text:span>.
Il est appelé à chaque fois qu&#8217;une erreur se produit.</text:p>
<text:p text:style-name="CodeTitre">errors/on-error.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">process.emit('error', new Error('Oops !'));<text:s text:c="13"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">process.on('error', (error) =&gt; console.error(error));<text:s text:c="3"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> On émet un événement <text:span text:style-name="CodeDansTexte">error</text:span> avec un objet <text:span text:style-name="CodeDansTexte">Error</text:span> précisant la nature du problème.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> L&#8217;objet d&#8217;erreur est transmis à l&#8217;événement <text:span text:style-name="CodeDansTexte">error</text:span>.<text:line-break/></text:p>
<text:p text:style-name="Code">$ node errors/on-error.js</text:p><text:p text:style-name="Code">Error: <text:span text:style-name="CodeExergue">Oops !</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>at Object.<text:span text:style-name="CodeExergue">&amp;lt;anonymous&amp;gt;</text:span> (/.../chapter-04/examples/errors/<text:span text:style-name="CodeExergue">on-error.js</text:span>:<text:span text:style-name="CodeExergue">5</text:span>:23)</text:p><text:p text:style-name="Code"><text:s text:c="4"/>at Module._compile (internal/modules/cjs/loader.js:678:30)</text:p>
<text:p text:style-name="TexteCourant">La trace d&#8217;erreur est similaire à celle des promesses et des callbacks.
Le message d&#8217;erreur précise le problème tandis que son origine (fichier, ligne)
nous indiquent quoi regarder pour mieux comprendre la cause.</text:p>
<text:p text:style-name="TexteCourant">Si une erreur est émise et qu&#8217;aucune fonction n&#8217;est à l&#8217;écoute,
l&#8217;événement <text:span text:style-name="CodeDansTexte">uncaughtException</text:span> est produit&#160;:</text:p>
<text:p text:style-name="CodeTitre">errors/on-error.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">process.emit('error', new Error('Oops !'));</text:p>
<text:p text:style-name="Code">$ node errors/on-error-uncaught.js</text:p><text:p text:style-name="Code">events.js:167</text:p><text:p text:style-name="Code"><text:s text:c="6"/>throw er; // <text:span text:style-name="CodeExergue">Unhandled 'error'</text:span> event</text:p><text:p text:style-name="Code"><text:s text:c="6"/>^</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">Error: Oops !</text:p><text:p text:style-name="Code"><text:s text:c="4"/>at Object.<text:span text:style-name="CodeExergue">&amp;lt;anonymous&amp;gt;</text:span> (/.../chapter-04/examples/errors/<text:span text:style-name="CodeExergue">on-error-uncaught.js</text:span>:<text:span text:style-name="CodeExergue">3</text:span>:23)</text:p><text:p text:style-name="Code"><text:s text:c="4"/>at Module._compile (internal/modules/cjs/loader.js:678:30)</text:p>
<text:p text:style-name="TexteCourant">La section liée au <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-events"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">events</text:span></text:a> explique plus en détails
la gestion des événements.
On les retrouve par exemple dans les modules <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-http"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="CodeDansTexte">http</text:span></text:a>, <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-stream"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="CodeDansTexte">stream</text:span></text:a>
et <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="CodeDansTexte">process</text:span></text:a>.</text:p>
<text:bookmark text:name="ref-errors.system" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Une erreur est renvoyée par le système d&#8217;exploitation</text:h><text:p text:style-name="TexteCourant">L&#8217;accès à une ressource distante est plus complexe qu&#8217;il n&#8217;y parait
car la nature des erreurs est variée et sujet à interprétation au cas par cas,
en fonction de notre intention et du contexte d&#8217;exécution.</text:p>
<text:p text:style-name="TexteCourant">Les erreurs systèmes indiquent la raison du problème.
À vous de trouver <text:span text:style-name="T4">pourquoi</text:span> un tel problème se produit.</text:p>
<text:p text:style-name="TableauTitre">Table 3. Erreurs couramment rencontrées</text:p><table:table table:style-name="Tableau1"><table:table-column />,<table:table-column />,<table:table-column /><table:table-row><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Code erreur</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Raison</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Indice de résolution</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">EACCES</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Permission refusée : nous n&#8217;avons pas le droit d&#8217;accéder à cette ressource.</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Changer les permissions d&#8217;accès sans mettre en péril la sécurité.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">EADDRINUSE</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Adresse déjà utilisée : nous tentons de créer une ressource réseau alors qu&#8217;une
interface existe déjà à la même adresse.</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Vérifier l&#8217;origine du serveur déjà en place à cette adresse. Attribuer une autre adresse/port à la ressource réseau.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">ECONNREFUSED</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>La ressource distante a refusé la connexion.</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Vérifier si c&#8217;est normal que la ressource distante soit inactive. Vérifier qu&#8217;on se connecte à la bonne ressource.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">ECONNRESET</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>La ressource distante a été interrompue en cours de route.</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Retenter la connexion. Vérifier la stabilité de la connexion réseau.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">EEXIST</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>La ressource à créer existe déjà.</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>C&#8217;est un problème seulement si la ressource n&#8217;était pas censée exister au prélable.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">EMFILE</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Trop de fichiers sont ouverts en simultané.</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Les systèmes d&#8217;exploitation peuvent travailler sur une quantité finie de fichiers. Peut-être que vous avez ouvert trop de fichiers en même temps. Fermer l&#8217;accès aux fichiers ouverts.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">ENOENT</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Ressource inexistante.</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Vérifier que le chemin d&#8217;accès est correct. Inspecter la raison de l&#8217;inexistance de la ressource.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">EPERM</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>L&#8217;opération n&#8217;est pas autorisée.</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Des droits d&#8217;administration sont nécessaires pour effectuer cette opération.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">EPIPE</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>L&#8217;accès à la ressource distante a été interrompu.</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Retenter l&#8217;opération.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">ETIMEDOUT</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>L&#8217;opération a été annulée car la ressource distante a mis trop de temps pour aboutir.</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Retenter l&#8217;opération. Vérifier la disponibilité de la ressource distante. S&#8217;assurer que le volume demandé n&#8217;est pas trop important.</text:p></table:table-cell></table:table-row></table:table>
<text:bookmark text:name="ref-le_programme_ne_se_termine_pas" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Le programme ne se termine pas</text:h><text:p text:style-name="TexteCourant">Il arrive qu&#8217;un programme ne se termine pas contrairement à nos attentes.
Il peut y avoir plusieurs raisons à ça&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">une ressource distante <text:span text:style-name="T7">met du temps à répondre</text:span>&#160;—
un <text:span text:style-name="T4">timeout</text:span> déclenchera une erreur (généralement sous 30 secondes)</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">un traitement prend du temps</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">un <text:span text:style-name="T7">événement est en cours d&#8217;écoute</text:span>&#160;— typiquement un serveur web qui attend
des requêtes entrantes</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">une erreur n&#8217;a pas été capturée et perturbe les instructions suivantes</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">Il faudra inspecter le système pour en savoir plus et observer la
consommation mémoire et CPU du processus Node en question.</text:p>
<text:p text:style-name="TexteCourant">Peut-être qu&#8217;il faudra sonder le programme pour déceler le point de blocage.
L'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-inspect"  text:visited-style-name="Visited_20_Internet_20_Link">inspecteur Node</text:a> est un outil particulièrement adapté à cet usage.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">npm</text:span> Module <text:span text:style-name="CodeDansTexte">debug</text:span></text:h><text:p text:style-name="Remarque">Le module npm <text:span text:style-name="CodeDansTexte">debug</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/debug" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/debug</text:a></text:span>) affiche des
messages dans la console de manière conditionnelle.
Les messages s&#8217;affichent lorsque les variables d&#8217;environnement de notre choix
sont renseignées au démarrage de l&#8217;application.</text:p>
<text:p text:style-name="Remarque">On apprendra à le configurer dans l'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-debug"  text:visited-style-name="Visited_20_Internet_20_Link">annexe A</text:a>.</text:p>
<text:bookmark text:name="ref-deprecation" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Une alerte de dépréciation s&#8217;affiche</text:h><text:p text:style-name="TexteCourant">Un des objectifs de l&#8217;équipe de développement de Node est de maintenir
la stabilité de la plate-forme.
Certains de leurs choix de conception sont revisités en changeant
leur comportement ou en les retirant des modules de base.</text:p>
<text:p text:style-name="TexteCourant">Quand ce changement affecte notre code,
<text:span text:style-name="T7">une alerte de dépréciation s&#8217;affiche</text:span>.
Par exemple&#160;:</text:p>
<text:p text:style-name="CodeTitre">deprecation-warning.js</text:p><text:p text:style-name="Code">const a = new Buffer(10);</text:p>
<text:p text:style-name="Code">$ node deprecation-warning.js</text:p><text:p text:style-name="Code">(node:8130) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.</text:p>
<text:p text:style-name="TexteCourant">Nous avons ainsi le temps de modifier notre code pour migrer
vers la nouvelle recommandation petit à petit.</text:p>
<text:bookmark text:name="ref-les_différences_de_javascript_entre_node_et_les_navigateurs_web" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Les différences de JavaScript entre Node et les navigateurs web</text:h><text:p text:style-name="TexteCourant">Puisqu&#8217;on utilise du code JavaScript avec Node et avec les navigateurs web,
qu&#8217;est-ce qui les distingue vraiment&#160;?</text:p>
<text:p text:style-name="TexteCourant">Cette section détricotte les derniers doutes que l&#8217;on pourrait avoir dans notre tête.</text:p>
<text:bookmark text:name="ref-labsence_du_dom_et_des_variables_window_et_document" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">L&#8217;absence du DOM et des variables <text:span text:style-name="">window</text:span> et <text:span text:style-name="">document</text:span></text:h><text:p text:style-name="TexteCourant">Dans Node, il n&#8217;est pas possible de faire appel aux variables <text:span text:style-name="CodeDansTexte">window</text:span>
et <text:span text:style-name="CodeDansTexte">document</text:span> (raccourci pour <text:span text:style-name="CodeDansTexte">window.document</text:span>).</text:p>
<text:p text:style-name="TexteCourant">Ces variables représentent respectivement la fenêtre/onglet et le document
HTML interprété par le navigateur web.
L&#8217;appel aux fonctions <text:span text:style-name="CodeDansTexte">document.querySelector()</text:span> et <text:span text:style-name="CodeDansTexte">document.createElement()</text:span>
relèvent du DOM (<text:span text:style-name="T4">Document Object Model</text:span>), une représentation JavaScript interactive
du document HTML.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;équivalent de <text:span text:style-name="CodeDansTexte">window</text:span> pour Node serait la variable <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="CodeDansTexte">process</text:span></text:a>&#160;:
elle décrit le processus exécutant notre code.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> Variables globales</text:h><text:p text:style-name="Remarque">La documentation des variables globales est disponible sur le site officiel de Node&#160;:
<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://nodejs.org/docs/latest-v10.x/api/globals.html" text:visited-style-name="Visited_20_Internet_20_Link">https://nodejs.org/docs/latest-v10.x/api/globals.html</text:a></text:span></text:p>
<text:bookmark text:name="ref-il_ny_a_pas_dinterface_graphique" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Il n&#8217;y a pas d&#8217;interface graphique</text:h><text:p text:style-name="TexteCourant">Suite logique du point précédent&#160;: Node n&#8217;a pas d&#8217;interface graphique.
Le code exécuté n&#8217;affiche rien en tant que tel, à part les messages dirigés
vers la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-console"  text:visited-style-name="Visited_20_Internet_20_Link">console</text:a>.</text:p>
<text:p text:style-name="TexteCourant">L'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-inspect"  text:visited-style-name="Visited_20_Internet_20_Link">inspecteur Node</text:a> est un moyen de visualiser l&#8217;état interne
d&#8217;un script .</text:p>
<text:p text:style-name="TexteCourant">On peut toutefois construire des applications graphiques en ligne de commande.
Nous verrons comment faire dans le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-08"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 8</text:a>.</text:p>
<text:bookmark text:name="ref-le_mécanisme_de_modules" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Le mécanisme de modules</text:h><text:p text:style-name="TexteCourant">Node utilise un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-modules"  text:visited-style-name="Visited_20_Internet_20_Link">mécanisme de modules</text:a> (<text:span text:style-name="T4">CommonJS</text:span>) différent
des <text:span text:style-name="T4">modules ECMAScript</text:span> des navigateurs web.</text:p>
<text:p text:style-name="TexteCourant">La convergence vers les <text:span text:style-name="T4">modules ECMAScript</text:span> est en cours.
Il y a fort à parier qu&#8217;ils soient supportés nativement par Node dans une
version ultérieure.</text:p>
<text:p text:style-name="TexteCourant">Nous verrons comment utiliser les modules Node dans les navigateurs web
dans le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-08"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 9</text:a>.</text:p>
<text:bookmark text:name="ref-linterfaçage_avec_le_système_dexploitation" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">L&#8217;interfaçage avec le système d&#8217;exploitation</text:h><text:p text:style-name="TexteCourant">Les fonctions JavaScript spécifiques aux navigateurs web sont liées
à la récupération d&#8217;informations (<text:span text:style-name="CodeDansTexte">AJAX</text:span>, <text:span text:style-name="CodeDansTexte">fetch()</text:span>),
à l&#8217;affichage (Canvas, WebGL, WebVR) ainsi qu&#8217;à la manipulation de documents HTML.</text:p>
<text:p text:style-name="TexteCourant">Les fonctions JavaScript fournies par les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-modules-builtin"  text:visited-style-name="Visited_20_Internet_20_Link">modules Node</text:a>
sont liées à la gestion des ressources dont le système d&#8217;exploitation
se fait l&#8217;interface&#160;: fichiers (<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-fs"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">fs</text:span></text:a>),
réseau (<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-http"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">http</text:span></text:a>, <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-net"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">net</text:span></text:a>, <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-dns"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">dns</text:span></text:a>,
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-dgram"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">dgram</text:span></text:a>), terminal (<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-tty"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">tty</text:span></text:a>,
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-readline"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">readline</text:span></text:a>) et processus
(<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">process</text:span></text:a>, <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-child_process"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">child_process</text:span></text:a>).</text:p>
<text:bookmark text:name="ref-node_est_un_processus_système" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Node est un processus système</text:h><text:p text:style-name="TexteCourant">Le système d&#8217;exploitation crée un nouveau processus dès
qu&#8217;on exécute le programme <text:span text:style-name="CodeDansTexte">node</text:span>.
Ce processus peut être de <text:span text:style-name="T4">courte durée</text:span> ou de <text:span text:style-name="T4">longue durée</text:span>,
selon qu&#8217;il dure quelques secondes ou un temps indéfini.</text:p>
<text:p text:style-name="TexteCourant">Le processus s&#8217;arrête en cas d&#8217;erreur, lorsqu&#8217;il n&#8217;y a plus d&#8217;opération
à effectuer ou en cas d&#8217;interruption volontaire.</text:p>
<text:p text:style-name="TexteCourant">Le code JavaScript exécuté dans un navigateur web dépasse rarement la durée
d&#8217;une session utilisateur, de quelques secondes à quelques heures.
En cas de problème, un rafraîchissement de la page remet à zéro l&#8217;état de la page.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Performances</text:span> Utilisation des CPU</text:h><text:p text:style-name="Remarque">Un <text:span text:style-name="T7">processus Node est <text:span text:style-name="T4">mono</text:span> CPU</text:span>.
Tous les autres processus système assignés à ce même CPU
se partageront une quantité finie de puissance.</text:p>
<text:p text:style-name="Remarque">Par exemple, si un processus Node partage le même CPU qu&#8217;une base de données
et qu&#8217;une requête gourmande s&#8217;exécute, la rapidité de notre application
en sera affectée.</text:p>
<text:bookmark text:name="ref-options" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Options utiles pour démarrer Node</text:h><text:p text:style-name="TexteCourant">L&#8217;exécutable <text:span text:style-name="CodeDansTexte">node</text:span> accepte plusieurs options afin de personnaliser
son comportement et l&#8217;affichage des résultats.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> Exécutable <text:span text:style-name="CodeDansTexte">node</text:span></text:h><text:p text:style-name="Remarque">La documentation de l&#8217;exécutable <text:span text:style-name="CodeDansTexte">node</text:span> est disponible sur le site officiel de Node&#160;:
<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://nodejs.org/docs/latest-v10.x/api/cli.html" text:visited-style-name="Visited_20_Internet_20_Link">https://nodejs.org/docs/latest-v10.x/api/cli.html</text:a></text:span></text:p>
<text:bookmark text:name="ref-print-eval" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Afficher le résultat d&#8217;une expression, sans script</text:h><text:p text:style-name="TexteCourant">L&#8217;interpréteur Node sait interpréter du code qu&#8217;on lui donnerait
via l&#8217;option <text:span text:style-name="CodeDansTexte">-p</text:span> (pour <text:span text:style-name="T4">print</text:span>, c&#8217;est-à-dire <text:span text:style-name="T4">afficher</text:span>).
L&#8217;interpréteur affichera le résultat de l&#8217;expression ou
détaillera la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-errors"  text:visited-style-name="Visited_20_Internet_20_Link">raison de l&#8217;erreur</text:a>.</text:p>
<text:p text:style-name="TexteCourant">J&#8217;utilise cette forme d&#8217;interaction pour obtenir un résultat rapide,
sans créer de nouveau fichier.
Par exemple, le résultat d&#8217;une opération mathématique&#160;:</text:p>
<text:p text:style-name="Code">$ node -p '2 + 2'</text:p><text:p text:style-name="Code">4</text:p>
<text:p text:style-name="TexteCourant">Toute expression ECMAScript valide est acceptée&#160;:</text:p>
<text:p text:style-name="Code">$ node -p '"abc".toLocaleUpperCase()'</text:p><text:p text:style-name="Code">ABC</text:p>
<text:p text:style-name="TexteCourant">Ce dernier exemple illustre la transformation de
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-string"  text:visited-style-name="Visited_20_Internet_20_Link">chaîne de caractères</text:a> documentée
dans le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-03"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 3</text:a>.</text:p>
<text:bookmark text:name="ref-require" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Précharger un module</text:h><text:p text:style-name="TexteCourant">L&#8217;option de démarrage <text:span text:style-name="CodeDansTexte">--require</text:span> charge le module indiqué <text:span text:style-name="T4">avant</text:span> le script Node.</text:p>
<text:p text:style-name="Code">$ node --require ./print-exit.js url/intro.js</text:p>
<text:p text:style-name="TexteCourant">Dans cet exemple, le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-modules"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">print-exit.js</text:span></text:a> sera chargé
avant <text:span text:style-name="CodeDansTexte">url/intro.js</text:span>.</text:p>
<text:p text:style-name="CodeTitre">print-exit.js</text:p><text:p text:style-name="Code">process.on('exit', (code) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const {filename} = process.mainModule;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(`${filename} : arrêt avec le code ${code}`);</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant">Le chargement de ce module aura pour effet d&#8217;afficher un message
avec le chemin du fichier chargé et le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.exit"  text:visited-style-name="Visited_20_Internet_20_Link">code de sortie</text:a>.</text:p>
<text:p text:style-name="TexteCourant">On peut appeler l&#8217;option <text:span text:style-name="CodeDansTexte">--require</text:span> plusieurs fois.
On peut aussi utiliser l&#8217;option raccourcie <text:span text:style-name="CodeDansTexte">-r</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Ce mécanisme fonctionne très bien avec des
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-05"  text:visited-style-name="Visited_20_Internet_20_Link">modules npm</text:a> conçus pour
rendre nos scripts <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-esm"  text:visited-style-name="Visited_20_Internet_20_Link">compatibles avec les modules ECMAScript</text:a>
ou pour <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-pretty-error"  text:visited-style-name="Visited_20_Internet_20_Link">simplifier les erreurs</text:a> affichées
lors d&#8217;un plantage applicatif, entre autres.</text:p>
<text:bookmark text:name="ref-inspect" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Inspecter notre code avec Google Chrome</text:h><text:p text:style-name="TexteCourant">Node accepte deux options <text:span text:style-name="CodeDansTexte">--inspect</text:span> et <text:span text:style-name="CodeDansTexte">--inspect-brk</text:span>.
Elles exposent toutes deux un protocole de débogage
auquel on peut se connecter avec le navigateur <text:span text:style-name="T4">Google Chrome</text:span>.</text:p>
<text:p text:style-name="Code">$ node --inspect-brk print-text.js texte --uppercase</text:p><text:p text:style-name="Code">Debugger listening on ws://127.0.0.1:9229/ddd9bbfd-09ac-4426-a53e-c8abe4fc36da</text:p><text:p text:style-name="Code">For help see https://nodejs.org/en/docs/inspector</text:p>
<text:p text:style-name="TexteCourant">Cette commande lance un de nos exemples de la section
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.argv"  text:visited-style-name="Visited_20_Internet_20_Link">arguments d&#8217;exécution</text:a> du <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">process</text:span></text:a>.
L&#8217;option <text:span text:style-name="CodeDansTexte">--inspect-brk</text:span> démarre l&#8217;inspecteur
et met son <text:span text:style-name="T7">exécution en pause aussitôt</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Le logo de Node s&#8217;affiche dans les outils de développement de <text:span text:style-name="T4">Google Chrome</text:span>&#160;:</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-04/images/chrome-devtools.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 25. Outils de développement <text:span text:style-name="T4">Google Chrome</text:span> avec l&#8217;icône de l&#8217;inspecteur Node.</text:p>
<text:p text:style-name="TexteCourant">Un clic sur le logo Node ouvre une nouvelle fenêtre.
Cette fenêtre est outillée pour inspecter ce qu&#8217;il se passe dans notre script Node.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-04/images/inspector-paused.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 26. Inspecteur en pause sur la première ligne de notre script Node.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Outils de développement</text:span> Point d&#8217;arrêt</text:h><text:p text:style-name="Remarque">Un point d&#8217;arrêt se crée en cliquant sur le numéro de ligne souhaité.</text:p>
<text:p text:style-name="Remarque">Le débogueur se mettra en pause à chaque fois que le chemin d&#8217;exécution
de l&#8217;interpréteur atteindra cette ligne.</text:p>
<text:p text:style-name="Remarque">La valeur des variables ECMAScript courantes s&#8217;affichent au survol de la souris
ou en interagissant avant la console.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-04/images/inspector-breakpoint.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 27. Inspecteur en pause, avec un point d&#8217;arrêt marqué sur une des lignes du script.</text:p>
<text:p text:style-name="TexteCourant">C&#8217;est le moment idéal pour placer un ou plusieurs points d&#8217;arrêt.</text:p>
<text:p text:style-name="TexteCourant">Un clic sur le bouton <text:span text:style-name="CodeDansTexte">&#9654;</text:span> met alors fin à la pause.
Le script s&#8217;exécutera jusqu&#8217;à l&#8217;épuisement des instructions
ou jusqu&#8217;au <text:span text:style-name="T4">prochain point d&#8217;arrêt</text:span>.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-04/images/inspector-breakpoint-in.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 28. Inspecteur en pause, suite à la rencontre d&#8217;un point d&#8217;arrêt.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;option d&#8217;invocation <text:span text:style-name="CodeDansTexte">--inspect</text:span> est adaptée à des processus de longue durée,
comme un serveur HTTP.
L&#8217;option <text:span text:style-name="CodeDansTexte">--inspect-brk</text:span> est adaptée à des processus de courte durée et qui
se termineraient avant qu&#8217;on ait le temps de jeter un œil au contenu.</text:p>
<text:bookmark text:name="ref-ajuster_les_options_de_compatibilité_et_de_traçabilité_de_v8" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Ajuster les options de compatibilité et de traçabilité de V8</text:h><text:p text:style-name="TexteCourant">Node repose sur la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-v8"  text:visited-style-name="Visited_20_Internet_20_Link">machine virtuelle V8</text:a>
pour interpréter nos instructions ECMAScript.
Node expose différentes options de V8 pour affiner son comportement en fonction
de notre environnement.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;intégralité des options de configuration de V8 s&#8217;affiche
avec l&#8217;option <text:span text:style-name="CodeDansTexte">--v8-options</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ node --v8-options</text:p>
<text:p text:style-name="TexteCourant">Il n&#8217;y a pas de meilleure configuration qui conviendrait à chacun de nos usages.
Le mieux reste encore d&#8217;explorer les options possibles, les différents concepts
et d&#8217;ajuster les valeurs offrant le meilleur rapport stabilité/performances.</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">--optimize_for_size</text:span></text:span><text:line-break/><text:tab/>Optimise le fonctionnement interne pour utiliser moins de mémoire,
au détriment de la vitesse.<text:line-break/>
Idéal pour l&#8217;exécution de scripts Node sur des environnement à faible mémoire,
comme les Raspberry Pi.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">--mem_old_space_limit</text:span></text:span><text:line-break/><text:tab/>Détermine la quantité de mémoire maximale qu&#8217;un processus Node pourra utiliser.<text:line-break/>
Idéal pour confiner Node sur des environnements à faible mémoire.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">--gc_inverval</text:span></text:span><text:line-break/><text:tab/>Détermine le nombre de cycles entre chaque déclenchement du ramasse-miettes.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">--expose_gc</text:span></text:span><text:line-break/><text:tab/>Expose les fonctions de manipulation du ramasse-miettes.<text:line-break/>
Idéal si vous souhaitez contrôler finement l&#8217;optimisation de la mémoire.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">--stack_trace_limit</text:span></text:span><text:line-break/><text:tab/>Change la limite du nombre de lignes affichées dans une trace d&#8217;erreurs.<text:line-break/>
Par défaut&#160;: 10 lignes.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">--trace-deopt</text:span></text:span><text:line-break/><text:tab/>Signale les optimisations invalidées par V8.
Les portions de code indiquées gagneraient à être retravaillées, pour rendre
uniforme le type de variables passées en arguments par exemple.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">--trace-gc</text:span></text:span><text:line-break/><text:tab/>Signale les moments où le ramasse-miettes se déclenche.
On peut ainsi mieux comprendre les raisons qui le pousse à se déclencher.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Notion</text:span> Ramasse-miettes (<text:span text:style-name="T4">garbage collector</text:span>)</text:h><text:p text:style-name="Remarque">Le ramasse-miettes est un mécanisme informatique qui libère les objets inutilisés
de la mémoire.
Il est déclenché de manière cyclique par la machine virtuelle
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-v8"  text:visited-style-name="Visited_20_Internet_20_Link">V8</text:a>.</text:p>
<text:p text:style-name="Remarque">En savoir plus sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://fr.wikipedia.org/wiki/Ramasse-miettes_(informatique" text:visited-style-name="Visited_20_Internet_20_Link">https://fr.wikipedia.org/wiki/Ramasse-miettes_(informatique</text:a>)</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Les options préfixées par <text:span text:style-name="CodeDansTexte">harmony</text:span> activent la prise en charge
de fonctionnalités ECMAScript qui ne font pas encore partie du standard.
Elles sont encore au stade expérimental.</text:p>
<text:bookmark text:name="ref-conclusion_4" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Conclusion</text:h><text:p text:style-name="TexteCourant">TBD.</text:p>
<text:bookmark text:name="ref-chapter-05" /><text:p text:style-name="ChapitreNumero">5</text:p><text:h text:style-name="ChapitreTitre" text:outline-level="1">Jouer avec npm</text:h><text:p text:style-name="TexteCourant">Savoir naviguer dans la richesse de l&#8217;écosystème npm est une force pour
la durabilité de nos projets.
Ces modules nous aident à façonner un outillage résilient et adapté à chacun
de nos projets.</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">Créer un fichier <text:span text:style-name="CodeDansTexte">package.json</text:span></text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Installer un module npm</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Outiller un projet avec les scripts npm</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Anatomie du fichier <text:span text:style-name="CodeDansTexte">package.json</text:span></text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Quelques commandes pour aller plus loin</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Questions et mystères autour de npm</text:p>
</text:list-item></text:list>
<text:p text:style-name="ChapitreIntroduction"><text:p text:style-name="TexteCourant">Ce chapitre va nous permettre d&#8217;y voir plus clair du côté des <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-modules"  text:visited-style-name="Visited_20_Internet_20_Link">modules npm</text:a>.
Nous apprendrons comment identifier des module de confiance, les installer et
les mettre à jour sans casser nos projets.</text:p>
<text:p text:style-name="TexteCourant">Nous nous tournerons ensuite du côté des <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-scripts"  text:visited-style-name="Visited_20_Internet_20_Link">scripts npm</text:a> pour créer
un outillage sur mesure et de qualité.
Grâce à eux, nous serons en mesure d&#8217;automatiser les tâches répétitives à notre
rythme.</text:p>
<text:p text:style-name="TexteCourant">Enfin, nous découvrirons des commandes moins connues de npm.
Elles pourrons nous faciliter la vie ou nous débloquer quand ça ne va pas.</text:p></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Remarque</text:span> Versions de Node et npm</text:h><text:p text:style-name="Remarque">Le contenu de ce chapitre utilise les versions <text:span text:style-name="T7">Node v10</text:span> et <text:span text:style-name="T7">npm v6</text:span>.
Ce sont les versions stables recommandées en 2018.
J&#8217;explique comment les installer au <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 2</text:a>.</text:p>
<text:p text:style-name="TexteCourant">Le mot <text:span text:style-name="T4">npm</text:span> correspond à trois concepts différents que nous aborderons
tout au long de ce chapitre&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">l'<text:span text:style-name="T7">exécutable</text:span> <text:span text:style-name="CodeDansTexte">npm</text:span>&#160;— un programme écrit en JavaScript&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">le <text:span text:style-name="T7">registre</text:span> <text:span text:style-name="T4">npm</text:span>&#160;— une plate-forme de distribution de modules&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">un <text:span text:style-name="T7">module</text:span> <text:span text:style-name="T4">npm</text:span>&#160;— en général installé depuis le registre et utilisable
avec les fonctions <text:span text:style-name="CodeDansTexte">require()</text:span> et <text:span text:style-name="CodeDansTexte">import</text:span>.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">Je préciserai toujours si l&#8217;utilisation de <text:span text:style-name="T4">npm</text:span> fait référence
à l'<text:span text:style-name="T4">exécutable</text:span>, au <text:span text:style-name="T4">registre</text:span> ou à un <text:span text:style-name="T4">module</text:span>.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span> est installé par défaut avec Node.
Vérifions la version installée en ouvrant un terminal
et en écrivant la commande suivante&#160;:</text:p>
<text:p text:style-name="Code">$ npm --version</text:p><text:p text:style-name="Code">6.1.0</text:p>
<text:p text:style-name="TexteCourant">Si un message s&#8217;affiche en indiquant que <text:span text:style-name="CodeDansTexte">npm</text:span> n&#8217;est pas un programme reconnu,
veuillez vous référer au <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-../chapter-02/index.adoc"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 2</text:a> et
vérifier que Node v10 est bien installé.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Jouer avec les exemples dans un terminal</text:h><text:p text:style-name="Remarque">Les exemples titrés d&#8217;un nom de fichier peuvent être installés sur votre ordinateur.
Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de
votre lecture pour voir ce qui change.</text:p>
<text:p text:style-name="Remarque">Installation des exemples via le module npm <text:span text:style-name="CodeDansTexte">nodebook</text:span>.</text:p><text:p text:style-name="RemarqueCode">$ npm install --global nodebook</text:p><text:p text:style-name="RemarqueCode">$ nodebook install chapter-05</text:p><text:p text:style-name="RemarqueCode">$ cd $(nodebook dir chapter-05)</text:p>
<text:p text:style-name="Remarque">La commande suivante devrait afficher un résultat qui confirme que vous êtes
au bon endroit&#160;:</text:p>
<text:p text:style-name="RemarqueCode">$ node hello.js</text:p>
<text:p text:style-name="Remarque">Suivez à nouveau les installations d&#8217;instruction pour rétablir les exemples
dans leur état initial.</text:p>
<text:bookmark text:name="ref-cli" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Créer un fichier <text:span text:style-name="">package.json</text:span></text:h><text:p text:style-name="TexteCourant">La présence d&#8217;un fichier <text:span text:style-name="CodeDansTexte">package.json</text:span> devient nécessaire dès qu&#8217;un projet
inclut un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-modules"  text:visited-style-name="Visited_20_Internet_20_Link">module npm</text:a> ou a vocation à être publié pour être repris
dans un autre projet&#160;— que ça soit dans un cadre professionnel ou personnel.</text:p>
<text:p text:style-name="TexteCourant">Le fichier <text:span text:style-name="CodeDansTexte">package.json</text:span> est une clé de voute pour reproduire l&#8217;installation
du projet et créer un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-scripts"  text:visited-style-name="Visited_20_Internet_20_Link">outillage autonome</text:a>.
La commande <text:span text:style-name="CodeDansTexte">npm init</text:span> génère un tel fichier.
L&#8217;utilisation de l&#8217;option <text:span text:style-name="CodeDansTexte">--yes</text:span> va plus vite car elle nous évite
de répondre aux questions&#160;:</text:p>
<text:p text:style-name="Code">$ npm init --yes</text:p>
<text:p text:style-name="TexteCourant">Si un fichier <text:span text:style-name="CodeDansTexte">package.json</text:span> n&#8217;existe pas dans le répertoire courant,
il sera créé avec des valeurs par défaut&#160;— le nom du module correspondra
au nom du répertoire courant.
Si ce fichier existait déjà, il sera alors préservé et son contenu sera affiché&#160;:</text:p>
<text:p text:style-name="CodeTitre">package.json</text:p><text:p text:style-name="Code">{</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"name": "nodebook.chapter-05",</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"private": true,</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"version": "1.0.0",</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"main": "./examples/index.js",</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"description": "",</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"scripts": {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"lint": "eslint ./examples",</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"print-args": "node examples/print-args.js",</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"start": "micro examples/app.js",</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"test": "mocha examples/tests.js",</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"pretest": "npm run lint"</text:p><text:p text:style-name="Code"><text:s text:c="2"/>},</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"engines": {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"node": "^10.0.0"</text:p><text:p text:style-name="Code"><text:s text:c="2"/>},</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"author": "Thomas Parisot (https://oncletom.io)",</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"license": "MIT",</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"bugs": {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"url": "https://github.com/oncletom/nodebook/issues"</text:p><text:p text:style-name="Code"><text:s text:c="2"/>},</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"homepage": "https://github.com/oncletom/nodebook",</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"dependencies": {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"cowsay": "^1.3.1",</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"lodash": "^4.17.10",</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"micro": "^9.3.2"</text:p><text:p text:style-name="Code"><text:s text:c="2"/>},</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"devDependencies": {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"eslint": "^4.19.1",</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"mocha": "^5.2.0"</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant">Nous reviendrons sur la structure du fichier dans la section
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-package.json"  text:visited-style-name="Visited_20_Internet_20_Link">anatomie du fichier <text:span text:style-name="CodeDansTexte">package.json</text:span></text:a>.
En attendant, focalisons-nous sur les opérations courantes comme
l&#8217;installation de modules.</text:p>
<text:bookmark text:name="ref-modules" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Installer des modules npm</text:h><text:p text:style-name="TexteCourant">Le mécanisme de modules est documenté dans
le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-modules"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 4</text:a>.
Les fonctions <text:span text:style-name="CodeDansTexte">require()</text:span> et <text:span text:style-name="CodeDansTexte">import</text:span> chargent nos propres modules mais aussi
les modules de base, installés avec Node.
Les modules npm sont des <text:span text:style-name="T7">modules complémentaires et téléchargeables</text:span> à l&#8217;aide
de l&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Cette section va nous aider à comprendre ce qu&#8217;il se passe sous le capot
pendant les phases d&#8217;installation, de mise à jour et de désinstallation
des modules npm.</text:p>
<text:bookmark text:name="ref-depuis_le_registre_npm" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Depuis le registre npm</text:h><text:p text:style-name="TexteCourant">Le registre npm (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com</text:a></text:span>) est l&#8217;hébergement principal
des modules JavaScript.</text:p>
<text:p text:style-name="TexteCourant">La commande <text:span text:style-name="CodeDansTexte">npm install</text:span> s&#8217;utilise directement quand nous connaissons déjà
le nom d&#8217;un module à installer,
par exemple le module <text:span text:style-name="T4">cowsay</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/cowsay" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/cowsay</text:a></text:span>)&#160;:</text:p>
<text:p text:style-name="Code">$ npm install cowsay</text:p><text:p text:style-name="Code">+ cowsay@1.3.1</text:p><text:p text:style-name="Code">added 10 packages from 3 contributors in 1.667s</text:p><text:p text:style-name="Code">found 0 vulnerabilities</text:p>
<text:p text:style-name="TexteCourant">Le module est installé et prêt à être inclus dans un script.
Nous pouvons aussi constater que le champ <text:span text:style-name="CodeDansTexte">dependencies</text:span> est apparu
dans le fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">package.json</text:p><text:p text:style-name="Code">{</text:p><text:p text:style-name="Code"><text:s text:c="2"/>...</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"dependencies": {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"cowsay": "^1.3.1"</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span> tient les comptes des modules installés à notre demande.
Ça nous sera utile pour <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install"  text:visited-style-name="Visited_20_Internet_20_Link">installer les modules sur un autre ordinateur</text:a>.
Nous reviendrons plus tard sur la notation des versions
—&#160;on en reparlera sous le nom de <text:span text:style-name="T4">versions sémantiques</text:span> (<text:span text:style-name="T4">Semantic Versionning</text:span>).</text:p>
<text:p text:style-name="CodeTitre">cow.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {say} = require('cowsay');</text:p><text:p text:style-name="Code">const message = say({ text: 'Bonjour !' });</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(message);</text:p>
<text:p text:style-name="TexteCourant">Nous pouvons remarquer que l&#8217;inclusion d&#8217;un module npm est identique
à celle d&#8217;un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-modules-builtin"  text:visited-style-name="Visited_20_Internet_20_Link">module de base</text:a>.<text:line-break/>Regardons le résultat sans plus tarder&#160;:</text:p>
<text:p text:style-name="Code">$ node cow.js</text:p><text:p text:style-name="Code">___________</text:p><text:p text:style-name="Code">&lt; Bonjour ! &gt;</text:p><text:p text:style-name="Code">-----------</text:p><text:p text:style-name="Code"><text:s text:c="7"/>\<text:s text:c="3"/>^__^</text:p><text:p text:style-name="Code"><text:s text:c="8"/>\<text:s text:c="2"/>(oo)\_______</text:p><text:p text:style-name="Code"><text:s text:c="11"/>(__)\<text:s text:c="7"/>)\/\</text:p><text:p text:style-name="Code"><text:s text:c="15"/>||----w |</text:p>
<text:p text:style-name="TexteCourant">L&#8217;utilisation d&#8217;un module npm nous a permis d&#8217;utiliser du code sans avoir à le
créer alors qu&#8217;il n&#8217;était pas fourni par la plate-forme Node.</text:p>
<text:p text:style-name="TexteCourant">Maintenant que nous savons installer un module npm, nous pouvons en chercher
d&#8217;autres et comprendre comment les utiliser.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Question</text:span> Où sont stockés les modules npm ?</text:h><text:p text:style-name="Remarque">Les modules npm et leurs dépendances sont stockés dans un répertoire
<text:span text:style-name="CodeDansTexte">node_modules</text:span>.
Ce répertoire est situé au même niveau que le fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Sous le capôt</text:span> Ce que fait l&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span> pendant l&#8217;installation</text:h><text:p text:style-name="Remarque">L&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span> effectue un bon nombre d&#8217;actions après avoir
saisi la commande <text:span text:style-name="CodeDansTexte">npm install cowsay</text:span>&#160;:</text:p>
<text:p text:style-name="RemarqueNumero">1.<text:tab/>il interroge le registre <text:span text:style-name="T4">npmjs.com</text:span> pour obtenir des informations sur le module demandé&#160;;</text:p><text:p text:style-name="RemarqueNumero">2.<text:tab/>il détermine que <text:span text:style-name="CodeDansTexte">1.3.1</text:span> est la version la plus récente&#160;;</text:p><text:p text:style-name="RemarqueNumero">3.<text:tab/>il télécharge une archive compressée (<text:span text:style-name="CodeDansTexte">.tar.gz</text:span>) qui contient tous les fichiers de la version <text:span text:style-name="CodeDansTexte">1.3.1</text:span>&#160;;</text:p><text:p text:style-name="RemarqueNumero">4.<text:tab/>l&#8217;archive est décompressée dans le répertoire <text:span text:style-name="CodeDansTexte">node_modules</text:span>&#160;;</text:p><text:p text:style-name="RemarqueNumero">5.<text:tab/>les dépendances sont elles aussi téléchargées puis décompressées dans le répertoire <text:span text:style-name="CodeDansTexte">node_modules</text:span>&#160;;</text:p><text:p text:style-name="RemarqueNumero">6.<text:tab/>le module <text:span text:style-name="CodeDansTexte">cowsay</text:span> est inscrit dans le fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Remarque</text:span> Dépendances de développement</text:h><text:p text:style-name="Remarque">Il existe une variante de la commande pour distinguer les dépendances
spécifiques à l&#8217;outillage du projet.
Rendez-vous dans la section <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install.dev"  text:visited-style-name="Visited_20_Internet_20_Link">dépendances de développement</text:a>
pour en savoir plus.</text:p>
<text:bookmark text:name="ref-registry" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Trouver son bonheur dans le registre npm</text:h><text:p text:style-name="TexteCourant">Le <text:span text:style-name="T4">registre npm</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com</text:a></text:span>) fourmille de modules
—&#160;de simples fonctions, des librairies ou des <text:span text:style-name="T4">frameworks</text:span> complets.
Ils couvrent un spectre d&#8217;usages allant de l&#8217;accès aux bases de données,
à des frameworks web, à des outils front-end, des utilitaires de test,
de compression de données, du paiement bancaire, des frameworks mobiles, etc.</text:p>
<text:p text:style-name="TexteCourant">Essayons de chercher une librairie qui puisse nous connecter à une
base de données MySQL ou MariaDB.
Tapez <text:span text:style-name="CodeDansTexte">mysql</text:span> dans le champ de recherche du registre npm ou saisissez
directement l&#8217;URL menant aux résultats de cette recherche en vous
rendant sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/search?q=mysql" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/search?q=mysql</text:a></text:span>&#160;:</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-05/images/npm-registry-search.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 29. Extrait des résultats d&#8217;une recherche de modules npm avec le mot-clé <text:span text:style-name="T4">mysql</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Les résultats sont triés par pertinence&#160;— un mélange entre popularité,
qualité et maintenance des projets.</text:p>
<text:p text:style-name="TexteCourant">Je trouve qu&#8217;il est difficile de décider uniquement en regardant la liste.
J&#8217;ai tendance à ouvrir un onglet par module pour lire leur documentation.
Prenons le cas du module <text:span text:style-name="T4">mysql2</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/mysql2" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/mysql2</text:a></text:span>) justement&#160;:</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-05/images/npm-package-mysql2.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 30. Extrait de la page consacrée au module npm <text:span text:style-name="T4">mysql2</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Plusieurs éléments de cette page tendent à me rassurer
et m&#8217;aident à juger de la robustesse de ce module&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">les badges colorés qui affichent le statut d&#8217;exécution des tests&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">une introduction de <text:span text:style-name="T7">documentation claire et concise</text:span>&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">un <text:span text:style-name="T7">nombre de téléchargements</text:span> en progrès réguliers&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">il s&#8217;utilise avec des <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-promise"  text:visited-style-name="Visited_20_Internet_20_Link">promesses</text:a>&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">le nombre important de modules dépendants&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">je reconnais une autrice</text:span> qui contribue du code de qualité&#160;— Rebecca Turner (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/~iarna" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/~iarna</text:a></text:span>).</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">J&#8217;ai un doute quand je lis <text:span text:style-name="T4">108 issues</text:span> et <text:span text:style-name="T4">13 pull requests</text:span>.
Dans ce cas-là je me dis que les personnes qui maintiennent le projet ne sont
pas forcément très réactives.</text:p>
<text:p text:style-name="TexteCourant">Cependant, il y a suffisamment d&#8217;indicateurs au vert pour l&#8217;installer à coup de
<text:span text:style-name="CodeDansTexte">npm install mysql2</text:span> puis à l&#8217;essayer dans un script.</text:p>
<text:p text:style-name="TexteCourant">Le module <text:span text:style-name="T4">mysql-libmysqlclient</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/mysql-libmysqlclient" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/mysql-libmysqlclient</text:a></text:span>)
ne me fait pas du tout le même effet&#160;:</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-05/images/npm-package-mysql-libmysqlclient.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 31. Extrait de la page consacrée au module npm <text:span text:style-name="T4">mysql-libmysqlclient</text:span>.</text:p>
<text:p text:style-name="TexteCourant">La page du module ne met pas d&#8217;exemple simple à comprendre et fait référence
à des versions de Node antédiluviennes.
Rien n&#8217;indique qu&#8217;il ne peut pas fonctionner avec Node v10
mais la présence du mot <text:span text:style-name="T4">binding</text:span> m&#8217;évoque que l&#8217;installation du module
compile un programme écrit dans un autre langage
—&#160;en l&#8217;occurrence, <text:span text:style-name="T4">libmysqlclient</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Point positif&#160;: il n&#8217;y a que 14 <text:span text:style-name="T4">issues</text:span> GitHub.
C&#8217;est peu mais l&#8217;une d&#8217;entre elle est intitulée
«&#160;<text:span text:style-name="T4">Does not work with any modern version of Node.js</text:span>&#160;».
Ça confirme les doutes du paragraphe précédent&#160;:
c&#8217;est suffisant pour que je passe mon chemin.</text:p>
<text:p text:style-name="TexteCourant">En continuant plus loin dans la liste des résultats de recherche,
je suis tombé sur le module npm nommé <text:span text:style-name="T4">falchion</text:span>&#160;:</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-05/images/npm-package-falchion.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 32. Extrait de la page consacrée au module npm <text:span text:style-name="T4">falchion</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Il n&#8217;y a qu&#8217;une seule version du module, qui date de quatre années
avec une documentation qui tient sur une ligne.<text:line-break/>Il y a très peu de chances que nous puissions en faire quelque chose.</text:p>
<text:p text:style-name="Horizontal_20_Line"/>
<text:p text:style-name="TexteCourant">Voici au final ce que j&#8217;estime être le plus important pour me faire
une idée d&#8217;un module et décider de l&#8217;installer ou non&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">présence d&#8217;une <text:span text:style-name="T7">documentation</text:span>&#160;— je peux me faire une idée des fonctionnalités
et de la complexité d&#8217;utilisation du module&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">des badges d'<text:span text:style-name="T7">intégration continue</text:span>&#160;— je sais ainsi qu&#8217;il y a des tests
unitaires qui sont exécutés automatiquement avant que le module soit publié&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">le nombre de <text:span text:style-name="T7">téléchargements</text:span>&#160;— je sais si d&#8217;autres personnes s&#8217;en servent
en espérant qu&#8217;ils remontent les problèmes rencontrés&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">le nombre de <text:span text:style-name="T7">versions</text:span>&#160;— ça me donne une idée de la maturité du projet
et de la réactivité aux demandes de la communauté.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">Ce sont des <text:span text:style-name="T7">critères subjectifs</text:span>.
Un module peut être populaire par ancienneté alors qu&#8217;il existe des alternatives,
plus légères ou plus simple d&#8217;utilisation.
C&#8217;est le cas du module <text:span text:style-name="T4">moment.js</text:span> qui est plus populaire que <text:span text:style-name="T4">date-fns</text:span>
—&#160;alors que je préfère ce dernier.</text:p>
<text:p text:style-name="TexteCourant">Il y a aussi des modules dans lesquels j&#8217;ai une confiance quasi-aveugle.
Ils sont publiés par les personnes présentes dans cette liste non-exhaustive&#160;:</text:p>
<text:p text:style-name="TableauTitre">Table 4. Auteurs et autrices de modules npm à suivre</text:p><table:table table:style-name="Tableau1"><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>dougwilson</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/~dougwilson" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/~dougwilson</text:a></text:span></text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>feross</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/~feross" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/~feross</text:a></text:span></text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>fgribreau</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/~fgribreau" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/~fgribreau</text:a></text:span></text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>iarna</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/~iarna" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/~iarna</text:a></text:span></text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>isaacs</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/~isaacs" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/~isaacs</text:a></text:span></text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>jdalton</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/jdalton" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/jdalton</text:a></text:span></text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>jshttp</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/jshttp" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/jshttp</text:a></text:span></text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>mbostock</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/~mbostock" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/~mbostock</text:a></text:span></text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>nodejitsu</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/nodejitsu" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/nodejitsu</text:a></text:span></text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>rwaldron</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/~rwaldron" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/~rwaldron</text:a></text:span></text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>sindresorhus</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/~sindresorhus" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/~sindresorhus</text:a></text:span></text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>substack</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/~substack" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/~substack</text:a></text:span></text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>zkat</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/~zkat" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/~zkat</text:a></text:span></text:p></table:table-cell></table:table-row></table:table>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Sélection de modules npm</text:h><text:p text:style-name="Remarque">J&#8217;ai compilé une liste de modules utiles pour mieux démarrer
dans vos projets.
Vous la trouverez en <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-appendix-a"  text:visited-style-name="Visited_20_Internet_20_Link">annexe A</text:a>.</text:p>
<text:bookmark text:name="ref-uninstall" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Désinstaller un module</text:h><text:p text:style-name="TexteCourant">L&#8217;utilisation de la commande <text:span text:style-name="CodeDansTexte">npm uninstall</text:span> supprime un module npm
et les fichiers qu&#8217;il a installé en toute sécurité.
La commande le retire ensuite de la liste des dépendances
du fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>.</text:p>
<text:p text:style-name="Code">$ npm uninstall cowsay</text:p><text:p text:style-name="Code">removed 10 packages in 1.963s</text:p><text:p text:style-name="Code">found 0 vulnerabilities</text:p>
<text:p text:style-name="TexteCourant">Le module <text:span text:style-name="T4">cowsay</text:span> n&#8217;est plus installé.
Que se passe-t-il si nous exécutons à nouveau un l&#8217;exemple <text:span text:style-name="CodeDansTexte">cow.js</text:span>&#160;?</text:p>
<text:p text:style-name="Code">$ node cow.js</text:p><text:p text:style-name="Code">internal/modules/cjs/loader.js:596</text:p><text:p text:style-name="Code"><text:s text:c="4"/>throw err;</text:p><text:p text:style-name="Code"><text:s text:c="4"/>^</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">Error: Cannot find module 'cowsay'</text:p>
<text:p text:style-name="TexteCourant">Le chargement du module <text:span text:style-name="T4">cowsay</text:span> a échoué car Node n&#8217;arrive pas à le trouver
—&#160;et c&#8217;est normal.</text:p>
<text:p text:style-name="TexteCourant">Nous devons à nouveau lancer la commande <text:span text:style-name="CodeDansTexte">npm install cowsay</text:span>
pour que le script fonctionne à nouveau.</text:p>
<text:bookmark text:name="ref-install" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Depuis un fichier <text:span text:style-name="">package.json</text:span></text:h><text:p text:style-name="TexteCourant">Jusqu&#8217;à présent, nous avons installé des modules en les ajoutant un par un.
La procédure est légèrement différente quand nous installons le projet de zéro
ou quand le fichier <text:span text:style-name="CodeDansTexte">package.json</text:span> a été mis à jour par un·e collègue, par exemple.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple suivante illustre la remise à zéro des modules
utilisés en exemple de ce chapitre&#160;— cf. la notice d&#8217;installation
du module <text:span text:style-name="T4">nodebook</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ cd $(nodebook dir {chapter-id} --root)</text:p><text:p text:style-name="Code">$ rm -rf node_modules</text:p><text:p text:style-name="Code">$ npm install</text:p><text:p text:style-name="Code">added 164 packages from 583 contributors in 4.781s</text:p><text:p text:style-name="Code">found 0 vulnerabilities</text:p>
<text:p text:style-name="TexteCourant">Nous nous sommes positionnés dans un répertoire qui contient
un fichier <text:span text:style-name="CodeDansTexte">package.json</text:span> puis nous avons supprimé tout ce qui aurait pu
être installé.</text:p>
<text:p text:style-name="TexteCourant">La commande <text:span text:style-name="CodeDansTexte">npm install</text:span> s&#8217;utilise de manière systématique quand
nous récupérons du code avec Git pour la première fois (<text:span text:style-name="CodeDansTexte">git clone</text:span>)
ou après une mise à jour, par exemple avec <text:span text:style-name="CodeDansTexte">git pull</text:span>.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span> vérifie que la correspondance est bien respectée
entre ce qui est installé dans le répertoire <text:span text:style-name="CodeDansTexte">node_modules</text:span> et
les modules listés dans le fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>.
La commande <text:span text:style-name="CodeDansTexte">npm install</text:span> installe, met à jour et retire les modules nécessaires.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> <text:span text:style-name="CodeDansTexte">npm ci</text:span></text:h><text:p text:style-name="Remarque">La commande <text:span text:style-name="CodeDansTexte">npm ci</text:span> réinstalle un projet de zéro de manière prédictible.
Rendez-vous dans la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-ci"  text:visited-style-name="Visited_20_Internet_20_Link">section <text:span text:style-name="CodeDansTexte">npm ci</text:span></text:a> pour en savoir plus à son sujet.</text:p>
<text:bookmark text:name="ref-install.version" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Spécifier une version</text:h><text:p text:style-name="TexteCourant">Par défaut, l&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span> installe la dernière version d&#8217;un module.
Nous avons la liberté d&#8217;en installer d&#8217;autres qui sont antérieures.
C&#8217;est pratique quand des modules npm arrêtent de supporter
des navigateurs web ou des versions de Node alors que nous les utilisons encore.</text:p>
<text:p text:style-name="TexteCourant">Nous allons utiliser le module <text:span text:style-name="T4">lodash</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/lodash" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/lodash</text:a></text:span>)
pour illustrer nos allées et venues entre différentes versions.
À l&#8217;heure où j&#8217;écris ces lignes, la version la plus récente <text:span text:style-name="T4">lodash</text:span>
est la <text:span text:style-name="CodeDansTexte">4.17.10</text:span>.
C&#8217;est ce que rapporte le résultat de la commande <text:span text:style-name="CodeDansTexte">npm install lodash</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ npm install lodash</text:p><text:p text:style-name="Code">+ lodash@4.17.10</text:p>
<text:p text:style-name="TexteCourant">L&#8217;utilisation du caractère <text:span text:style-name="CodeDansTexte">@</text:span> conjointe à un numéro de version précise
la version à installer&#160;:</text:p>
<text:p text:style-name="Code">$ npm install lodash@3.0.0</text:p><text:p text:style-name="Code">+ lodash@3.0.0</text:p>
<text:p text:style-name="TexteCourant">Nous avons installé une version précise mais il y a surement des mises à jour
qui ont suivi pour corriger des bugs.
Le problème est qu&#8217;à ce stade, nous ne connaissons pas le numéro de version
à spécifier.
Idéalement, je préfèrerais installer la version la plus récente de la série 3.
Il se trouve que l&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span> sait le faire pour nous et sans effort&#160;:</text:p>
<text:p text:style-name="Code">$ npm install lodash@3</text:p><text:p text:style-name="Code">+ lodash@<text:span text:style-name="CodeExergue">3.10.1</text:span></text:p>
<text:p text:style-name="TexteCourant">Nous pouvons faire la même chose avec la version
la plus récente de la série 3 et de la série 2.2&#160;:</text:p>
<text:p text:style-name="Code">$ npm install lodash@3</text:p><text:p text:style-name="Code">+ lodash@3.10.1</text:p><text:p text:style-name="Code">$ npm install lodash@2.2</text:p><text:p text:style-name="Code">+ lodash@2.2.1</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Connaître toutes les versions d&#8217;un module</text:h><text:p text:style-name="Remarque">La <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-view"  text:visited-style-name="Visited_20_Internet_20_Link">commande <text:span text:style-name="CodeDansTexte">npm view</text:span></text:a> affiche les informations d&#8217;un module npm
directement depuis notre terminal.
Elle affiche toutes les versions publiées avec l&#8217;argument <text:span text:style-name="CodeDansTexte">versions</text:span>&#160;:</text:p>
<text:p text:style-name="RemarqueCode">$ npm view lodash <text:span text:style-name="CodeExergue">versions</text:span></text:p><text:p text:style-name="RemarqueCode">[ '0.1.0',</text:p><text:p text:style-name="RemarqueCode"><text:s text:c="2"/>'0.2.0',</text:p><text:p text:style-name="RemarqueCode"><text:s text:c="2"/>...</text:p><text:p text:style-name="RemarqueCode"><text:s text:c="2"/>'1.0.0',</text:p><text:p text:style-name="RemarqueCode"><text:s text:c="2"/>'1.0.1',</text:p><text:p text:style-name="RemarqueCode"><text:s text:c="2"/>'1.0.2',</text:p><text:p text:style-name="RemarqueCode"><text:s text:c="2"/>... ]</text:p>
<text:p text:style-name="TexteCourant">Revenons à la version la plus récente en réutilisant la
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install"  text:visited-style-name="Visited_20_Internet_20_Link">commande d&#8217;installation</text:a> abordée auparavant&#160;:</text:p>
<text:p text:style-name="Code">$ npm install lodash</text:p><text:p text:style-name="Code">+ lodash@2.4.2</text:p>
<text:p text:style-name="TexteCourant">Quelque chose d&#8217;inattendu s&#8217;est produit&#160;: la version la plus récente
de la série 2 a été installée au lieu de la version 4.17.10.
Nous trouverons un élément de réponse dans le fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">package.json</text:p><text:p text:style-name="Code">{</text:p><text:p text:style-name="Code"><text:s text:c="2"/>...</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"dependencies": {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"cowsay": "^1.3.1",</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"lodash": "<text:span text:style-name="CodeExergue">^2.4.2</text:span>"</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span> respecte la version précisée dans le fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>
si elle n&#8217;est pas précisée dans la commande.
Si la dépendance n&#8217;est pas listée, alors l&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span> installe la version
la plus récente.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;étiquette <text:span text:style-name="CodeDansTexte">latest</text:span> explicite notre envie d&#8217;installer la version
la plus récente et sans tenir compte du fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ npm install lodash@<text:span text:style-name="CodeExergue">latest</text:span></text:p><text:p text:style-name="Code">+ lodash@4.17.10</text:p>
<text:p text:style-name="TexteCourant">Nous sommes désormais en mesure de choisir entre différentes versions
d&#8217;un module et de manière plus ou moins fine.</text:p>
<text:p text:style-name="TexteCourant">Nous prendrons le temps d&#8217;explorer le mécanisme de numérotation des versions
dans la section suivante afin de mieux comprendre ce qui est renseigné
dans le fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Connaître les étiquettes d&#8217;un module</text:h><text:p text:style-name="Remarque">La <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-view"  text:visited-style-name="Visited_20_Internet_20_Link">commande <text:span text:style-name="CodeDansTexte">npm view</text:span></text:a> va à nouveau nous aider.
Elle affiche toutes les versions publiées avec l&#8217;argument <text:span text:style-name="CodeDansTexte">dist-tags</text:span>&#160;:</text:p>
<text:p text:style-name="RemarqueCode">$ npm view lodash dist-tags</text:p><text:p text:style-name="RemarqueCode">{ <text:span text:style-name="CodeExergue">latest</text:span>: '4.17.10' }</text:p>
<text:p text:style-name="Remarque">Ce mécanisme d&#8217;étiquette sert de raccourci pour associer un numéro de version
(qui change) à un intitulé (qui reste dans le temps).</text:p>
<text:bookmark text:name="ref-semver" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Comprendre les numéros de versions (<text:span text:style-name="T4">Semantic Versioning</text:span>)</text:h><text:p text:style-name="TexteCourant">Les numéros de versions ont été utilisées de deux manières dans les
sections précédentes&#160;: avec l&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span> et en observant la liste
de dépendances dans le fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span> découpe un numéro de version en trois parties&#160;:
<text:span text:style-name="T4">majeur</text:span>, <text:span text:style-name="T4">mineur</text:span> et <text:span text:style-name="T4">patch</text:span>.
Pour le numéro de version <text:span text:style-name="CodeDansTexte">1.2.3</text:span>, <text:span text:style-name="CodeDansTexte">1</text:span> est le numéro de version majeur,
<text:span text:style-name="CodeDansTexte">2</text:span> est le numéro de version mineur tandis que  <text:span text:style-name="CodeDansTexte">3</text:span> est le numéro de version patch.</text:p>
<text:p text:style-name="TexteCourant">Si nous devions mettre à jour <text:span text:style-name="CodeDansTexte">lodash@2.2.0</text:span>&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">vers <text:span text:style-name="CodeDansTexte">lodash@2.2.1</text:span>&#160;: mise à jour patch&#160;— des bugs sont corrigés&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">vers <text:span text:style-name="CodeDansTexte">lodash@2.4.2</text:span>&#160;: mise à jour mineure&#160;— des fonctionnalités sont ajoutées,
corrigées ou modifiées et ce, sans affecter notre code&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">vers <text:span text:style-name="CodeDansTexte">lodash@4.17.10</text:span>&#160;: mise à jour majeure&#160;— des fonctionnalités ont
été modifiées, remaniées ou supprimées et peuvent casser notre code qui repose dessus.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">Une mise à jour majeure demande de lire attentivement la documentation du module
pour comprendre le volume de travail à fournir avant de monter en version.
La mise à jour mineure peut occasionnellement demander du travail selon
interprétation des développeurs de modules npm.</text:p>
<text:p text:style-name="TableauTitre">Table 5. Différentes manières d&#8217;exprimer des versions</text:p><table:table table:style-name="Tableau1"><table:table-column />,<table:table-column />,<table:table-column />,<table:table-column /><table:table-row><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Symbole</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Version</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Représentation alternative</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Représentation étendue</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">1.0.0</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>-</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>-</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">^</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">^1.0.0</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">1.x.x</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">&gt;=1.0.0 &lt;2.0.0</text:span></text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">~</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">~1.0.0</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">1.0.x</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">&gt;=1.0.0 &lt;1.1.0</text:span></text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">*</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">*</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">x.x.x</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">&gt;=0.0.1</text:span></text:p></table:table-cell></table:table-row></table:table>
<text:p text:style-name="TexteCourant">Je ne pense pas qu&#8217;il soit nécessaire de se sentir obligé·e de toujours
être positionné·e sur la dernière version majeure.
Les versions patch et mineures sont plus importantes à mes yeux
car elles contiennent des corrections qui peuvent bénéficier à nos applications.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Calculateur de version</text:h><text:p text:style-name="Remarque">L&#8217;outil en ligne <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://semver.npmjs.com" text:visited-style-name="Visited_20_Internet_20_Link">https://semver.npmjs.com</text:a></text:span> sert à tester
la syntaxe des versions sémantiques avec de véritables modules npm.</text:p>
<text:bookmark text:name="ref-update" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Mises à jour</text:h><text:p text:style-name="TexteCourant">Nous avons appris à installer des modules npm dans les versions de notre choix
et à les réinstaller depuis la liste contenue dans le fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>.
Comment savoir si ces derniers sont à mettre à jour&#160;?</text:p>
<text:p text:style-name="TexteCourant">L&#8217;utilisation combinée des commandes <text:span text:style-name="CodeDansTexte">npm outdated</text:span> et <text:span text:style-name="CodeDansTexte">npm update</text:span> va
nous permettre d&#8217;y arriver.
Il sera plus facile de comprendre cette partie si vous vous êtes familiarisé·e
avec la notion de <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-semver"  text:visited-style-name="Visited_20_Internet_20_Link">version sémantique</text:a>.</text:p>
<text:p text:style-name="TexteCourant">Commençons par installer d&#8217;anciennes versions des modules <text:span text:style-name="T4">lodash</text:span> et <text:span text:style-name="T4">cowsay</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ npm install lodash@2.0.0 cowsay@1.0.0</text:p>
<text:p text:style-name="TexteCourant">La commande <text:span text:style-name="CodeDansTexte">npm outdated</text:span> affiche les dépendances qui ne sont pas à jour&#160;:</text:p>
<text:p text:style-name="Code">$ npm outdated</text:p><text:p text:style-name="Code">Package<text:s text:c="2"/>Current<text:s text:c="2"/>Wanted<text:s text:c="3"/>Latest<text:s text:c="2"/>Location</text:p><text:p text:style-name="Code">cowsay<text:s text:c="5"/>1.0.0<text:s text:c="3"/>1.3.1<text:s text:c="4"/>1.3.1<text:s text:c="2"/>nodebook.chapter-05</text:p><text:p text:style-name="Code">lodash<text:s text:c="5"/>2.0.0<text:s text:c="3"/>2.4.2<text:s text:c="2"/>4.17.10<text:s text:c="2"/>nodebook.chapter-05</text:p>
<text:p text:style-name="TexteCourant">Le numéro de version affiché dans la colonne <text:span text:style-name="CodeDansTexte">Wanted</text:span> est celui qui sera atteint
avec la commande <text:span text:style-name="CodeDansTexte">npm update</text:span>.</text:p>
<text:p text:style-name="Code">$ npm update</text:p><text:p text:style-name="Code">+ cowsay@1.3.1</text:p><text:p text:style-name="Code">+ lodash@2.4.2</text:p><text:p text:style-name="Code">added 7 packages and updated 3 packages in 2.717s</text:p>
<text:p text:style-name="TexteCourant">Observons ce qui a changé dans les résultats de la commande <text:span text:style-name="CodeDansTexte">npm oudated</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ npm outdated</text:p><text:p text:style-name="Code">Package<text:s text:c="2"/>Current<text:s text:c="2"/>Wanted<text:s text:c="3"/>Latest<text:s text:c="2"/>Location</text:p><text:p text:style-name="Code">lodash<text:s text:c="5"/>2.4.2<text:s text:c="3"/>2.4.2<text:s text:c="2"/>4.17.10<text:s text:c="2"/>nodebook.chapter-05</text:p>
<text:p text:style-name="TexteCourant">Seul le module <text:span text:style-name="T4">lodash</text:span> est désormais listé.
Les modules <text:span text:style-name="T4">cowsay</text:span> et <text:span text:style-name="T4">lodash</text:span> ont été mis à jour au plus sûr.
Le module <text:span text:style-name="T4">lodash</text:span> peut rester en l&#8217;état si nous n&#8217;avons pas le temps
de rendre notre code compatible avec ses changements.</text:p>
<text:p text:style-name="TexteCourant">Sinon, une <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install.version"  text:visited-style-name="Visited_20_Internet_20_Link">installation manuelle</text:a> s&#8217;impose
avec l&#8217;étiquette <text:span text:style-name="CodeDansTexte">latest</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ npm install lodash@latest</text:p><text:p text:style-name="Code">+ lodash@4.17.10</text:p>
<text:p text:style-name="TexteCourant">Un dernier appel à <text:span text:style-name="CodeDansTexte">npm outdated</text:span> nous permet d&#8217;en avoir le cœur net&#160;:</text:p>
<text:p text:style-name="Code">$ npm outdated</text:p>
<text:p text:style-name="TexteCourant">Si rien ne s&#8217;affiche, c&#8217;est que tout est bon&#160;: nos modules sont à jour&#160;!</text:p>
<text:bookmark text:name="ref-autres_manières_dinstaller_et_dutiliser_des_modules_npm" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Autres manières d&#8217;installer et d&#8217;utiliser des modules npm</text:h><text:p text:style-name="TexteCourant">Dans la section précédente, nous avons appris à installer des modules
depuis le registre npm.<text:line-break/>Dans cette section, nous allons apprendre à les installer depuis des sources
variées, uniquement à des fins de développement ou en tant que
commandes exécutables au niveau du système d&#8217;exploitation.</text:p>
<text:bookmark text:name="ref-install.git" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Depuis GitHub, GitLab ou un dépôt Git</text:h><text:p text:style-name="TexteCourant">Il arrive que l&#8217;auteur ou autrice d&#8217;un module npm corrige un problème
sans publier le correctif sur le registre npm.
Il arrive aussi qu&#8217;un module npm soit hébergé de manière publique ou privée
sur une plate-forme d&#8217;hébergement Git comme GitLab ou GitHub et ce,
sans passer par le registre npm.</text:p>
<text:p text:style-name="TexteCourant">Le module npm <text:span text:style-name="T4">cowsay</text:span> est publié sur le registre npm mais il est aussi
hébergé sur GitHub à l&#8217;adresse <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/piuccio/cowsay" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/piuccio/cowsay</text:a></text:span>.
Installons-le depuis cette source&#160;:</text:p>
<text:p text:style-name="Code">$ npm install https://github.com/piuccio/cowsay</text:p><text:p text:style-name="Code">+ cowsay@1.3.1</text:p><text:p text:style-name="Code">updated 1 package in 5.866s</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exéxutable <text:span text:style-name="CodeDansTexte">npm</text:span> vérifie qu&#8217;un fichier <text:span text:style-name="CodeDansTexte">package.json</text:span> est situé à la racine
du dépôt.
Dans ce cas de figure, il utilise le programme Git pour obtenir le code source
du module npm.</text:p>
<text:p text:style-name="TexteCourant">Une écriture raccourcie existe pour installer un module depuis un hébergement
Git populaire, sans avoir à écrire l&#8217;URL en entier&#160;:</text:p>
<text:p text:style-name="Code">$ npm install github:piuccio/cowsay</text:p><text:p text:style-name="Code">+ cowsay@1.3.1</text:p><text:p text:style-name="Code">updated 1 package in 4.513s</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Considérations</text:span> Performance d&#8217;accès à Git</text:h><text:p text:style-name="Remarque">L&#8217;installation est plus lente depuis un dépôt Git que depuis un registre npm.
L&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span> fait appel à l&#8217;exécutable <text:span text:style-name="CodeDansTexte">git</text:span> pour cloner l&#8217;historique
du dépôt et de ses dépendances pour extraire la version adéquate
de la copie de travail.</text:p>
<text:p text:style-name="Remarque">Le temps de téléchargement sera proportionnel au nombre de <text:span text:style-name="T4">commits</text:span>.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span> sait aussi installer des modules avec le protocole
<text:span text:style-name="T4">Secure Shell</text:span> (<text:span text:style-name="T4">SSH</text:span>) désigné par <text:span text:style-name="CodeDansTexte">git+ssh</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ npm install git+ssh://git@github.com:piuccio/cowsay.git</text:p><text:p text:style-name="Code">+ cowsay@1.3.1</text:p><text:p text:style-name="Code">updated 1 package in 10.263s</text:p>
<text:p text:style-name="TexteCourant">Les clients Git et SSH doivent être configurés au niveau du système pour
être en mesure de s&#8217;authentifier sur l&#8217;hôte distant.<text:line-break/>C&#8217;est une solution intéressante pour automatiser l&#8217;installation de modules privés.
L&#8217;étape suivante serait de déployer un registre npm privé ou de souscrire
une option payante sur le registre npm principal.</text:p>
<text:bookmark text:name="ref-install.dev" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Dépendance de développement</text:h><text:p text:style-name="TexteCourant">Les dépendances de développement sont des modules npm utilisés
pour <text:span text:style-name="T7">exécuter les tests unitaires</text:span>.
Les <text:span text:style-name="T7">modules utilisés pour de l&#8217;outillage</text:span> sont aussi des dépendances de développement.
Ce sont des modules que nous n&#8217;appelons pas directement avec les
fonctions <text:span text:style-name="CodeDansTexte">require()</text:span> et <text:span text:style-name="CodeDansTexte">import</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Par exemple, le module npm <text:span text:style-name="T4">mocha</text:span> est utilisé pour structurer et exécuter
des tests unitaires pour Node et les navigateurs web.
Il serait donc logique de l&#8217;installer comme dépendance de développement.
L&#8217;option <text:span text:style-name="CodeDansTexte">--save-dev</text:span> permet de signaler cette intention à l&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ npm install --save-dev mocha</text:p><text:p text:style-name="Code">+ mocha@5.2.0</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span> range alors ce module dans une nouvelle section du
fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>&#160;— la section <text:span text:style-name="CodeDansTexte">devDependencies</text:span>&#160;:</text:p>
<text:p text:style-name="Code">{</text:p><text:p text:style-name="Code"><text:s text:c="2"/>...</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"dependencies": {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"cowsay": "^1.3.1",</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"lodash": "^4.17.10"</text:p><text:p text:style-name="Code"><text:s text:c="2"/>},</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"<text:span text:style-name="CodeExergue">devDependencies</text:span>": {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"mocha": "^5.2.0"</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Optimisation</text:span> Installer seulement les dépendances de production</text:h><text:p text:style-name="Remarque">La <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install"  text:visited-style-name="Visited_20_Internet_20_Link">commande <text:span text:style-name="CodeDansTexte">npm install</text:span></text:a> accepte l&#8217;option <text:span text:style-name="CodeDansTexte">--production</text:span>.
Elle installe seulement les dépendances listées dans la section <text:span text:style-name="CodeDansTexte">dependencies</text:span>&#160;:</text:p>
<text:p text:style-name="RemarqueCode">$ npm install --production</text:p>
<text:p text:style-name="Remarque">Le <text:span text:style-name="T7">poids d&#8217;installation est ainsi réduit</text:span>.
C&#8217;est l&#8217;idéal dans le cas du déploiement de
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-lambda"  text:visited-style-name="Visited_20_Internet_20_Link">fonctions événementielles</text:a>
(cf. <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-06"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 6</text:a>).</text:p>
<text:bookmark text:name="ref-install.global" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Exécutable système (installation globale)</text:h><text:p text:style-name="TexteCourant">Certains modules npm s&#8217;installent comme des programmes exécutables.
Ils s&#8217;appellent ensuite dans un terminal, exactement comme nous le faisions
jusqu&#8217;à présent avec l&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span>.</text:p>
<text:p text:style-name="TexteCourant">C&#8217;est le cas du module <text:span text:style-name="T4">serve</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/serve" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/serve</text:a></text:span>), par exemple.
Il démarre un serveur web en ligne de commande pour tester le rendu
de fichiers HTML sans avoir à configurer de logiciels comme <text:span text:style-name="T4">Apache</text:span> ou <text:span text:style-name="T4">nginx</text:span>.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;installation est rendue globale&#160;— à l&#8217;échelle du système d&#8217;exploitation
—&#160;avec l&#8217;utilisation de l&#8217;option <text:span text:style-name="CodeDansTexte">--global</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ npm install <text:span text:style-name="CodeExergue">--global</text:span> serve</text:p><text:p text:style-name="Code">+ serve@7.2.0</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Question</text:span> Comment savoir si un module npm s&#8217;installe comme un exécutable système ?</text:h><text:p text:style-name="Remarque">En général, les modules npm qui se prêtent bien au jeu du <text:span text:style-name="CodeDansTexte">npm install --global</text:span>
sont ceux qui documentent des exemples de commande à exécuter,
qui se décrivent comme des outils en ligne de commande ou qui
mentionnent explicitement l&#8217;installation globale.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exécutable <text:span text:style-name="CodeDansTexte">serve</text:span> est disponible suite à l&#8217;installation globale&#160;:</text:p>
<text:p text:style-name="Code">$ serve --version</text:p><text:p text:style-name="Code">7.2.0</text:p>
<text:p text:style-name="TexteCourant">Le module npm s&#8217;exécute de manière transparente, sans invoquer Node ni
l&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ serve .</text:p><text:p text:style-name="Code">INFO: Accepting connections at http://localhost:3000</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> L&#8217;option <text:span text:style-name="CodeDansTexte">--help</text:span></text:h><text:p text:style-name="Remarque">Par convention, les modules npm qui s&#8217;utilisent en ligne de commande
sont accompagnés d&#8217;une documentation.
Ce manuel décrit des cas d&#8217;usages ainsi que les options à disposition.</text:p>
<text:p text:style-name="Remarque">Affichage de la documentation du module npm <text:span text:style-name="T4">serve</text:span> depuis la ligne de commande.</text:p><text:p text:style-name="RemarqueCode">$ serve --help</text:p>
<text:p text:style-name="TexteCourant">Un module npm installé de manière globale se désinstalle en passant l&#8217;option
<text:span text:style-name="CodeDansTexte">--global</text:span> à la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-uninstall"  text:visited-style-name="Visited_20_Internet_20_Link">commande <text:span text:style-name="CodeDansTexte">npm uninstall</text:span></text:a>&#160;:</text:p>
<text:p text:style-name="Code">$ npm uninstall -g serve</text:p>
<text:p text:style-name="TexteCourant">Le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-08"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 8</text:a> sera l&#8217;occasion d&#8217;entrer plus en détails
dans le développement d&#8217;exécutables système écrits en ECMAScript.</text:p>
<text:bookmark text:name="ref-scripts" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Outiller un projet avec les scripts npm</text:h><text:p text:style-name="TexteCourant">Les scripts npm sont des outils puissants qui <text:span text:style-name="T7">autonomisent l&#8217;outillage projet</text:span>,
<text:span text:style-name="T7">automatisent des actions</text:span> manuelles et <text:span text:style-name="T7">simplifient des actions</text:span> trop
complexes à mémoriser.</text:p>
<text:p text:style-name="TexteCourant">Les scripts npm sont consignés dans la section <text:span text:style-name="CodeDansTexte">scripts</text:span> du fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>.
Ils se basent sur des scripts Node et des modules npm pour
lancer des actions quand des fichiers sont modifiés,
transformer des feuilles de style, exécuter des tests unitaires ou fonctionnels,
déployer le projet, entre autres.</text:p>
<text:p text:style-name="TexteCourant">Les scripts npm permettent de créer des conventions entre nos projets.
Nous pouvons ainsi réutiliser les mêmes noms et adapter les commandes
au projet en question.</text:p>
<text:bookmark text:name="ref-start" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Démarrer l&#8217;application</text:h><text:p text:style-name="TexteCourant">Le script <text:span text:style-name="CodeDansTexte">npm start</text:span> concerne les projets dont le script principal
tourne en continu&#160;— une application web par exemple.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple suivant démarre un serveur web sans que nous ayons à connaître
la commande associée pour démarrer le-dit serveur&#160;:</text:p>
<text:p text:style-name="Code">$ npm start</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">&gt; nodebook.chapter-05@1.0.0 start<text:s text:c="9"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">&gt; micro examples/app.js<text:s text:c="19"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">micro: Accepting connections on port 3000</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> L&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span> affiche le nom du script npm en cours d&#8217;exécution<text:line-break/><text:span text:style-name="PuceCode">2</text:span> <text:span text:style-name="CodeDansTexte">micro examples/app.js</text:span> est la commande réellement exécutée par npm<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Nous sommes libre de renseigner la valeur du champ <text:span text:style-name="CodeDansTexte">scripts.start</text:span>
du fichier <text:span text:style-name="CodeDansTexte">package.json</text:span> comme bon nous semble&#160;:</text:p>
<text:p text:style-name="CodeTitre">package.json</text:p><text:p text:style-name="Code">{</text:p><text:p text:style-name="Code"><text:s text:c="2"/>...</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"scripts": {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"start": "micro examples/app.js"</text:p><text:p text:style-name="Code"><text:s text:c="2"/>},</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"dependencies": {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"micro": "^9.3.2"</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant">Nous avons utilisé le module npm <text:span text:style-name="T4">micro</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/micro" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/micro</text:a></text:span>)
pour démarrer une application web.
Plus exactement, nous avons utilisé l&#8217;exécutable fourni par ce module.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Les modules npm exécutables dans les scripts npm</text:h><text:p text:style-name="Remarque">Les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install.global"  text:visited-style-name="Visited_20_Internet_20_Link">modules npm exécutables</text:a> sont disponibles au niveau du
système lorsqu&#8217;ils sont installés avec l&#8217;option <text:span text:style-name="CodeDansTexte">--global</text:span>.</text:p>
<text:p text:style-name="Remarque">Les exécutables des modules npm listés dans <text:span text:style-name="CodeDansTexte">dependencies</text:span> et <text:span text:style-name="CodeDansTexte">devDependencies</text:span>
sont utilisables dans les scripts npm.</text:p>
<text:p text:style-name="Remarque">Nous pouvons ainsi contenir tous les exécutables nécessaires dans les
dépendances du projet.</text:p>
<text:p text:style-name="TexteCourant">Nous verrons dans le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-../chapter-06/index.adoc"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 6</text:a> que les
plates-formes de service utilisent aussi la valeur du champ <text:span text:style-name="CodeDansTexte">scripts.start</text:span>
pour déterminer comment démarrer notre application.</text:p>
<text:bookmark text:name="ref-test" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Exécuter des tests</text:h><text:p text:style-name="TexteCourant">Le script <text:span text:style-name="CodeDansTexte">npm test</text:span> concerne tous les projets pour qui nous avons écrit
des tests qu&#8217;ils soient unitaires ou fonctionnels.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;intention de la commande lancée par le script npm est de terminer
en erreur si un des tests n&#8217;aboutit pas au résultat escompté.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple suivant lance un test unitaire qui s&#8217;assure de la cohérence
d&#8217;un des exemples précédents&#160;:</text:p>
<text:p text:style-name="Code">$ npm test</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">&gt; nodebook.chapter-05@1.0.0 test<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">&gt; mocha examples/tests.js<text:s text:c="9"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">app.js</text:p><text:p text:style-name="Code"><text:s text:c="2"/>✓ prints a cow as a response</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">1 passing</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> L&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span> affiche le nom du script npm en cours d&#8217;exécution<text:line-break/><text:span text:style-name="PuceCode">2</text:span> <text:span text:style-name="CodeDansTexte">mocha examples/tests.js</text:span> est la commande réellement exécutée par npm<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Cette fois-ci, nous avons personnalisé la valeur du champ <text:span text:style-name="CodeDansTexte">scripts.test</text:span>
du fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">package.json</text:p><text:p text:style-name="Code">{</text:p><text:p text:style-name="Code"><text:s text:c="2"/>...</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"scripts": {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"test": "mocha examples/tests.js"</text:p><text:p text:style-name="Code"><text:s text:c="2"/>},</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"devDependencies": {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"mocha": "^5.2.0"</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant">Nous avons eu recourt au module npm <text:span text:style-name="T4">mocha</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/mocha" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/mocha</text:a></text:span>).
De même qu&#8217;avec le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-start"  text:visited-style-name="Visited_20_Internet_20_Link">script de démarrage</text:a>, nous avons eu recourt
à l&#8217;exécutable fourni par le module.
En revanche nous l&#8217;avons listé dans la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install.dev"  text:visited-style-name="Visited_20_Internet_20_Link">section <text:span text:style-name="CodeDansTexte">devDependencies</text:span></text:a>
car il est relatif à l&#8217;outillage du projet.</text:p>
<text:p text:style-name="TexteCourant">Les services d&#8217;intégration continue lancent le script <text:span text:style-name="CodeDansTexte">npm test</text:span>
lorsqu&#8217;ils détectent qu&#8217;ils ont affaire à un projet Node.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> Scripts définis par npm</text:h><text:p text:style-name="Remarque">D&#8217;autres scripts que <text:span text:style-name="CodeDansTexte">test</text:span> et <text:span text:style-name="CodeDansTexte">start</text:span> sont définis par l&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span>.
Ils sont tous documentés sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://docs.npmjs.com/misc/scripts" text:visited-style-name="Visited_20_Internet_20_Link">https://docs.npmjs.com/misc/scripts</text:a></text:span>.</text:p>
<text:bookmark text:name="ref-run" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Créer un script npm personnalisé</text:h><text:p text:style-name="TexteCourant">Les scripts npm personnalisés sont utiles <text:span text:style-name="T7">lorsque nous souhaitons outiller</text:span>
notre projet sans forcément que ça soit en rapport avec le lancement des tests
ou de l&#8217;application.</text:p>
<text:p text:style-name="TexteCourant">Les scripts personnalisés se démarrent avec <text:span text:style-name="CodeDansTexte">npm run</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ npm <text:span text:style-name="CodeExergue">run</text:span> print-args</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">&gt; nodebook.chapter-05@1.0.0 print-args</text:p><text:p text:style-name="Code">&gt; node examples/print-args.js</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">Rien à signaler.</text:p>
<text:p text:style-name="TexteCourant">Nous avons créé ce script en configurant la valeur du champ <text:span text:style-name="CodeDansTexte">scripts.print-args</text:span>
du fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">package.json</text:p><text:p text:style-name="Code">{</text:p><text:p text:style-name="Code"><text:s text:c="2"/>...</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"scripts": {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"print-args": "node examples/print-args.js"</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Lister les scripts disponibles</text:h><text:p text:style-name="Remarque">La commande <text:span text:style-name="CodeDansTexte">npm run</text:span> (sans argument) liste tous les scripts npm du projet.</text:p>
<text:p text:style-name="TexteCourant">J&#8217;ai développé ces conventions avec le temps&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="CodeDansTexte">npm run build</text:span>&#160;: construit les artéfacts à déployer&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="CodeDansTexte">npm run deploy</text:span>&#160;: déploie le projet vers l&#8217;hébergeur&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="CodeDansTexte">npm run lint</text:span>&#160;: applique un vérificateur syntaxique au code du projet&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="CodeDansTexte">npm run watch</text:span>&#160;: démarre l&#8217;application et la relance à chaque changement.</text:p>
</text:list-item></text:list>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Passer des arguments à un script npm</text:h><text:p text:style-name="Remarque">Une option spéciale nous aide à transmettre des arguments au script en question.
Les arguments doivent être placés à droite de l&#8217;option <text:span text:style-name="CodeDansTexte">--</text:span>&#160;:</text:p>
<text:p text:style-name="RemarqueCode">$ npm run print-args un --test=true</text:p><text:p text:style-name="RemarqueCode">['un']</text:p><text:p text:style-name="RemarqueCode">$ npm run print-args -- un --test=true</text:p><text:p text:style-name="RemarqueCode">['un', '--test=true']</text:p>
<text:p text:style-name="TexteCourant">Un script npm peut faire appel à d&#8217;autres scripts npm&#160;:</text:p>
<text:p text:style-name="CodeTitre">package.json</text:p><text:p text:style-name="Code">{</text:p><text:p text:style-name="Code"><text:s text:c="2"/>...</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"scripts": {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"lint": "eslint ./examples",</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"test": "npm run lint <text:span text:style-name="CodeExergue">&amp;&amp;</text:span> mocha examples/tests.js"</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant">J&#8217;ai plutôt tendance à découper mes scripts de sorte à ce qu&#8217;ils fassent
tous une chose et une seule.
Je peux ainsi les appeler de manière individuelle pour réduire la boucle
de feedback.</text:p>
<text:p text:style-name="CodeTitre">package.json</text:p><text:p text:style-name="Code">{</text:p><text:p text:style-name="Code"><text:s text:c="2"/>...</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"scripts": {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"lint": "eslint ./examples",</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"test": "npm run lint &amp;&amp; npm run test:unit",</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"test:unit": "mocha examples/tests.js"</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant">La section suivante va nous aider à orchestrer l&#8217;exécution des scripts
les uns par rapport aux autres.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Accéder aux valeurs du fichier <text:span text:style-name="CodeDansTexte">package.json</text:span></text:h><text:p text:style-name="Remarque">Toutes les sections du fichier <text:span text:style-name="CodeDansTexte">package.json</text:span> sont accessibles depuis
les scripts npm sous forme de
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.argv"  text:visited-style-name="Visited_20_Internet_20_Link">variables d&#8217;environnement</text:a>.
Leur nom est préfixé par <text:span text:style-name="CodeDansTexte">npm_package</text:span> suivi de leur nom "mis à plat".
Ainsi le champ <text:span text:style-name="CodeDansTexte">version</text:span> est accessible en tant que <text:span text:style-name="CodeDansTexte">$npm_package_version</text:span>
et le champ <text:span text:style-name="CodeDansTexte">config.port</text:span> en tant que <text:span text:style-name="CodeDansTexte">$npm_package_config_port</text:span>&#160;:</text:p>
<text:p text:style-name="Remarque">package.json</text:p><text:p text:style-name="RemarqueCode">{</text:p><text:p text:style-name="RemarqueCode"><text:s text:c="2"/>...</text:p><text:p text:style-name="RemarqueCode"><text:s text:c="2"/>"<text:span text:style-name="CodeExergue">config</text:span>": {</text:p><text:p text:style-name="RemarqueCode"><text:s text:c="4"/>"<text:span text:style-name="CodeExergue">port</text:span>": "4000"</text:p><text:p text:style-name="RemarqueCode"><text:s text:c="2"/>};</text:p><text:p text:style-name="RemarqueCode"><text:s text:c="2"/>"scripts": {</text:p><text:p text:style-name="RemarqueCode"><text:s text:c="4"/>"start": "node server --port $npm_package_<text:span text:style-name="CodeExergue">config</text:span>_<text:span text:style-name="CodeExergue">port</text:span>",</text:p><text:p text:style-name="RemarqueCode"><text:s text:c="2"/>}</text:p><text:p text:style-name="RemarqueCode">}</text:p>
<text:bookmark text:name="ref-run-pre-post" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Exécuter des commandes avant et après des scripts npm</text:h><text:p text:style-name="TexteCourant">L&#8217;ordre d&#8217;exécution des scripts se contrôle en utilisant les préfixes
<text:span text:style-name="CodeDansTexte">pre</text:span> et <text:span text:style-name="CodeDansTexte">post</text:span>.
Par exemple, les scripts nommés <text:span text:style-name="CodeDansTexte">pretest</text:span> et <text:span text:style-name="CodeDansTexte">posttest</text:span> seront exécutés
respectivement avant et après le script <text:span text:style-name="CodeDansTexte">test</text:span>.</text:p>
<text:p text:style-name="CodeTitre">package.json</text:p><text:p text:style-name="Code">{</text:p><text:p text:style-name="Code"><text:s text:c="2"/>...</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"scripts": {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"lint": "eslint ./examples",</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"test": "mocha examples/tests.js",</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"<text:span text:style-name="CodeExergue">pre</text:span>test": "npm run lint"</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant">Dans cet exemple de configuration, l&#8217;exécution de la commande <text:span text:style-name="CodeDansTexte">npm test</text:span>
lancera d&#8217;abord le script <text:span text:style-name="CodeDansTexte">pretest</text:span>, puis le script <text:span text:style-name="CodeDansTexte">lint</text:span>
puis enfin le script <text:span text:style-name="CodeDansTexte">test</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ npm test</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">&gt; nodebook.chapter-05@1.0.0 pretest</text:p><text:p text:style-name="Code">&gt; npm run lint</text:p><text:p text:style-name="Code">...</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">&gt; nodebook.chapter-05@1.0.0 lint</text:p><text:p text:style-name="Code">&gt; eslint ./examples</text:p><text:p text:style-name="Code">...</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">&gt; nodebook.chapter-05@1.0.0 test</text:p><text:p text:style-name="Code">&gt; mocha examples/tests.js</text:p><text:p text:style-name="Code">...</text:p>
<text:p text:style-name="TexteCourant">Ce mécanisme est utile pour s&#8217;intercaler sur des temps particuliers
du cycle de vie d&#8217;un projet node.
Voici une sélection</text:p>
<table:table table:style-name="Tableau1"><table:table-column />,<table:table-column />,<table:table-column /><table:table-row><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Script</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Quand</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Pourquoi</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">pretest</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Avant les tests</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Préparer l&#8217;espace de travail</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">posttest</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Après les tests</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Vérifier les règles de syntaxe de notre code</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">postinstall</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Après installation les dépendances</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Préparation significative du projet (téléchargements supplémentaires, etc.)</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">prestart</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Avant de démarrer l&#8217;application</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Préparatifs légers</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">prepublishOnly</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Avant de publier le module</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Préparation du projet avant de le distribuer (compilation de fichiers, etc.)</text:p></table:table-cell></table:table-row></table:table>
<text:bookmark text:name="ref-run-all" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Automatiser tout l&#8217;outillage projet</text:h><text:p text:style-name="TexteCourant">Les scripts npm suffisent à outiller la majorité des projets.
Cependant ils peuvent devenir difficiles à lire lorsque les
lignes deviennent trop longues.
Il manquerait presque un moyen de les regrouper.</text:p>
<text:p text:style-name="TexteCourant">Le module npm <text:span text:style-name="T4">npm-run-all</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/npm-run-all" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/npm-run-all</text:a></text:span>) est un
module qui parallélise l&#8217;exécution des scripts et simplifie l&#8217;appel d&#8217;un groupe
de scripts.</text:p>
<text:p text:style-name="CodeTitre">package.json</text:p><text:p text:style-name="Code">{</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"scripts": {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"build": "npm-run-all --parallel 'build:*'", <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>"build:front-end": "browserify ...",</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"build:backend": "browserify ...",</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"build:css": "sass ..."</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"devDependencies": {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"npm-run-all": "*"</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Les trois scripts préfixés par <text:span text:style-name="CodeDansTexte">build:</text:span> seront appelés en parallèle en exécutant <text:span text:style-name="CodeDansTexte">npm run build</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Il est aussi possible de déclencher des actions parallèles après une première
action séquentielle&#160;:</text:p>
<text:p text:style-name="CodeTitre">package.json</text:p><text:p text:style-name="Code">{</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"scripts": {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"clean": "rm -rf ./dist",</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"build": "npm-run-all clean --parallel 'build:*'", <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>"build:front-end": "browserify ...",</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"build:backend": "browserify ..."</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"devDependencies": {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"npm-run-all": "*"</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> <text:span text:style-name="CodeDansTexte">npm-run-all</text:span> exécute le script <text:span text:style-name="CodeDansTexte">clean</text:span> avant les autres scripts préfixés par <text:span text:style-name="CodeDansTexte">build:</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Libre à vous d&#8217;orchestrer les scripts en les groupant avec un motif de noms
ainsi qu&#8217;en combinant les options <text:span text:style-name="CodeDansTexte">--parallel</text:span> (alias <text:span text:style-name="CodeDansTexte">-p</text:span>)
et <text:span text:style-name="CodeDansTexte">--sequential</text:span> (alias <text:span text:style-name="CodeDansTexte">-s</text:span>) pour activer ou désactiver
le parallélisme d&#8217;exécution.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Question</text:span> Pourtant j&#8217;ai entendu parler de Gulp et de Grunt</text:h><text:p text:style-name="Remarque">L&#8217;énorme avantage d&#8217;outiller un projet avec la commande <text:span text:style-name="CodeDansTexte">npm run</text:span> et
l&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm-run-script</text:span> est que nous utilisons directement les outils
dont nous avons besoin.</text:p>
<text:p text:style-name="Remarque">Gulp et Grunt introduisent une complexité d&#8217;apprentissage et des couches
d&#8217;abstraction qui augmentent la fragilité de l&#8217;outillage et augmentent
la barrière d&#8217;entrée de nos projets.</text:p>
<text:p text:style-name="Remarque">Tant mieux si nous pouvons nous en passer pour façonner nos propres outils.</text:p>
<text:bookmark text:name="ref-package.json" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Anatomie du fichier <text:span text:style-name="">package.json</text:span></text:h><text:p text:style-name="TexteCourant">Le fichier <text:span text:style-name="CodeDansTexte">package.json</text:span> est essentiel pour tirer parti de l&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span>.
Tout projet intéressé par l'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install"  text:visited-style-name="Visited_20_Internet_20_Link">installation de modules npm</text:a> ou par
l'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-scripts"  text:visited-style-name="Visited_20_Internet_20_Link">outillage des scripts</text:a> va forcément avoir ce fichier quelque
part dans son arborescence.</text:p>
<text:p text:style-name="TexteCourant">On peut décomposer ce fichier en plusieurs parties&#160;:
les <text:span text:style-name="T7">informations générales</text:span> qui aident les utilisateurs et utilisatrices
à découvrir le module en <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-registry"  text:visited-style-name="Visited_20_Internet_20_Link">effectuant une recherche</text:a>,
les <text:span text:style-name="T7">points d&#8217;entrée</text:span> pour inclure ou exécuter le module
et la <text:span text:style-name="T7">configuration projet</text:span> qui impacte le fonctionnement de l&#8217;exécutable npm.</text:p>
<text:p text:style-name="TableauTitre">Table 6. Informations pour faciliter la découverte et la compréhension</text:p><table:table table:style-name="Tableau1"><table:table-column />,<table:table-column />,<table:table-column />,<table:table-column />,<table:table-column /><table:table-row><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Section</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Obligatoire&#160;?</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Type</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Modifiable</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Description</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">version</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-semver"  text:visited-style-name="Visited_20_Internet_20_Link">Semver</text:a></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Avec <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-version"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="CodeDansTexte">npm version</text:span></text:a></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p></text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">description</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Texte</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>À la main</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Explique l&#8217;intention du module à une personne qui le découvre</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">keywords</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Tableau de texte</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>À la main</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Facilite sa découverte sur <text:span text:style-name="URL">npmjs.com</text:span></text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">homepage</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Texte (URL)</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>À la main</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Indique où trouver de la documentation et des exemples d&#8217;utilisation — ça peut être l&#8217;adresse du dépôt GitLab ou GitHub</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">license</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Texte</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>À la main</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Explicite les conditions de réutilisation du code dans un autre projet</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">bugs.url</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Texte (URL)</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>À la main</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Facilite la remontée de bugs</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">repository.type</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Texte</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>À la main</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>En général la valeur est <text:span text:style-name="CodeDansTexte">git</text:span></text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">repository.url</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Texte (URL)</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>À la main</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Facilite la découverte du code source à l&#8217;origine du module</text:p></table:table-cell></table:table-row></table:table>
<text:p text:style-name="TableauTitre">Table 7. Points d&#8217;entrée pour utiliser votre module</text:p><table:table table:style-name="Tableau1"><table:table-column />,<table:table-column />,<table:table-column />,<table:table-column />,<table:table-column /><table:table-row><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Section</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Obligatoire&#160;?</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Type</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Modifiable</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Description</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">name</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Texte</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>À la main</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Correspond au nom à spécifier aux fonctions <text:span text:style-name="CodeDansTexte">require()</text:span> et <text:span text:style-name="CodeDansTexte">import</text:span> — Un changement de nom obligera de mettre à jour tous les scripts qui appelle ce module</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">main</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Texte (chemin)</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>À la main</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Script qui sera utilisé lors de l&#8217;appel à <text:span text:style-name="CodeDansTexte">require()</text:span> et <text:span text:style-name="CodeDansTexte">import</text:span> — par défaut <text:span text:style-name="CodeDansTexte">index.js</text:span></text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">bin</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Texte (chemin)</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>À la main</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Script qui sera utilisé comme exécutable lors de l&#8217;appel <text:span text:style-name="CodeDansTexte">npx &lt;module&gt;</text:span></text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">bin</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Objet (nom/chemin)</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>À la main</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Idem — forme qui permet de déclarer plusieurs exécutables au sein d&#8217;un même module</text:p></table:table-cell></table:table-row></table:table>
<text:p text:style-name="TableauTitre">Table 8. Configuration projet pour l&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span></text:p><table:table table:style-name="Tableau1"><table:table-column />,<table:table-column />,<table:table-column />,<table:table-column />,<table:table-column /><table:table-row><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Section</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Obligatoire&#160;?</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Type</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Modifiable</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Description</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">private</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Booléen</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>À la main</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Empêche la publication accidentelle sur le registre npm</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">engines</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Objet (nom/<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-semver"  text:visited-style-name="Visited_20_Internet_20_Link">SemVer</text:a>)</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>À la main</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Certains hébergeurs utilisent ce champ pour déterminer la version de Node à utiliser</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">dependencies</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Objet (nom/<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-semver"  text:visited-style-name="Visited_20_Internet_20_Link">SemVer</text:a>)</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Avec <text:span text:style-name="CodeDansTexte">npm install</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Voir la section <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install"  text:visited-style-name="Visited_20_Internet_20_Link">installer des modules npm</text:a></text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">devDependencies</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Objet (nom/<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-semver"  text:visited-style-name="Visited_20_Internet_20_Link">SemVer</text:a>)</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Avec <text:span text:style-name="CodeDansTexte">npm install</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Voir la section <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install.dev"  text:visited-style-name="Visited_20_Internet_20_Link">dépendances de développement</text:a></text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">scripts</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Objet (nom/commande)</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>À la main</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Voir la section <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-scripts"  text:visited-style-name="Visited_20_Internet_20_Link">scripts npm</text:a></text:p></table:table-cell></table:table-row></table:table>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> Tout sur le fichier <text:span text:style-name="CodeDansTexte">package.json</text:span></text:h><text:p text:style-name="Remarque">La page <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://docs.npmjs.com/files/package.json" text:visited-style-name="Visited_20_Internet_20_Link">https://docs.npmjs.com/files/package.json</text:a></text:span> documente
de manière exhaustive les sections du fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>.</text:p>
<text:p text:style-name="Remarque">En la lisant, vous apprendrez l&#8217;existence d&#8217;autres sections qui pourraient
peut-être vous intéresser.</text:p>
<text:bookmark text:name="ref-commands" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Quelques commandes pour aller plus loin</text:h><text:p text:style-name="TexteCourant">Nous venons de voir les commandes les plus utilisées de l&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span>.
D&#8217;autres commandes complètent son utilisation.
Leur intérêt varie en fonction de vos envies et de vos pratiques de développement.
Pas d&#8217;inquiétude donc si vous ne les utilisez pas toutes&#160;:
j&#8217;en parle pour <text:span text:style-name="T7">éclairer quelques points intéressants à explorer</text:span>.</text:p>
<text:bookmark text:name="ref-view" /><text:h text:style-name="TitreNiveau2" text:outline-level="3"><text:span text:style-name="">npm view</text:span> : voir les informations d&#8217;un module</text:h><text:p text:style-name="TexteCourant">La commande <text:span text:style-name="CodeDansTexte">npm view</text:span> est une vue synthétique d&#8217;un module npm donné.
Elle est similaire à celle que nous pourrions trouver sur le registre npm
mais condensée pour l&#8217;affichage dans un terminal.</text:p>
<text:p text:style-name="TexteCourant">Nous y retrouvons des informations fournies par les auteurs et autrices du module
ainsi que d&#8217;autres, fournies par le registre npm.</text:p>
<text:p text:style-name="Code">$ npm view nodebook</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">nodebook@0.9.1 | CC-BY-NC-SA-4.0 | deps: 6 | versions: 21</text:p><text:p text:style-name="Code">Node.js — Apprendre par l'exemple</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">keywords: nodejs, book, french, livre, learn, apprendre</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">bin: nodebook</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">dist</text:p><text:p text:style-name="Code">.tarball https://registry.npmjs.org/nodebook/nodebook-0.9.1.tgz</text:p><text:p text:style-name="Code">.shasum: 5ea87e9b85782e23164705a49cb7bd2dc4063775</text:p><text:p text:style-name="Code">.integrity: sha512-...</text:p><text:p text:style-name="Code">.unpackedSize: 15.0 MB</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">dependencies:</text:p><text:p text:style-name="Code">finalhandler: ^1.1.1<text:s text:c="2"/>serve-static: ^1.13.2</text:p><text:p text:style-name="Code">get-port: ^3.2.0<text:s text:c="6"/>update-check: ^1.5.2</text:p><text:p text:style-name="Code">glob: ^7.1.2<text:s text:c="10"/>yargs: ^11.1.0</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">maintainers:</text:p><text:p text:style-name="Code">- oncletom</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">dist-tags:</text:p><text:p text:style-name="Code">latest: 0.9.1</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">published 23 hours ago by oncletom</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">bin</text:span></text:span><text:line-break/><text:tab/>Indique la présence d&#8217;un ou plusieurs <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install.global"  text:visited-style-name="Visited_20_Internet_20_Link">exécutables</text:a>.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">dist</text:span></text:span><text:line-break/><text:tab/>Informations à propos du fichier téléchargé quand
nous faisons <text:span text:style-name="CodeDansTexte">npm install &lt;module&gt;</text:span>.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">dependencies</text:span></text:span><text:line-break/><text:tab/>Les modules additionnels téléchargés lors de l&#8217;installation.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">dist-tags</text:span></text:span><text:line-break/><text:tab/>Les étiquettes définies par les auteurs et autrices, utiles quand nous souhaitons
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install.version"  text:visited-style-name="Visited_20_Internet_20_Link">jongler entre différentes versions</text:a> du module.</text:p>
<text:p text:style-name="TexteCourant">Nous pouvons aussi zoomer sur une métadonnée.
Par exemple, le champ <text:span text:style-name="CodeDansTexte">dependencies</text:span> pour ne lister que les dépendances directes&#160;:</text:p>
<text:p text:style-name="Code">$ npm view nodebook dependencies</text:p><text:p text:style-name="Code">{ finalhandler: '^1.1.1',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>'get-port': '^3.2.0',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>glob: '^7.1.2',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>'serve-static': '^1.13.2',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>'update-check': '^1.5.2',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>yargs: '^11.1.0' }</text:p>
<text:p text:style-name="TexteCourant">Il est même possible de zoomer sur un niveau plus fin de métadonnée,
avec une annotation similaire à celle d&#8217;un objet ECMAScript&#160;:</text:p>
<text:p text:style-name="Code">$ npm view nodebook dist.<text:span text:style-name="CodeExergue">unpackedSize</text:span></text:p><text:p text:style-name="Code">14985184</text:p><text:p text:style-name="Code">$ npm view nodebook dist</text:p><text:p text:style-name="Code">{ integrity:</text:p><text:p text:style-name="Code"><text:s text:c="3"/>'sha512-...',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>shasum: '5ea87e9b85782e23164705a49cb7bd2dc4063775',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>tarball:</text:p><text:p text:style-name="Code"><text:s text:c="4"/>'https://registry.npmjs.org/nodebook/nodebook-0.9.1.tgz',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>fileCount: 486,</text:p><text:p text:style-name="Code"><text:s text:c="2"/><text:span text:style-name="CodeExergue">unpackedSize</text:span>: 14985184 }</text:p>
<text:bookmark text:name="ref-npx" /><text:h text:style-name="TitreNiveau2" text:outline-level="3"><text:span text:style-name="">npx</text:span> : exécuter un module sans l&#8217;installer</text:h><text:p text:style-name="TexteCourant">L'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install.global"  text:visited-style-name="Visited_20_Internet_20_Link">installation globale</text:a> est idéale pour installer un module
npm sous forme d&#8217;exécutable système.
On peut cependant vite arriver à en installer beaucoup sans vraiment penser à
les enlever quand on n&#8217;en a plus besoin.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exécutable <text:span text:style-name="CodeDansTexte">npx</text:span> (pour <text:span text:style-name="CodeDansTexte">npm executable</text:span>) s&#8217;installe automatiquement avec npm.
Il agit comme un raccourci en allantrécupérer le module npm désiré
et l&#8217;exécute en lui passant les arguments souhaités.</text:p>
<text:p text:style-name="Code">$ npx cowsay Magique !</text:p><text:p text:style-name="Code">npx: installed 10 in 2.122s</text:p><text:p text:style-name="Code"> ___________</text:p><text:p text:style-name="Code">&lt; Magique ! &gt;</text:p><text:p text:style-name="Code"> -----------</text:p><text:p text:style-name="Code"><text:s text:c="8"/>\<text:s text:c="3"/>^__^</text:p><text:p text:style-name="Code"><text:s text:c="9"/>\<text:s text:c="2"/>(oo)\_______</text:p><text:p text:style-name="Code"><text:s text:c="12"/>(__)\<text:s text:c="7"/>)\/\</text:p><text:p text:style-name="Code"><text:s text:c="16"/>||----w |</text:p><text:p text:style-name="Code"><text:s text:c="16"/>||<text:s text:c="5"/>||</text:p>
<text:p text:style-name="TexteCourant">C&#8217;est l&#8217;équivalent de ces trois commandes, en quelque sorte&#160;:</text:p>
<text:p text:style-name="Code">$ npm install --global cowsay</text:p><text:p text:style-name="Code">$ cowsay Magique !</text:p><text:p text:style-name="Code">$ npm uninstall cowsay</text:p>
<text:bookmark text:name="ref-home" /><text:h text:style-name="TitreNiveau2" text:outline-level="3"><text:span text:style-name="">npm home</text:span> : visiter le site web d&#8217;un module</text:h><text:p text:style-name="TexteCourant">Vous vous demandez où trouver davantage de documentation à propos d&#8217;un
module npm&#160;?
<text:span text:style-name="CodeDansTexte">npm home</text:span> ouvre un nouvel onglet de navigateur et dirige ce dernier
vers sur le site web du module de votre choix.</text:p>
<text:p text:style-name="Code">$ npm home lodash</text:p><text:p text:style-name="Code">$ npm home micro</text:p>
<text:bookmark text:name="ref-audit" /><text:h text:style-name="TitreNiveau2" text:outline-level="3"><text:span text:style-name="">npm audit</text:span> : vérifier la sécurité des dépendances</text:h><text:p text:style-name="TexteCourant">La commande <text:span text:style-name="CodeDansTexte">npm audit</text:span> part à la recherche de vulnérabilités connues
dans l&#8217;intégralité des dépendances d&#8217;un projet.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="CodeDansTexte">npm install</text:span> effectue un audit de manière implicite afin de s&#8217;assurer
que notre projet n&#8217;est pas compromis à notre insu.
Les deux dernières lignes sont issues de la fonctionnalité d&#8217;audit de sécurité&#160;:</text:p>
<text:p text:style-name="Code">$ npm install lodash@3</text:p><text:p text:style-name="Code">+ lodash@3.10.1</text:p><text:p text:style-name="Code">added 1 package from 5 contributors in 1.95s</text:p><text:p text:style-name="Code">found 1 low severity vulnerability</text:p><text:p text:style-name="Code"><text:s text:c="2"/>run `npm audit fix` to fix them, or `npm audit` for details</text:p>
<text:p text:style-name="TexteCourant">Un affichage plus détaillé est présenté en exécutant <text:span text:style-name="CodeDansTexte">npm audit</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ npm audit</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"># Run<text:s text:c="2"/>npm install lodash@4.17.10<text:s text:c="2"/>to resolve 1 vulnerability</text:p><text:p text:style-name="Code">Recommended action is a potentially breaking change</text:p><text:p text:style-name="Code">┌───────────────┬───────────────────────────────────────────┐</text:p><text:p text:style-name="Code">│ Low<text:s text:c="11"/>│ Prototype Pollution<text:s text:c="23"/>│</text:p><text:p text:style-name="Code">├───────────────┼───────────────────────────────────────────┤</text:p><text:p text:style-name="Code">│ Package<text:s text:c="7"/>│ <text:span text:style-name="CodeExergue">lodash</text:span><text:s text:c="36"/>│</text:p><text:p text:style-name="Code">├───────────────┼───────────────────────────────────────────┤</text:p><text:p text:style-name="Code">│ Dependency of │ lodash<text:s text:c="36"/>│</text:p><text:p text:style-name="Code">├───────────────┼───────────────────────────────────────────┤</text:p><text:p text:style-name="Code">│ <text:span text:style-name="CodeExergue">Path</text:span><text:s text:c="10"/>│ lodash<text:s text:c="36"/>│</text:p><text:p text:style-name="Code">├───────────────┼───────────────────────────────────────────┤</text:p><text:p text:style-name="Code">│ More info<text:s text:c="5"/>│ https://nodesecurity.io/advisories/577<text:s text:c="4"/>│</text:p><text:p text:style-name="Code">└───────────────┴───────────────────────────────────────────┘</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">found 1 low severity vulnerability</text:p><text:p text:style-name="Code"><text:s text:c="2"/>1 vulnerability requires semver-major dependency updates.</text:p>
<text:p text:style-name="TexteCourant">Chaque module concerné par une faille connue est listée à l&#8217;écran (champ <text:span text:style-name="CodeDansTexte">Package</text:span>).
Le champ <text:span text:style-name="CodeDansTexte">Path</text:span> spécifie l&#8217;arbre de dépendances qui mène à la vulnérabilité
—&#160;c&#8217;est utile pour identifier quelle dépendance directe actualiser.</text:p>
<text:p text:style-name="TexteCourant">La commande <text:span text:style-name="CodeDansTexte">npm audit</text:span> précise la marche à suivre dès qu&#8217;elle le peut.<text:line-break/>Ici, elle indique qu&#8217;une <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-semver"  text:visited-style-name="Visited_20_Internet_20_Link">mise à jour majeure</text:a> est
nécessaire pour se débarasser du problème.
Le seul hic est que ça occasionnera peut-être d&#8217;ajuster le code utilisant cette
dépendance sous peine de casser notre application.</text:p>
<text:p text:style-name="TexteCourant">La commande <text:span text:style-name="CodeDansTexte">npm audit fix</text:span> corrigera toutes les dépendances pour lesquelles
il est possible de changer la version de manière automatique et sans risque.
Les mises à jour majeures sont toujours manuelles et demandent votre intervention.</text:p>
<text:bookmark text:name="ref-ci" /><text:h text:style-name="TitreNiveau2" text:outline-level="3"><text:span text:style-name="">npm ci</text:span> : installer à toute vitesse</text:h><text:p text:style-name="TexteCourant">La commande <text:span text:style-name="CodeDansTexte">npm ci</text:span> est destinée à installer les modules listés dans
le fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>.
Cette commande vise à s&#8217;exécuter plus rapidement et dans des environnements
qui sont autres que ceux de développement (en intégration continue, en production, etc.).</text:p>
<text:p text:style-name="TexteCourant">Cette commande fait une chose de plus que la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install"  text:visited-style-name="Visited_20_Internet_20_Link">commande <text:span text:style-name="CodeDansTexte">npm install</text:span></text:a>&#160;:
elle supprime systématiquement le répertoire <text:span text:style-name="CodeDansTexte">node_modules</text:span> pour rendre
chaque installation reproductible à l&#8217;identique.
Elle fait aussi une chose de moins&#160;: elle se contente d&#8217;installer les
modules tels que listés dans le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-package-lock"  text:visited-style-name="Visited_20_Internet_20_Link">fichier <text:span text:style-name="CodeDansTexte">package-lock.json</text:span></text:a>.
C&#8217;est ce dernier point qui rend cette commande si rapide&#160;— moins de vérifications,
moins d&#8217;aller-retours, moins de complexité.</text:p>
<text:p text:style-name="CodeTitre">travis.yml</text:p><text:p text:style-name="Code">language: node_js</text:p><text:p text:style-name="Code">node_js: v10</text:p><text:p text:style-name="Code">install: npm ci<text:s text:c="3"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">script: npm test</text:p><text:p text:style-name="Code">cache: npm<text:s text:c="8"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Surcharge la commande par défaut (<text:span text:style-name="CodeDansTexte">npm install</text:span>)<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Les modules npm seront sauvegardés entre deux jobs&#160;— l&#8217;installation ira plus vite si les modules sont obtenus depuis le cache plutôt que depuis le registre npm.<text:line-break/></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Remettre un projet à zéro</text:h><text:p text:style-name="Remarque">La commande <text:span text:style-name="CodeDansTexte">npm ci</text:span> est pratique pour remettre un projet à zéro,
en cas de problème d&#8217;installation ou après avoir bidouillé dans le répertoire
<text:span text:style-name="CodeDansTexte">node_modules</text:span> par exemple.</text:p>
<text:bookmark text:name="ref-doctor" /><text:h text:style-name="TitreNiveau2" text:outline-level="3"><text:span text:style-name="">npm doctor</text:span> : vérifier l&#8217;état du système</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="CodeDansTexte">npm doctor</text:span> est une commande utilitaire qui vérifie que npm trouve
tout ce qu&#8217;il faut pour bien fonctionner.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span> inspecte le système à la recherche de Git,
teste la connectivité vers le registre npm et s&#8217;assure qu&#8217;il a accès en écriture
à des répertoires essentiels à son bon fonctionnement.</text:p>
<text:p text:style-name="Code">$ npm doctor</text:p><text:p text:style-name="Code">Check<text:s text:c="31"/>Value</text:p><text:p text:style-name="Code">npm ping<text:s text:c="28"/>OK</text:p><text:p text:style-name="Code">npm -v<text:s text:c="30"/>v6.1.0</text:p><text:p text:style-name="Code">node -v<text:s text:c="29"/>v10.0.0</text:p><text:p text:style-name="Code">npm config get registry<text:s text:c="13"/>https://registry.npmjs.org</text:p><text:p text:style-name="Code">which git<text:s text:c="27"/>/usr/local/bin/git</text:p><text:p text:style-name="Code">Perms check on cached files<text:s text:c="9"/>ok</text:p><text:p text:style-name="Code">Perms check on global node_modules<text:s text:c="2"/>ok</text:p><text:p text:style-name="Code">Perms check on local node_modules<text:s text:c="3"/>ok</text:p><text:p text:style-name="Code">Verify cache contents<text:s text:c="15"/>verified 4066 tarballs</text:p>
<text:bookmark text:name="ref-config" /><text:h text:style-name="TitreNiveau2" text:outline-level="3"><text:span text:style-name="">npm config</text:span> : changer les réglages de l&#8217;exécutable <text:span text:style-name="">npm</text:span></text:h><text:p text:style-name="TexteCourant">La commande <text:span text:style-name="CodeDansTexte">npm config</text:span> est affiche et modifie la configuration
de l&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span>.
Elle se découpe en plusieurs sous-commandes comme en atteste cette tentative
d&#8217;utilisation&#160;:</text:p>
<text:p text:style-name="Code">$ npm config</text:p><text:p text:style-name="Code">npm ERR! Usage:</text:p><text:p text:style-name="Code">npm ERR! npm config set &lt;key&gt; &lt;value&gt;</text:p><text:p text:style-name="Code">npm ERR! npm config get [&lt;key&gt;]</text:p><text:p text:style-name="Code">npm ERR! npm config delete &lt;key&gt;</text:p><text:p text:style-name="Code">npm ERR! npm config list [--json]</text:p><text:p text:style-name="Code">npm ERR! npm config edit</text:p>
<text:p text:style-name="TexteCourant">La sous-commande <text:span text:style-name="CodeDansTexte">get</text:span> affiche la valeur par défaut d&#8217;une clé de configuration&#160;:</text:p>
<text:p text:style-name="Code">$ npm config get loglevel</text:p><text:p text:style-name="Code">notice</text:p>
<text:p text:style-name="TexteCourant">Cette configuration reflète la verbosité d&#8217;affichage de l&#8217;exécutable.
Elle agit comme un curseur pour choisir une vue plus ou moins détaillée de
ce qui se trame sous le capot.<text:line-break/>Augmentons la verbosité d&#8217;affichage avec la sous-commande <text:span text:style-name="CodeDansTexte">set</text:span>.
Nous verrons ainsi les tentatives d&#8217;accès à Internet de l&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ npm config set loglevel http</text:p>
<text:p text:style-name="TexteCourant">Nous voyons désormais les requêtes HTTP effectuées.
Ici, en rejouant l&#8217;exemple d'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install.global"  text:visited-style-name="Visited_20_Internet_20_Link">installation globale</text:a> de module&#160;:</text:p>
<text:p text:style-name="Code">$ npm install --global serve</text:p><text:p text:style-name="Code">GET 200 https://registry.npmjs.org/serve 653ms</text:p><text:p text:style-name="Code">GET 304 https://registry.npmjs.org/chalk 271ms (from cache)</text:p><text:p text:style-name="Code">GET 304 https://registry.npmjs.org/arg 274ms (from cache)</text:p><text:p text:style-name="Code">...</text:p>
<text:p text:style-name="TexteCourant">La sous-commande <text:span text:style-name="CodeDansTexte">ls</text:span> récapitule tous nos changements de configuration.
Elle affiche tous les réglages par défaut en la suffixant de l&#8217;option <text:span text:style-name="CodeDansTexte">--long</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ npm config ls</text:p><text:p text:style-name="Code">$ npm config ls --long</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Sauvegarder sa configuration npm</text:h><text:p text:style-name="Remarque">Chaque appel à <text:span text:style-name="CodeDansTexte">npm config set</text:span> enregistre les changements dans un fichier
de configuration <text:span text:style-name="CodeDansTexte">~/.npmrc</text:span>.</text:p>
<text:p text:style-name="Remarque">Il est propre à l&#8217;utilisateur actif de notre ordinateur.
Libre à vous de le sauvegardez ou d&#8217;en fournir un spécifique dans le cadre
de votre environnement de production ou d&#8217;intégration continue.</text:p>
<text:p text:style-name="TexteCourant">Pour y voir plus clair, j&#8217;ai effectué une petite sélection des éléments
de configuration que vous seriez peut-être amené à modifier sur votre
machine de développement ou sur votre configuration de production&#160;:</text:p>
<table:table table:style-name="Tableau1"><table:table-column />,<table:table-column />,<table:table-column /><table:table-row><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Clé</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Par défaut</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Remarque</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">access</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">restricted</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Passez à <text:span text:style-name="CodeDansTexte">public</text:span> pour faire en sorte que les modules faisant partie d&#8217;une organisation soient considérés comme publics.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">audit</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">true</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Passez à <text:span text:style-name="CodeDansTexte">false</text:span> pour désactiver l&#8217;audit automatique à chaque installation de module — cf. <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-audit"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="CodeDansTexte">npm audit</text:span></text:a>.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">cache</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">~/.npm</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Modifiez le chemin pour que le cache des modules npm soit géré ailleurs.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">color</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">true</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Passez à <text:span text:style-name="CodeDansTexte">false</text:span> pour désactiver l&#8217;utilisation des couleurs de npm.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">depth</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">Infinity</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Le nombre utilisé limitera la profondeur d&#8217;affichage des commandes <text:span text:style-name="CodeDansTexte">npm ls</text:span>, <text:span text:style-name="CodeDansTexte">npm outdated</text:span>, etc.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">git</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">git</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Nom de l&#8217;exécutable ou chemin d&#8217;accès de l&#8217;exécutable <text:span text:style-name="CodeDansTexte">git</text:span>.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">https-proxy</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>``</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Adresse du proxy HTTPS — remplace alors la variable d&#8217;environnement <text:span text:style-name="CodeDansTexte">HTTPS_PROXY</text:span>.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">loglevel</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">notice</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Change la verbosité d&#8217;affichage des messages — <text:span text:style-name="CodeDansTexte">silent</text:span>, <text:span text:style-name="CodeDansTexte">error</text:span>, <text:span text:style-name="CodeDansTexte">warn</text:span> diminueront la verbosité tandis que <text:span text:style-name="CodeDansTexte">http</text:span>, <text:span text:style-name="CodeDansTexte">timing</text:span>, <text:span text:style-name="CodeDansTexte">info</text:span>, <text:span text:style-name="CodeDansTexte">verbose</text:span> ou <text:span text:style-name="CodeDansTexte">silly</text:span> augmenteront le niveau de détails.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">offline</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">false</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Passez à <text:span text:style-name="CodeDansTexte">true</text:span> pour que l&#8217;installation des modules npm se fasse sans transiter par le réseau.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">progress</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">true</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Passez à <text:span text:style-name="CodeDansTexte">false</text:span> pour désactiver l&#8217;affichage de la barre de progression.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">proxy</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">true</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Adresse du proxy HTTP — remplace alors la variable d&#8217;environnement <text:span text:style-name="CodeDansTexte">HTTP_PROXY</text:span>.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">registry</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://registry.npmjs.org/" text:visited-style-name="Visited_20_Internet_20_Link">https://registry.npmjs.org/</text:a></text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Changez cette valeur par celle de votre registre auto-hébergé.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">send-metrics</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">false</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Passez à <text:span text:style-name="CodeDansTexte">true</text:span> pour envoyer des statistiques d&#8217;utilisation à l&#8217;équipe de npm.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">tmp</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">$TMPDIR</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Changez cette valeur pour utiliser un autre répertoire temporaire.</text:p></table:table-cell></table:table-row></table:table>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> Tout sur <text:span text:style-name="CodeDansTexte">npm config</text:span></text:h><text:p text:style-name="Remarque">La page <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://docs.npmjs.com/misc/config#config-settings" text:visited-style-name="Visited_20_Internet_20_Link">https://docs.npmjs.com/misc/config#config-settings</text:a></text:span> documente
de manière exhaustive toutes les clés de configuration et leur impact sur
l&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span>.</text:p>
<text:bookmark text:name="ref-publish" /><text:h text:style-name="TitreNiveau2" text:outline-level="3"><text:span text:style-name="">npm publish</text:span> : publier un module npm</text:h><text:p text:style-name="TexteCourant">Nous savons comment <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install"  text:visited-style-name="Visited_20_Internet_20_Link">installer des modules</text:a> depuis le registre
mais nous n&#8217;avions pas encore vu comment contribuer nous-même à cet écosystème.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;option <text:span text:style-name="CodeDansTexte">--dry-run</text:span> est peut-être la première option à utiliser avec cette
commande puisqu&#8217;elle fait comme si nous voulions publier le module, mais
sans aller jusqu&#8217;à téléverser le code sur le registre npm.
Je la recommande pour voir de nos propres yeux ce qui serait transmis
et rectifier un problème avant qu&#8217;il ne se produise&#160;— vous n&#8217;avez pas envie
de mettre en ligne un fichier qui contient un mot de passe n&#8217;est-ce pas&#160;?</text:p>
<text:p text:style-name="Code">$ npm publish --dry-run</text:p><text:p text:style-name="Code">npm notice</text:p><text:p text:style-name="Code">npm notice 📦<text:s text:c="2"/>nodebook.chapter-05@1.0.0</text:p><text:p text:style-name="Code">npm notice === Tarball Contents ===</text:p><text:p text:style-name="Code">npm notice 754B<text:s text:c="4"/>package.json</text:p><text:p text:style-name="Code">npm notice 59B<text:s text:c="5"/>.eslintrc.yaml</text:p><text:p text:style-name="Code">npm notice 59.3kB<text:s text:c="2"/>index.adoc</text:p><text:p text:style-name="Code">npm notice 133B<text:s text:c="4"/>examples/app.js</text:p><text:p text:style-name="Code">npm notice 115B<text:s text:c="4"/>examples/cow.js</text:p><text:p text:style-name="Code">npm notice 65B<text:s text:c="5"/>examples/hello.js</text:p><text:p text:style-name="Code">npm notice 138B<text:s text:c="4"/>examples/print-args.js</text:p><text:p text:style-name="Code">npm notice 223B<text:s text:c="4"/>examples/tests.js</text:p><text:p text:style-name="Code">npm notice 46.3kB<text:s text:c="2"/>images/module-content.png</text:p><text:p text:style-name="Code">npm notice 75.6kB<text:s text:c="2"/>images/npm-package-falchion.png</text:p><text:p text:style-name="Code">npm notice 219.5kB images/npm-package-mysql-libmysqlclient.png</text:p><text:p text:style-name="Code">npm notice 170.2kB images/npm-package-mysql2.png</text:p><text:p text:style-name="Code">npm notice 172.7kB images/npm-registry-search.png</text:p><text:p text:style-name="Code">npm notice === Tarball Details ===</text:p><text:p text:style-name="Code">npm notice name:<text:s text:c="10"/>nodebook.chapter-05</text:p><text:p text:style-name="Code">npm notice version:<text:s text:c="7"/>1.0.0</text:p><text:p text:style-name="Code">npm notice package size:<text:s text:c="2"/>656.8 kB</text:p><text:p text:style-name="Code">npm notice unpacked size: 745.1 kB</text:p><text:p text:style-name="Code">npm notice shasum:<text:s text:c="8"/>7f2887b8840124cf8d0c2fa72e8d61cd739</text:p><text:p text:style-name="Code">npm notice integrity:<text:s text:c="5"/>sha512-a6yvb8WO[...]yUeLy2jg/viXQ==</text:p><text:p text:style-name="Code">npm notice total files:<text:s text:c="3"/>13</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Configuration</text:span> Empêcher un module d&#8217;être publié</text:h><text:p text:style-name="Remarque">La section de configuration <text:span text:style-name="CodeDansTexte">private</text:span> est à ajouter dans le fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>
d&#8217;un module pour empêcher toute publication involontaire.</text:p>
<text:p text:style-name="Remarque">package.json</text:p><text:p text:style-name="RemarqueCode">{</text:p><text:p text:style-name="RemarqueCode"><text:s text:c="2"/>"name": "...",</text:p><text:p text:style-name="RemarqueCode"><text:s text:c="2"/>"private": true</text:p><text:p text:style-name="RemarqueCode">}</text:p>
<text:p text:style-name="TexteCourant">La publication d&#8217;un module implique que vous ayiez configuré les sections
<text:span text:style-name="CodeDansTexte">main</text:span> ou <text:span text:style-name="CodeDansTexte">bin</text:span> du fichier <text:span text:style-name="CodeDansTexte">package.json</text:span> pour respectivement indiquer
quel fichier charger avec <text:span text:style-name="CodeDansTexte">require('&lt;nom du module&gt;')</text:span>
 ou exécuter avec <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-npx"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="CodeDansTexte">npx &lt;nom du module&gt;</text:span></text:a>.<text:line-break/>Si ça ne vous parle pas du tout, je vous invite à aller lire la section
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-package.json"  text:visited-style-name="Visited_20_Internet_20_Link">anatomie du fichier <text:span text:style-name="CodeDansTexte">package.json</text:span></text:a>.</text:p>
<text:p text:style-name="TexteCourant">La publication d&#8217;un module nécessite de se créer un compte sur le registre
<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com</text:a></text:span>.
Si vous publiez un module pour la première fois, l&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span> vous
demandera alors de vous identifier&#160;— le module sera ensuite publié en votre nom.</text:p>
<text:p text:style-name="TexteCourant">Idéalement, je recommande de ne pas publier de module à la main mais de
<text:span text:style-name="T7">préférer l&#8217;utilisation d&#8217;un service d&#8217;intégration continue</text:span> comme
<text:span text:style-name="T4">Travis CI</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://travisci.com" text:visited-style-name="Visited_20_Internet_20_Link">https://travisci.com</text:a></text:span>).
La configuration d&#8217;un tel service permet de publier <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-version"  text:visited-style-name="Visited_20_Internet_20_Link">une nouvelle version</text:a>
seulement si les tests passent au vert.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Ignorer des fichiers à publier</text:h><text:p text:style-name="Remarque">L&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span> ignore par défaut les mêmes fichiers que Git.
Il honore la présence des fichiers <text:span text:style-name="CodeDansTexte">.gitignore</text:span> et exclut les fichiers
et répertoires concernés de la publication.</text:p>
<text:p text:style-name="Remarque">Le fichier <text:span text:style-name="CodeDansTexte">.npmignore</text:span> remplace le fichier <text:span text:style-name="CodeDansTexte">.gitignore</text:span> dans le cas
où votre besoin de fichiers à versionner est différent de celui de fichiers
à publier sur le registre npm.</text:p>
<text:p text:style-name="Remarque">.npmignore</text:p><text:p text:style-name="RemarqueCode">.DS_Store<text:s text:c="7"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="RemarqueCode">node_modules<text:s text:c="4"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="RemarqueCode"></text:p><text:p text:style-name="RemarqueCode">src/*.html<text:s text:c="6"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="RemarqueCode">!src/index.html <text:span text:style-name="PuceCode">4</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Ignore un fichier nommé <text:span text:style-name="CodeDansTexte">.DS_Store</text:span>&#160;— courant sous macOS.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Ignore le répertoire <text:span text:style-name="CodeDansTexte">node_modules</text:span> et tout ce qu&#8217;il contient.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Ignore tous les fichiers <text:span text:style-name="CodeDansTexte">.html</text:span> contenus dans le répertoire <text:span text:style-name="CodeDansTexte">src</text:span>.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> À l&#8217;exception du fichier <text:span text:style-name="CodeDansTexte">index.html</text:span> contenu dans le répertoire <text:span text:style-name="CodeDansTexte">src</text:span>.<text:line-break/></text:p>
<text:bookmark text:name="ref-version" /><text:h text:style-name="TitreNiveau2" text:outline-level="3"><text:span text:style-name="">npm version</text:span> : déterminer une nouvelle version sans se tromper</text:h><text:p text:style-name="TexteCourant">Nous ne pouvons pas <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-publish"  text:visited-style-name="Visited_20_Internet_20_Link">publier</text:a> deux fois une même version d&#8217;un
module npm.
Nous devons donc à minima modifier la valeur de la section <text:span text:style-name="CodeDansTexte">version</text:span>
dans le fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>.</text:p>
<text:p text:style-name="TexteCourant">La commande <text:span text:style-name="CodeDansTexte">npm version</text:span> automatise le calcul du prochain numéro de version,
reflète cette version dans le champ <text:span text:style-name="CodeDansTexte">version</text:span> du fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>
et procède à un commit Git, tagué avec cette nouvelle version.
Je trouve cette manière élégante, notamment en complément de la
publication automatique par le biais d&#8217;un service d&#8217;intégration continue.</text:p>
<text:p text:style-name="TexteCourant">La commande <text:span text:style-name="CodeDansTexte">npm version</text:span> se complète forcément d&#8217;un argument pour
indiquer la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-semver"  text:visited-style-name="Visited_20_Internet_20_Link">granularité de version sémantique</text:a> concernée.
Ainsi, si nous voulons mettre à jour la version d&#8217;un module en version <text:span text:style-name="CodeDansTexte">1.0.0</text:span>&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="CodeDansTexte">npm version patch</text:span> la changera en <text:span text:style-name="CodeDansTexte">1.0.1</text:span>&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="CodeDansTexte">npm version minor</text:span> la changera en <text:span text:style-name="CodeDansTexte">1.1.0</text:span>&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="CodeDansTexte">npm version major</text:span> la changera en <text:span text:style-name="CodeDansTexte">2.0.0</text:span>.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">Cette montée en version se complète optionnellement de <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-scripts"  text:visited-style-name="Visited_20_Internet_20_Link">scripts npm</text:a>
pour automatiser d&#8217;autres actions lors d&#8217;une montée en version&#160;:</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">preversion</text:span></text:span><text:line-break/><text:tab/>Le nouveau numéro de version n&#8217;a pas encore été appliqué.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">version</text:span></text:span><text:line-break/><text:tab/>Le nouveau numéro de version est appliqué&#160;— vous pouvez encore ajouter de nouveaux fichiers au commit Git.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">postversion</text:span></text:span><text:line-break/><text:tab/>Le nouveau numéro de version est appliqué et un commit a été ajouté à l&#8217;historique Git.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Avancé</text:span> Déterminer la version depuis Git</text:h><text:p text:style-name="Remarque">Peut-être que vous gérez vous-même le numéro de version en l&#8217;attribuant
directement avec un <text:span text:style-name="T4">tag</text:span> Git (<text:span text:style-name="CodeDansTexte">git tag &#8230;&#8203;</text:span>).</text:p>
<text:p text:style-name="Remarque">Dans ce cas, la commande <text:span text:style-name="CodeDansTexte">npm version from-git</text:span> reporte le numéro de version
du dernier <text:span text:style-name="T4">tag</text:span> Git dans le fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>.</text:p>
<text:bookmark text:name="ref-questions" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Questions et mystères autour de npm</text:h><text:p text:style-name="TexteCourant">L&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span> et le registre du même nom ont accompagné Node quasiment
depuis le début.
Il paraît simple de prime abord et je pense que c&#8217;est normal de se sentir
surpris·e par ses résultats.</text:p>
<text:p text:style-name="TexteCourant">Passons en revue des critiques ou questionnements que j&#8217;entends régulièrement
afin d&#8217;y voir plus clair.</text:p>
<text:bookmark text:name="ref-npm.update" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Quand mettre à jour l&#8217;exécutable npm ?</text:h><text:p text:style-name="TexteCourant">L&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span> est mis à jour régulièrement.
Un message s&#8217;affiche dans notre terminal lorsque nous l&#8217;utilisons et qu&#8217;il
détecte qu&#8217;une version plus récente est disponible.</text:p>
<text:p text:style-name="Code">╭─────────────────────────────────────╮</text:p><text:p text:style-name="Code">│<text:s text:c="37"/>│</text:p><text:p text:style-name="Code">│<text:s text:c="3"/>Update available 6.0.0 → 6.1.0<text:s text:c="4"/>│</text:p><text:p text:style-name="Code">│<text:s text:c="5"/>Run npm i -g npm to update<text:s text:c="6"/>│</text:p><text:p text:style-name="Code">│<text:s text:c="37"/>│</text:p><text:p text:style-name="Code">╰─────────────────────────────────────╯</text:p>
<text:p text:style-name="TexteCourant">Le module qui contient l&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span> suit le principe de
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-semver"  text:visited-style-name="Visited_20_Internet_20_Link">versions sémantiques</text:a>.
Ainsi, la mise à jour sera sans effort si le numéro majeur de la
nouvelle version reste le même.</text:p>
<text:p text:style-name="TexteCourant">J&#8217;ai tendance à regarder du côté de <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/npm/npm/releases" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/npm/npm/releases</text:a></text:span>
pour lire tous les <text:span text:style-name="T4">Breaking Changes</text:span> et comprendre en quoi la mise à jour
majeure m&#8217;affecte.</text:p>
<text:bookmark text:name="ref-package-lock" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Je ne vois pas l&#8217;intérêt du fichier <text:span text:style-name="">package-lock.json</text:span></text:h><text:p text:style-name="TexteCourant">Le fichier <text:span text:style-name="CodeDansTexte">package-lock.json</text:span> est créé automatiquement par l&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span>
dès que vous ajoutez votre première dépendance à un projet.</text:p>
<text:p text:style-name="TexteCourant">Jetons un œil à son contenu pour tenter d&#8217;en cerner les contours&#160;:</text:p>
<text:p text:style-name="Code">{</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"name": "nodebook.chapter-05",</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"version": "1.0.0",</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"lockfileVersion": 1,</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"requires": true,</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"dependencies": {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"acorn": {</text:p><text:p text:style-name="Code"><text:s text:c="6"/>"version": "5.6.1",</text:p><text:p text:style-name="Code"><text:s text:c="6"/>"resolved":</text:p><text:p text:style-name="Code"><text:s text:c="8"/>"https://registry.npmjs.org/acorn/-/acorn-5.6.1.tgz",</text:p><text:p text:style-name="Code"><text:s text:c="6"/>"integrity": "sha512-...",</text:p><text:p text:style-name="Code"><text:s text:c="6"/>"dev": true</text:p><text:p text:style-name="Code"><text:s text:c="4"/>},</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"cowsay": {</text:p><text:p text:style-name="Code"><text:s text:c="6"/>"version": "1.3.1",</text:p><text:p text:style-name="Code"><text:s text:c="6"/>"resolved":</text:p><text:p text:style-name="Code"><text:s text:c="8"/>"https://registry.npmjs.org/cowsay/-/cowsay-1.3.1.tgz",</text:p><text:p text:style-name="Code"><text:s text:c="6"/>"integrity": "sha512-...",</text:p><text:p text:style-name="Code"><text:s text:c="6"/>"requires": {</text:p><text:p text:style-name="Code"><text:s text:c="8"/>"get-stdin": "^5.0.1",</text:p><text:p text:style-name="Code"><text:s text:c="8"/>"optimist": "~0.6.1",</text:p><text:p text:style-name="Code"><text:s text:c="8"/>"string-width": "~2.1.1",</text:p><text:p text:style-name="Code"><text:s text:c="8"/>"strip-eof": "^1.0.0"</text:p><text:p text:style-name="Code"><text:s text:c="6"/>}</text:p><text:p text:style-name="Code"><text:s text:c="4"/>},</text:p><text:p text:style-name="Code"><text:s text:c="4"/>...</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant">Il ressemble beaucoup au fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>.
On notera qu&#8217;il contient exclusivement des données liées aux dépendances
ainsi que <text:span text:style-name="T7">toutes les dépendances des dépendances</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Si le fichier <text:span text:style-name="CodeDansTexte">package.json</text:span> contient une <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-semver"  text:visited-style-name="Visited_20_Internet_20_Link">version sémantique</text:a>,
celui <text:span text:style-name="T7">contient la version exacte</text:span> de chaque dépendance ainsi que deux
autres types d&#8217;informations&#160;: l&#8217;URL de téléchargement et une signature
qui permet de vérifier si le fichier télécharger est le bon (intégrité).</text:p>
<text:p text:style-name="TexteCourant">La représentation complète de l&#8217;arbre de dépendances dans le fichier <text:span text:style-name="CodeDansTexte">package-lock.json</text:span>
traduit deux intentions&#160;:
rendre l&#8217;installation des dépendances possibles en se basant uniquement sur
ce fichier et accélérer le processus d&#8217;installation.</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>Avantages</text:span></text:p><text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">Le projet s&#8217;installe encore plus rapidement grâce à la commande <text:span text:style-name="CodeDansTexte">npm ci</text:span>.</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Nous pouvons reproduire la même installation sur plusieurs ordinateurs.</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">La commande <text:span text:style-name="CodeDansTexte">npm install</text:span> installe plus rapidement en présence d&#8217;un fichier <text:span text:style-name="CodeDansTexte">package-lock.json</text:span>.</text:p>
</text:list-item></text:list><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>Inconvénients</text:span></text:p><text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">Nous devons vérifier manuellement s&#8217;il y a des patchs à coup de <text:span text:style-name="CodeDansTexte">npm outdated</text:span> et de <text:span text:style-name="CodeDansTexte">npm update</text:span>.</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Ça fait un truc de plus à apprendre même si on n&#8217;a pas l&#8217;impression de l&#8217;utiliser.</text:p>
</text:list-item></text:list>
<text:bookmark text:name="ref-bower" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">npm c&#8217;est pour le back-end et bower pour le front-end</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">bower</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://bower.io" text:visited-style-name="Visited_20_Internet_20_Link">https://bower.io</text:a></text:span>) est un gestionnaire de modules
spécialisé dans le développement front-end.</text:p>
<text:p text:style-name="TexteCourant">Je pense que <text:span text:style-name="T4">bower</text:span> était utile à une époque où l&#8217;outillage front-end disponible
dans Node était encore confidentiel.
Je pense aussi que cette époque est révolue, au sens où l&#8217;outillage dédié à
Node et aux navigateurs web tend à se confondre.</text:p>
<text:p text:style-name="TexteCourant">En apprenant JavaScript, Node et npm, nous gagnons non seulement un outillage
disponible immédiatement mais aussi la capacité à créer le nôtre.
Pour en savoir plus sur comment développer pour le front-end comme on développe
pour Node, je vous invite à lire le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-09"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 9</text:a>.</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>Avantages</text:span></text:p><text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">On peut installer un projet sans qu&#8217;il possède un fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>.</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">On n&#8217;a pas nécesairement besoin de s&#8217;outiller pour utiliser les modules bower.</text:p>
</text:list-item></text:list><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>Inconvénients</text:span></text:p><text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">Si on utilise déjà un fichier <text:span text:style-name="CodeDansTexte">package.json</text:span> pour d&#8217;autres besoins, autant l&#8217;utiliser pour les dépendances front-end, autant utiliser npm.</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Le développement de bower stagne depuis 2015 et je pense que le projet sera arrêté tôt ou tard.</text:p>
</text:list-item></text:list>
<text:bookmark text:name="ref-est_ce_que_je_dois_versionner_le_répertoire_node_modules" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Est-ce que je dois versionner le répertoire <text:span text:style-name="">node_modules</text:span> ?</text:h><text:p text:style-name="TexteCourant">Le contenu du répertoire <text:span text:style-name="CodeDansTexte">node_modules</text:span> se recrée automatiquement
en utilisant l&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span>, que ça soit avec la
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install"  text:visited-style-name="Visited_20_Internet_20_Link">commande <text:span text:style-name="CodeDansTexte">npm install</text:span></text:a> ou la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-update"  text:visited-style-name="Visited_20_Internet_20_Link">commande <text:span text:style-name="CodeDansTexte">npm update</text:span></text:a>.
Mieux vaut versionner les fichiers <text:span text:style-name="CodeDansTexte">package.json</text:span> et
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-package-lock"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="CodeDansTexte">package-lock.json</text:span></text:a> pour être certain·e
de les recréer comme il faut.</text:p>
<text:p text:style-name="TexteCourant">Le répertoire <text:span text:style-name="CodeDansTexte">node_modules</text:span> n&#8217;a donc pas besoin d&#8217;être versionné.
Je vous encourage à <text:span text:style-name="T7">ajouter <text:span text:style-name="CodeDansTexte">node_modules</text:span> dans le fichier <text:span text:style-name="CodeDansTexte">.gitignore</text:span></text:span>.
Ce fichier texte se situe en général à la racine de votre projet.</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>Avantages</text:span></text:p><text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">Je n&#8217;en vois pas.</text:p>
</text:list-item></text:list><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>Inconvénients</text:span></text:p><text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">Difficile à versionner avec Git en cas de conflit.</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Ça va exploser si deux personnes utilisent des systèmes d&#8217;exploitation différents&#160;— certaines dépendances génèrent des fichiers en fonction du système.</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Ça va exploser s&#8217;il manque un module quelque part&#160;— et ça sera un problème plus à régler que de <text:span text:style-name="T4">ne pas</text:span> versionner ce répertoire.</text:p>
</text:list-item></text:list>
<text:bookmark text:name="ref-yarn" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Il paraît que Yarn, c&#8217;est mieux</text:h><text:p text:style-name="TexteCourant">L&#8217;application <text:span text:style-name="T4">yarn</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://yarnpkg.com" text:visited-style-name="Visited_20_Internet_20_Link">https://yarnpkg.com</text:a></text:span>) se veut être une alternative
à l&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span>.
Le programme vise une installation rapide, hors-ligne et sécurisée.</text:p>
<text:p text:style-name="TexteCourant">npm rattrape régulièrement les fonctionnalités qui "donnent de l&#8217;avance" à <text:span text:style-name="T4">yarn</text:span>.
Le choix tient donc plutôt du goût ou de l&#8217;idéologie.
Essayez donc <text:span text:style-name="T4">yarn</text:span> et gardez-le pour les bonnes raisons&#160;— les vôtres.</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>Avantages</text:span></text:p><text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">Le mode <text:span text:style-name="T4">workspace</text:span> permet de lier plusieurs projets entre eux de manière déclarative.</text:p>
</text:list-item></text:list><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>Inconvénients</text:span></text:p><text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">Il faudra quand même savoir comment fonctionne npm pour les projets qui n&#8217;utilisent pas <text:span text:style-name="T4">yarn</text:span>.</text:p>
</text:list-item></text:list>
<text:bookmark text:name="ref-all-your-base-are-belong-to-us" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">npm est lent, il installe la moitié d&#8217;Internet à chaque fois</text:h><text:p text:style-name="TexteCourant">L&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span> passe le plus clair de son temps à faire des aller-retours
vers le registre npm en utilisant votre connexion Internet.
Il téléchargera un module seulement s&#8217;il ne l&#8217;a pas déjà téléchargé à une autre
reprise, sur un autre projet.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;équipe de développement de l&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span> travaille à améliorer
ses performances et sa qualité d&#8217;utilisation.
Cette équipe n&#8217;a pas d&#8217;influence sur les choix faits par les autrices et auteurs
de modules npm.</text:p>
<text:p text:style-name="TexteCourant">Le temps de téléchargement d&#8217;un module npm dépend de deux choses&#160;:
du <text:span text:style-name="T7">nombre de dépendances</text:span> à installer et de leur <text:span text:style-name="T7">poids respectif</text:span>.
Le poids d&#8217;un module correspond à la somme du poids de chaque script et
des ressources additionnelles (images, documentation, etc).<text:line-break/>Dans les deux cas, <text:span text:style-name="T7">plus il y&#8217;en a, plus ça prendra de temps à installer</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Par exemple, le seul ajout de <text:span text:style-name="T4">webpack 4</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/webpack" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/webpack</text:a></text:span>)
augmente le coût de téléchargement de 14Mo lors de <text:span text:style-name="CodeDansTexte">npm install</text:span>.
Ce n&#8217;est pas rien et ce n&#8217;est certainement pas la faute à l&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Le service en ligne <text:span text:style-name="T4">Package Phobia</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://packagephobia.now.sh" text:visited-style-name="Visited_20_Internet_20_Link">https://packagephobia.now.sh</text:a></text:span>)
garde un historique du poids des modules npm.
Celui de <text:span text:style-name="T4">webpack</text:span> se trouve sur
<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://packagephobia.now.sh/result?p=webpack" text:visited-style-name="Visited_20_Internet_20_Link">https://packagephobia.now.sh/result?p=webpack</text:a></text:span>.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-05/images/module-content.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 33. Coût d&#8217;installation du module npm <text:span text:style-name="T4">webpack</text:span> (en vert foncé) et de ses dépendances (en vert clair).</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Connaître le coût des dépendances de son projet</text:h><text:p text:style-name="Remarque">Le module npm <text:span text:style-name="T4">cost-of-modules</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/cost-of-modules" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/cost-of-modules</text:a></text:span>)
calcule la quantité et le poids des dépendances listées
dans un fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>.</text:p>
<text:p text:style-name="Remarque">Pratique pour identifier quel module remplacer par un autre, plus léger et donc
plus rapide à installer.</text:p>
<text:p text:style-name="RemarqueCode">$ npx cost-of-modules<text:s text:c="15"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="RemarqueCode">┌───────────┬─────────────┬───────┐</text:p><text:p text:style-name="RemarqueCode">│ name<text:s text:c="6"/>│ children<text:s text:c="4"/>│ size<text:s text:c="2"/>│</text:p><text:p text:style-name="RemarqueCode">├───────────┼─────────────┼───────┤</text:p><text:p text:style-name="RemarqueCode">│ lodash<text:s text:c="4"/>│ 0<text:s text:c="11"/>│ 1.34M │</text:p><text:p text:style-name="RemarqueCode">├───────────┼─────────────┼───────┤</text:p><text:p text:style-name="RemarqueCode">│ micro<text:s text:c="5"/>│ 19<text:s text:c="10"/>│ 0.67M │</text:p><text:p text:style-name="RemarqueCode">├───────────┼─────────────┼───────┤</text:p><text:p text:style-name="RemarqueCode">│ cowsay<text:s text:c="4"/>│ 9<text:s text:c="11"/>│ 0.22M │</text:p><text:p text:style-name="RemarqueCode">├───────────┼─────────────┼───────┤</text:p><text:p text:style-name="RemarqueCode">│ 3 modules │ 28 children │ 2.22M │</text:p><text:p text:style-name="RemarqueCode">└───────────┴─────────────┴───────┘</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> La <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-npx"  text:visited-style-name="Visited_20_Internet_20_Link">commande <text:span text:style-name="CodeDansTexte">npx</text:span></text:a> est un raccourci pour exécuter des modules npm sans les installer.<text:line-break/></text:p>
<text:bookmark text:name="ref-errors" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Que signifient les erreurs affichées pendant <text:span text:style-name="">npm install</text:span> ?</text:h><text:p text:style-name="TexteCourant">L&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span> est généreux en messages pendant l&#8217;installation
de modules.
C&#8217;est parfois difficile à lire, notamment pour comprendre la raison du message
et la solution à apporter.</text:p>
<text:p text:style-name="TexteCourant">Si <text:span text:style-name="CodeDansTexte">npm WARN</text:span> s&#8217;affiche, ce n&#8217;est pas une erreur mais un message
à caractère informatif.<text:line-break/>Si <text:span text:style-name="CodeDansTexte">npm ERR</text:span> débute la ligne, il y a un problème sur lequel nous
avons une action immédiate à mener.</text:p>
<text:bookmark text:name="ref-error-deprecated" /><text:h text:style-name="TitreNiveau3" text:outline-level="4">Module déprécié</text:h><text:p text:style-name="TexteCourant">Un module est déprécié quand il n&#8217;est plus maintenu par ses auteurs ou autrices,
s&#8217;il est développé sous un nouveau nom ou si nous sommes encouragé·e·s à
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install.version"  text:visited-style-name="Visited_20_Internet_20_Link">faire une mise à jour majeure</text:a>.</text:p>
<text:p text:style-name="TexteCourant">Un module déprécié ne nous regarde pas sauf s&#8217;il est listé dans le champ
<text:span text:style-name="CodeDansTexte">dependencies</text:span> ou <text:span text:style-name="CodeDansTexte">devDependencies</text:span> d&#8217;un fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>.</text:p>
<text:p text:style-name="CodeTitre">Exemple d&#8217;encouragements à utiliser un autre module.</text:p><text:p text:style-name="Code">npm WARN deprecated babel-preset-es2017@6.24.1:</text:p><text:p text:style-name="Code"><text:s text:c="2"/>Thanks for using Babel: <text:span text:style-name="CodeExergue">we recommend using babel-preset-env</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>now: please read babeljs.io/env to update!</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">npm WARN deprecated babel-preset-babili@0.0.10: babili has</text:p><text:p text:style-name="Code"><text:s text:c="2"/>been <text:span text:style-name="CodeExergue">renamed to babel-minify</text:span>.</text:p><text:p text:style-name="Code"><text:s text:c="2"/>Please update to babel-preset-minify</text:p>
<text:p text:style-name="CodeTitre">Exemple de module qui n&#8217;est plus maintenu.</text:p><text:p text:style-name="Code">npm WARN deprecated nomnom@1.6.2: <text:span text:style-name="CodeExergue">Package no longer supported</text:span>.</text:p><text:p text:style-name="Code"><text:s text:c="2"/>Contact support@npmjs.com for more info.</text:p>
<text:p text:style-name="TexteCourant">Un module qui n&#8217;est plus maintenu ne recevra probalement plus de mises à jour.
Il vaut mieux dans ce cas en trouver un autre qui fait plus ou moins la même chose.</text:p>
<text:bookmark text:name="ref-error-skipping" /><text:h text:style-name="TitreNiveau3" text:outline-level="4">Problème avec une dépendance optionnelle</text:h><text:p text:style-name="TexteCourant">Certains modules effectuent une opération de compilation&#160;: une partie de leur
code source est écrit dans un autre langage que l&#8217;ECMAScript et ils
font en sorte de créer un pont avec Node.</text:p>
<text:p text:style-name="TexteCourant">Il arrive que l&#8217;opération de compilation n&#8217;aboutisse pas pour diverses raisons
—&#160;il manque un logiciel, incompatibilité avec le système d&#8217;exploitation
ou avec l&#8217;architecture du CPU.</text:p>
<text:p text:style-name="TexteCourant">Le fait qu&#8217;il y ait marqué <text:span text:style-name="CodeDansTexte">SKIPPING</text:span> et <text:span text:style-name="CodeDansTexte">OPTIONAL</text:span> me laisse penser
que ce n&#8217;est pas grave si l&#8217;opération ne se passe pas comme prévu.</text:p>
<text:p text:style-name="Code">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.1.3</text:p><text:p text:style-name="Code">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY:</text:p><text:p text:style-name="Code"><text:s text:c="2"/>Unsupported platform for fsevents@1.1.3:</text:p><text:p text:style-name="Code"><text:s text:c="2"/>wanted {"os":"darwin","arch":"any"}</text:p><text:p text:style-name="Code"><text:s text:c="2"/>(current: {"os":"win32","arch":"x64"})</text:p>
<text:bookmark text:name="ref-error-404" /><text:h text:style-name="TitreNiveau3" text:outline-level="4">Module introuvable</text:h><text:p text:style-name="TexteCourant">Le module que vous cherchez à installer n&#8217;existe pas.
Il s&#8217;agit peut-être d&#8217;une erreur de frappe ou alors le module a été retiré
de la circulation.</text:p>
<text:p text:style-name="Code">$ npm i aria-roless</text:p><text:p text:style-name="Code">npm ERR! code E404</text:p><text:p text:style-name="Code">npm ERR! 404 Not Found: aria-roless@latest</text:p>
<text:bookmark text:name="ref-error-crlf" /><text:h text:style-name="TitreNiveau3" text:outline-level="4">Caractère de fin de ligne sous Windows</text:h><text:p text:style-name="TexteCourant">Les anciennes versions de npm avaient du mal à concilier les caractères de fin
de ligne sous Windows (<text:span text:style-name="CodeDansTexte">\r\n</text:span>), caractère différent des autres systèmes Linux (<text:span text:style-name="CodeDansTexte">\n</text:span>).</text:p>
<text:p text:style-name="Code">npm error Expected linebreaks to be 'LF' but</text:p><text:p text:style-name="Code"><text:s text:c="2"/>found 'CRLF' linebreak-style</text:p>
<text:p text:style-name="TexteCourant"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-npm.update"  text:visited-style-name="Visited_20_Internet_20_Link">Mettez à jour npm</text:a> vers une version plus récente pour
régler le problème.</text:p>
<text:bookmark text:name="ref-error-pkg" /><text:h text:style-name="TitreNiveau3" text:outline-level="4">Fichier <text:span text:style-name="">package.json</text:span> incomplet</text:h><text:p text:style-name="TexteCourant">Les messages suivants s&#8217;affichent quand les champs <text:span text:style-name="CodeDansTexte">description</text:span> et
<text:span text:style-name="CodeDansTexte">repository</text:span> manquent à l&#8217;appel de notre fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>.</text:p>
<text:p text:style-name="Code">npm WARN tmp@1.0.0 No description</text:p><text:p text:style-name="Code">npm WARN tmp@1.0.0 No repository field.</text:p>
<text:p text:style-name="TexteCourant">Réferrez-vous à la section <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-package.json"  text:visited-style-name="Visited_20_Internet_20_Link">anatomie du fichier <text:span text:style-name="CodeDansTexte">package.json</text:span></text:a>
pour savoir comment remplir ces champs manquants.</text:p>
<text:bookmark text:name="ref-error-peer-dependency" /><text:h text:style-name="TitreNiveau3" text:outline-level="4">Dépendance complémentaire à installer</text:h><text:p text:style-name="TexteCourant">Certains modules nécessitent un ou plusieurs modules complémentaires pour
fonctionner.
Toutefois ces modules complémentaires sont à installer manuellement.
C&#8217;est la signification du message d&#8217;erreur suivant.</text:p>
<text:p text:style-name="Code">npm WARN <text:span text:style-name="CodeExergue">react-power-picture</text:span>@1.0.0 <text:span text:style-name="CodeExergue">requires</text:span> a peer of</text:p><text:p text:style-name="Code"><text:s text:c="2"/><text:span text:style-name="CodeExergue">react</text:span>@^15.0.0-0 || ^16.0.0-0 but none is installed.</text:p><text:p text:style-name="Code"><text:s text:c="2"/>You must install peer dependencies yourself.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple précédent laisse à penser que nous avons installé le module npm
<text:span text:style-name="T4">react-power-picture</text:span>.
L&#8217;installation du module signale que le module npm complémentaire <text:span text:style-name="T4">react</text:span>
est nécessaire mais que nous ne l&#8217;avons pas installé.</text:p>
<text:p text:style-name="TexteCourant">Si c&#8217;est quelque chose qui vous parle, installez alors <text:span text:style-name="T4">react</text:span>
avec <text:span text:style-name="CodeDansTexte">npm install react</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Si vous pensez que c&#8217;est une erreur ou une incompréhension, désinstallez
le module et cherchez une alternative.
Ça se produit généralement quand on n&#8217;aperçoit pas qu&#8217;un module est dédié
à un certain framework&#160;— et qu&#8217;on ne veut pas utiliser ce framework.</text:p>
<text:bookmark text:name="ref-conclusion_5" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Conclusion</text:h><text:p text:style-name="TexteCourant">L&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span> est un outil qui va bien au-delà de la simple installation
de modules&#160;: il va jusqu&#8217;à <text:span text:style-name="T7">créer un outillage autonome</text:span> pour chacun de nos projets.</text:p>
<text:p text:style-name="TexteCourant">Nous avons appris à <text:span text:style-name="T7">jongler entre les différentes versions d&#8217;un module</text:span>
pour comprendre la notion de <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-semver"  text:visited-style-name="Visited_20_Internet_20_Link">version sémantique</text:a> et son impact
sur les commandes d&#8217;installation et de mises à jour.</text:p>
<text:p text:style-name="TexteCourant">Nous avons vu que les <text:span text:style-name="T7">scripts npm représentent un outillage à portée de main</text:span>.
Ils nous facilitent la vie en plus d&#8217;être partagés avec
les personnes impliquées dans un même projet.</text:p>
<text:p text:style-name="TexteCourant">Avec le langage ECMAScript (<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-03"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 3</text:a>),
l&#8217;environnement Node (<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-04"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 4</text:a>)
et maintenant avec npm, nous avons des fondations solides pour
déployer du code (<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-06"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 6</text:a>) et créer toutes
sortes d&#8217;applications entièrement en JavaScript.</text:p>
<text:bookmark text:name="ref-chapter-06" /><text:p text:style-name="ChapitreNumero">6</text:p><text:h text:style-name="ChapitreTitre" text:outline-level="1">Déployer notre code</text:h><text:p text:style-name="TexteCourant">Le déploiement d&#8217;une application Node nous permettra d&#8217;améliorer la
qualité de notre code en gommant les derniers bugs et en automatisant
la détection des erreurs et des failles de sécurité.</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">Déployer une application Node</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Choisir son hébergement</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Améliorer la portabilité</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Démarrer automatiquement nos applications</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">À quoi penser après la mise en ligne&#160;?</text:p>
</text:list-item></text:list>
<text:p text:style-name="ChapitreIntroduction"><text:p text:style-name="TexteCourant">Ce chapitre nous permettra d&#8217;y voir plus clair du côté de l&#8217;hébergement
et de la mise en ligne d&#8217;une application Node.
Nous pourrons choisir ce qui nous paraît le plus abordable,
que ça soit en termes d&#8217;argent ou de complexité d&#8217;utilisation.</text:p>
<text:p text:style-name="TexteCourant">Nous mettrons en œuvre les
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.env"  text:visited-style-name="Visited_20_Internet_20_Link">variables d&#8217;environnement</text:a>
du chapitre 4 pour que nos applications en ligne
fonctionnent de la même manière que sur notre ordinateur.</text:p>
<text:p text:style-name="TexteCourant">Enfin, nous verrons différents types de service pour être tenu·e informé·e
des erreurs applicatives et des failles de sécurité sans effort et sans
être des expert·e.</text:p></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Remarque</text:span> Versions de Node et npm</text:h><text:p text:style-name="Remarque">Le contenu de ce chapitre utilise les versions <text:span text:style-name="T7">Node v10</text:span> et <text:span text:style-name="T7">npm v6</text:span>.
Ce sont les versions stables recommandées en 2018.
J&#8217;explique comment les installer au <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 2</text:a>.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Jouer avec les exemples dans un terminal</text:h><text:p text:style-name="Remarque">Les exemples titrés d&#8217;un nom de fichier peuvent être installés sur votre ordinateur.
Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de
votre lecture pour voir ce qui change.</text:p>
<text:p text:style-name="Remarque">Installation des exemples via le module npm <text:span text:style-name="CodeDansTexte">nodebook</text:span>.</text:p><text:p text:style-name="RemarqueCode">$ npm install --global nodebook</text:p><text:p text:style-name="RemarqueCode">$ nodebook install chapter-06</text:p><text:p text:style-name="RemarqueCode">$ cd $(nodebook dir chapter-06)</text:p>
<text:p text:style-name="Remarque">La commande suivante devrait afficher un résultat qui confirme que vous êtes
au bon endroit&#160;:</text:p>
<text:p text:style-name="RemarqueCode">$ node hello.js</text:p>
<text:p text:style-name="Remarque">Suivez à nouveau les installations d&#8217;instruction pour rétablir les exemples
dans leur état initial.</text:p>
<text:bookmark text:name="ref-deploy" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Déployer une application Node</text:h><text:p text:style-name="TexteCourant">Le choix de la technique de déploiement dépend de plusieurs facteurs qui se
renvoient à eux-mêmes&#160;: l&#8217;hébergement peut dépendre du déploiement et vice-versa.</text:p>
<text:p text:style-name="TexteCourant">Je vous propose de partir balayer les différentes techniques de déploiement
avec des exemples et de voir quelles seraient les raisons d&#8217;opter pour l&#8217;une
d&#8217;entre elles.</text:p>
<text:p text:style-name="TexteCourant">Le choix est subjectif et vous appartient, en fonction de l&#8217;aisance que vous avez
à vous en emparer.
C&#8217;est un sujet qui prend du temps avant d&#8217;être maitrisé donc n&#8217;hésitez pas
à vous y reprendre à plusieurs fois.</text:p>
<text:p text:style-name="TableauTitre">Table 9. Quelles techniques de déploiement s&#8217;utilisent avec quel type d&#8217;hébergement ?</text:p><table:table table:style-name="Tableau1"><table:table-column />,<table:table-column />,<table:table-column />,<table:table-column />,<table:table-column /><table:table-row><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p></text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-hosting.paas"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T4">PaaS</text:span></text:a></text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-hosting.shared"  text:visited-style-name="Visited_20_Internet_20_Link">Mutualisé</text:a></text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-hosting.cloud"  text:visited-style-name="Visited_20_Internet_20_Link">Cloud</text:a></text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-hosting.lambda"  text:visited-style-name="Visited_20_Internet_20_Link">Lambda</text:a></text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.notebook"  text:visited-style-name="Visited_20_Internet_20_Link">Notebook Web</text:a></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.sftp"  text:visited-style-name="Visited_20_Internet_20_Link">SSH/SFTP</text:a></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2248;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.github"  text:visited-style-name="Visited_20_Internet_20_Link">Import GitHub</text:a></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.cli"  text:visited-style-name="Visited_20_Internet_20_Link">CLI</text:a></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.git"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="CodeDansTexte">git push</text:span></text:a></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.clone"  text:visited-style-name="Visited_20_Internet_20_Link">SSH + <text:span text:style-name="CodeDansTexte">git pull</text:span></text:a></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.recipe"  text:visited-style-name="Visited_20_Internet_20_Link">Recette</text:a></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.docker"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="CodeDansTexte">docker push</text:span></text:a></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.ci"  text:visited-style-name="Visited_20_Internet_20_Link">Intégration continue</text:a></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell></table:table-row></table:table>
<text:bookmark text:name="ref-deploy.notebook" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">En codant dans un navigateur web</text:h><text:p text:style-name="TexteCourant">Le moyen le plus rapide d&#8217;exécuter du code Node sans avoir à se préoccuper
du déploiement est d&#8217;utiliser un service en ligne et de modifier du code
avec un navigateur web.</text:p>
<text:p text:style-name="TexteCourant">Je recommande <text:span text:style-name="T4">RunKit</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://runkit.com/" text:visited-style-name="Visited_20_Internet_20_Link">https://runkit.com/</text:a></text:span>) pour créer rapidement
du code qui tient dans un seul fichier, sans installer Node sur sa machine.
Le code est exécuté sur les serveurs de RunKit, le résultat s&#8217;affiche chez nous.
Les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-modules"  text:visited-style-name="Visited_20_Internet_20_Link">modules npm</text:a>
(<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-05"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 5</text:a>) sont installés automatiquement dans
leur version la plus récente.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-06/images/runkit-notebook.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 34. Exemple de <text:span text:style-name="T4">notebook</text:span> RunKit dans le navigateur Firefox.</text:p>
<text:p text:style-name="TexteCourant">RunKit propose aussi un modèle de <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-lambda"  text:visited-style-name="Visited_20_Internet_20_Link">fonction éphémère</text:a> dont le
résultat devient accessible depuis une URL dédiée.
Essayez de copier/coller le code suivant dans un nouveau notebook en vous
rendant sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://runkit.com/new" text:visited-style-name="Visited_20_Internet_20_Link">https://runkit.com/new</text:a></text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">runkit-endpoint.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const pokemon = require('pokemon-random-name'); <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">exports.endpoint = (request, response) =&gt; {<text:s text:c="5"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>response.end(pokemon());</text:p><text:p text:style-name="Code">};</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Le module npm <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/pokemon-random-name" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/pokemon-random-name</text:a></text:span> exporte une fonction qui retourne un nom aléatoire de Pokémon.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> <text:span text:style-name="CodeDansTexte">exports.endpoint</text:span> est spécifique à RunKit et accepte une fonction identique à l&#8217;événement <text:span text:style-name="CodeDansTexte">server.on('request')</text:span> du <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-http"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">http</text:span></text:a> (<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-04"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 4</text:a>).<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Une fois sauvegardé et après avoir cliqué sur le lien <text:span text:style-name="T7">endpoint</text:span>,
un nouvel onglet s&#8217;ouvre et affiche un nom aléatoire de Pokémon.
C&#8217;est la valeur de retour passé à la réponse, comme on l&#8217;aurait fait
avec le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-http"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">http</text:span></text:a>
(<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-04"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 4</text:a>) ou dans une
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-07"  text:visited-style-name="Visited_20_Internet_20_Link">application web</text:a> (<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-07"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 7</text:a>).</text:p>
<text:p text:style-name="TexteCourant">Le service en ligne <text:span text:style-name="T4">glitch</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://glitch.com/" text:visited-style-name="Visited_20_Internet_20_Link">https://glitch.com/</text:a></text:span>) permet d&#8217;aller
plus loin en développant, hébergeant et partageant des applications complètes.
Le service redéploie notre application à chaque changement.
Le fichier <text:span text:style-name="CodeDansTexte">.env</text:span> stocke les
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.env"  text:visited-style-name="Visited_20_Internet_20_Link">variables d&#8217;environnement</text:a> de manière
sécurisée&#160;— nous seul y avons accès.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-06/images/glitch-app.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 35. Exemple d&#8217;application Node sur glitch.com.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Console web</text:h><text:p text:style-name="Remarque">Glitch nous offre même une console web&#160;: un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-../chapter-04/index.adoc"  text:visited-style-name="Visited_20_Internet_20_Link">terminal</text:a>
entièrement fonctionnel, depuis un navigateur web&#160;!</text:p>
<text:p text:style-name="Remarque">Parfait pour <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-08"  text:visited-style-name="Visited_20_Internet_20_Link">coder un outil en ligne de commande</text:a>
(<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-08"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 8</text:a>) en travaillant depuis plusieurs
ordinateurs sans avoir à tout réinstaller à chaque fois.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Remixez les exemples de cet ouvrage</text:h><text:p text:style-name="Remarque">Vous pouvez créer votre premier projet sur glitch.
<text:span text:style-name="T4">Remixez</text:span> cet ouvrage en cliquant en vous rendant sur
<text:span text:style-name="URL">https://glitch.com/edit/#!/remix/nodebook</text:span>.</text:p>
<text:p text:style-name="Remarque">Le contenu et les exemples seront copiés dans un nouveau projet,
exécutable et modifiable selon vos envies.</text:p>
<text:bookmark text:name="ref-deploy.sftp" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">En transférant des fichiers via SSH</text:h><text:p text:style-name="TexteCourant">Transférer des fichiers est idéal pour débuter et lorsqu&#8217;on n&#8217;utilise pas Git
pour versionner son code.</text:p>
<text:p text:style-name="TexteCourant">Les services d&#8217;hébergement mutualisé, virtualisé ou dédié accordent
un accès à votre espace en ligne par le biais du protocole
SSH (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://fr.wikipedia.org/wiki/Secure_Shell" text:visited-style-name="Visited_20_Internet_20_Link">https://fr.wikipedia.org/wiki/Secure_Shell</text:a></text:span>).
Ce protocole crée une connexion sécurisée&#160;: les commandes saisies dans votre
terminal font effet sur la machine sur laquelle vous êtes connecté·e.</text:p>
<text:p text:style-name="TexteCourant">Des logiciels comme <text:span text:style-name="T4">FileZilla Client</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://filezilla-project.org/" text:visited-style-name="Visited_20_Internet_20_Link">https://filezilla-project.org/</text:a></text:span>)
servent d&#8217;interfaces graphiques pour transférer des fichiers de notre machine
vers une machine distante.<text:line-break/>Les codes d&#8217;accès SSH se trouvent en général dans la section <text:span text:style-name="T4">Aide</text:span> ou <text:span text:style-name="T4">Guides</text:span>
de votre hébergeur.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-06/images/filezilla-file-transfer.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 36. Exemple de connexion à un serveur SSH distant avec FileZilla Client sous macOS.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Windows</text:span> WinSCP</text:h><text:p text:style-name="Remarque"><text:span text:style-name="T4">WinSCP</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://winscp.net" text:visited-style-name="Visited_20_Internet_20_Link">https://winscp.net</text:a></text:span>) est une alternative libre à
FileZilla pour Windows.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Avancé</text:span> <text:span text:style-name="CodeDansTexte">scp</text:span> et <text:span text:style-name="CodeDansTexte">rsync</text:span></text:h><text:p text:style-name="Remarque">Notre terminal peut aussi servir à transférer des fichiers.
Deux programmes se basent sur SSH et sont installés par défaut sur la plupart
des ordinateurs Linux et macOS&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="RemarquePuce"><text:span text:style-name="CodeDansTexte">scp</text:span> pour envoyer des fichiers de machine à machine</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="RemarquePuce"><text:span text:style-name="CodeDansTexte">rsync</text:span> pour n&#8217;envoyer que les fichiers qui ont été modifiés ou supprimés</text:p>
</text:list-item></text:list>
<text:bookmark text:name="ref-deploy.github" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">En important du code depuis GitHub</text:h><text:p text:style-name="TexteCourant">Importer du code depuis GitHub est la manière la plus simple de transférer
tous les fichiers versionnés sans être familier avec Git.</text:p>
<text:p text:style-name="TexteCourant">La plate-forme de <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.notebook"  text:visited-style-name="Visited_20_Internet_20_Link">programmation en ligne</text:a> glitch
offre une option pour importer n&#8217;importe quel projet GitHub&#160;— à partir du moment
où le dépôt est public.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-06/images/glitch-github-import.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 37. Bouton d&#8217;import d&#8217;un dépôt GitHub sur glitch.com.</text:p>
<text:p text:style-name="TexteCourant">Un clic sur le bouton <text:span text:style-name="CodeDansTexte">Import from GitHub</text:span> ouvre une invite de saisie
destinée à mentionner le nom du dépôt GitHub à importer.
Le projet en cours sera entièrement remplacé par le contenu du dépôt distant.
C&#8217;est pratique pour récupérer des exercices ou pour apprendre en travaillant
sur du code écrit par quelqu&#8217;un d&#8217;autre.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Importer les exemples de cet ouvrage</text:h><text:p text:style-name="Remarque">Récupérez tout le contenu et les exemples de cet ouvrage
en recopiant <text:span text:style-name="CodeDansTexte">oncletom/nodebook</text:span> dans l&#8217;invite de saisie.</text:p>
<text:p text:style-name="TexteCourant">La <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-paas"  text:visited-style-name="Visited_20_Internet_20_Link">plate-forme de services</text:a> Heroku (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://heroku.com" text:visited-style-name="Visited_20_Internet_20_Link">https://heroku.com</text:a></text:span>)
pousse l&#8217;import GitHub un peu plus loin.
Sa fonctionnalité <text:span text:style-name="T4">déploie</text:span> l&#8217;application à chaque nouveau commit.
L&#8217;application redémarre ensuite automatiquement pour prendre les changements en compte.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-06/images/heroku-github-import.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 38. Paramétrage de déploiement automatisé depuis un dépôt GitHub sur heroku.com.</text:p>
<text:p text:style-name="TexteCourant">Une option nous permet de déployer une nouvelle version de l&#8217;application
à la suite d&#8217;une <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.ci"  text:visited-style-name="Visited_20_Internet_20_Link">intégration continue réussie</text:a>.
Nous réduisons ainsi les risques de déployer une version défectueuse.</text:p>
<text:bookmark text:name="ref-deploy.cli" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Avec l&#8217;outil en ligne de commande de l&#8217;hébergeur</text:h><text:p text:style-name="TexteCourant">L&#8217;outil en ligne de commande d&#8217;un hébergeur permet de gérer les déploiements
<text:span text:style-name="T4">et</text:span> d&#8217;autres aspects de l&#8217;hébergement en même temps.</text:p>
<text:p text:style-name="TexteCourant">La <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-paas"  text:visited-style-name="Visited_20_Internet_20_Link">plate-forme de services</text:a> <text:span text:style-name="T4">now</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://zeit.co/now" text:visited-style-name="Visited_20_Internet_20_Link">https://zeit.co/now</text:a></text:span>)
est un exemple de simplicité à ce niveau.</text:p>
<text:p text:style-name="CodeTitre">Installation et configuration de l&#8217;outil <text:span text:style-name="CodeDansTexte">now</text:span></text:p><text:p text:style-name="Code">$ npm install -g now</text:p><text:p text:style-name="Code">$ now login</text:p>
<text:p text:style-name="TexteCourant">Dans un terminal, déplacez-vous vers le répertoire de l&#8217;application à déployer.
Il suffit de taper <text:span text:style-name="CodeDansTexte">now</text:span> pour transférer les fichiers.
Les dépendances s&#8217;installent et le déploiement est accessible quelques secondes
plus tard&#160;:</text:p>
<text:p text:style-name="Code">$ now</text:p><text:p text:style-name="Code">Deploying ~/workspace/dtc-innovation/food-coops-dashboards</text:p><text:p text:style-name="Code">&gt; Using Node.js 9.10.1 (requested: `&gt;=8.0.0`)</text:p><text:p text:style-name="Code">&gt; https://food-coops-dashboards-okgwzegyus.now.sh</text:p><text:p text:style-name="Code">&gt; Synced 1 file (169.84KB) [11s]</text:p><text:p text:style-name="Code">&gt; Building...</text:p><text:p text:style-name="Code">&gt; ▲ npm install</text:p><text:p text:style-name="Code">&gt; ✓ Using "package-lock.json"</text:p><text:p text:style-name="Code">&gt; ⧗ Installing 9 main dependencies...</text:p><text:p text:style-name="Code">&gt; ▲ npm install</text:p><text:p text:style-name="Code">&gt; added 389 packages in 8.609s</text:p><text:p text:style-name="Code">&gt; ▲ Snapshotting deployment</text:p><text:p text:style-name="Code">&gt; Build completed</text:p><text:p text:style-name="Code">&gt; Verifying instantiation in bru1</text:p><text:p text:style-name="Code">&gt; ✔ Scaled 1 instance in bru1 [31s]</text:p><text:p text:style-name="Code">&gt; Success! Deployment ready</text:p>
<text:p text:style-name="TexteCourant">En optant pour l&#8217;offre payante, nous pouvons aussi gérer les noms de domaine et
sous-domaines en leur attribuant l&#8217;URL du déploiement&#160;:</text:p>
<text:p text:style-name="Code">$ now alias food-coops-dashboards-okgwzegyus.now.sh my-domain.com</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Application de bureau</text:h><text:p text:style-name="Remarque">Le client en ligne de commande existe en version graphique.
Un glissé/déposé de fichiers suffit à lancer un déploiement.</text:p>
<text:p text:style-name="Remarque">Il se télécharge sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://zeit.co/download" text:visited-style-name="Visited_20_Internet_20_Link">https://zeit.co/download</text:a></text:span>.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;outil de la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-paas"  text:visited-style-name="Visited_20_Internet_20_Link">plate-forme de services</text:a> Heroku suit une approche
légèrement différente.
Il nous informe de l&#8217;état de nos applications et en augmente ou diminue
la quantité de ressources allouée à leur fonctionnement.
Il simplifie la configuration de Git et
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.git"  text:visited-style-name="Visited_20_Internet_20_Link">délègue le déploiement</text:a> à ce dernier.
L&#8217;outil se télécharge sur
<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://devcenter.heroku.com/articles/heroku-cli" text:visited-style-name="Visited_20_Internet_20_Link">https://devcenter.heroku.com/articles/heroku-cli</text:a></text:span>.</text:p>
<text:p text:style-name="CodeTitre">Configuration de l&#8217;outil <text:span text:style-name="CodeDansTexte">heroku</text:span></text:p><text:p text:style-name="Code">$ heroku login</text:p>
<text:p text:style-name="TexteCourant">La commande <text:span text:style-name="CodeDansTexte">heroku apps:create</text:span> crée une nouvelle application chez Heroku.
On peut faire la même chose dans un navigateur web en nous rendant sur
<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://dashboard.heroku.com/new-app" text:visited-style-name="Visited_20_Internet_20_Link">https://dashboard.heroku.com/new-app</text:a></text:span>.
La commande <text:span text:style-name="CodeDansTexte">heroku git:remote</text:span> associe notre copie locale Git à cette application&#160;:</text:p>
<text:p text:style-name="CodeTitre">Configuration de notre dépôt Git pour en faire une application Heroku.</text:p><text:p text:style-name="Code">$ heroku apps:create --region eu</text:p><text:p text:style-name="Code">Creating app... done, ⬢ <text:span text:style-name="CodeExergue">polar-taiga-61296</text:span>, region is eu</text:p><text:p text:style-name="Code">https://polar-taiga-61296.herokuapp.com/</text:p><text:p text:style-name="Code">https://git.heroku.com/polar-taiga-61296.git</text:p><text:p text:style-name="Code">$ heroku git:remote --app <text:span text:style-name="CodeExergue">polar-taiga-61296</text:span></text:p>
<text:p text:style-name="TexteCourant">Il ne nous reste plus qu&#8217;à <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.git"  text:visited-style-name="Visited_20_Internet_20_Link">pousser notre code avec Git</text:a>
pour terminer la mise en ligne.</text:p>
<text:bookmark text:name="ref-deploy.git" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">En faisant <text:span text:style-name="">git push</text:span> depuis sa machine</text:h><text:p text:style-name="TexteCourant">Le déploiement d&#8217;une branche Git est le moyen le plus facile d&#8217;automatiser
tous les aspects d&#8217;un déploiement.</text:p>
<text:p text:style-name="TexteCourant">Cette méthode est privilégiée par les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-paas"  text:visited-style-name="Visited_20_Internet_20_Link">plates-formes de services</text:a>
comme <text:span text:style-name="T4">Heroku</text:span>, <text:span text:style-name="T4">now</text:span> et <text:span text:style-name="T4">Clever Cloud</text:span>.
Chaque projet d&#8217;application est accessible via un dépôt Git distant
(<text:span text:style-name="T4">remote</text:span>)&#160;: un dépôt est utilisé pour versionner notre code (GitHub par exemple)
tandis qu&#8217;un autre dépôt est utilisé pour réceptionner le code à déployer.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple suivant part du principe que notre terminal est positionné dans un
répertoire qui est un projet Git contenant au moins 1 commit.
Vous avez déjà configuré le dépôt distant à l&#8217;aide de
l'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.cli"  text:visited-style-name="Visited_20_Internet_20_Link">outil de déploiement</text:a> Heroku (cf. section précédente).</text:p>
<text:p text:style-name="TexteCourant">Nous pouvons vérifier si le dépôt est bien configuré à l&#8217;aide de la
commande <text:span text:style-name="CodeDansTexte">git remote</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">Liste des dépôts distants d&#8217;un projet Git configuré pour Heroku.</text:p><text:p text:style-name="Code">$ git remote -v</text:p><text:p text:style-name="Code"><text:span text:style-name="CodeExergue">heroku</text:span>	https://git.heroku.com/mon-application.git (fetch)</text:p><text:p text:style-name="Code"><text:span text:style-name="CodeExergue">heroku</text:span>	https://git.heroku.com/mon-application.git (push)</text:p><text:p text:style-name="Code">origin	git@github.com:mon-compte/mon-application.git (fetch)</text:p><text:p text:style-name="Code">origin	git@github.com:mon-compte/mon-application.git (push)</text:p>
<text:p text:style-name="TexteCourant">Dans le cas d&#8217;Heroku, la commande <text:span text:style-name="CodeDansTexte">heroku git:remote</text:span> crée un <text:span text:style-name="T4">remote</text:span> nommé
<text:span text:style-name="CodeDansTexte">heroku</text:span>.
Heroku redéploie notre application dès qu&#8217;on lui envoie du code en faisant
<text:span text:style-name="CodeDansTexte">git push heroku</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ git push heroku</text:p><text:p text:style-name="Code">&gt; Counting objects: 4, done.</text:p><text:p text:style-name="Code">&gt; Delta compression using up to 4 threads.</text:p><text:p text:style-name="Code">&gt; Compressing objects: 100% (4/4), done.</text:p><text:p text:style-name="Code">&gt; Writing objects: 100% (4/4), 17.77 KiB | 5.92 MiB/s, done.</text:p><text:p text:style-name="Code">&gt; Total 4 (delta 2), reused 0 (delta 0)</text:p><text:p text:style-name="Code">&gt; remote: Compressing source files... done.</text:p><text:p text:style-name="Code">&gt; remote: Building source:</text:p><text:p text:style-name="Code">&gt; remote:</text:p><text:p text:style-name="Code">&gt; remote: -----&gt; Node.js app detected</text:p><text:p text:style-name="Code">&gt; remote:</text:p><text:p text:style-name="Code">&gt; remote: -----&gt; Creating runtime environment</text:p><text:p text:style-name="Code">&gt; ...</text:p><text:p text:style-name="Code">&gt; remote: -----&gt; Launching...</text:p><text:p text:style-name="Code">&gt; remote:<text:s text:c="8"/>Released v30<text:s text:c="21"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">&gt; remote:<text:s text:c="8"/>https://mon-application.herokuapp.com/ deployed</text:p><text:p text:style-name="Code">&gt; remote:</text:p><text:p text:style-name="Code">&gt; remote: Verifying deploy... done.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> C&#8217;est le trentième déploiement&#160;— on peut revenir à une version antérieure si nécessaire.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">L&#8217;URL de l&#8217;application est rappelée dans les <text:span text:style-name="T4">logs</text:span> du déploiement.<text:line-break/>En cas d&#8217;erreur, la version précédente de l&#8217;application reste en ligne.
Nous avons ainsi le temps de corriger le problème sans interruption de service.</text:p>
<text:bookmark text:name="ref-deploy.clone" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">En faisant <text:span text:style-name="">git pull</text:span> lors d&#8217;une session SSH</text:h><text:p text:style-name="TexteCourant">La récupération du code source à distance avec Git et SSH est une manière de déployer
similaire à la mise à jour et au démarrage d&#8217;une application sur notre ordinateur.</text:p>
<text:p text:style-name="TexteCourant">Cette technique s&#8217;applique si notre application est placée sur un
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-hosting.shared"  text:visited-style-name="Visited_20_Internet_20_Link">hébergement mutualisé</text:a>,
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-hosting.vm"  text:visited-style-name="Visited_20_Internet_20_Link">dédié ou virtualisé</text:a> ou une <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-hosting.cloud"  text:visited-style-name="Visited_20_Internet_20_Link">offre <text:span text:style-name="T4">cloud</text:span></text:a>.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple suivant illustre l&#8217;initialisation d&#8217;un projet via la connexion
SSH à un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-hosting.shared"  text:visited-style-name="Visited_20_Internet_20_Link">hébergement mutualisé</text:a> chez alwaysdata.</text:p>
<text:p text:style-name="CodeTitre">Première récupération d&#8217;un dépôt Git lors d&#8217;une session SSH.</text:p><text:p text:style-name="Code">$ ssh moncompte@ssh-moncompte.alwaysdata.net</text:p><text:p text:style-name="Code">$$ git clone https://github.com/moncompte/monprojet .</text:p><text:p text:style-name="Code">$$ npm install</text:p>
<text:p text:style-name="TexteCourant">Nous avons cloné un projet comme nous aurions pu le faire si on installait
notre projet depuis zéro sur notre ordinateur.</text:p>
<text:p text:style-name="TexteCourant">Dans le cas d&#8217;une mise à jour, nous récupérons les changements depuis le dépôt
distant en faisant <text:span text:style-name="CodeDansTexte">git pull</text:span>.
<text:span text:style-name="CodeDansTexte">npm install</text:span> mettra à jour les dépendances s&#8217;il y a des différences entre
le contenu du fichier <text:span text:style-name="CodeDansTexte">package.json</text:span> et les modules déjà installés
—&#160;voir le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-05"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 5</text:a>&#160;:</text:p>
<text:p text:style-name="CodeTitre">Mise à jour d&#8217;une application lors d&#8217;une session SSH.</text:p><text:p text:style-name="Code">$ ssh moncompte@ssh-moncompte.alwaysdata.net</text:p><text:p text:style-name="Code">$$ git pull</text:p><text:p text:style-name="Code">$$ npm install</text:p>
<text:p text:style-name="TexteCourant">Dans le cas d&#8217;alwaysdata, l&#8217;application se redémarre depuis leur
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-hosting.shared"  text:visited-style-name="Visited_20_Internet_20_Link">interface d&#8217;administration</text:a>.<text:line-break/>Dans les autres cas, redémarrez l&#8217;application selon le procédé choisi après
avoir lu la section <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-startup"  text:visited-style-name="Visited_20_Internet_20_Link">démarrer automatiquement nos applications</text:a>.</text:p>
<text:bookmark text:name="ref-deploy.recipe" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Avec une recette de déploiement (<text:span text:style-name="T4">Ansible</text:span>, <text:span text:style-name="T4">Chef</text:span>, etc.)</text:h><text:p text:style-name="TexteCourant">La recette de déploiement est la manière la plus complète de partager et
d&#8217;automatiser un déploiement complexe.</text:p>
<text:p text:style-name="TexteCourant">Cette méthode se place dans la continuité de
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.clone"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="CodeDansTexte">git pull</text:span> lors d&#8217;une session SSH</text:a>&#160;: nous orchestrons les
actions nécessaires au déploiement en les listant dans un
fichier de configuration, en choisissant dans quel ordre les déclencher
et sur quel(s) serveur(s).</text:p>
<text:p text:style-name="TexteCourant">Nous retrouvons <text:span text:style-name="T4">Puppet</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://puppet.com" text:visited-style-name="Visited_20_Internet_20_Link">https://puppet.com</text:a></text:span>),
<text:span text:style-name="T4">Chef</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://www.chef.io" text:visited-style-name="Visited_20_Internet_20_Link">https://www.chef.io</text:a></text:span>) et <text:span text:style-name="T4">Ansible</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://ansible.com" text:visited-style-name="Visited_20_Internet_20_Link">https://ansible.com</text:a></text:span>)
parmi les outils les plus utilisés et les mieux documentés.
Ils ont chacun une philosophie de configuration et d&#8217;exécution différente
—&#160;l&#8217;idéal est encore d&#8217;essayer d&#8217;écrire une première recette avec chacun d&#8217;entre
eux pour voir celui qui vous semble le plus naturel à utiliser.</text:p>
<text:p text:style-name="TexteCourant">Ma préférence va vers <text:span text:style-name="T4">Ansible</text:span> car le logiciel s&#8217;installe facilement
sur macOS et Linux, se configure avec une syntaxe que je connais déjà (<text:span text:style-name="T4">YAML</text:span>)
et je trouve ses messages d&#8217;erreurs informatifs.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple suivant illustre le déploiement de l&#8217;application Node <text:span text:style-name="T4">Slackin</text:span>
(<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/rauchg/slackin" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/rauchg/slackin</text:a></text:span>) sur
l'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-hosting.shared"  text:visited-style-name="Visited_20_Internet_20_Link">hébergement mutualisé</text:a> alwaysdata&#160;:</text:p>
<text:p text:style-name="Code">$ ansible-playbook<text:s text:c="2"/>-i ansible/inventory.yaml ansible/playbook.yaml</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">PLAY [webservers] *******************************</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">TASK [Gathering Facts] **************************</text:p><text:p text:style-name="Code">ok: [ssh-moncompte.alwaysdata.net]</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">TASK [code source via git] **********************</text:p><text:p text:style-name="Code">ok: [ssh-moncompte.alwaysdata.net]</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">TASK [mise à jour des modules npm] **************</text:p><text:p text:style-name="Code">ok: [ssh-moncompte.alwaysdata.net]</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">PLAY RECAP **************************************</text:p><text:p text:style-name="Code">ssh-moncompte.alwaysdata.net : ok=3</text:p>
<text:p text:style-name="TexteCourant">La commande précédente a eu pour effet de créer des connexions SSH avec les
machines listées dans le fichier <text:span text:style-name="CodeDansTexte">inventory.yaml</text:span> puis de jouer les actions
listées dans le fichier <text:span text:style-name="CodeDansTexte">playbook.yaml</text:span>.</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>Inventaire</text:span><text:line-break/><text:tab/><text:span text:style-name="T7">Liste de serveurs connus</text:span> sur lesquels effectuer des déploiements.<text:line-break/>
Les serveurs peuvent être catégorisés (par type, par emplacement)
pour contrôler finement les actions à déclencher.
Par exemple&#160;: uniquement les serveurs web de production,
les bases de données de test, l&#8217;API de la région Europe.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>Playbook</text:span><text:line-break/><text:tab/><text:span text:style-name="T7">Liste des actions possibles</text:span> en fonction des types de serveurs.<text:line-break/>
Ces actions peuvent être rejouées à l&#8217;infini et de manière prédictible.</text:p>
<text:p text:style-name="TexteCourant">Le <text:span text:style-name="T4">playbook</text:span> suivant illustre 2 tâches appliquées uniquement sur
les serveurs étiquetés dans notre <text:span text:style-name="T4">inventaire</text:span> en tant que <text:span text:style-name="CodeDansTexte">webservers</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">ansible/playbook.yaml</text:p><text:p text:style-name="Code">---</text:p><text:p text:style-name="Code">- hosts: webservers</text:p><text:p text:style-name="Code"><text:s text:c="2"/>tasks:</text:p><text:p text:style-name="Code"><text:s text:c="4"/>- name: code source via git</text:p><text:p text:style-name="Code"><text:s text:c="6"/>git:<text:s text:c="44"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="8"/>repo: "https://github.com/rauchg/slackin.git" <text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="8"/>dest: "{{ ansible_env.HOME }}"</text:p><text:p text:style-name="Code"><text:s text:c="8"/>clone: yes<text:s text:c="36"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="8"/>update: yes<text:s text:c="35"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>- name: mise à jour des modules npm</text:p><text:p text:style-name="Code"><text:s text:c="6"/>npm:<text:s text:c="44"/><text:span text:style-name="PuceCode">5</text:span></text:p><text:p text:style-name="Code"><text:s text:c="8"/>state: present<text:s text:c="32"/><text:span text:style-name="PuceCode">6</text:span></text:p><text:p text:style-name="Code"><text:s text:c="8"/>path: "{{ ansible_env.HOME }}"</text:p><text:p text:style-name="Code"><text:s text:c="8"/>production: true<text:s text:c="30"/><text:span text:style-name="PuceCode">7</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Actions Git&#160;— pour en savoir plus <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://docs.ansible.com/ansible/2.5/modules/git_module" text:visited-style-name="Visited_20_Internet_20_Link">https://docs.ansible.com/ansible/2.5/modules/git_module</text:a></text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Adresse du dépôt Git à récupérer.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Indique de cloner le dépôt s&#8217;il n&#8217;est pas déjà présent.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Indique de récupérer les commits du dépôt en faisant <text:span text:style-name="CodeDansTexte">git pull</text:span>.<text:line-break/><text:span text:style-name="PuceCode">5</text:span> Actions npm&#160;— pour en savoir plus <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://docs.ansible.com/ansible/2.5/modules/npm_module" text:visited-style-name="Visited_20_Internet_20_Link">https://docs.ansible.com/ansible/2.5/modules/npm_module</text:a></text:span>.<text:line-break/><text:span text:style-name="PuceCode">6</text:span> Indique d&#8217;installer les dépendances npm en faisant <text:span text:style-name="CodeDansTexte">npm install</text:span>.<text:line-break/><text:span text:style-name="PuceCode">7</text:span> Indique de lancer la mise en jour des modules npm avec l&#8217;option <text:span text:style-name="CodeDansTexte">--production</text:span>&#160;— c&#8217;est-à-dire sans les dépendances listées dans le champ <text:span text:style-name="CodeDansTexte">devDependencies</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Les tâches sont réplicables sur les serveurs listés dans un fichier d&#8217;inventaire&#160;:</text:p>
<text:p text:style-name="CodeTitre">ansible/inventory.yaml</text:p><text:p text:style-name="Code">webservers:</text:p><text:p text:style-name="Code"><text:s text:c="2"/>hosts:</text:p><text:p text:style-name="Code"><text:s text:c="4"/>ssh-moncompte.alwaysdata.net</text:p>
<text:p text:style-name="TexteCourant">Nous déployons sur un seul serveur dans ce cas de figure.
Mais nous pourrions tout à fait déployer une même application avec la même
configuration sur une dizaine de serveurs (application à fort trafic)
ou une même application déployée chez plusieurs centaines de clients.
Dans tous les cas, l&#8217;application serait dans un état consistant sur toutes les
machines, avec peu de chances d&#8217;oublier une opération et une plus grande facilité
à revenir en arrière.</text:p>
<text:bookmark text:name="ref-deploy.docker" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">En publiant une image Docker</text:h><text:p text:style-name="TexteCourant">Une image Docker est un moyen fiable de reproduire le même environnement
applicatif et ses dépendances sur plusieurs systèmes d&#8217;exploitation
—&#160;y compris Windows, Linux et macOS.</text:p>
<text:p text:style-name="TexteCourant">Un des objectifs de Node est de pouvoir faire fonctionner un script
sur tout système d&#8217;exploitation compatible.
Docker (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://www.docker.com" text:visited-style-name="Visited_20_Internet_20_Link">https://www.docker.com</text:a></text:span>) pousse cette compatibilité plus
loin en empaquetant tout ce qui est nécessaire au bon fonctionnement
de l&#8217;application (dépendances, logiciels système).
Le mécanisme d&#8217;exécution aide à la fois à orchestrer plusieurs conteneurs entre
eux&#160;— y compris bases de données et moteurs de recherche&#160;— et de pouvoir
revenir dans l&#8217;état applicatif initial.</text:p>
<text:p text:style-name="TexteCourant">Le fichier suivant est un exemple fonctionnel d&#8217;image Docker.
Son intention est de créer un environnement Node v10
pour une <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-07"  text:visited-style-name="Visited_20_Internet_20_Link">application web</text:a> (cf. chapitre 7)
qui comporte une <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-05"  text:visited-style-name="Visited_20_Internet_20_Link">dépendance npm</text:a> (cf. chapitre 5)&#160;:</text:p>
<text:p text:style-name="CodeTitre">Dockerfile</text:p><text:p text:style-name="Code">FROM node:8-alpine</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">WORKDIR /app</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">COPY ./app.js ./app.js</text:p><text:p text:style-name="Code">COPY ./package.json ./package.json</text:p><text:p text:style-name="Code">RUN npm install --production</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">EXPOSE 4000</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">CMD ["npm", "start"]</text:p>
<text:p text:style-name="TexteCourant">Nous pouvons constater le choix de l&#8217;environnement Node (<text:span text:style-name="CodeDansTexte">FROM</text:span>),
avant de procéder à la copie des fichiers applicatifs vers l&#8217;image (<text:span text:style-name="CodeDansTexte">COPY</text:span>).
Suite à ça nous installons aussi les dépendances de l&#8217;application et spécifions
quelle commande effectuer lorsque l&#8217;image Docker est lancée (<text:span text:style-name="CodeDansTexte">CMD</text:span>).</text:p>
<text:p text:style-name="TexteCourant">L&#8217;image se construit et le conteneur se démarre sur notre ordinateur comme suit&#160;:</text:p>
<text:p text:style-name="Code">$ docker build -t nodebook/demo .</text:p><text:p text:style-name="Code">$ docker run -ti --rm -p 4000:4000 nodebook/demo</text:p><text:p text:style-name="Code">$ curl -L http://localhost:4000</text:p>
<text:p text:style-name="TexteCourant">Le transfert de l&#8217;image Docker vers un registre comme <text:span text:style-name="T4">Docker Hub</text:span>
(<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://hub.docker.com" text:visited-style-name="Visited_20_Internet_20_Link">https://hub.docker.com</text:a></text:span>) garantit l&#8217;exécution de ce même environnement
applicatif, partout.</text:p>
<text:p text:style-name="TexteCourant">Nous avons déjà parlé de l'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.cli"  text:visited-style-name="Visited_20_Internet_20_Link">outil en ligne de commande</text:a>
du service <text:span text:style-name="T4">now</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://zeit.co/now" text:visited-style-name="Visited_20_Internet_20_Link">https://zeit.co/now</text:a></text:span>) dans la section du même nom.
Il est aussi capable de déployer un conteneur Docker en se basant sur un fichier
<text:span text:style-name="CodeDansTexte">Dockerfile</text:span> en rajoutant l&#8217;option <text:span text:style-name="CodeDansTexte">--docker</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ now <text:span text:style-name="CodeExergue">--docker</text:span> --public</text:p><text:p text:style-name="Code">&gt; Deploying ~/.../examples under oncletom</text:p><text:p text:style-name="Code">&gt; https://examples-zlssezfiej.now.sh [in clipboard] (bru1) [7s]</text:p><text:p text:style-name="Code">&gt; Synced 1 file (156B) [7s]</text:p><text:p text:style-name="Code">&gt; Building…</text:p><text:p text:style-name="Code">&gt; ▲ docker build</text:p><text:p text:style-name="Code">&gt; Sending build context to Docker daemon 17.92 kBkB</text:p><text:p text:style-name="Code">&gt; ▲ Storing image</text:p><text:p text:style-name="Code">&gt; Build completed</text:p><text:p text:style-name="Code">&gt; Verifying instantiation in bru1</text:p><text:p text:style-name="Code">&gt; ✔ Scaled 1 instance in bru1 [18s]</text:p><text:p text:style-name="Code">&gt; Success! Deployment ready</text:p>
<text:p text:style-name="TexteCourant">Une autre solution consiste à publier notre image sur <text:span text:style-name="T4">Docker Hub</text:span>,
la plate-forme officielle de partage d&#8217;images Docker.
Docker Hub dispose d&#8217;une fonctionnalité de construction automatique connectée
à GitHub.
Docker Hub construit l&#8217;image à chaque nouveau commit, puis la met à disposition.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-06/images/docker-automated-build.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 39. Création d&#8217;un <text:span text:style-name="T4">build</text:span> automatisé à partir d&#8217;un dépôt GitHub.</text:p>
<text:p text:style-name="TexteCourant">Il ne reste alors plus qu&#8217;à la collecter sur un ordinateur avec la commande
<text:span text:style-name="CodeDansTexte">docker pull</text:span>&#160;— que ce soit sur notre machine, chez notre hébergeur
ou par le biais du <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.ci"  text:visited-style-name="Visited_20_Internet_20_Link">service d&#8217;intégration continue</text:a>.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Avancé</text:span> Amazon Elastic Container Registry</text:h><text:p text:style-name="Remarque">Le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-hosting.cloud"  text:visited-style-name="Visited_20_Internet_20_Link">fournisseur <text:span text:style-name="T4">cloud</text:span></text:a> Amazon Web Services intègre
un registre privé d&#8217;images Docker pour chaque compte client.</text:p>
<text:p text:style-name="Remarque"><text:span text:style-name="T4">Elastic Container Registry</text:span> (ECR, <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://aws.amazon.com/ecr/" text:visited-style-name="Visited_20_Internet_20_Link">https://aws.amazon.com/ecr/</text:a></text:span>)
se connecte à d&#8217;autres services comme <text:span text:style-name="T4">Amazon CodeDeploy</text:span> pour déclencher
des mises à jour d&#8217;infrastructure à chaque nouvelle image Docker.</text:p>
<text:bookmark text:name="ref-deploy.ci" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">En paramétrant un logiciel d&#8217;intégration continue</text:h><text:p text:style-name="TexteCourant">L&#8217;utilisation d&#8217;un logiciel d&#8217;intégration continue est la manière la plus
flexible d&#8217;automatiser tout type de déploiement.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;intégration continue vise à vérifier si des régressions se sont glissées
dans notre code.
L&#8217;idée est de livrer régulièrement du code pour détecter les erreurs au plus tôt.<text:line-break/>Les services d&#8217;intégration continue automatisent cette pratique.
Ils s&#8217;intègrent avec d&#8217;autres services pour prévisualiser les branches,
compiler la documentation mais aussi pour déployer des artéfacts sur d&#8217;autres
plates-formes&#160;: <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-publish"  text:visited-style-name="Visited_20_Internet_20_Link">registre npm</text:a>,
GitHub Pages, Heroku ou même <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-hosting.lambda"  text:visited-style-name="Visited_20_Internet_20_Link">Amazon Lambda</text:a>.</text:p>
<text:p text:style-name="TexteCourant">Le logiciel Jenkins (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://jenkins.io/" text:visited-style-name="Visited_20_Internet_20_Link">https://jenkins.io/</text:a></text:span>) s&#8217;installe sur notre propre
infrastructure tandis que des services en ligne comme
Circle CI (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://circleci.com" text:visited-style-name="Visited_20_Internet_20_Link">https://circleci.com</text:a></text:span>), Travis CI (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://travis-ci.com" text:visited-style-name="Visited_20_Internet_20_Link">https://travis-ci.com</text:a></text:span>)
et CodeShip (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://codeship.com" text:visited-style-name="Visited_20_Internet_20_Link">https://codeship.com</text:a></text:span>) mette à disposition leur
infrastructure gratuitement pour les projets <text:span text:style-name="T4">open source</text:span>.
GitLab (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://www.gitlab.com" text:visited-style-name="Visited_20_Internet_20_Link">https://www.gitlab.com</text:a></text:span>) combine l&#8217;hébergement de dépôts Git
et l&#8217;intégration continue.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Windows</text:span> Service AppVeyor</text:h><text:p text:style-name="Remarque">J&#8217;utilise AppVeyor (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://appveyor.com" text:visited-style-name="Visited_20_Internet_20_Link">https://appveyor.com</text:a></text:span>) en complément d&#8217;un autre
service d&#8217;intégration continue quand il s&#8217;agit de tester
la <text:span text:style-name="T7">compatibilité du code avec Windows</text:span>
—&#160;ce qui est le cas des exemples de cet ouvrage.</text:p>
<text:p text:style-name="TexteCourant">J&#8217;ai une préférence pour GitLab lorsque le projet y est hébergé.
Le reste du temps, j&#8217;utilise Travis CI car j&#8217;aime la clarté du fichier de configuration,
l&#8217;exhaustivité de leur documentation et la qualité des échanges avec leur support technique.</text:p>
<text:p text:style-name="TexteCourant">Le fichier suivant est un exemple de configuration pour Travis CI.
Il se place à la racine d&#8217;un projet à tester et s&#8217;écrit avec la syntaxe <text:span text:style-name="T4">YAML</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">.travis.yml</text:p><text:p text:style-name="Code">language: node_js</text:p><text:p text:style-name="Code">node_js: v10</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">script: npm test</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">deploy:</text:p><text:p text:style-name="Code"><text:s text:c="2"/>provider: npm</text:p><text:p text:style-name="Code"><text:s text:c="2"/>on:</text:p><text:p text:style-name="Code"><text:s text:c="4"/>tags: true</text:p><text:p text:style-name="Code"><text:s text:c="2"/>email: "$NPM_EMAIL"</text:p><text:p text:style-name="Code"><text:s text:c="2"/>api-key: "$NPM_TOKEN"</text:p>
<text:p text:style-name="TexteCourant">Cet exemple est structuré en 3 parties&#160;:</text:p>
<text:p text:style-name="ListeANumero">1.<text:tab/>la <text:span text:style-name="T7">configuration de l&#8217;environnement</text:span>&#160;— en l&#8217;occurrence Node v10&#160;;</text:p><text:p text:style-name="ListeANumero">2.<text:tab/>la <text:span text:style-name="T7">commande de test</text:span>&#160;;</text:p><text:p text:style-name="ListeANumero">3.<text:tab/>la <text:span text:style-name="T7">configuration du déploiement</text:span> en cas de succès.</text:p>
<text:p text:style-name="TexteCourant">Ici, le déploiement consiste à
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-publish"  text:visited-style-name="Visited_20_Internet_20_Link">déployer le code sur le registre npm</text:a>
quand les tests passent lors de la création d&#8217;un tag Git.
Les variables d&#8217;environnement <text:span text:style-name="CodeDansTexte">$NPM_EMAIL</text:span> et <text:span text:style-name="CodeDansTexte">$NPM_TOKEN</text:span> se configurent de
manière sécurisée sur l&#8217;écran de configuration du projet
(voir illustration ci-après).</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> .travis.yml</text:h><text:p text:style-name="Remarque">Une documentation adaptée aux projets Node est disponible à cette adresse&#160;:
<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://docs.travis-ci.com/user/languages/javascript-with-nodejs/" text:visited-style-name="Visited_20_Internet_20_Link">https://docs.travis-ci.com/user/languages/javascript-with-nodejs/</text:a></text:span>.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-06/images/travisci-secrets.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 40. Écran de configuration des variables d&#8217;environnement sécurisées.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple suivant illustre l&#8217;utilisation de
l'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.cli"  text:visited-style-name="Visited_20_Internet_20_Link">outil en ligne de commande</text:a> <text:span text:style-name="CodeDansTexte">now</text:span> dès qu&#8217;un nouveau commit
est poussé sur la branche <text:span text:style-name="CodeDansTexte">master</text:span> et que les tests passent au vert&#160;:</text:p>
<text:p text:style-name="CodeTitre">.travis.yml</text:p><text:p text:style-name="Code">language: node_js</text:p><text:p text:style-name="Code">node_js: v10</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">before_deploy: npm install --global now</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">deploy:</text:p><text:p text:style-name="Code"><text:s text:c="2"/>provider: script</text:p><text:p text:style-name="Code"><text:s text:c="2"/>script: now --token $NOW_TOKEN</text:p><text:p text:style-name="Code"><text:s text:c="2"/>on:</text:p><text:p text:style-name="Code"><text:s text:c="4"/>branch: master</text:p>
<text:p text:style-name="TexteCourant">Les informations d&#8217;exécution des tests sont consignés au même titre que le statut
du déploiement&#160;— voir image ci-contre.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-06/images/travisci-build.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 41. Écran illustrant le déploiement automatique d&#8217;une application Node avec la commande <text:span text:style-name="CodeDansTexte">now</text:span>.</text:p>
<text:bookmark text:name="ref-hosting" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Choisir son hébergement</text:h><text:p text:style-name="TexteCourant">Nous allons nous intéresser aux différentes possibilités d&#8217;hébergement
d&#8217;applications Node.</text:p>
<text:p text:style-name="TexteCourant">Côté tarifs, certaines sont gratuites sous certaines conditions,
d&#8217;autres se paient à l&#8217;heure et d&#8217;autres à l&#8217;année.
Certaines offres sont figées, d&#8217;autres permettent de rajouter des machines
voire même de changer la puissance en cours de route.</text:p>
<text:bookmark text:name="ref-hosting.paas" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Plate-forme de services (<text:span text:style-name="T4">Platform as a Service</text:span>, <text:span text:style-name="T4">PaaS</text:span>)</text:h><text:p text:style-name="TexteCourant">Les plates-formes de services <text:span text:style-name="T7">automatisent la configuration et le déploiement</text:span>
de nos applications Node mais également Ruby, Python et PHP, entre autres.
Elles se spécialisent dans des déploiements rapides, une allocation des
ressources flexible, à la demande et en un clic.</text:p>
<text:p text:style-name="TexteCourant">C&#8217;est le <text:span text:style-name="T7">moyen le plus facile de déployer une application Node</text:span>, surtout si
on utilise déjà Git pour versionner son code.</text:p>
<text:p text:style-name="TexteCourant">Leur philosophie est de <text:span text:style-name="T7">tout penser en termes de ressources modulaires</text:span>.
On paie pour une certaine capacité de CPU et de RAM, à la minute ou à l&#8217;heure.
Ces capacités s&#8217;augmentent ou se réduisent en quelques clics et sans changer
une seule ligne de code dans notre application.</text:p>
<text:p text:style-name="TexteCourant">Une application se déploie avec un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.cli"  text:visited-style-name="Visited_20_Internet_20_Link">outil en ligne de commande</text:a> ou
en <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.git"  text:visited-style-name="Visited_20_Internet_20_Link">faisant <text:span text:style-name="CodeDansTexte">git push</text:span></text:a>.
Et nous pouvons l&#8217;automatiser avec une <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.recipe"  text:visited-style-name="Visited_20_Internet_20_Link">recette de déploiement</text:a>
et de l'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.ci"  text:visited-style-name="Visited_20_Internet_20_Link">intégration continue</text:a>.</text:p>
<text:p text:style-name="TableauTitre">Table 10. Sélection de fournisseurs <text:span text:style-name="T4">PaaS</text:span></text:p><table:table table:style-name="Tableau1"><table:table-column />,<table:table-column />,<table:table-column />,<table:table-column />,<table:table-column /><table:table-row><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Service</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Déploiement</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Add-ons</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Gratuité</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Tarif</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://zeit.co" text:visited-style-name="Visited_20_Internet_20_Link">https://zeit.co</text:a></text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>cli</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>3 apps</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>15$/mois/10 apps</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://clever-cloud.com" text:visited-style-name="Visited_20_Internet_20_Link">https://clever-cloud.com</text:a></text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>git</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>crédit 20€</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>5€/mois/app</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://gandi.net/hosting/simple" text:visited-style-name="Visited_20_Internet_20_Link">https://gandi.net/hosting/simple</text:a></text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>cli/git/SSH</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>10 jours</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>5€/mois/app</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://scalingo.com" text:visited-style-name="Visited_20_Internet_20_Link">https://scalingo.com</text:a></text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>git/GitHub</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>30 jours</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>7€/mois/app</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://heroku.com" text:visited-style-name="Visited_20_Internet_20_Link">https://heroku.com</text:a></text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>cli/git/GitHub/Dropbox</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>1000 heures/mois</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>7$/mois/app</text:p></table:table-cell></table:table-row></table:table>
<text:p text:style-name="TexteCourant">La startup californienne Zeit (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://zeit.co" text:visited-style-name="Visited_20_Internet_20_Link">https://zeit.co</text:a></text:span>) édite le service
<text:span text:style-name="T4">now</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://zeit.co/now" text:visited-style-name="Visited_20_Internet_20_Link">https://zeit.co/now</text:a></text:span>).
Ce service est focalisé sur l&#8217;hébergement de sites statiques,
d&#8217;applications Node et de conteneurs Docker.</text:p>
<text:p text:style-name="TexteCourant">Sa particularité est de créer une <text:span text:style-name="T7">nouvelle instance d&#8217;application par déploiement</text:span>.
On ne modifie donc jamais un déploiement déjà existant.
On parle alors de <text:span text:style-name="T7">déploiement immuable</text:span>.</text:p>
<text:p text:style-name="TexteCourant">C&#8217;est un service que j&#8217;apprécie pour sa simplicité.
C&#8217;est probablement le plus pratique à utiliser pour déployer votre première application,
si vous n&#8217;utilisez pas Git ou si l&#8217;application n&#8217;utilise pas de base de données.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">Heroku</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://heroku.com" text:visited-style-name="Visited_20_Internet_20_Link">https://heroku.com</text:a></text:span>) est une autre alternative plus complète,
toujours pour démarrer en douceur et sans sortir la carte bleue.
Des modules optionnels couvrent nos besoins en bases de données comme
<text:span text:style-name="T4">MySQL</text:span>, <text:span text:style-name="T4">MariaDB</text:span>, <text:span text:style-name="T4">redis</text:span> ou <text:span text:style-name="T4">postgreSQL</text:span> par exemple.
D&#8217;autres services gèrent l&#8217;envoi d&#8217;emails,
l&#8217;indexation de contenus, le monitoring, les logs, etc.
La majorité offre un petit espace de stockage gratuit pour tester le produit.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-06/images/heroku-addons.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 42. Ensemble de ressources complémentaires à une application Node hébergée sur Heroku.</text:p>
<text:p text:style-name="TexteCourant">S&#8217;il est facile de déployer sur ces infrastructures et de gérer les ressources
allouées à nos applications, à l&#8217;inverse la facture peut vite devenir salée
à mesure qu&#8217;on augmente leur puissance.
Ce coût est tout relatif&#160;: il est surement inférieur à celui de notre temps
passé à gérer les machines si on devait tout faire à la main.</text:p>
<text:bookmark text:name="ref-hosting.shared" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Hébergement mutualisé</text:h><text:p text:style-name="TexteCourant">Les hébergements mutualisés ont l&#8217;avantage d&#8217;être <text:span text:style-name="T7">bon marché et sans entretien</text:span>.
Cette formule est un excellent compromis prix/services.
Elle demande un peu plus d&#8217;efforts que les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-hosting.paas"  text:visited-style-name="Visited_20_Internet_20_Link">plates-formes de services</text:a>
car tout le travail d&#8217;automatisation repose sur nos épaules, si on le souhaite.</text:p>
<text:p text:style-name="TexteCourant">Ce modèle est adapté pour l&#8217;hébergement de fichiers statiques ou des sites web
construits avec des langages de scripts comme Python ou PHP.
Rares sont ceux qui ont adapté leur fonctionnement au modèle applicatif de Node.</text:p>
<text:p text:style-name="TexteCourant">Alwaysdata (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://alwaysdata.com" text:visited-style-name="Visited_20_Internet_20_Link">https://alwaysdata.com</text:a></text:span>) fait exception à la règle.
Ce service d&#8217;hébergement indépendant dispose d&#8217;une formule gratuite avec 100Mo
d&#8217;espace disque pour démarrer.</text:p>
<text:p text:style-name="TexteCourant">Le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy"  text:visited-style-name="Visited_20_Internet_20_Link">déploiement</text:a> de nos applications se fait via
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.sftp"  text:visited-style-name="Visited_20_Internet_20_Link">SSH ou SFTP</text:a>, en <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.clone"  text:visited-style-name="Visited_20_Internet_20_Link">utilisant Git</text:a>,
avec un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.ci"  text:visited-style-name="Visited_20_Internet_20_Link">service d&#8217;intégration continue</text:a> ou bien en
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.recipe"  text:visited-style-name="Visited_20_Internet_20_Link">utilisant une recette</text:a>.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;interface d&#8217;administration référence une section <text:span text:style-name="T7">Sites</text:span> dans la barre de
navigation.
Cette section liste les différents sites de notre compte.
Si vous venez juste de créer le vôtre, un site a automatiquement été créé.
Son URL est déterminée à partir du <text:span text:style-name="T7">nom d&#8217;utilisateur</text:span> que vous avez choisi
lors de la phase d&#8217;inscription.</text:p>
<text:p text:style-name="TexteCourant">Un clic sur le bouton <text:span text:style-name="T7">Modifier</text:span> nous aidera à changer ses réglages&#160;:</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-06/images/alwaysdata-site-list.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 43. Liste de nos sites configurés chez alwaysdata.</text:p>
<text:p text:style-name="TexteCourant">Le nouvel écran mentionne les adresses auxquel le site répond.
En basculant vers un compte payant, on pourra assigner un ou plusieurs domaines
ou sous-domaines à ce même site.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-06/images/alwaysdata-site-informations.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 44. Écran de configuration d&#8217;un site chez alwaysdata.</text:p>
<text:p text:style-name="TexteCourant">Les réglages liés à Node se trouvent sous les adresses.
Le <text:span text:style-name="T4">type</text:span> de site doit être changé en <text:span text:style-name="CodeDansTexte">Node.js</text:span> pour afficher
les champs de configuration qui nous intéressent.</text:p>
<text:p text:style-name="TexteCourant">La <text:span text:style-name="T4">commande</text:span> se configure de la même manière
que l'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-script"  text:visited-style-name="Visited_20_Internet_20_Link">exécution d&#8217;un script Node</text:a>
—&#160;cf. <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-04"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 4</text:a>.
On peut aussi faire appel au
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-start"  text:visited-style-name="Visited_20_Internet_20_Link">script <text:span text:style-name="CodeDansTexte">npm start</text:span></text:a> comme vu pendant
la lecture du <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-05"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 5</text:a>&#160;:</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-06/images/alwaysdata-site-configuration.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 45. Écran de configuration de Node.js pour un site chez alwaysdata.</text:p>
<text:p text:style-name="TexteCourant">La commande complète devrait apparaître dans la section <text:span text:style-name="T7">Processus</text:span>
une fois la configuration sauvegardée.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-06/images/alwaysdata-process-list.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 46. Liste des processus liés à nos sites chez alwaysdata.</text:p>
<text:p text:style-name="TexteCourant">En cas de doute, un bouton <text:span text:style-name="T7">Redémarrer</text:span> est affiché à côté du bouton <text:span text:style-name="T7">Modifier</text:span>
dans la liste des sites.
L&#8217;application sera alors interrompue et relancée.
Cette opération est nécessaire pour que l&#8217;application prenne en compte
les changements après une mise à jour ou un plantage.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Configuration</text:span> Une application Node par site</text:h><text:p text:style-name="Remarque">Alwaysdata nous permet d&#8217;associer un seul processus à un seul site.</text:p>
<text:p text:style-name="Remarque">Pour rendre une application Node accessibles sur Internet, il faudra
alors créer un nouveau site et lui associer un autre nom de domaine,
ou un sous-domaine.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Aide</text:span> Forum d&#8217;entraide</text:h><text:p text:style-name="Remarque">L&#8217;équipe et la communauté alwaysdata (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://forum.alwaysdata.com" text:visited-style-name="Visited_20_Internet_20_Link">https://forum.alwaysdata.com</text:a></text:span>) sont
sympathiques et à l&#8217;écoute.
C&#8217;est un endroit idéal pour chercher des informations et poser des questions
pour mieux comprendre ce qui empêche votre application de fonctionner
sur leurs services.</text:p>
<text:bookmark text:name="ref-hosting.cloud" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Serveur virtualisé, dédié ou cloud</text:h><text:p text:style-name="TexteCourant">La location d&#8217;un serveur dédié revient à payer pour un ordinateur complet,
son entretien physique et son placement dans un <text:span text:style-name="T4">datacenter</text:span>&#160;— un immense
parking à ordinateurs connecté à un réseau haute-capacité.</text:p>
<text:p text:style-name="TexteCourant">Les <text:span text:style-name="T4">Virtual Private Servers</text:span> (<text:span text:style-name="T4">VPS</text:span>) sont des machines virtuelles
(<text:span text:style-name="T4">Virtual Machine</text:span>, <text:span text:style-name="T4">VM</text:span>)&#160;: un serveur dédié dont les ressources sont réparties
en plusieurs unités indépendantes les unes des autres, les VM.</text:p>
<text:p text:style-name="TexteCourant">Les offres <text:span text:style-name="T4">cloud</text:span> sont une version "élastique" des VM&#160;: la puissance de calcul,
la bande-passante et la mémoire allouées sont ajustables sans avoir à
changer de machine, sans avoir à tout réinstaller.
Ces ressources sont considérées comme étant "à la demande"&#160;: elles s&#8217;obtiennent
en quelques secondes et peuvent être mises en pause, réduites, augmentées ou
supprimées à tout moment.</text:p>
<text:p text:style-name="TexteCourant">Leur modèle de facturation s&#8217;adapte à la souplesse d&#8217;allocation des ressources&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">au mois&#160;: VPS, serveur virtualisé, serveur dédié</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">à l&#8217;heure&#160;: serveur <text:span text:style-name="T4">cloud</text:span></text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">à la (milli)seconde&#160;: <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-hosting.lambda"  text:visited-style-name="Visited_20_Internet_20_Link">fonction événementielle</text:a></text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">Les modes de déploiement adaptés sont l'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.clone"  text:visited-style-name="Visited_20_Internet_20_Link">utilisation de Git</text:a>
pour obtenir le code, l'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.docker"  text:visited-style-name="Visited_20_Internet_20_Link">orchestration d&#8217;applications avec Docker</text:a>
en combinaison avec des <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.recipe"  text:visited-style-name="Visited_20_Internet_20_Link">recettes de déploiement</text:a> et de
l'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.ci"  text:visited-style-name="Visited_20_Internet_20_Link">intégration continue</text:a>.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;offre de serveurs virtualisés et dédiés (VPS, VM) est adaptée à des
besoins constants et pour héberger plusieurs applications sur une même machine
—&#160;à coût constant.</text:p>
<text:p text:style-name="TableauTitre">Table 11. Sélection de fournisseurs de serveur virtualisé et dédié</text:p><table:table table:style-name="Tableau1"><table:table-column />,<table:table-column />,<table:table-column />,<table:table-column />,<table:table-column /><table:table-row><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Service</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Déploiement</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Add-ons</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Tarif horaire</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Tarif mensuel</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://ovh.com/fr/vps/" text:visited-style-name="Visited_20_Internet_20_Link">https://ovh.com/fr/vps/</text:a></text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>SSH</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>-</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>4.00€/VM</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://online.net/fr/serveur-dedie" text:visited-style-name="Visited_20_Internet_20_Link">https://online.net/fr/serveur-dedie</text:a></text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>SSH, CLI, API</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>-</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>14.50€/serveur</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://alwaysdata.com/fr/pricing/#vps" text:visited-style-name="Visited_20_Internet_20_Link">https://alwaysdata.com/fr/pricing/#vps</text:a></text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>SSH, API</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>-</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>149.00€/VM</text:p></table:table-cell></table:table-row></table:table>
<text:p text:style-name="TexteCourant">L&#8217;offre <text:span text:style-name="T4">cloud</text:span> est plus intéressante si vos besoins sont
singulièrement fluctuants&#160;— par exemple lorsqu&#8217;il y a besoin de doubler le CPU
pendant 2 heures, à heure fixe ou en fonction de la charge mais aussi quand il
s&#8217;agit d&#8217;ajouter 10 serveurs d&#8217;un coup pour traiter un calcul gourmand.</text:p>
<text:p text:style-name="TableauTitre">Table 12. Sélection de fournisseurs de serveur <text:span text:style-name="T4">cloud</text:span></text:p><table:table table:style-name="Tableau1"><table:table-column />,<table:table-column />,<table:table-column />,<table:table-column />,<table:table-column /><table:table-row><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Service</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Déploiement</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Add-ons</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Tarif horaire</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Tarif mensuel</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://scaleway.com" text:visited-style-name="Visited_20_Internet_20_Link">https://scaleway.com</text:a></text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>CLI, SSH, API</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>0.004€</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>2.30€/VM</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://linode.com" text:visited-style-name="Visited_20_Internet_20_Link">https://linode.com</text:a></text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>CLI, Git, API, Web</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>0.0075$</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>5.00$/VM</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://gandi.net/hosting/iaas" text:visited-style-name="Visited_20_Internet_20_Link">https://gandi.net/hosting/iaas</text:a></text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>CLI, Git</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>0.0081€</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>6.00€/VM</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://ovh.com/fr/public-cloud/" text:visited-style-name="Visited_20_Internet_20_Link">https://ovh.com/fr/public-cloud/</text:a></text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>SSH, API, Web</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>0.062€</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>26.00€/VM</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://digitalocean.com" text:visited-style-name="Visited_20_Internet_20_Link">https://digitalocean.com</text:a></text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>CLI, API</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2718;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>0.007$</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>5.00$/VM</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://aws.amazon.com/fr/ec2/" text:visited-style-name="Visited_20_Internet_20_Link">https://aws.amazon.com/fr/ec2/</text:a></text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>CLI, API, SSH, Web</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>&#x2714;</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>0.0132$</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>9.67$/VM</text:p></table:table-cell></table:table-row></table:table>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Avancé</text:span> HashiCorp Terraform</text:h><text:p text:style-name="Remarque">Le logiciel <text:span text:style-name="T4">Terraform</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://terraform.io/" text:visited-style-name="Visited_20_Internet_20_Link">https://terraform.io/</text:a></text:span>) a pour intention
de documenter une infrastructure (serveurs, DNS, stockage, etc.) sous forme
d&#8217;un fichier de configuration&#160;— versionnable avec Git.</text:p>
<text:p text:style-name="Remarque">C&#8217;est un outil idéal pour automatiser le déploiement d&#8217;une infrastructure de zéro
mais pour la faire évoluer d&#8217;une version à une autre.
Nous pouvons ainsi créer une architecture combinant plusieurs fournisseurs
sans gérer la complexité et la non-interopérabilité de leurs API.</text:p>
<text:bookmark text:name="ref-hosting.lambda" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Fonction événementielle (<text:span text:style-name="T4">Serverless</text:span>, <text:span text:style-name="T4">Lambda</text:span>)</text:h><text:p text:style-name="TexteCourant">La fonction événementielle est l&#8217;évolution ultime des offres <text:span text:style-name="T4">cloud</text:span>.
Au lieu de payer une machine ou une VM à l&#8217;heure,
<text:span text:style-name="T7">nous payons pour exécuter du code à la milliseconde</text:span>.
Ce code se déclenche en réaction à événement se produisant ailleurs
sur l&#8217;infrastructure&#160;: une requête HTTP entrante, un nouveau fichier ou encore
un appel de l&#8217;API de l&#8217;hébergeur.</text:p>
<text:p text:style-name="TexteCourant">C&#8217;est le moyen le plus économique pour
<text:span text:style-name="T7">exécuter du code à tout instant sans payer le temps d&#8217;inactivité d&#8217;une machine</text:span>.
On pourrait comparer ce modèle à celui de la téléphonie mobile lorsqu&#8217;on a à choisir
entre un forfait (coût fixe même si on ne consomme pas tout) et un paiement à la carte
(coût dépendant de la consommation).</text:p>
<text:p text:style-name="TexteCourant">Les applications destinées à être exécutées comme fonction événementielle
ont une architecture un peu différente.
Au lieu de démarrer un serveur web basé sur le
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-http"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">http</text:span></text:a>, nous exposons
une <text:span text:style-name="T7">fonction qui retourne un résultat de manière asynchrone</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">webtask.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const getPokemonName = require('pokemon-random-name');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">module.exports = (context, send) =&gt; {<text:s text:c="5"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>return send(null, getPokemonName());</text:p><text:p text:style-name="Code">};</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Le paramètre <text:span text:style-name="CodeDansTexte">context</text:span> contient des informations à propos de la requête entrante&#160;— paramètres, corps du message, etc.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Ce code est très similaire à ce que nous pourrions écrire lors de l&#8217;événement
<text:span text:style-name="CodeDansTexte">server.on('request')</text:span> du <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-http"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">http</text:span></text:a>.</text:p>
<text:p text:style-name="TexteCourant">Voyons ça en contexte dans l&#8217;interface web du service Webtask
(<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://webtask.io/make" text:visited-style-name="Visited_20_Internet_20_Link">https://webtask.io/make</text:a></text:span>)&#160;:</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-06/images/webtask-make.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 47. Exemple de fonction événementielle et de son historique d&#8217;exécutions avec le service Webtask.</text:p>
<text:p text:style-name="TexteCourant">Un nom de Pokémon est affiché lorsque nous accédons à l&#8217;URL indiquée en bas
de l&#8217;écran.</text:p>
<text:p text:style-name="TableauTitre">Table 13. Sélection de fournisseurs</text:p><table:table table:style-name="Tableau1"><table:table-column />,<table:table-column />,<table:table-column />,<table:table-column /><table:table-row><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Service</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Déploiement</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Gratuité</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Tarif des requêtes</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://aws.amazon.com/lambda" text:visited-style-name="Visited_20_Internet_20_Link">https://aws.amazon.com/lambda</text:a></text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Web, CLI, API</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>1M requêtes/mois</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>0.2$/million</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://webtask.io" text:visited-style-name="Visited_20_Internet_20_Link">https://webtask.io</text:a></text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Web, GitHub, CLI, API</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>1 requête/seconde</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>sur devis</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://cloud.google.com/functions/" text:visited-style-name="Visited_20_Internet_20_Link">https://cloud.google.com/functions/</text:a></text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Web, GitHub, CLI, API</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>2M requêtes/mois</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>0.4$/million</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://zeit.co/now" text:visited-style-name="Visited_20_Internet_20_Link">https://zeit.co/now</text:a></text:span> + <text:span text:style-name="CodeDansTexte">micro</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>CLI, API</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>3 apps</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>15$/mois</text:p></table:table-cell></table:table-row></table:table>
<text:p text:style-name="TexteCourant">Chaque fournisseur de fonction événementielle a sa propre vision des paramètres
qui nous sont donnés mais leur fonctionnement reste très proche.</text:p>
<text:p text:style-name="TexteCourant">Je trouve que Webtask est le service avec la plus faible courbe d&#8217;apprentissage.
Son interface y est pour beaucoup.</text:p>
<text:p text:style-name="TexteCourant">Le service <text:span text:style-name="T4">now</text:span> est intéressant à plus d&#8217;un titre.
Il déploie avec un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.cli"  text:visited-style-name="Visited_20_Internet_20_Link">outil en ligne de commande minimaliste</text:a>,
y compris des <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.docker"  text:visited-style-name="Visited_20_Internet_20_Link">conteneurs Docker</text:a>.
Il se transforme en fonction événementielle avec l&#8217;aide du
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-modules"  text:visited-style-name="Visited_20_Internet_20_Link">module npm</text:a>
<text:span text:style-name="T4">micro</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/micro" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/micro</text:a></text:span>).</text:p>
<text:p text:style-name="TexteCourant">Le service Amazon Lambda représente une marche d&#8217;apprentissage un peu plus importante.
C&#8217;est un service important de par l&#8217;outillage et la documentation disponibles
à son sujet.
Le service est complet, surtout une fois couplé avec le service
<text:span text:style-name="T4">Amazon API Gateway</text:span>.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Avancé</text:span> <text:span text:style-name="T4">Amazon API Gateway</text:span></text:h><text:p text:style-name="Remarque">Les Lambda d&#8217;Amazon ne sont pas accessibles depuis Internet par défaut.</text:p>
<text:p text:style-name="Remarque">Pour ce faire, il faut les relier au service  et associer
chaque route à une Lambda.
Le service se charge de transformer le résultat
—&#160;une chaîne de caractère, un tableau ou un objet ECMAScript&#160;—
en une réponse HTTP.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Définition</text:span> <text:span text:style-name="T4">Serverless</text:span></text:h><text:p text:style-name="Remarque">Ce type d&#8217;infrastructure a été nommé <text:span text:style-name="T4">serverless</text:span> suite à une organisation
du marché pour proposer des alternatives aux Lambda d&#8217;Amazon.</text:p>
<text:p text:style-name="Remarque">Quand on entend le mot <text:span text:style-name="T4">serverless</text:span>&#160;— littéralement, sans serveur&#160;— il faut comprendre
"sans serveur à gérer soi-même".
L&#8217;hébergeur dispose quand même de machines pour exécuter le code.
Leurs ressources sont mutualisées au maximum.</text:p>
<text:bookmark text:name="ref-améliorer_la_portabilité_applicative" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Améliorer la portabilité applicative</text:h><text:p text:style-name="TexteCourant">Le fonctionnement d&#8217;une application Node peut être impacté suite à son
déploiement en ligne.</text:p>
<text:p text:style-name="TexteCourant">Cette section a pour but de mettre en lumière des
<text:span text:style-name="T7">points importants qui contribuent à la portabilité de l&#8217;application</text:span>
—&#160;c&#8217;est-à-dire son bon fonctionnement une fois en fonctionnement autre part
que sur un ordinateur de développement et ce,
indépendamment du service d&#8217;hébergement retenu.</text:p>
<text:bookmark text:name="ref-node.version" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Utiliser la bonne version de Node</text:h><text:p text:style-name="TexteCourant">Les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-hosting.paas"  text:visited-style-name="Visited_20_Internet_20_Link">plates-formes de services</text:a> et certains
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.ci"  text:visited-style-name="Visited_20_Internet_20_Link">services d&#8217;intégration continue</text:a> utilisent deux mécanismes
pour déterminer notre préférence quant à la version de Node à utiliser&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">le fichier <text:span text:style-name="CodeDansTexte">.nvmrc</text:span>&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">la valeur <text:span text:style-name="CodeDansTexte">engines.node</text:span> du fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">Dans les deux cas, cela revient à préciser la version de Node
pour chacun de nos projets.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Conseil</text:span> Une version de Node par application</text:h><text:p text:style-name="Remarque">Je trouve qu&#8217;il est plus facile de gérer la version de Node au cas par cas
au lieu de m&#8217;imposer une seule version pour tout le code que j&#8217;écris.</text:p>
<text:p text:style-name="Remarque">C&#8217;est très utile quand je reprends le code après plusieurs mois d&#8217;inactivité.</text:p>
<text:p text:style-name="TexteCourant">Si vous avez décidé d&#8217;utiliser <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-nvm"  text:visited-style-name="Visited_20_Internet_20_Link">nvm</text:a>
(cf. <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-02"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 2</text:a>) ou que vous utilisez un service
compatible avec <text:span text:style-name="T4">nvm</text:span>, sachez que cet outil sait s&#8217;adapter à la version
de Node précisée dans le fichier <text:span text:style-name="CodeDansTexte">.nvmrc</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Un fichier <text:span text:style-name="CodeDansTexte">.nvmrc</text:span> ressemble à ceci&#160;:</text:p>
<text:p text:style-name="CodeTitre">.nvmrc</text:p><text:p text:style-name="Code">v10</text:p>
<text:p text:style-name="TexteCourant">Avec cette valeur, cela revient au même de faire
<text:span text:style-name="CodeDansTexte">nvm install v10</text:span> et <text:span text:style-name="CodeDansTexte">nvm install</text:span>.
La commande <text:span text:style-name="CodeDansTexte">nvm use</text:span> lit également la version contenue dans <text:span text:style-name="CodeDansTexte">.nvmrc</text:span>
et bascule automatiquement vers celle-ci&#160;:</text:p>
<text:p text:style-name="Code">$ nvm install</text:p><text:p text:style-name="Code">$ nvm use</text:p><text:p text:style-name="Code">$ node --version</text:p>
<text:p text:style-name="TexteCourant">Les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-hosting.paas"  text:visited-style-name="Visited_20_Internet_20_Link">plates-formes de services</text:a> qui ne se basent pas sur <text:span text:style-name="T4">nvm</text:span>
vont en général jeter un œil du côté du fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>&#160;:</text:p>
<text:p text:style-name="Code">{</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"name": "my-app",</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"engines": {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"node": "10.x.x"</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant">Cette notation signifie "la version la plus récente de Node v10".</text:p>
<text:p text:style-name="TexteCourant">Enfin, la dernière version de Node est utilisée si cette information
ne peut pas être déterminée avec les deux mécanismes précédemment cités.</text:p>
<text:bookmark text:name="ref-port" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">L&#8217;application tourne mais elle est injoignable</text:h><text:p text:style-name="TexteCourant">Il est nécessaire de renseigner un <text:span text:style-name="T4">port</text:span> lorsqu&#8217;on démarre un serveur
avec le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-http"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">http</text:span></text:a>
(cf. <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-04"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 4</text:a>).<text:line-break/>Pourtant nous allons faire face à un "problème" si le code suivant est déployé
sur une <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-hosting.paas"  text:visited-style-name="Visited_20_Internet_20_Link">plate-forme de services</text:a>&#160;:</text:p>
<text:p text:style-name="CodeTitre">server-port.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const server = require('http').createServer();</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">server.listen(8000, () =&gt; console.log('localhost:8000'));</text:p>
<text:p text:style-name="TexteCourant">Le déploiement sera considéré comme réussi mais l&#8217;application est injoignable.
C&#8217;est parce que les plates-formes de service choisissent ce port pour nous
et l&#8217;associent à l&#8217;URL de notre application
—&#160;`monapplication.heroku.com` par exemple.</text:p>
<text:p text:style-name="TexteCourant">Le port est exposé au travers d&#8217;une
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.env"  text:visited-style-name="Visited_20_Internet_20_Link">variable d&#8217;environnement</text:a>
(cf. <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-04"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 4</text:a>).
Par convention, c&#8217;est la variable <text:span text:style-name="CodeDansTexte">PORT</text:span> qui est utilisée.</text:p>
<text:p text:style-name="TexteCourant">Nous n&#8217;avons qu&#8217;à adapter le script précédent de cette manière&#160;:</text:p>
<text:p text:style-name="CodeTitre">server-port-dynamic.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const server = require('http').createServer();</text:p><text:p text:style-name="Code">const {PORT=8000} = process.env;<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">server.listen(PORT, () =&gt; console.log(`localhost:${PORT}`));</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Extrait la valeur de la variable d&#8217;environnement <text:span text:style-name="CodeDansTexte">process.env.PORT</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">La variable d&#8217;environnement <text:span text:style-name="CodeDansTexte">PORT</text:span> sera utilisée si elle existe et sinon,
le port <text:span text:style-name="CodeDansTexte">8000</text:span> sera la valeur par défaut&#160;:</text:p>
<text:p text:style-name="Code">$ node server-port-dynamic.js<text:s text:c="13"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">$ <text:span text:style-name="CodeExergue">PORT=4000</text:span> node server-port-dynamic.js<text:s text:c="3"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">localhost:8000</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">localhost:4000</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">C&#8217;est un premier pas pour s&#8217;affranchir des
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-configuration"  text:visited-style-name="Visited_20_Internet_20_Link">éléments de configuration écrits en dur</text:a>.</text:p>
<text:bookmark text:name="ref-configuration" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">S&#8217;affranchir des chemins et configurations écrits "en dur"</text:h><text:p text:style-name="TexteCourant">La <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-port"  text:visited-style-name="Visited_20_Internet_20_Link">configuration du port</text:a> de l&#8217;application n&#8217;est pas le seul
élément contextuel à changer entre notre ordinateur et un autre
—&#160;que ce soit celui d&#8217;une personne contribuant au projet,
au <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.ci"  text:visited-style-name="Visited_20_Internet_20_Link">service d&#8217;intégration continue</text:a> ou au serveur d&#8217;hébergement.</text:p>
<text:p text:style-name="TexteCourant">Les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.env"  text:visited-style-name="Visited_20_Internet_20_Link">variables d&#8217;environnement</text:a>
sont à privilégier pour configurer nos applications avec souplesse.
Elles s&#8217;appliquent aux&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">URL</text:span> d&#8217;accès aux bases de données, à des API distantes&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">clés d&#8217;API</text:span> pour utiliser des services externes&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">réglages</text:span> influençant le comportement de l&#8217;application&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">chemins d&#8217;accès</text:span> vers des fichiers ou répertoires&#160;— stockage, cache, etc&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">environnements d&#8217;exécution</text:span>&#160;— développement, test, production, etc.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">L&#8217;accès à une base de données est un parfait exemple.
Le nom d&#8217;utilisateur, mot de passe et adresse du serveur
peuvent d&#8217;ailleurs se combiner en une seule variable composée sous forme d&#8217;URL.</text:p>
<text:p text:style-name="TexteCourant">Par exemple, si vous avez connaissance des identifiants et de l&#8217;adresse d&#8217;une
base de données MySQL ou MariaDB, composez l&#8217;URL de configuration comme suit&#160;:</text:p>
<text:p text:style-name="Code">$ MYSQL_URL=mysql://user:password@server/database \</text:p><text:p text:style-name="Code"><text:s text:c="2"/>node sql-connect.js</text:p>
<text:p text:style-name="CodeTitre">sql-connect.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const mysql = require('mysql2/promise');</text:p><text:p text:style-name="Code">const url = process.env.MYSQL_URL;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">mysql.createConnection(url).then((connection) =&gt; {<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log('Connexion réussie :-)');<text:s text:c="13"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>connection.end();<text:s text:c="33"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Connexion à la base de données en utilisant la variable d&#8217;environnement <text:span text:style-name="CodeDansTexte">MYSQL_URL</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">Connexion réussie&#160;:-)</text:span> en cas de succès de connexion à la base de données.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Clôture de la connexion&#160;— autrement le script ne se terminerait pas sans avoir recours à <text:span text:style-name="Menu">[Ctrl+C]</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Le script d&#8217;exemple devrait avoir affiché la liste des tables contenues
dans cette base de données ou un message d&#8217;erreur le cas échéant.</text:p>
<text:p text:style-name="TexteCourant">La documentation du <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-modules"  text:visited-style-name="Visited_20_Internet_20_Link">module npm</text:a>
<text:span text:style-name="T4">mysql2</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://npmjs.com/mysql2" text:visited-style-name="Visited_20_Internet_20_Link">http://npmjs.com/mysql2</text:a></text:span>) détaille les différentes fonctions
utilisables pour interagir avec les bases de données compatibles.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Raccourci</text:span> Créer une base de données MySQL avec Docker</text:h><text:p text:style-name="Remarque">Docker est un outil utile pour créer une base de données en
une ligne de commande et ce, sans avoir à installer MySQL sur notre ordinateur.</text:p>
<text:p text:style-name="RemarqueCode">$ docker run -ti --rm -e MYSQL_ROOT_PASSWORD=demo \</text:p><text:p text:style-name="RemarqueCode"><text:s text:c="2"/>-p 3306:3306 mysql:5</text:p>
<text:p text:style-name="Remarque">Vous pourrez ainsi utiliser l&#8217;URL <text:span text:style-name="CodeDansTexte">mysql://root:demo@localhost/mysql</text:span>
comme variable d&#8217;environnement <text:span text:style-name="CodeDansTexte">MYSQL_URL</text:span> avec
le script d&#8217;exemple <text:span text:style-name="CodeDansTexte">sql-connect.js</text:span></text:p>
<text:p text:style-name="TexteCourant">Certaines variables d&#8217;environnement sont tellement spécifiques à chaque usage
qu&#8217;elles doivent être obligatoirement configurées&#160;— identifiants, URL de la
base de données, etc.
Je trouve pratique de proposer une valeur par défaut pour les autres&#160;— le port
de l&#8217;application ou d&#8217;autres éléments plus "cosmétiques".</text:p>
<text:p text:style-name="TexteCourant">Enfin, j&#8217;ai aussi pris l&#8217;habitude de documenter les variables d&#8217;environnement
dans le fichier <text:span text:style-name="CodeDansTexte">README.md</text:span> à la racine de chaque projet.
Nous pouvons ainsi avoir une vue d&#8217;ensemble de la complexité de configuration
en un rapide coup d&#8217;œil&#160;— et ça nous évite de fouiller dans le code applicatif.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Optimisation</text:span> <text:span text:style-name="CodeDansTexte">NODE_ENV=production</text:span></text:h><text:p text:style-name="Remarque">Certains <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-modules"  text:visited-style-name="Visited_20_Internet_20_Link">modules npm</text:a> comme <text:span text:style-name="T4">express</text:span>
(<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/express" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/express</text:a></text:span>) lisent la valeur de <text:span text:style-name="CodeDansTexte">process.env.NODE_ENV</text:span>.
Ils s&#8217;en servent pour procéder à des optimisations et masquer des informations
sensibles dans un contexte de production
—&#160;l&#8217;environnement qui fait face à nos utilisateurs.</text:p>
<text:p text:style-name="RemarqueCode">$ NODE_ENV=production node app.js</text:p>
<text:bookmark text:name="ref-data-persistence" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Persister les fichiers en dehors de notre application</text:h><text:p text:style-name="TexteCourant">Les fichiers écrits par notre application devraient être persistés en dehors
de son arborescence de fichiers.</text:p>
<text:p text:style-name="TexteCourant">Prenons cet exemple d&#8217;arborescence&#160;:</text:p>
<text:p text:style-name="Code">└── app</text:p><text:p text:style-name="Code"><text:s text:c="4"/>├── images</text:p><text:p text:style-name="Code"><text:s text:c="4"/>└── uploads</text:p><text:p text:style-name="Code"><text:s text:c="8"/>└── images</text:p>
<text:p text:style-name="TexteCourant">Les images sont stockées à deux endroits&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="CodeDansTexte">app/images</text:span>&#160;: images statiques affichées par notre application web&#160;— on les versionne avec Git;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="CodeDansTexte">app/uploads/images</text:span>&#160;: fichiers enregistrés sur le disque par l&#8217;intermédiaire
de notre application&#160;— on ne les versionne pas avec Git.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">Un inconvénient se présente à nous&#160;: nous perdons tout si nous supprimons
le répertoire <text:span text:style-name="CodeDansTexte">app</text:span> pour réinstaller l&#8217;application de zéro.
Je conseille donc d'<text:span text:style-name="T7">écrire tout nouveau fichier dans un répertoire indépendant</text:span>.
L&#8217;arborescence évoquée ci-dessus se transformerait ainsi&#160;:</text:p>
<text:p text:style-name="Code">├── app</text:p><text:p text:style-name="Code">│<text:s text:c="3"/>└── images</text:p><text:p text:style-name="Code">└── uploads</text:p><text:p text:style-name="Code"><text:s text:c="4"/>└── images</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Rappel</text:span> Configurer le chemin avec une variable d&#8217;environnement</text:h><text:p text:style-name="Remarque">Le chemin d&#8217;accès devient flexible dès lors que nous le rendons configurable
avec une variable d&#8217;environnement.</text:p>
<text:p text:style-name="RemarqueCode">$ UPLOAD_DIR=/uploads npm start</text:p>
<text:p text:style-name="Remarque">En savoir plus en lisant la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-configuration"  text:visited-style-name="Visited_20_Internet_20_Link">section précédente</text:a>.</text:p>
<text:p text:style-name="TexteCourant">Ce qui peut sembler être une précaution s&#8217;avère encore plus utile
dès lors que nous utilisons une <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-hosting.paas"  text:visited-style-name="Visited_20_Internet_20_Link">plate-forme de services</text:a>
ou lorsque nous démarrons une nouvelle <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-hosting.cloud"  text:visited-style-name="Visited_20_Internet_20_Link">machine virtuelle</text:a>.
<text:span text:style-name="T7">Chaque nouveau déploiement remet le système de fichiers à zéro</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Une solution complémentaire s&#8217;offre à nous lorsqu&#8217;il devient compliqué
de partager un même stockage de fichiers entre plusieurs machines ou VM&#160;:
c&#8217;est le <text:span text:style-name="T7">stockage d&#8217;objets</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Le stockage d&#8217;objets est une solution de stockage élastique où la facturation
est basée sur la quantité de données stockées et téléchargées.
Nous accédons aux ressources stockées et à leur contenu avec des requêtes HTTP.
Les fichiers sont ainsi disponibles à tout moment, sans limite et
pour tous nos contextes applicatifs.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Histoire</text:span> Amazon S3</text:h><text:p text:style-name="Remarque">Amazon S3 est le premier service à avoir rendu populaire le stockage d&#8217;objets
en 2006.
C&#8217;était la première fois que nous pouvions stocker des fichiers de manière infinie,
sans limitation de taille de fichiers.</text:p>
<text:p text:style-name="Remarque">Son interface d&#8217;accès (API) est même devenue un standard <text:span text:style-name="T4">de facto</text:span>&#160;: il est
utilisé par la plupart des concurrents afin de pouvoir passer d&#8217;un fournisseur
à un autre sans avoir à changer grand-chose à ses applications.</text:p>
<text:p text:style-name="TableauTitre">Table 14. Services de stockage d&#8217;objets compatibles avec l&#8217;API Amazon S3</text:p><table:table table:style-name="Tableau1"><table:table-column />,<table:table-column />,<table:table-column /><table:table-row><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Service</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Emplacement(s) du stockage</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Tarif mensuel</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://aws.amazon.com/s3/" text:visited-style-name="Visited_20_Internet_20_Link">https://aws.amazon.com/s3/</text:a></text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Paris, Europe, Monde</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>0.024$/Go</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://ovh.com/fr/public-cloud/storage/" text:visited-style-name="Visited_20_Internet_20_Link">https://ovh.com/fr/public-cloud/storage/</text:a></text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>France</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>0.01€/Go</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://cloud.google.com/storage/" text:visited-style-name="Visited_20_Internet_20_Link">https://cloud.google.com/storage/</text:a></text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Europe, Monde</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>0.026$/Go</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://minio.io" text:visited-style-name="Visited_20_Internet_20_Link">https://minio.io</text:a></text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Flexible</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>-</text:p></table:table-cell></table:table-row></table:table>
<text:bookmark text:name="ref-database-migration" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Versionner les schémas de base de données</text:h><text:p text:style-name="TexteCourant">Le contenu et la structure d&#8217;une application peuvent changer selon qu&#8217;elle tourne
sur notre ordinateur ou sur notre hébergement.
Nous pourrions reporter les changements de structure à la main mais c&#8217;est
sujet à erreurs, difficile à reproduire et difficile à intégrer dans le
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy"  text:visited-style-name="Visited_20_Internet_20_Link">processus de déploiement</text:a>.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;idéal serait de synchroniser la structure de nos bases de données.
Ou plutôt, l&#8217;idéal est de <text:span text:style-name="T7">reproduire les changements de structure</text:span>.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple suivant illustre la création d&#8217;un nouveau champ&#160;:</text:p>
<text:p text:style-name="CodeTitre">db-migration-step.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">module.exports = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>up (database) {<text:s text:c="34"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>return database.addColumn('fromages', 'aoc', { <text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="6"/>type: 'boolean',<text:s text:c="29"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="6"/>defaultValue: false,</text:p><text:p text:style-name="Code"><text:s text:c="4"/>});</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Fonction exécutée lors de la migration.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Nous ajoutons un champ <text:span text:style-name="CodeDansTexte">aoc</text:span> dans la table <text:span text:style-name="CodeDansTexte">fromages</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Ce champ est de type <text:span text:style-name="T4">booléen</text:span> avec <text:span text:style-name="CodeDansTexte">false</text:span> comme valeur par défaut.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Ce fichier représente une <text:span text:style-name="T4">étape de migration</text:span>.
L&#8217;idée est de créer une nouvelle étape pour chaque changement de structure
et de les jouer au prochain déploiement.</text:p>
<text:p text:style-name="TexteCourant">Cet exemple de migration se base sur le module npm <text:span text:style-name="T4">db-migrate</text:span>
(<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/db-migrate" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/db-migrate</text:a></text:span>).
Il se connecte à la base de données de notre choix, charge la liste des
migrations et exécute celles qui n&#8217;ont pas encore été jouées.</text:p>
<text:p text:style-name="TexteCourant">Les migrations ne s&#8217;utilisent pas que pour changer la structure.
Elles s&#8217;utilisent aussi pour <text:span text:style-name="T7">créer la structure de notre base de données</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">db-migration-init.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">module.exports = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>up (database) {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>return database.createTable('fromages', { <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="6"/>columns: {</text:p><text:p text:style-name="Code"><text:s text:c="8"/>id: {<text:s text:c="33"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="10"/>type: 'int',</text:p><text:p text:style-name="Code"><text:s text:c="10"/>primaryKey: true,</text:p><text:p text:style-name="Code"><text:s text:c="10"/>autoIncrement: true</text:p><text:p text:style-name="Code"><text:s text:c="8"/>},</text:p><text:p text:style-name="Code"><text:s text:c="8"/>name: {<text:s text:c="31"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="10"/>type: 'string'</text:p><text:p text:style-name="Code"><text:s text:c="8"/>}</text:p><text:p text:style-name="Code"><text:s text:c="6"/>}</text:p><text:p text:style-name="Code"><text:s text:c="4"/>});</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Création d&#8217;une nouvelle table <text:span text:style-name="CodeDansTexte">fromages</text:span> avec 2 colonnes.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> La première colonne se nomme <text:span text:style-name="CodeDansTexte">id</text:span>&#160;— elle est numérique et s&#8217;auto-incrémente à chaque nouvel enregistrement.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> La seconde colonne se nomme <text:span text:style-name="CodeDansTexte">name</text:span>&#160;— c&#8217;est une chaîne de caractères.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Si on met ces deux exemples bout à bout, nous sommes alors en mesure
de créer une table puis d&#8217;y appliquer un changement en ajoutant une nouvelle
colonne.</text:p>
<text:p text:style-name="TexteCourant">Ainsi, nous pouvons répliquer les changements de structures sur d&#8217;autres ordinateurs
et <text:span text:style-name="T7">reproduire l&#8217;évolution du schéma de la base de données en partant de zéro</text:span>.
Nous avons ainsi rejoué toutes les migrations sur notre outil d&#8217;intégration
continue pour nous assurer de leur robustesse et revenir en arrière si nécessaire.</text:p>
<text:bookmark text:name="ref-startup" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Démarrer automatiquement une application</text:h><text:p text:style-name="TexteCourant">Jusqu&#8217;à présent, nous avons démarré les scripts de cet ouvrage
avec l&#8217;exécutable <text:span text:style-name="CodeDansTexte">node</text:span> ou avec la commande <text:span text:style-name="CodeDansTexte">npm start</text:span>.
C&#8217;est un processus manuel qui nécessite de conserver un onglet ouvert
dans notre terminal pour maintenir l&#8217;application en fonctionnement.</text:p>
<text:p text:style-name="TexteCourant">Cette section explore des mécanismes pour <text:span text:style-name="T7">détacher le processus du terminal</text:span>
et pour <text:span text:style-name="T7">lancer l&#8217;application au démarrage ou redémarrage d&#8217;un ordinateur</text:span>.</text:p>
<text:bookmark text:name="ref-lhébergeur_sen_occupe_à_notre_place" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">L&#8217;hébergeur s&#8217;en occupe à notre place</text:h><text:p text:style-name="TexteCourant">Les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-hosting.paas"  text:visited-style-name="Visited_20_Internet_20_Link">plates-formes de service</text:a> automatisent le démarrage de
l&#8217;application.<text:line-break/>Elles exécutent la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-start"  text:visited-style-name="Visited_20_Internet_20_Link">commande <text:span text:style-name="CodeDansTexte">npm start</text:span></text:a>
dès que le déploiement est terminé.</text:p>
<text:p text:style-name="TexteCourant">C&#8217;est tout.</text:p>
<text:bookmark text:name="ref-process-manager" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Avec un gestionnaire de processus</text:h><text:p text:style-name="TexteCourant">Un gestionnaire de processus a deux utilités&#160;:</text:p>
<text:p text:style-name="ListeANumero">1.<text:tab/><text:span text:style-name="T7">détacher un processus</text:span> de notre terminal&#160;— si on le ferme, l&#8217;application tourne toujours&#160;;</text:p><text:p text:style-name="ListeANumero">2.<text:tab/><text:span text:style-name="T7">gérer plusieurs processus par application</text:span>&#160;— un frontal web et l&#8217;admin par exemple.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">pm2</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://pm2.keymetrics.io" text:visited-style-name="Visited_20_Internet_20_Link">https://pm2.keymetrics.io</text:a></text:span>) est un gestionnaire de processus
disponible en tant que <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-modules"  text:visited-style-name="Visited_20_Internet_20_Link">module npm</text:a>
(<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/pm2" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/pm2</text:a></text:span>).
Il fonctionne sous Linux, Windows et macOS.</text:p>
<text:p text:style-name="TexteCourant">La commande suivante démarre un script et le place aussitôt en tâche de fond&#160;:</text:p>
<text:p text:style-name="Code">$ pm2 start app.js</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-06/images/pm2-start.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 48. Exemple de démarrage et d&#8217;affichage de l&#8217;état d&#8217;une application Node avec <text:span text:style-name="T4">pm2</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Cette même application s&#8217;arrête avec la commande <text:span text:style-name="CodeDansTexte">pm2 stop</text:span> et
se relance pour prendre en compte des changements de code avec <text:span text:style-name="CodeDansTexte">pm2 restart</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Les gestionnaires de processus facilitent l&#8217;intégration
d&#8217;une application en tant que <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-system-service"  text:visited-style-name="Visited_20_Internet_20_Link">service système</text:a>
(cf. section suivante).<text:line-break/>C&#8217;est mon choix de prédilection pour ne pas avoir à apprendre un nouveau
fichier de configuration.</text:p>
<text:p text:style-name="TexteCourant">La commande suivante nous guide dans la configuration de notre système
d&#8217;exploitation&#160;:</text:p>
<text:p text:style-name="Code">$ pm2 startup</text:p>
<text:p text:style-name="TexteCourant">Celle-ci sauvegarde les applications démarrées avec le gestionnaire de processus.
Elles seront restaurées au prochain redémarrage de l&#8217;ordinateur&#160;:</text:p>
<text:p text:style-name="Code">$ pm2 save</text:p>
<text:p text:style-name="TexteCourant">On peut aussi revenir en arrière et décider de désactiver le démarrage
automatique de nos applications&#160;:</text:p>
<text:p text:style-name="Code">$ pm2 unstartup</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Windows</text:span> Configurer pm2</text:h><text:p text:style-name="Remarque">La commande <text:span text:style-name="CodeDansTexte">pm2 startup</text:span> pose problème sous Windows.
Je recommande d&#8217;utiliser le module npm <text:span text:style-name="T4">pm2-windows-service</text:span>
(<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://www.npmjs.com/package/pm2-windows-service" text:visited-style-name="Visited_20_Internet_20_Link">https://www.npmjs.com/package/pm2-windows-service</text:a></text:span>) pour simplifier
cette procédure.</text:p>
<text:bookmark text:name="ref-system-service" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">En créant un service système</text:h><text:p text:style-name="TexteCourant">Tous les systèmes d&#8217;exploitation ont un mécanisme pour
démarrer des applications en fonction de certains critères&#160;:
quand le réseau ou une connexion Internet est disponible,
lorsqu&#8217;une session utilisateur s&#8217;est ouverte
ou même quand un autre logiciel est actif.</text:p>
<text:p text:style-name="TexteCourant">Systemd, Upstart et launchd sont des gestionnaires de services système parmi d&#8217;autres.
Ils se configurent avec des fichiers écrits dans des formats différents.</text:p>
<text:p text:style-name="TexteCourant">Voici un exemple de fichier de configuration pour <text:span text:style-name="T4">systemd</text:span>
(<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://doc.ubuntu-fr.org/systemd" text:visited-style-name="Visited_20_Internet_20_Link">https://doc.ubuntu-fr.org/systemd</text:a></text:span>).
C&#8217;est le gestionnaire de services des distributions Linux <text:span text:style-name="T4">Ubuntu</text:span>,
 <text:span text:style-name="T4">Debian</text:span>, <text:span text:style-name="T4">Fedora</text:span> et <text:span text:style-name="T4">CentOS</text:span>.</text:p>
<text:p text:style-name="CodeTitre">systemd/nodebook.d/app.conf</text:p><text:p text:style-name="Code">[Unit]</text:p><text:p text:style-name="Code">Description="Application Node.js"</text:p><text:p text:style-name="Code">After=NetworkManager.service<text:s text:c="12"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">[Service]</text:p><text:p text:style-name="Code">Restart=on-failure<text:s text:c="22"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">DefaultStartLimitBurst=5</text:p><text:p text:style-name="Code">StartLimitIntervalSec=120</text:p><text:p text:style-name="Code">User=nobody<text:s text:c="29"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">Environment="NODE_ENV=production"</text:p><text:p text:style-name="Code">WorkingDirectory=/usr/local/node-app<text:s text:c="4"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code">ExecStart=/usr/bin/npm start<text:s text:c="12"/><text:span text:style-name="PuceCode">5</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> L&#8217;application démarrera dès que l&#8217;interface réseau sera opérationnelle.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> L&#8217;application sera relancée en cas de plantage&#160;— maximum 5 fois dans un délai de 120 secondes.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Le processus sera démarré au nom de l&#8217;utilisateur système <text:span text:style-name="CodeDansTexte">nobody</text:span>.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> C&#8217;est comme si nous faisions <text:span text:style-name="CodeDansTexte">cd /usr/local/node-app</text:span> avant de lancer l&#8217;application&#160;— c&#8217;est la valeur qu&#8217;on retrouve avec <text:span text:style-name="CodeDansTexte">process.cwd()</text:span>.<text:line-break/><text:span text:style-name="PuceCode">5</text:span> Commande à exécuter pour démarrer l&#8217;application.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Le service associé au fichier de configuration précédent peut être démarré
manuellement comme suit&#160;:</text:p>
<text:p text:style-name="Code"># Cf. /etc/systemd/<text:span text:style-name="CodeExergue">nodebook</text:span>.d/app.conf</text:p><text:p text:style-name="Code">$ sudo systemctl start <text:span text:style-name="CodeExergue">nodebook</text:span>.service</text:p>
<text:p text:style-name="TexteCourant">Les commandes <text:span text:style-name="CodeDansTexte">systemctl stop</text:span> et <text:span text:style-name="CodeDansTexte">systemctl restart</text:span>
arrêtent et relancent un service.</text:p>
<text:p text:style-name="TexteCourant">Dans tous les cas, le service sera lancé automatiquement au prochain
démarrage du système d&#8217;exploitation.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Alternative</text:span> Et pour Windows ?</text:h><text:p text:style-name="Remarque">Le gestionnaire de services Windows est compliqué à utiliser.
Je recommande d&#8217;utiliser le module npm
<text:span text:style-name="T4">node-windows</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/node-windows" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/node-windows</text:a></text:span>).</text:p>
<text:bookmark text:name="ref-application-manager" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Avec un serveur d&#8217;applications web</text:h><text:p text:style-name="TexteCourant">Un serveur d&#8217;applications web est un logiciel informatique
qui a deux objectifs&#160;: <text:span text:style-name="T7">être toujours disponible</text:span>
et <text:span text:style-name="T7">répartir le trafic HTTP</text:span> vers des fichiers et des applications web.
C&#8217;est une sorte de parapluie optimisé et résistant qui se met au-devant
de nos applications.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Question</text:span> Pourquoi utiliser un serveur d&#8217;applications ?</text:h><text:p text:style-name="Remarque">Les serveurs d&#8217;applications sont excellents pour gérer la charge des requêtes,
se protéger de failles de sécurité HTTP et être performants dans le
traitement des fichiers statiques.</text:p>
<text:p text:style-name="Remarque">Leur capacité à redémarrer une application Node en cas de plantage ou de
nouveau déploiement nous enlève une épine du pied.
Certains ont même des facultés de <text:span text:style-name="T4">répartition de charge</text:span> (<text:span text:style-name="T4">load balancing</text:span>)&#160;:
plusieurs instances de la même application tournent alors en parallèle
—&#160;une par CPU.
Le trafic est réparti vers l&#8217;instance qui a le plus de CPU disponible.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T7">Phusion Passenger</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://phusionpassenger.com/" text:visited-style-name="Visited_20_Internet_20_Link">https://phusionpassenger.com/</text:a></text:span>) est un
serveur d&#8217;applications web open source, léger et performant.
Il est compatible avec des applications Ruby, Node et Python.
Il s&#8217;installe de manière autonome ou en complément des serveurs <text:span text:style-name="T4">nginx</text:span>
(<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://nginx.org" text:visited-style-name="Visited_20_Internet_20_Link">https://nginx.org</text:a></text:span>) et <text:span text:style-name="T4">Apache httpd</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://httpd.apache.org" text:visited-style-name="Visited_20_Internet_20_Link">https://httpd.apache.org</text:a></text:span>).</text:p>
<text:p text:style-name="TexteCourant">Regardons ensemble à quoi ressemble un fichier de configuration <text:span text:style-name="T4">nginx</text:span>
minimaliste&#160;:</text:p>
<text:p text:style-name="CodeTitre">nginx/static.conf</text:p><text:p text:style-name="Code">server {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>listen 80 default_server;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>server_name _;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>root /var/www;<text:s text:c="7"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Répertoire racine où <text:span text:style-name="T4">nginx</text:span> va chercher les fichiers.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Si <text:span text:style-name="T4">nginx</text:span> est lancé sur notre ordinateur avec ce fichier de configuration
et que le fichier <text:span text:style-name="CodeDansTexte">image.jpg</text:span> est placé dans le répertoire <text:span text:style-name="CodeDansTexte">/var/www</text:span>,
alors nous pourrons y accéder dans un navigateur web
sur <text:span text:style-name="CodeDansTexte"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://localhost/image.jpg" text:visited-style-name="Visited_20_Internet_20_Link">http://localhost/image.jpg</text:a></text:span>.</text:p>
<text:p text:style-name="TexteCourant">Transformons maintenant ce fichier de configuration
après avoir installé le module <text:span text:style-name="T4">Phusion Passenger</text:span> pour <text:span text:style-name="T4">nginx</text:span>
(<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://phusionpassenger.com/library/install/nginx/" text:visited-style-name="Visited_20_Internet_20_Link">https://phusionpassenger.com/library/install/nginx/</text:a></text:span>)&#160;:</text:p>
<text:p text:style-name="CodeTitre">nginx/phusionwebapp.conf</text:p><text:p text:style-name="Code">server {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>listen 80 default_server;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>server_name _;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>root /var/www;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>passenger_enabled on;<text:s text:c="29"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>passenger_app_type node;<text:s text:c="26"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>passenger_app_root /var/apps/my-app;<text:s text:c="14"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>passenger_startup_file app.js;<text:s text:c="20"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>passenger_document_root /var/apps/my-app/public;<text:s text:c="2"/><text:span text:style-name="PuceCode">5</text:span></text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Activation du module <text:span text:style-name="T4">Phusion Passenger</text:span> pour <text:span text:style-name="T4">nginx</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Nous indiquons à <text:span text:style-name="T4">Phusion Passenger</text:span> qu&#8217;il s&#8217;agit d&#8217;une application Node.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> L&#8217;application se trouve dans le répertoire <text:span text:style-name="CodeDansTexte">/var/apps/my-app</text:span>.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Le script à démarrer est <text:span text:style-name="CodeDansTexte">app.js</text:span>&#160;— c&#8217;est-à-dire <text:span text:style-name="CodeDansTexte">/var/apps/my-app/app.js</text:span>.<text:line-break/><text:span text:style-name="PuceCode">5</text:span> Emplacement où <text:span text:style-name="T4">Phusion Passenger</text:span> ira chercher les fichiers statiques.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">Phusion Passenger</text:span> démarre l&#8217;application Node pour nous.
Il la maintient en vie en cas de plantage.
Son comportement se configure finement à l&#8217;aide de directives dont la liste
intégrale se trouve sur
<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://phusionpassenger.com/library/config/nginx/reference/" text:visited-style-name="Visited_20_Internet_20_Link">http://phusionpassenger.com/library/config/nginx/reference/</text:a></text:span>.</text:p>
<text:bookmark text:name="ref-monitoring" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">À quoi penser après la mise en ligne ?</text:h><text:p text:style-name="TexteCourant">De la programmation au déploiement, nous sommes toujours en mesure
de savoir quand quelque chose ne va pas&#160;: les <text:span text:style-name="T7">erreurs se produisent sous nos yeux</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Les problèmes commencent à <text:span text:style-name="T7">échapper à notre attention dès la mise en ligne</text:span>.
Regardons ensemble ce que nous pouvons faire pour intervenir au bon moment.</text:p>
<text:bookmark text:name="ref-uptime" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">L&#8217;application a planté</text:h><text:p text:style-name="TexteCourant">Que se passe-t-il lorsqu&#8217;une application plante en plein milieu du week-end&#160;?
<text:span text:style-name="T4">Rien</text:span>.
Nous n&#8217;en savons rien tant que nous n&#8217;allons pas sur l&#8217;application en question.
L&#8217;action la plus simple à mettre en œuvre est de <text:span text:style-name="T7">recevoir une alerte</text:span>
par e-mail ou par SMS.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">Pingdom</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://www.pingdom.com/free" text:visited-style-name="Visited_20_Internet_20_Link">https://www.pingdom.com/free</text:a></text:span>) répond exactement à ce besoin.
Il est gratuit pour un site web et payant au-delà.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-06/images/pingdom-uptime.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 49. Écran de configuration des alertes de sites web avec Pingdom.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">Uptime Robot</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://uptimerobot.com" text:visited-style-name="Visited_20_Internet_20_Link">https://uptimerobot.com</text:a></text:span>) est un service similaire.
Il offre en plus un flux RSS d&#8217;alertes et une intégration avec Slack.</text:p>
<text:bookmark text:name="ref-exceptions" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">S&#8217;informer des erreurs applicatives</text:h><text:p text:style-name="TexteCourant">Lorsque nous prenons connaissance d&#8217;un plantage applicatif, comment déterminer
ce qui l&#8217;a causé&#160;?</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-06/images/heroku-app-error.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 50. Écran affiché par Heroku lorsque l&#8217;application a planté et ne répond plus.</text:p>
<text:p text:style-name="TexteCourant">S&#8217;il s&#8217;agit d&#8217;une application personnelle ou sans enjeu,
nous pouvons nous contenter de reproduire le problème localement.<text:line-break/>Dans le cas d&#8217;une application professionnelle,
nous aurons besoin d&#8217;avoir plus de précisions, rapidement.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">Sentry</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://sentry.io" text:visited-style-name="Visited_20_Internet_20_Link">https://sentry.io</text:a></text:span>) est un service en ligne qui s&#8217;intègre
dans notre code comme une sonde.
Une fois placée, la sonde transmet les erreurs vers la plate-forme <text:span text:style-name="T4">Sentry</text:span>.
Cette plate-forme affiche les erreurs connues sous forme de tableau de bord&#160;—
leur nature, combien de fois elles se répètent.
Elle nous envoie également une notification par e-mail avec une indication
de sévérité, pour que nous puissions réagir plus ou moins rapidement.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-06/images/sentry-error.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 51. Écran d&#8217;affichage d&#8217;une erreur analysée par Sentry.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;inclusion d&#8217;une sonde basique revient à insérer 2 lignes dans notre code&#160;:</text:p>
<text:p text:style-name="CodeTitre">sentry.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const sentry = require('raven');<text:s text:c="18"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">sentry.config(process.env.SENTRY_DSN).install();<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const express = require('express');</text:p><text:p text:style-name="Code">const app = express();</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">test;<text:s text:c="45"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">app.get('/', (request, response) =&gt; response.send('OK!'));</text:p><text:p text:style-name="Code">app.listen(process.env.PORT || 4000);</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> <text:span text:style-name="T4">raven</text:span> est le nom du module npm édité par Sentry pour collecter les erreurs.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Configuration du client Sentry&#160;— il collectera et enverra les erreurs auprès du service Sentry.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Cette ligne est la source de notre erreur&#160;— la variable n&#8217;est pas définie.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">Sentry</text:span> nous communique une clé d&#8217;API pour chaque projet à monitorer.
Quand vous obtenez la vôtre, modifiez la ligne de commande suivante afin
de provoquer l&#8217;erreur, de recevoir l&#8217;e-mail d&#8217;alerte et de la visualiser
en détails sur le tableau de bord&#160;:</text:p>
<text:p text:style-name="Code">$ SENTRY_DSN=https://0c...@sentry.io/1201870 node sentry.js</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> Configurer Sentry</text:h><text:p text:style-name="Remarque">Un guide complet (en anglais) documente comment aller plus loin
dans l&#8217;utilisation de Sentry.</text:p>
<text:p text:style-name="Remarque">Il se lit sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://docs.sentry.io/clients/node/" text:visited-style-name="Visited_20_Internet_20_Link">https://docs.sentry.io/clients/node/</text:a></text:span>.</text:p>
<text:p text:style-name="TexteCourant">Le service <text:span text:style-name="T4">New Relic</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://newrelic.com/nodejs" text:visited-style-name="Visited_20_Internet_20_Link">https://newrelic.com/nodejs</text:a></text:span>)
est une alternative à <text:span text:style-name="T4">Sentry</text:span>.
Il mesure également les performances et les sources de ralentissement.
<text:span text:style-name="T4">New Relic</text:span> s&#8217;installe gratuitement et en quelques clics sur la
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-hosting.paas"  text:visited-style-name="Visited_20_Internet_20_Link">plate-forme de services</text:a> Heroku.
Il devient payant à partir d&#8217;un certain volume de requêtes.</text:p>
<text:bookmark text:name="ref-security.node" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Notre version de Node fait l&#8217;objet d&#8217;une faille de sécurité</text:h><text:p text:style-name="TexteCourant">Certaines versions de Node sortent pour apporter de nouvelles fonctionnalités
ou pour corriger des bugs.
D&#8217;autres sont publiées pour corriger des failles de sécurité.
Ces <text:span text:style-name="T7">failles sont critiques pour nos applications</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Lorsqu&#8217;une faille est exploitée, la personne à l&#8217;origine de l&#8217;attaque
peut ralentir, faire planter ou extraire des informations confidentielles
de notre application.
En cas de faille critique, l&#8217;attaquant·e peut aussi gagner un accès
à l&#8217;ordinateur et aux bases de données hébergeant l&#8217;application.</text:p>
<text:p text:style-name="TexteCourant">Solution&#160;: <text:span text:style-name="T7">redéployer nos applications</text:span> avec une version de Node plus récente.</text:p>
<text:p text:style-name="TexteCourant">Je vous encourage à recevoir des alertes par e-mail ou en
vous abonnant au fil RSS pour être prevenu·e au bon moment.</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>E-mail</text:span><text:line-break/><text:tab/><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://groups.google.com/group/nodejs-sec" text:visited-style-name="Visited_20_Internet_20_Link">https://groups.google.com/group/nodejs-sec</text:a></text:span></text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>Fil RSS</text:span><text:line-break/><text:tab/><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://nodejs.org/en/feed/vulnerability.xml" text:visited-style-name="Visited_20_Internet_20_Link">https://nodejs.org/en/feed/vulnerability.xml</text:a></text:span></text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-06/images/node-security-bulletin.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 52. Exemple d&#8217;alerte de sécurité envoyée par e-mail.</text:p>
<text:bookmark text:name="ref-security.npm" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Un des modules npm fait l&#8217;objet d&#8217;une faille de sécurité</text:h><text:p text:style-name="TexteCourant">Les modules npm sont aussi affectés par des failles de sécurité.</text:p>
<text:p text:style-name="TexteCourant">Les conséquences de leur exploitation sont similaires aux failles de Node&#160;:
les personnes à l&#8217;origine des attaques peuvent saturer le serveur et
paralyser l&#8217;application.
Elles sont aussi en mesure de subtiliser des informations confidentielles
stockées en base de données ou saisies par les usagers.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">Snyk</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://snyk.io" text:visited-style-name="Visited_20_Internet_20_Link">https://snyk.io</text:a></text:span>) est un service de sécurité gratuit pour les
projets open source.
Il scanne les vulnérabilités de nos dépendances et
des dépendances de nos dépendances.
Il nous alerte sur la sévérité des failles décelées dans nos projets.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-06/images/snyk-dashboard.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 53. Tableau de bord des dépendances vulnérables avec Snyk.</text:p>
<text:p text:style-name="TexteCourant">Ces failles sont classées en 3 niveaux&#160;: dangereuses, modérées et superficielles.
Mieux vaut mettre à jour les dépendances affectées par une faille dangereuse
le plus rapidement possible.</text:p>
<text:p text:style-name="TexteCourant">Ce n&#8217;est pas grave si nous ne mettons pas à jour un vieux module npm.
Ça peut avoir un impact négatif si cette vieille version est affectée par une faille.</text:p>
<text:p text:style-name="TexteCourant">La capture d&#8217;écran suivante illustre une vulnérabilité décelée dans le module
npm <text:span text:style-name="T4">restify</text:span> dans sa version 4&#160;:</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-06/images/snyk-vulnerability.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 54. Affichage d&#8217;une vulnérabilité et d&#8217;un chemin de résolution avec Snyk.</text:p>
<text:p text:style-name="TexteCourant">La correction du problème implique de passer à la version 5.
Cette action nous demandera surement d&#8217;adapter notre code car nous changeons
de version majeure&#160;— de la version 4 à la version 5.
Ces migrations sont souvent documentées par les auteurs des modules.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Intégrations npm, Heroku, etc.</text:h><text:p text:style-name="Remarque">Snyk s&#8217;intègre à d&#8217;autres services que GitHub&#160;: GitLab, Heroku, BitBucket, etc.</text:p>
<text:p text:style-name="Remarque">Les applications au code source privé peuvent être vérifiées gratuitement
avec l&#8217;API de Snyk ou son application en ligne de commande.</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>Base de données</text:span><text:line-break/><text:tab/><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://snyk.io/vuln/?type=npm" text:visited-style-name="Visited_20_Internet_20_Link">https://snyk.io/vuln/?type=npm</text:a></text:span></text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/>Fil RSS</text:span><text:line-break/><text:tab/><text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://snyk.io/vuln/feed.xml?type=npm" text:visited-style-name="Visited_20_Internet_20_Link">https://snyk.io/vuln/feed.xml?type=npm</text:a></text:span></text:p>
<text:p text:style-name="TexteCourant">Nous avons parlé de la commande <text:span text:style-name="CodeDansTexte">npm audit</text:span> dans
le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-audit"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 5</text:a>.
Elle dispose d&#8217;une option pour mettre à jour automatiquement
les dépendances dangereuses&#160;: <text:span text:style-name="CodeDansTexte">npm audit fix</text:span>.</text:p>
<text:p text:style-name="Code">$ npm audit fix</text:p><text:p text:style-name="Code">&gt; fixed 20 of 21 vulnerabilities in 1867 scanned packages</text:p><text:p text:style-name="Code">&gt;<text:s text:c="3"/>1 vulnerability required manual review and could not be updated</text:p>
<text:p text:style-name="TexteCourant">Rester à l&#8217;écoute des vulnérabilités en combinaison de l&#8217;utilisation
de Snyk ou de <text:span text:style-name="CodeDansTexte">npm audit fix</text:span> suffit à prendre des mesures de correction
efficaces sans avoir à trop s&#8217;y connaitre.</text:p>
<text:p text:style-name="TexteCourant">La lecture des rapports de vulnérabilité est un bon moyen de comprendre
comment ces exploits fonctionnent, et comment penser nos applications
pour éviter d&#8217;exposer une surface d&#8217;attaque minimale.</text:p>
<text:bookmark text:name="ref-conclusion_6" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Conclusion</text:h><text:p text:style-name="TexteCourant">Nous avons désormais <text:span text:style-name="T7">toutes les clés pour partager notre code</text:span> et le
résultat de son exécution de manière publique.</text:p>
<text:p text:style-name="TexteCourant">Nous avons appris à <text:span text:style-name="T7">choisir un hébergement et un mode de déploiement</text:span>
adapté à notre temps disponible ainsi qu&#8217;à nos envies.
Nous sommes en mesure d&#8217;aller vite ou de prendre le temps de configurer
une machine pour des besoins très précis.</text:p>
<text:p text:style-name="TexteCourant">La <text:span text:style-name="T7">configuration d&#8217;une application</text:span> avec des variables d&#8217;environnement
est une des clés pour automatiser le déploiement.</text:p>
<text:p text:style-name="TexteCourant">L'<text:span text:style-name="T7">automatisation du démarrage</text:span> d&#8217;une application demande d&#8217;investir du temps
pour être à l&#8217;aise.
Ce temps est utile car le principe s&#8217;applique à d&#8217;autres langages
et ouvre la porte de la maîtrise de l&#8217;hébergement applicatif,
quand les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-hosting.paas"  text:visited-style-name="Visited_20_Internet_20_Link">plate-formes de service</text:a> commencent à nous
coûter trop cher.</text:p>
<text:bookmark text:name="ref-chapter-07" /><text:p text:style-name="ChapitreNumero">7</text:p><text:h text:style-name="ChapitreTitre" text:outline-level="1">Créer une application web</text:h><text:p text:style-name="TexteCourant">TBD.</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">TBD.</text:p>
</text:list-item></text:list>
<text:p text:style-name="ChapitreIntroduction"><text:p text:style-name="TexteCourant">TBD.</text:p></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Remarque</text:span> Versions de Node et npm</text:h><text:p text:style-name="Remarque">Le contenu de ce chapitre utilise les versions <text:span text:style-name="T7">Node v10</text:span> et <text:span text:style-name="T7">npm v6</text:span>.
Ce sont les versions stables recommandées en 2018.
J&#8217;explique comment les installer au <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 2</text:a>.</text:p>
<text:p text:style-name="TexteCourant">Une application web est une <text:span text:style-name="T7">construction applicative qui est à l&#8217;écoute</text:span>
de connexions réseaux initiées par un client.
Elle est structurée autour de la lecture d&#8217;une requête entrante (lecture)
et l&#8217;émission d&#8217;une réponse sortante (écriture).
Chaque <text:span text:style-name="T7">requête porte en elle une intention</text:span>&#160;— un chemin d&#8217;accès, une préférence
de format, des éléments d&#8217;identification&#160;— et implique une réponse en retour
—&#160;des données et des éléments pour les contextualiser.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;ingéniérie d&#8217;une application web consiste à comprendre les requêtes entrantes
et à construire une réponse appropriée à chaque fois, le plus rapidement possible.</text:p>
<text:p text:style-name="TexteCourant">Ce chapitre s&#8217;inscrit dans la continuité du
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-http"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">http</text:span></text:a> (re)découvert au cours du
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-04"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 4</text:a>.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> Entêtes HTTP</text:h><text:p text:style-name="Remarque">Ce chapitre fait souvent référence à des entêtes HTTP.
La documentation <text:span text:style-name="T4">MDN web docs</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://developer.mozilla.org/fr/docs/Web/HTTP/Headers" text:visited-style-name="Visited_20_Internet_20_Link">https://developer.mozilla.org/fr/docs/Web/HTTP/Headers</text:a></text:span>)
les liste toutes, avec le détail de leurs valeurs possibles.</text:p>
<text:p text:style-name="Remarque">C&#8217;est un onglet intéressant à ouvrir en parallèle de cette lecture
—&#160;je l&#8217;ai ouvert en permanence pour écrire ce chapitre.</text:p>
<text:bookmark text:name="ref-composer_son_application_web" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Composer son application web</text:h><text:p text:style-name="TexteCourant">Dans cette première section, nous allons nous focaliser sur la construction
d&#8217;une application web avec une approche modulaire.
Nous partirons du concept de requête et de réponse
Petit à petit, nous allons greffer des modules pour comprendre et
donner du sens à leur contenu respectif.</text:p>
<text:p text:style-name="TexteCourant">Le <text:span text:style-name="T4">protocole HTTP</text:span> est le dialecte informatique utilisé et compris pour exprimer
les requêtes (émises par un client) et les réponses (émises par un serveur).
Les navigateurs web sont des clients tandis que notre application Node est un serveur.</text:p>
<text:p text:style-name="TexteCourant">Le logiciel <text:span text:style-name="T4">curl</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://curl.haxx.se" text:visited-style-name="Visited_20_Internet_20_Link">https://curl.haxx.se</text:a></text:span>) est un client en ligne de commande.
Il est souvent installé par défaut sur les distributions Linux, sur macOS et
à partir de Windows 7&#160;— via le terminal <text:span text:style-name="T4">PowerShell</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Utilisons <text:span text:style-name="T4">curl</text:span> pour observer le contenu d&#8217;une requête et sa réponse.</text:p>
<text:p text:style-name="CodeTitre">Exemple de requête HTTP vers le site <text:span text:style-name="URL">perdu.com</text:span>.</text:p><text:p text:style-name="Code">$ curl -v http://perdu.com<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">GET / HTTP/1.1<text:s text:c="14"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">Host: perdu.com<text:s text:c="13"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">User-Agent: curl/7.54.0</text:p><text:p text:style-name="Code">Accept: */*</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Exécution de la requête.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Expression de la méthode, du chemin d&#8217;accès demandé et du protocole de discussion employé&#160;— ici, le protocole HTTP dans sa version <text:span text:style-name="CodeDansTexte">1.1</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Entête de requête.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Une entête est exprimée sous la forme <text:span text:style-name="CodeDansTexte">Clé: Valeur</text:span>.
Chaque entête précise un élément de contexte.
Certaines entêtes influencent plus que d&#8217;autres la réponse du serveur, si
celui-ci la comprend.</text:p>
<text:p text:style-name="TexteCourant">Voyons maintenant la réponse.</text:p>
<text:p text:style-name="CodeTitre">Exemple de réponse HTTP transmise en retour.</text:p><text:p text:style-name="Code">HTTP/1.1 200 OK<text:s text:c="39"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">Date: Thu, 28 Jun 2018 19:02:27 GMT<text:s text:c="19"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">Server: Apache</text:p><text:p text:style-name="Code">Last-Modified: Thu, 02 Jun 2016 06:01:08 GMT</text:p><text:p text:style-name="Code">ETag: "cc-5344555136fe9"</text:p><text:p text:style-name="Code">Accept-Ranges: bytes</text:p><text:p text:style-name="Code">Content-Length: 204</text:p><text:p text:style-name="Code">Vary: Accept-Encoding</text:p><text:p text:style-name="Code">Content-Type: text/html<text:s text:c="31"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">&amp;lt;html&gt;&amp;lt;head&gt;&amp;lt;title&gt;Vous Etes Perdu ?&amp;lt;/title&gt; …&amp;lt;/html&gt; <text:span text:style-name="PuceCode">4</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Expression du statut de la réponse avec un code numérique et une version intelligible.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Entête de réponse.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Entête de réponse&#160;— celle-ci indique au client comment interpréter le corps du message.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Corps du message.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">La réponse dispose elle aussi d&#8217;entêtes.
Cette fois, elles guident le client dans son interprétation du résultat.
Le corps du message est séparé par une ligne vide.
C&#8217;est la partie visible de la réponse dans un navigateur web, c&#8217;est le contenu
qui s&#8217;affiche sous nos yeux.</text:p>
<text:p text:style-name="TexteCourant">Dans la prochaine section, nous allons visualiser ces mêmes informations
à partir d&#8217;un serveur HTTP que nous allons créer par nous-même.
Nous retracerons plus en détail l&#8217;odyssée d&#8217;une requête HTTP dans la section
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-http"  text:visited-style-name="Visited_20_Internet_20_Link">Comprendre le modèle HTTP</text:a>, en fin de chapitre.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Jouer avec les exemples dans un terminal</text:h><text:p text:style-name="Remarque">Les exemples titrés d&#8217;un nom de fichier peuvent être installés sur votre ordinateur.
Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de
votre lecture pour voir ce qui change.</text:p>
<text:p text:style-name="Remarque">Installation des exemples via le module npm <text:span text:style-name="CodeDansTexte">nodebook</text:span>.</text:p><text:p text:style-name="RemarqueCode">$ npm install --global nodebook</text:p><text:p text:style-name="RemarqueCode">$ nodebook install chapter-07</text:p><text:p text:style-name="RemarqueCode">$ cd $(nodebook dir chapter-07)</text:p>
<text:p text:style-name="Remarque">La commande suivante devrait afficher un résultat qui confirme que vous êtes
au bon endroit&#160;:</text:p>
<text:p text:style-name="RemarqueCode">$ node hello.js</text:p>
<text:p text:style-name="Remarque">Suivez à nouveau les installations d&#8217;instruction pour rétablir les exemples
dans leur état initial.</text:p>
<text:bookmark text:name="ref-server" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Démarrer un serveur HTTP</text:h><text:p text:style-name="TexteCourant">Nous l&#8217;avons vu juste avant&#160;: une requête HTTP envoyée vers un hôte
renvoie une réponse.
Cet hôte doit au préalable avoir installé et démarré un serveur HTTP qui
écoute ces demandes.</text:p>
<text:p text:style-name="TexteCourant">Le script d&#8217;exemple <text:span text:style-name="CodeDansTexte">server/start.js</text:span> répond à ce besoin.
Une fois démarré, il est joignable à l&#8217;adresse <text:span text:style-name="CodeDansTexte"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://localhost:4000" text:visited-style-name="Visited_20_Internet_20_Link">http://localhost:4000</text:a></text:span>.
Il affichera alors les entêtes des requêtes et de leur réponse&#160;:</text:p>
<text:p text:style-name="Code">$ node server/start.js</text:p>
<text:p text:style-name="CodeTitre">server/start.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {createServer} = require('http');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const server = createServer();</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">server.on('request', (request, response) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>response.setHeader('Content-Type', 'text/html');<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>response.end('&lt;h1&gt;Hello World&lt;/h1&gt;');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(request.headers);<text:s text:c="21"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(response.getHeaders());<text:s text:c="15"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">server.listen(4000);</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Comme nous retournons du HTML au client, nous explicitons le type de contenu retourné en réponse.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche les entêtes de la requête reçue par le serveur&#160;— le contenu varie selon le client utilisé.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche les entêtes de la réponse&#160;— en l&#8217;occurence <text:span text:style-name="CodeDansTexte">{ 'content-type': 'text/html' }</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Nous avons composé la fondation minimum pour créer une application web
en étant en mesure d&#8217;accepter des requêtes et de répondre, quelque chose
d&#8217;arbitraire certes mais quelque chose qui est compris par un navigateur web.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T7">Pourquoi avoir démarré le serveur sur le port 4000</text:span> dans l&#8217;exemple précédent&#160;?
C&#8217;est un choix arbitraire de ma part&#160;: nous pouvons démarrer un serveur HTTP
sur n&#8217;importe quel port tant qu&#8217;il est libre et supérieur ou égal à 1000.
Quand on cherche à se connecter à une adresse comme <text:span text:style-name="CodeDansTexte"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://localhost" text:visited-style-name="Visited_20_Internet_20_Link">http://localhost</text:a></text:span> (HTTP)
ou <text:span text:style-name="CodeDansTexte"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://localhost" text:visited-style-name="Visited_20_Internet_20_Link">https://localhost</text:a></text:span> (HTTPS), la valeur du port vaut implicitement 80 et 443,
respectivement.</text:p>
<text:p text:style-name="TexteCourant">Le module npm <text:span text:style-name="T4">get-port</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/get-port" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/get-port</text:a></text:span>) retourne
un numéro de port parmi ceux disponibles sur le système d&#8217;exploitation.</text:p>
<text:p text:style-name="Code">$ node server/port.js</text:p><text:p text:style-name="Code">http://localhost:51765</text:p>
<text:p text:style-name="CodeTitre">server/port.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {createServer} = require('http');</text:p><text:p text:style-name="Code">const getPort = require('get-port');</text:p><text:p text:style-name="Code">const server = createServer();</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">getPort({ port: 4000 }).then(port =&gt; {<text:s text:c="6"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(`http://localhost:${port}`);<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>server.listen(port);<text:s text:c="22"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Exprime une préférence pour retourner le port 4000 s&#8217;il est disponible.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://localhost:4000" text:visited-style-name="Visited_20_Internet_20_Link">http://localhost:4000</text:a></text:span> si le port est disponible, sinon un autre nombre s&#8217;affichera à la place.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Le serveur se met à l&#8217;écoute sur ce port.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Pour vous en rendre compte, démarrez le script <text:span text:style-name="CodeDansTexte">server/start.js</text:span> pour utiliser
le port 4000 et démarrez ensuite <text:span text:style-name="CodeDansTexte">server/port.js</text:span>.</text:p>
<text:bookmark text:name="ref-path" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Répondre à un chemin (<text:span text:style-name="T4">routing</text:span>)</text:h><text:p text:style-name="TexteCourant">Nous avons vu qu&#8217;une URL est un identifiant qui se décompose en plusieurs
parties grâce au <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-url"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">url</text:span></text:a>
(cf. <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-04"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 4</text:a>).
Une de ces parties est le <text:span text:style-name="T4">chemin d&#8217;accès</text:span> à une ressource.<text:line-break/>Par exemple, le chemin de l&#8217;URL <text:span text:style-name="CodeDansTexte"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://localhost:4000/coucou" text:visited-style-name="Visited_20_Internet_20_Link">http://localhost:4000/coucou</text:a></text:span> est <text:span text:style-name="CodeDansTexte">/coucou</text:span>.</text:p>
<text:p text:style-name="Code">$ node path/request-url.js</text:p>
<text:p text:style-name="CodeTitre">path/request-url.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {createServer} = require('http');</text:p><text:p text:style-name="Code">const server = createServer().listen(4000);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">server.on('request', (request, response) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>if (request.url === '/') {<text:s text:c="24"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>response.end('&lt;a href="/hello"&gt;clique-moi&lt;/a&gt;');</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code"><text:s text:c="2"/>else if (request.url === '/coucou') {<text:s text:c="13"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>response.end('&lt;a href="/"&gt;coucou !&lt;/a&gt;');</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche un message spécifique au chemin <text:span text:style-name="CodeDansTexte">/</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche un autre message spécifique au chemin <text:span text:style-name="CodeDansTexte">/coucou</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Les deux seules ressources mises à disposition sur <text:span text:style-name="CodeDansTexte"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://localhost:4000" text:visited-style-name="Visited_20_Internet_20_Link">http://localhost:4000</text:a></text:span>
sont accessibles avec les chemins <text:span text:style-name="CodeDansTexte">/</text:span> et <text:span text:style-name="CodeDansTexte">/coucou</text:span>.
Tout autre chemin n&#8217;aboutira pas.</text:p>
<text:p text:style-name="TexteCourant">C&#8217;est d&#8217;ailleurs un problème puisqu&#8217;en réalité, nous n&#8217;envoyons pas de réponse
pour un chemin inconnu.
Et c&#8217;est à nous de gérer ce cas de figure&#160;:</text:p>
<text:p text:style-name="Code">$ node path/404.js</text:p>
<text:p text:style-name="CodeTitre">path/404.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {createServer} = require('http');</text:p><text:p text:style-name="Code">const server = createServer().listen(4000);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">server.on('request', (request, response) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>if (request.url === '/') {<text:s text:c="24"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>response.end('&lt;a href="/hello"&gt;clique-moi&lt;/a&gt;');</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code"><text:s text:c="2"/>else {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>response.statusCode = 404;<text:s text:c="22"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>response.end('&lt;h1&gt;Page introuvable&lt;/h1&gt;');<text:s text:c="6"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Seul le chemin <text:span text:style-name="CodeDansTexte">/</text:span> est disponible dans l&#8217;application.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Le code HTTP de la réponse est réglé sur <text:span text:style-name="CodeDansTexte">404</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Une page introuvable peut quand même retourner du contenu.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">La prise en compte d&#8217;une ressource inconnue à notre application fait émerger
un nouveau concept&#160;: le <text:span text:style-name="T4">statut de la réponse</text:span>.
Ce statut est un code numérique qui donne des indications sur la ressource retournée.
Dans ce cas de figure le statut <text:span text:style-name="CodeDansTexte">404</text:span> de la réponse indique au client de
ne pas considérer le contenu comme celui qui était demandé.<text:line-break/>Par défaut et sauf mention contraire, le statut est <text:span text:style-name="CodeDansTexte">200</text:span>.</text:p>
<text:p text:style-name="TableauTitre">Table 15. Principaux codes HTTP et leur signification.</text:p><table:table table:style-name="Tableau1"><table:table-column />,<table:table-column />,<table:table-column /><table:table-row><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Code</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Raison</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Explication</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">200</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">OK</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>La ressource demandée est retournée en réponse.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">301</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">Moved Permanently</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>La ressource demandée a été déplacée.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">304</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">Not Modified</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>La ressource n&#8217;a pas été modifiée depuis la dernière fois.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">400</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">Bad Request</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>La requête est incomplète ou incompréhensible par le serveur.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">401</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">Unauthorized</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>La ressource est accessible sur preuve d&#8217;identification.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">403</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">Forbidden</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>L&#8217;accès à la ressource est interdit.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">404</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">Not Found</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>La ressource n&#8217;existe pas.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">500</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">Internal Server Error</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Le serveur distant est en erreur.</text:p></table:table-cell></table:table-row></table:table>
<text:p text:style-name="TexteCourant">Les statuts HTTP sont importants dans la création d&#8217;applications web.
Leur code permet de vérifier que le client et le serveur se sont bien compris.<text:line-break/>Si une page d&#8217;erreur est affichée avec un statut <text:span text:style-name="CodeDansTexte">200</text:span>, le client sera dans
l&#8217;impossiblité de deviner qu&#8217;il ne s&#8217;agit pas du contenu attendu.</text:p>
<text:p text:style-name="TableauTitre">Table 16. D&#8217;autres codes HTTP utiles à connaître.</text:p><table:table table:style-name="Tableau1"><table:table-column />,<table:table-column />,<table:table-column /><table:table-row><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Code</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Raison</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Explication</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">201</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">Created</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>La ressource demandée a été créée.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">202</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">Accepted</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>La demande a été acceptée et la ressource sera disponible ultérieurement.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">204</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">No Content</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>La ressource demandée n&#8217;a pas de contenu.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">302</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">Found</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>La ressource demandée est temporairement disponible à une autre adresse.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">503</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">Service Unavailable</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Le serveur distant répond qu&#8217;il n&#8217;est pas disponible pour l&#8217;instant.</text:p></table:table-cell></table:table-row></table:table>
<text:p text:style-name="TexteCourant">Une application web devient vite compliquée à se gérer si nous avons à lister
tous les chemins possibles.
C&#8217;est à ce moment qu&#8217;entre en jeu le <text:span text:style-name="T4">routing</text:span>, une technique pour décrire
des chemins d&#8217;accès au lieu de s&#8217;embourber dans une longue liste de <text:span text:style-name="CodeDansTexte">if/else</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Nous utilisons le module npm <text:span text:style-name="T4">find-my-way</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/find-my-way" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/find-my-way</text:a></text:span>)
pour transformer l&#8217;exemple <text:span text:style-name="CodeDansTexte">path/request-url.js</text:span>
en quelque chose de plus modulaire&#160;:</text:p>
<text:p text:style-name="Code">$ node path/routes.js</text:p>
<text:p text:style-name="CodeTitre">path/routes.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {createServer} = require('http');</text:p><text:p text:style-name="Code">const router = require('find-my-way')();<text:s text:c="16"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">router.get('/', (request, response) =&gt; {<text:s text:c="16"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>response.end('&lt;a href="/coucou"&gt;clique-moi&lt;/a&gt;');</text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">router.get('/coucou', (request, response) =&gt; {<text:s text:c="10"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>response.end('&lt;a href="/"&gt;retour&lt;/a&gt;');</text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const server = createServer().listen(4000)</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.on('request', (req, res) =&gt; router.lookup(req, res));<text:span text:style-name="PuceCode">4</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Création de la table de routage.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Définition de la réponse du chemin d&#8217;accès <text:span text:style-name="CodeDansTexte">/</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Définition de la réponse du chemin d&#8217;accès <text:span text:style-name="CodeDansTexte">/coucou</text:span>.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Intégration du routeur aux requêtes entrantes du serveur HTTP.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Les routeurs commencent à nous vraiment nous faire gagner du temps
lorsqu&#8217;il s&#8217;agit d&#8217;extraire des informations utiles depuis le chemin et
de les gérer dynamiquement&#160;:</text:p>
<text:p text:style-name="Code">$ node path/route-params.js</text:p>
<text:p text:style-name="CodeTitre">path/route-params.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {createServer} = require('http');</text:p><text:p text:style-name="Code">const router = require('find-my-way')();</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">router.get('/hello/:word', (req, response, params) =&gt; { <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>response.end(`&lt;p&gt;hello ${params.word}&lt;/p&gt;`);<text:s text:c="10"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const server = createServer().listen(4000)</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.on('request', (req, res) =&gt; router.lookup(req, res));</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Création d&#8217;une route paramétrée&#160;— le symbole <text:span text:style-name="CodeDansTexte">:word</text:span> est accessible dans le troisième argument, en tant que <text:span text:style-name="CodeDansTexte">params.word</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche une phrase composée avec le paramètre de notre route.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Dirigez vous vers <text:span text:style-name="CodeDansTexte"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://localhost:4000/hello/word" text:visited-style-name="Visited_20_Internet_20_Link">http://localhost:4000/hello/word</text:a></text:span> pour voir le résultat s&#8217;afficher.
Changez le dernier segment du chemin pour observer le changement.</text:p>
<text:p text:style-name="TexteCourant">Ce mécanisme est utile pour relier un identifiant à un enregistrement précis
en base de données, par exemple.
Il se complète avec les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-argument"  text:visited-style-name="Visited_20_Internet_20_Link">arguments d&#8217;URL</text:a> pour véhiculer des
éléments optionnels&#160;— nous en parlons quelques sections plus loin.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Sécurité</text:span> Filtrer les données entrantes</text:h><text:p text:style-name="Remarque">C&#8217;est le moment de rappeler que <text:span text:style-name="T7">toute information saisie par l&#8217;utilisateur</text:span>
doit être filtrée et nettoyée avant d&#8217;être utilisée.
L&#8217;exemple <text:span text:style-name="CodeDansTexte">path/route-params.js</text:span> n&#8217;est pas sécurisé&#160;; vous vous en rendrez
compte en visitant <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://localhost:4000/hello/&lt;script&gt;alert(h4ck)&lt;%2Fscript&gt;" text:visited-style-name="Visited_20_Internet_20_Link">http://localhost:4000/hello/&lt;script&gt;alert(h4ck)&lt;%2Fscript&gt;</text:a></text:span>.<text:line-break/>Ce type de failles s&#8217;exploite pour faire fuiter des données confidentielles.</text:p>
<text:p text:style-name="Remarque">Nous verrons tous ces aspects plus en détail dans la section
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-security"  text:visited-style-name="Visited_20_Internet_20_Link">protéger l&#8217;application</text:a>.</text:p>
<text:p text:style-name="TexteCourant">Enfin, les routeurs contextualisent les actions à effectuer vis à vis d&#8217;une
ressource grâce au <text:span text:style-name="T4">verbe HTTP</text:span>.
Le verbe communique une intention&#160;— récupération, mise à jour, suppression.
Le routeur organise notre code pour déclencher une action adaptée
à la méthode employée&#160;:</text:p>
<text:p text:style-name="Code">$ node path/method.js</text:p>
<text:p text:style-name="CodeTitre">path/method.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {createServer} = require('http');</text:p><text:p text:style-name="Code">const router = require('find-my-way')();</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">router.get('/', (request, response) =&gt; {<text:s text:c="10"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>response.end('Bienvenue');</text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">router.head('/', (request, response) =&gt; {<text:s text:c="9"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>response.writeHead(200, {<text:s text:c="23"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>'X-Jobs': 'https://jobs.humancoders.com'<text:s text:c="6"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>});</text:p><text:p text:style-name="Code"><text:s text:c="2"/>response.end('Invisible');<text:s text:c="22"/><text:span text:style-name="PuceCode">5</text:span></text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const server = createServer().listen(4000)</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.on('request', (req, res) =&gt; router.lookup(req, res));</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Définition du chemin d&#8217;accès <text:span text:style-name="CodeDansTexte">/</text:span>&#160;— verbe <text:span text:style-name="CodeDansTexte">GET</text:span> (récupération).<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Définition du chemin d&#8217;accès <text:span text:style-name="CodeDansTexte">/</text:span>&#160;— verbe <text:span text:style-name="CodeDansTexte">HEAD</text:span> cette fois.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> La méthode <text:span text:style-name="CodeDansTexte">response.writeHead</text:span> est un moyen de définir le statut en même temps que les entêtes de réponse.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Définition d&#8217;une entête personnalisée&#160;— le préfixe <text:span text:style-name="CodeDansTexte">X-</text:span> indique qu&#8217;elle n&#8217;est pas liée au standard HTTP.<text:line-break/><text:span text:style-name="PuceCode">5</text:span> Écriture du corps du message&#160;— nous verrons qu&#8217;il est ignoré et n&#8217;est pas transmis au client.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Les navigateurs web affichent seulement notre route <text:span text:style-name="CodeDansTexte">GET</text:span> car c&#8217;est
leur fonctionnement par défaut.
Ils comprennent le verbe <text:span text:style-name="CodeDansTexte">POST</text:span> pour <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-upload"  text:visited-style-name="Visited_20_Internet_20_Link">uploader des fichiers</text:a> ou
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-post"  text:visited-style-name="Visited_20_Internet_20_Link">transmettre des formulaires</text:a>.<text:line-break/>Tournons-nous à nouveau vers le programme <text:span text:style-name="CodeDansTexte">curl</text:span> pour observer les différences
entre la réponse nos deux verbes HTTP <text:span text:style-name="CodeDansTexte">GET</text:span> et <text:span text:style-name="CodeDansTexte">HEAD</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ curl http://localhost:4000</text:p><text:p text:style-name="Code">Bienvenue</text:p><text:p text:style-name="Code">$ curl <text:span text:style-name="CodeExergue">--head</text:span> http://localhost:4000</text:p><text:p text:style-name="Code">HTTP/1.1 200 OK</text:p><text:p text:style-name="Code"><text:span text:style-name="CodeExergue">X-Jobs: https://jobs.humancoders.com</text:span></text:p><text:p text:style-name="Code">Date: Sun, 01 Jul 2018 15:43:56 GMT</text:p><text:p text:style-name="Code">Connection: keep-alive</text:p>
<text:p text:style-name="TexteCourant">L&#8217;utilisation de <text:span text:style-name="CodeDansTexte">HEAD</text:span> renvoie uniquement les entêtes de réponse et nous
économise la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-templating"  text:visited-style-name="Visited_20_Internet_20_Link">génération d&#8217;un gabarit</text:a>.
D&#8217;un point de vue client, le verbe <text:span text:style-name="CodeDansTexte">HEAD</text:span> aide à inspecter des ressources
sans avoir à télécharger le contenu&#160;— ce sont autant de kilo ou méga-octets
d&#8217;économisés.</text:p>
<text:p text:style-name="TableauTitre">Table 17. Principaux verbes HTTP et leur utilisation.</text:p><table:table table:style-name="Tableau1"><table:table-column />,<table:table-column /><table:table-row><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Verbe</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Description</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">GET</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Récupération d&#8217;une ressource.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">HEAD</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Récupération d&#8217;une ressource — seulement les entêtes.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">POST</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Création d&#8217;une ressource.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">PUT</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Mise à jour d&#8217;une ressource.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">PATCH</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Mise à jour <text:span text:style-name="T4">partielle</text:span> d&#8217;une ressource.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">DELETE</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Demande de suppression d&#8217;une ressource.</text:p></table:table-cell></table:table-row></table:table>
<text:p text:style-name="TexteCourant">La responsabilité de comprendre ces verbes revient à notre application.
C&#8217;est donc à nous de leur associer une action pour les prendre en charge.</text:p>
<text:bookmark text:name="ref-static" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Répondre avec des fichiers statiques</text:h><text:p text:style-name="TexteCourant">Les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-path"  text:visited-style-name="Visited_20_Internet_20_Link">chemins d&#8217;accès</text:a> s&#8217;associent aussi à des fichiers statiques.
Ainsi, une URL correspond un fichier placé sur notre disque dur.
J&#8217;ai placé 3 fichiers de différente nature (texte, image, PDF) pour illustrer
les exemples de cette section.</text:p>
<text:p text:style-name="Code">$ tree -a static/files</text:p><text:p text:style-name="Code">static/files</text:p><text:p text:style-name="Code">├── .eslintrc.yaml</text:p><text:p text:style-name="Code">├── doc.pdf</text:p><text:p text:style-name="Code">└── screenshot.jpg</text:p>
<text:p text:style-name="TexteCourant">Nous allons commencer par mettre à disposition un seul fichier, quel que soit
le chemin demandé&#160;:</text:p>
<text:p text:style-name="Code">$ node static/routes.js</text:p>
<text:p text:style-name="CodeTitre">static/routes.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {createServer} = require('http');</text:p><text:p text:style-name="Code">const {createReadStream} = require('fs');</text:p><text:p text:style-name="Code">const {join} = require('path');</text:p><text:p text:style-name="Code">const router = require('find-my-way')();</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const staticFiles = (request, response, params) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const filename = join(__dirname, 'files', params.file);<text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>createReadStream(filename).pipe(response);<text:s text:c="13"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">router.get('/files/:file', staticFiles);<text:s text:c="17"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">router.head('/files/:file', staticFiles);<text:s text:c="16"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const server = createServer().listen(4000)</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.on('request', (req, res) =&gt; router.lookup(req, res));</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Nous constituons un chemin d&#8217;accès avec <text:span text:style-name="CodeDansTexte">path.join</text:span>&#160;— cf. <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-path"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 4</text:a>, module <text:span text:style-name="CodeDansTexte">path</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Nous créons un flux de lecture vers ce fichier&#160;— cf. <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-stream"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 4</text:a>, module <text:span text:style-name="CodeDansTexte">stream</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Nous redirigeons le flux de lecture vers la réponse.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Ce que cet exemple nous apprend,
c&#8217;est que l'<text:span text:style-name="T7">objet de réponse est aussi un flux d&#8217;écriture</text:span>.
Peu importe le volume du fichier, l&#8217;envoi se régulera en fonction de la capacité
de téléchargement du client et en consommant le minimum de mémoire possible.
La lecture sera interrompue si le client annule le téléchargement.</text:p>
<text:p text:style-name="TexteCourant">Nous pouvons à présent étendre ce savoir nouvellement acquis en
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-path"  text:visited-style-name="Visited_20_Internet_20_Link">routant un chemin d&#8217;accès</text:a> vers le répertoire qui contient nos fichiers.</text:p>
<text:p text:style-name="Code">$ node static/routes.js</text:p>
<text:p text:style-name="CodeTitre">static/routes.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {createServer} = require('http');</text:p><text:p text:style-name="Code">const {createReadStream} = require('fs');</text:p><text:p text:style-name="Code">const {join} = require('path');</text:p><text:p text:style-name="Code">const router = require('find-my-way')();</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const staticFiles = (request, response, params) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const filename = join(__dirname, 'files', params.file);<text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>createReadStream(filename).pipe(response);<text:s text:c="13"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">router.get('/files/:file', staticFiles);<text:s text:c="17"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">router.head('/files/:file', staticFiles);<text:s text:c="16"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const server = createServer().listen(4000)</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.on('request', (req, res) =&gt; router.lookup(req, res));</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Création d&#8217;une route paramétrée qui répond avec la fonction <text:span text:style-name="CodeDansTexte">staticFiles</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Réutilisation de la fonction <text:span text:style-name="CodeDansTexte">staticFiles</text:span> pour répondre à la méthode <text:span text:style-name="CodeDansTexte">HEAD</text:span>&#160;— nous verrons plus loin pourquoi c&#8217;est important.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Composition dynamique du chemin d&#8217;accès au fichier.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Comme toute à l&#8217;heure, nous redirigeons le flux de lecture du fichier vers la réponse.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Si nous accédons à <text:span text:style-name="CodeDansTexte"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://localhost:4000/files/doc.pdf" text:visited-style-name="Visited_20_Internet_20_Link">http://localhost:4000/files/doc.pdf</text:a></text:span> et <text:span text:style-name="CodeDansTexte"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://localhost:4000/files/screenshot.jpg" text:visited-style-name="Visited_20_Internet_20_Link">http://localhost:4000/files/screenshot.jpg</text:a></text:span>,
nous verrons les deux documents s&#8217;afficher dans notre navigateur.
Un problème cependant&#160;: l&#8217;accès à un chemin inconnu fait planter l&#8217;application.</text:p>
<text:p text:style-name="TexteCourant">Notre approche est un peu trop naïve en regardant les entêtes
de réponse d&#8217;un peu plus près&#160;:</text:p>
<text:p text:style-name="Code">$ curl --head 'http://localhost:4000/files/doc.pdf' <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">HTTP/1.1 200 OK</text:p><text:p text:style-name="Code">Date: Mon, 02 Jul 2018 15:47:33 GMT</text:p><text:p text:style-name="Code">Connection: keep-alive</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> C&#8217;est pour exécuter cette commande que j&#8217;ai ajouté l&#8217;écoute de la méthode <text:span text:style-name="CodeDansTexte">HEAD</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">En fait, nous gagnerions à documenter la ressource en transmettant
des entêtes supplémentaires.
La question est&#160;: lesquelles&#160;?</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Sécurité</text:span> Filtrer les données entrantes</text:h><text:p text:style-name="Remarque"><text:span text:style-name="T7">Toute information saisie par l&#8217;utilisateur</text:span> doit être filtrée et nettoyée avant
d&#8217;être utilisée.
L&#8217;exemple <text:span text:style-name="CodeDansTexte">static/routes.js</text:span> n&#8217;est pas sécurisé&#160;; vous vous rendrez
compte en visitant <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://localhost:4000/files/..%2F..%2Fhello.js" text:visited-style-name="Visited_20_Internet_20_Link">http://localhost:4000/files/..%2F..%2Fhello.js</text:a></text:span> que ce chemin
permet de remonter jusqu&#8217;à un fichier situé hors du répertoire <text:span text:style-name="CodeDansTexte">static/files</text:span>.<text:line-break/>Ce type de faille s&#8217;exploite pour accéder aux données confidentielles de notre
système d&#8217;exploitation.</text:p>
<text:p text:style-name="Remarque">Nous verrons tous ces aspects plus en détail dans la section
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-security"  text:visited-style-name="Visited_20_Internet_20_Link">protéger l&#8217;application</text:a>.</text:p>
<text:p text:style-name="TexteCourant">Nous allons nous baser sur le module npm <text:span text:style-name="T4">send</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/send" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/send</text:a></text:span>)
pour améliorer l&#8217;exemple précédent et constater par nous-même quelles
entêtes sont utiles.</text:p>
<text:p text:style-name="Code">$ node static/send.js</text:p>
<text:p text:style-name="CodeTitre">static/send.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {createServer} = require('http');</text:p><text:p text:style-name="Code">const {join} = require('path');</text:p><text:p text:style-name="Code">const send = require('send');</text:p><text:p text:style-name="Code">const router = require('find-my-way')();</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const staticFiles = (request, response, params) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const pathname = params['*'];<text:s text:c="15"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>const filename = join(__dirname, 'files', pathname);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>send(request, filename).pipe(response);<text:s text:c="5"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">router.get('/files/*', staticFiles);<text:s text:c="10"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">router.head('/files/*', staticFiles);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const server = createServer().listen(4000)</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.on('request', (req, res) =&gt; router.lookup(req, res));</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> En utilisant la syntaxe <text:span text:style-name="CodeDansTexte">*</text:span>, le routeur accepte une arborescence de chemins&#160;— <text:span text:style-name="CodeDansTexte">doc.pdf</text:span> tout comme <text:span text:style-name="CodeDansTexte">un/long/chemin.pdf</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> L&#8217;arborescence se récupère avec un paramètre du même nom&#160;— <text:span text:style-name="CodeDansTexte">*</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Le module <text:span text:style-name="T4">send</text:span> prend en charge la suite de la transmission.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Pas de grands bouleversements donc.
Si ce n&#8217;est que les fichiers inexistants ne font plus planter l&#8217;application
et que les entêtes de réponses sont plus fournies qu&#8217;avant&#160;:</text:p>
<text:p text:style-name="Code">$ curl --head 'http://localhost:4000/files/doc.pdf'</text:p><text:p text:style-name="Code">HTTP/1.1 200 OK</text:p><text:p text:style-name="Code">Accept-Ranges: bytes</text:p><text:p text:style-name="Code">Cache-Control: public, max-age=0</text:p><text:p text:style-name="Code">Last-Modified: Tue, 12 Jun 2018 08:02:40 GMT</text:p><text:p text:style-name="Code">ETag: W/"10c5d-163f304b0d2"</text:p><text:p text:style-name="Code">Content-Type: application/pdf</text:p><text:p text:style-name="Code">Content-Length: 68701</text:p><text:p text:style-name="Code">Date: Mon, 02 Jul 2018 15:52:18 GMT</text:p><text:p text:style-name="Code">Connection: keep-alive</text:p>
<text:p text:style-name="TexteCourant">Parmi les entêtes les plus importantes, nous trouvons <text:span text:style-name="CodeDansTexte">Content-Type</text:span>,
<text:span text:style-name="CodeDansTexte">Content-Length</text:span> et <text:span text:style-name="CodeDansTexte">Last-Modified</text:span>.
Elles aident le client à interpréter ou représenter le contenu de manière optimale,
à informer de la taille du contenu (utile à l&#8217;animation de la barre de
téléchargement du navigateur web) et à distinguer l&#8217;ancienneté du fichier.</text:p>
<text:p text:style-name="TableauTitre">Table 18. Entêtes de réponse utiles pour transmettre des fichiers.</text:p><table:table table:style-name="Tableau1"><table:table-column />,<table:table-column /><table:table-row><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Entête</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Utilité</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">Content-Type</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Explicite la nature du contenu mis à disposition.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">Content-Disposition</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Indique si le contenu doit être affiché dans le client ou téléchargé sous un nom particulier.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">Cache-Control</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Active ou désactive la mise en cache de ce fichier par le client.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">Last-Modified</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Indique la date de dernière modification du contenu.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">Content-Length</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Indique la longueur (en octets) du contenu.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">Content-Encoding</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Indique le mode de compression utilisé pour transmettre les données.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">Accept-Ranges</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Indique la possibilité ou non de reprendre un téléchargement ou d&#8217;en choisir un segment avec l&#8217;entête de requête <text:span text:style-name="CodeDansTexte">Range</text:span>.</text:p></table:table-cell></table:table-row></table:table>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Performance</text:span> Utiliser Apache ou nginx en production</text:h><text:p text:style-name="Remarque">Si Node s&#8217;en sort bien pour envoyer des fichiers vers le client,
les serveurs web <text:span text:style-name="T4">Apache</text:span> et <text:span text:style-name="T4">nginx</text:span> sont encore plus performants à ce niveau.
C&#8217;est quelque chose à considérer si votre application sert principalement
des fichiers statiques.</text:p>
<text:p text:style-name="Remarque">Lisez le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-06"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 6</text:a> pour apprendre à configurer
Node derrière un autre serveur web.</text:p>
<text:bookmark text:name="ref-arguments" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Réagir aux arguments d&#8217;URL</text:h><text:p text:style-name="TexteCourant">Les arguments d&#8217;une URL servent à <text:span text:style-name="T7">affiner le contexte d&#8217;affichage</text:span> d&#8217;une
ressource donnée.
Ces options servent par exemple à paginer du contenu ou spécifier une dimension,
un filtre d&#8217;affichage ou encore une expression de recherche.
En clair, elles servent à influencer la représentation d&#8217;une ressource
ou information.</text:p>
<text:p text:style-name="TexteCourant">Par défaut, les arguments sont représentés de manière textuelle avec
le chemin d&#8217;accès, dans l&#8217;attribut <text:span text:style-name="CodeDansTexte">request.url</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ node arguments/intro.js</text:p>
<text:p text:style-name="CodeTitre">arguments/intro.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {createServer} = require('http');</text:p><text:p text:style-name="Code">const server = createServer().listen(4000);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">server.on('request', (request, response) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>response.end(request.url);<text:s text:c="6"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> La page demandée affiche l&#8217;attribut de requête <text:span text:style-name="CodeDansTexte">url</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Nous voyons s&#8217;afficher <text:span text:style-name="CodeDansTexte">/test?cle=valeur&amp;option</text:span> en nous rendant à l&#8217;adresse
<text:span text:style-name="CodeDansTexte"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://localhost:4000/test?cle=valeur&amp;option" text:visited-style-name="Visited_20_Internet_20_Link">http://localhost:4000/test?cle=valeur&amp;option</text:a></text:span>.
Ce n&#8217;est pas utilisable en l&#8217;état.</text:p>
<text:p text:style-name="TexteCourant">Le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-url"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">url</text:span></text:a>
(cf. <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-04"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 4</text:a>) entre en jeu.
En plus de destructurer une URL entière, il sait aussi décomposer les options
et les transformer en un objet utilisable côté Node&#160;:</text:p>
<text:p text:style-name="Code">$ node arguments/parse.js</text:p>
<text:p text:style-name="CodeTitre">arguments/parse.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {createServer} = require('http');</text:p><text:p text:style-name="Code">const {parse} = require('url');</text:p><text:p text:style-name="Code">const server = createServer().listen(4000);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">server.on('request', (request, response) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const {search, query} = parse(request.url, true); <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>response.write(`${search}\n\n`);<text:s text:c="18"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>response.write(JSON.stringify(query));<text:s text:c="12"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>response.end();</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Le deuxième argument de la fonction <text:span text:style-name="CodeDansTexte">url.parse</text:span> décompose les arguments, disponibles dans l&#8217;attribut <text:span text:style-name="CodeDansTexte">query</text:span> de l&#8217;objet retourné.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> L&#8217;attribut <text:span text:style-name="CodeDansTexte">search</text:span> correspond aux arguments, sous forme textuelle.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> L&#8217;attribut <text:span text:style-name="CodeDansTexte">query</text:span> est un objet&#160;— ici, transformé pour être affiché dans la page sous forme de texte.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Cette fois, nous voyons s&#8217;afficher <text:span text:style-name="CodeDansTexte">{"cle": "valeur", "option": ""}</text:span> dans notre
navigateur lorsque nous nous rendons sur <text:span text:style-name="CodeDansTexte"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://localhost:4000/test?cle=valeur&amp;option" text:visited-style-name="Visited_20_Internet_20_Link">http://localhost:4000/test?cle=valeur&amp;option</text:a></text:span>.
C&#8217;est tout ce qu&#8217;il nous fallait pour l&#8217;utiliser dans notre application.</text:p>
<text:p text:style-name="Code">$ node arguments/format.js</text:p>
<text:p text:style-name="CodeTitre">arguments/format.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {createServer} = require('http');</text:p><text:p text:style-name="Code">const {parse} = require('url');</text:p><text:p text:style-name="Code">const {format} = require('date-fns');</text:p><text:p text:style-name="Code">const server = createServer().listen(4000);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">server.on('request', (request, response) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const {query} = parse(request.url, true);</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const text = format(new Date(), 'YYYY-MM-DD');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>if (query.format === 'svg') {<text:s text:c="21"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>response.setHeader('Content-Type', 'text/html');<text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>response.end(`&lt;svg viewBox="0 0 200 100"&gt;</text:p><text:p text:style-name="Code"><text:s text:c="6"/>&lt;text x="0" y="50"&gt;${text}&lt;/text&gt;</text:p><text:p text:style-name="Code"><text:s text:c="4"/>&lt;/svg&gt;`);</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code"><text:s text:c="2"/>else {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>response.end(text);<text:s text:c="29"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Nous rentrons dans ce bloc en présence de l&#8217;argument d&#8217;URL <text:span text:style-name="CodeDansTexte">format=svg</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Une entête <text:span text:style-name="CodeDansTexte">Content-Type</text:span> fait que le contenu est interprêté (et affiché) comme du HTML&#160;— en retirant cette ligne, le document sera alors téléchargé.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Sinon, le reste du temps nous affichons la date telle quelle, en tant que texte.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Les deux URL <text:span text:style-name="CodeDansTexte"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://localhost:4000/date?format=svg" text:visited-style-name="Visited_20_Internet_20_Link">http://localhost:4000/date?format=svg</text:a></text:span> et <text:span text:style-name="CodeDansTexte"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://localhost:4000/date" text:visited-style-name="Visited_20_Internet_20_Link">http://localhost:4000/date</text:a></text:span> font
référence à une même ressource mais l&#8217;affichage s&#8217;adapte au contexte.</text:p>
<text:p text:style-name="TableauTitre">Table 19. Exemples d&#8217;arguments et de leur représentation en structure ECMAScript.</text:p><table:table table:style-name="Tableau1"><table:table-column />,<table:table-column /><table:table-row><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Argument</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Représentation</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">?cle=valeur</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">{cle: "valeur"}</text:span></text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">?cle</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">{cle: ""}</text:span></text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">?cle[]=1&amp;cle[]=2</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">{cle: [1,2]}</text:span></text:p></table:table-cell></table:table-row></table:table>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Performance</text:span> Module npm <text:span text:style-name="T4">parseurl</text:span></text:h><text:p text:style-name="Remarque">Si vous êtes à la recherche de performance, le module npm <text:span text:style-name="T4">parseurl</text:span>
(<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/parseurl" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/parseurl</text:a></text:span>) retourne les mêmes résultats
tout en étant jusqu&#8217;à 10 fois plus rapide que le module natif à Node.</text:p>
<text:bookmark text:name="ref-post" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Interpréter un corps de message (<text:span text:style-name="">POST</text:span>, <text:span text:style-name="">PUT</text:span>)</text:h><text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">JSON</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">formulaire</text:p>
</text:list-item></text:list>
<text:bookmark text:name="ref-upload" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Uploader des fichiers</text:h><text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">solo</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">plusieurs (multipart)</text:p>
</text:list-item></text:list>
<text:bookmark text:name="ref-cookies" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Garder un lien avec les cookies</text:h><text:p text:style-name="TexteCourant">Un cookie est une information partagée entre un client et un serveur pour
une durée limitée dans le temps.
Le client transmet les cookies au serveur afin que ce dernier contextualise
la demande&#160;— un identifiant utilisateur, des préférences ou autre.
Un cookie créé par le domaine <text:span text:style-name="CodeDansTexte">example.com</text:span> est envoyé seulement lors d&#8217;une
visite à <text:span text:style-name="CodeDansTexte">example.com</text:span>&#160;— sous-domaines inclus.</text:p>
<text:p text:style-name="TexteCourant">Ce mécanisme est aujourd&#8217;hui tristement célèbre pour son détournement
par les industries de la publicité, du marketing et de la revente de données.</text:p>
<text:p text:style-name="Code">$ node cookies/set-cookie.js</text:p>
<text:p text:style-name="CodeTitre">cookies/set-cookie.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {createServer} = require('http');</text:p><text:p text:style-name="Code">const server = createServer().listen(4000);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">server.on('request', (request, response) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>response.setHeader('Set-Cookie', 'compteur=1'); <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>response.end();</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> L&#8217;entête de réponse <text:span text:style-name="CodeDansTexte">Set-Header</text:span> crée/modifie la valeur d&#8217;un cookie chez le client&#160;— ici, le cookie <text:span text:style-name="CodeDansTexte">compteur</text:span> est créé avec la valeur <text:span text:style-name="CodeDansTexte">1</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Nous pouvons observer la création du cookie en nous rendant sur <text:span text:style-name="CodeDansTexte"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://localhost:4000" text:visited-style-name="Visited_20_Internet_20_Link">http://localhost:4000</text:a></text:span>
avec un navigateur, puis en ouvrant les outils de développement.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-07/images/cookies-browser.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 55. Visualisation des cookies avec les outils de développement du navigateur Firefox.</text:p>
<text:p text:style-name="TexteCourant">Les cookies sont transmis du client au serveur <text:span text:style-name="T7">à chaque requête</text:span>.</text:p>
<text:p text:style-name="Code">$ node cookies/read.js</text:p>
<text:p text:style-name="CodeTitre">cookies/read.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {createServer} = require('http');</text:p><text:p text:style-name="Code">const server = createServer().listen(4000);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">server.on('request', (request, response) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const cookie = request.headers.cookie;<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>response.end(`Contenu : ${cookie}`);<text:s text:c="4"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Les cookies se lisent en inspectant l&#8217;entête de requête <text:span text:style-name="CodeDansTexte">Cookie</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">Contenu&#160;: compteur=1</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Nous avons récupéré la valeur de l&#8217;entête contenant le cookie.
Nous devons faire un effort supplémentaire pour transformer cette valeur textuelle
en une structure ECMAScript qui fait sens pour notre application.</text:p>
<text:p text:style-name="TexteCourant">Nous allons nous aider pour cela du module npm <text:span text:style-name="T4">cookie</text:span>
(<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/cookie" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/cookie</text:a></text:span>).
Il sait interpréter le contenu d&#8217;une entête HTTP et il sait également faire
l&#8217;inverse, transformer une structure ECMAScript vers du texte utilisable
dans une entête de réponse <text:span text:style-name="CodeDansTexte">Set-Cookie</text:span>.</text:p>
<text:p text:style-name="Code">$ node cookies/parse.js</text:p>
<text:p text:style-name="CodeTitre">cookies/parse.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {createServer} = require('http');</text:p><text:p text:style-name="Code">const {parse} = require('cookie');</text:p><text:p text:style-name="Code">const server = createServer().listen(4000);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">server.on('request', (request, response) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const cookies = parse(request.headers.cookie);<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>response.end(JSON.stringify(cookies));<text:s text:c="10"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Nous passons l&#8217;intégralité de l&#8217;entête de requête <text:span text:style-name="CodeDansTexte">Cookie</text:span> à la fonction <text:span text:style-name="CodeDansTexte">cookie.parse</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">{"compteur":"1"}</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">La méthode <text:span text:style-name="CodeDansTexte">response.setHeader()</text:span> accepte un tableau pour créer plusieurs
cookies en même temps&#160;:</text:p>
<text:p text:style-name="Code">$ node cookies/set-multiple.js</text:p>
<text:p text:style-name="CodeTitre">cookies/set-multiple.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {createServer} = require('http');</text:p><text:p text:style-name="Code">const {parse, serialize} = require('cookie');</text:p><text:p text:style-name="Code">const server = createServer().listen(4000);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">server.on('request', (request, response) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const {compteur} = parse(request.headers.cookie);</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const compteur2 = Number(compteur) + 1;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>response.setHeader('Set-Cookie', [<text:s text:c="20"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>'language=fr; Max-Age: 9000000',<text:s text:c="20"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>'is_admin=1; Path=/admin; HttpOnly',<text:s text:c="16"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>serialize('compteur', compteur2, {httpOnly: true}), <text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>//`compteur=${compteur2}; HttpOnly`<text:s text:c="17"/><text:span text:style-name="PuceCode">5</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>]);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>response.end();</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Nous créons plusieurs cookies en passant un tableau de valeurs à la méthode <text:span text:style-name="CodeDansTexte">response.setHeader()</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Crée un cookie dont la durée est limitée à 9 millions de secondes (~104 jours).<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Crée un cookie visible pour le chemin d&#8217;accès <text:span text:style-name="CodeDansTexte">/path</text:span> (et les sous-chemins)&#160;— la deuxième directive empêche les scripts clients de lire et modifier la valeur du cookie.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> L&#8217;utilisation de <text:span text:style-name="CodeDansTexte">cookie.serialize</text:span> est une autre manière de créer des cookies en construisant un objet ECMAScript au lieu d&#8217;une chaîne de caractères.<text:line-break/><text:span text:style-name="PuceCode">5</text:span> La ligne précédente équivaut à l&#8217;écriture de cette ligne.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Le précédent exemple était aussi l&#8217;occasion de compléter les cookies avec
des directives.
Ces directives impactent leur durée de vie et leur visibilité.</text:p>
<text:p text:style-name="TexteCourant">Ça s&#8217;observe en lançant à nouveau le script <text:span text:style-name="CodeDansTexte">cookies/parse.js</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ node cookies/parse.js</text:p>
<text:p text:style-name="TexteCourant">L&#8217;accès à <text:span text:style-name="CodeDansTexte"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://localhost:4000" text:visited-style-name="Visited_20_Internet_20_Link">http://localhost:4000</text:a></text:span> affiche quelque chose comme <text:span text:style-name="CodeDansTexte">{"compteur":"1","language":"fr"}</text:span>
tandis que <text:span text:style-name="CodeDansTexte"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://localhost:4000/admin" text:visited-style-name="Visited_20_Internet_20_Link">http://localhost:4000/admin</text:a></text:span> affiche un cookie supplémentaire&#160;—
<text:span text:style-name="CodeDansTexte">{"is_admin":"1","compteur":"1","language":"fr"}</text:span>.</text:p>
<text:p text:style-name="TableauTitre">Table 20. Directives complémentaires à la valeur d&#8217;un cookie.</text:p><table:table table:style-name="Tableau1"><table:table-column />,<table:table-column /><table:table-row><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Directive</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Explication</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">Max-Age</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p text:style-name="TexteCourant">Durée de vie du cookie en secondes.<text:line-break/>Si le nombre est inférieur ou égal à zéro, le cookie est supprimé.<text:line-break/>Si cette valeur n&#8217;est pas préciée, le cookie est supprimé à la fin de la session.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">Domain</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p text:style-name="TexteCourant">Spécifie le domaine ou les sous-domaines applicables au cookie.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">Path</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p text:style-name="TexteCourant">Contraint le cookie à ce répertoire et tous ses sous-répertoires.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">Secure</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p text:style-name="TexteCourant">Le cookie n&#8217;est envoyée que si le document est demandé via HTTPS.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">HttpOnly</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p text:style-name="TexteCourant">Le cookie ne peut pas être lu ou modifié côté client, via la variable <text:span text:style-name="CodeDansTexte">document.cookie</text:span>.</text:p></table:table-cell></table:table-row></table:table>
<text:p text:style-name="TexteCourant">Nous savons maintenant garder le lien avec nos utilisateurs.
Nous utiliserons d&#8217;ailleurs les cookies pour <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-sessions"  text:visited-style-name="Visited_20_Internet_20_Link">maintenir une session</text:a>
avec un framework web.</text:p>
<text:bookmark text:name="ref-templating" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Modulariser les gabarits de présentation</text:h><text:p text:style-name="TexteCourant">je parle de nunjucks mais en fait on s&#8217;en fiche y&#8217;en a plein de bien
chacun son tyle&#160;: pug, twig, ejs, handlebars</text:p>
<text:bookmark text:name="ref-dev" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Pendant le développement : relancer le serveur automatiquement</text:h><text:p text:style-name="TexteCourant">Vous avez modifié un des exemples de ce chapitre pendant qu&#8217;il était en
cours d&#8217;exécution et vous avez remarqué que résultat ne changeait pas&#160;?</text:p>
<text:p text:style-name="TexteCourant">C&#8217;est normal&#160;: la version du code utilisée par Node est celle qui a été évaluée
au lancement du script.
Les <text:span text:style-name="T7">changements sont pris en compte manuellement, à la prochaine exécution</text:span>.
C&#8217;est à dire après avoir stoppé et lancé à nouveau le script.</text:p>
<text:p text:style-name="TexteCourant">Le module npm exécutable <text:span text:style-name="T4">nodemon</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/nodemon" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/nodemon</text:a></text:span>)
relance automatiquement une commande dès qu&#8217;il détecte un changement
dans le répertoire courant.</text:p>
<text:p text:style-name="Code">$ nodemon cookies/parse.js</text:p><text:p text:style-name="Code"># au lieu de "node cookies/parse.js"</text:p>
<text:p text:style-name="TexteCourant">La commande précédente relance <text:span text:style-name="CodeDansTexte">cookies/parse.js</text:span> si ce fichier change,
si un fichier dans le répertoire <text:span text:style-name="CodeDansTexte">cookies/</text:span> change mais aussi si un fichier
dans les répertoires voisins au répertoire <text:span text:style-name="CodeDansTexte">cookies/</text:span> change.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;option <text:span text:style-name="CodeDansTexte">--watch</text:span> restreint ou élargit le champ d&#8217;observation.
La commande suivante relance le serveur seulement si un fichier JavaScript
est modifié dans le répertoire <text:span text:style-name="CodeDansTexte">cookies/</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ nodemon --watch cookies cookies/parse.js</text:p>
<text:p text:style-name="TexteCourant">L&#8217;option <text:span text:style-name="CodeDansTexte">--ext</text:span> filtre les fichiers observés en fonction de leur type.
La commande suivante relance le serveur si un fichier JavaScript, CSS ou HTML
est modifié dans le répertoire courant&#160;:</text:p>
<text:p text:style-name="Code">$ nodemon --ext js,css,html cookies/parse.js</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Question</text:span> Installation globale, installation locale ?</text:h><text:p text:style-name="Remarque">Vous n&#8217;êtes pas sûr·e de la meilleure manière d&#8217;installer et d&#8217;utiliser
le module <text:span text:style-name="T4">nodemon</text:span>&#160;?
Je vous invite à relire la section
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install.global"  text:visited-style-name="Visited_20_Internet_20_Link">exécutable système</text:a> du chapitre 5
consacré à npm.</text:p>
<text:bookmark text:name="ref-express" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Organiser une application avec le <text:span text:style-name="T4">framework</text:span> express</text:h><text:p text:style-name="TexteCourant">Express mais ça pourrait être un autre
Y&#8217;a plus performant (fastify), plus orienté données (restify),
plus asynchrone (koa) et plus tout terrain (hapi).</text:p>
<text:p text:style-name="TexteCourant">choix du bien documenté, bien outillé
proche du module http (plus facile pour greffer des modules npm)</text:p>
<text:p text:style-name="TexteCourant">ce qui est expliqué après s&#8217;applique sans les frameworks
c&#8217;est une manière "consolidée" d&#8217;organiser son code et d&#8217;y brancher des trucs</text:p>
<text:bookmark text:name="ref-middleware" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Greffer des extensions</text:h><text:p text:style-name="TexteCourant">interception / transformation des requêtes entrantes
les routes obtiennent</text:p>
<text:bookmark text:name="ref-views" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Brancher les gabarits de présentation</text:h><text:p text:style-name="TexteCourant">c&#8217;est pas très différent mais y&#8217;a un module intermédiaire
qui gère ça tranquillement</text:p>
<text:bookmark text:name="ref-frontend" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Intégrer les ressources front-end (CSS, JavaScript)</text:h><text:p text:style-name="TexteCourant">mieux vaut les générer statiquement
rebuild à la demande
des fois y&#8217;a des outils qui font ça (on perd de vue les erreurs je trouve)</text:p>
<text:bookmark text:name="ref-security" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Protéger l&#8217;application</text:h><text:p text:style-name="TexteCourant"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/helmet" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/helmet</text:a>
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/safe-regex" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/safe-regex</text:a> pour utiliser une regex sur du contenu fourni par utilisateur
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/xss" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/xss</text:a>
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/sql-escape-string" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/sql-escape-string</text:a>
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/dompurify" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/dompurify</text:a></text:p>
<text:p text:style-name="TexteCourant">path traversal (indexOf)
use strict (réduit les possibilités d&#8217;exploiter des bizarreries de JS)</text:p>
<text:bookmark text:name="ref-database" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Brancher une base de données</text:h><text:p text:style-name="TexteCourant">Mémoriser les données entre deux redémarrages
Partager les données entre plusieurs instances</text:p>
<text:p text:style-name="TexteCourant">on va utiliser sqlite parce que pas de dépendance logicielle
node-sqlite pour les promesses mais on aurait très bien pu utiliser sqlite3</text:p>
<text:bookmark text:name="ref-quelle_base_de_données_choisir" /><text:h text:style-name="TitreNiveau3" text:outline-level="4">Quelle base de données choisir ?</text:h><text:p text:style-name="TexteCourant">en fait on peut en prendre plusieurs, ajuster stratégies</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">en mémoire</text:span><text:line-break/>
Le stockage est dit <text:span text:style-name="T4">éphémère</text:span> car l&#8217;information est stockée dans la mémoire vive de la machine et disparait dès que l&#8217;application est interrompue&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">sous forme de <text:span text:style-name="T7">fichiers</text:span><text:line-break/>
Le stockage est <text:span text:style-name="T4">physiquement lié</text:span> à la machine hébergeant l&#8217;application.
Ce support est davantage adapté à un <text:span text:style-name="T4">cache</text:span> n&#8217;ayant pas besoin d&#8217;être actualisé après l&#8217;initialisation de l&#8217;application&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">via une <text:span text:style-name="T7">API</text:span><text:line-break/>
Le stockage est <text:span text:style-name="T4">nécessairement dissocié</text:span> à la machine hébergeant l&#8217;application.
L&#8217;accès à la lecture et à l&#8217;écriture de l&#8217;information se fait au travers d&#8217;une <text:span text:style-name="T4">interface de données</text:span> accessible via HTTPS.<text:line-break/>
Nous pourrions tout à fait envisager d&#8217;utiliser les APIs de GitHub, Kinto, Google Drive ou KeyBase.io pour persister et collecter des données brutes ou transformées&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">en <text:span text:style-name="T7">base de données</text:span><text:line-break/>
Le stockage n&#8217;est <text:span text:style-name="T4">pas nécessairement lié</text:span> à la machine hébergeant l&#8217;application.
L&#8217;information persiste si l&#8217;application est interrompue.</text:p>
</text:list-item></text:list>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Question</text:span> Dois-je forcément utiliser MongoDB avec Node ?</text:h><text:p text:style-name="Remarque">Doit-on nécessairement <text:span text:style-name="T7">utiliser <text:span text:style-name="T4">MongoDB</text:span></text:span>, une base de données <text:span text:style-name="T4">orientée documents</text:span> ou <text:span text:style-name="T4">JSON</text:span> avec une application Node&#160;?
La réponse est catégorique&#160;: c&#8217;est <text:span text:style-name="T7">non</text:span>.</text:p>
<text:p text:style-name="Remarque"><text:span text:style-name="T7">Tout type de base de données s&#8217;interface avec Node</text:span>, qu&#8217;elle soit <text:span text:style-name="T4">relationnelle</text:span> (Postgres, MariaDB, MySQL), <text:span text:style-name="T4">clé/valeur</text:span> (Redis), en <text:span text:style-name="T4">colonnes</text:span> (Cassandra) ou <text:span text:style-name="T4">orientée documents</text:span> (MongoDB, ElasticSearch).</text:p>
<text:bookmark text:name="ref-sessions" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Sessions utilisateur</text:h>
<text:bookmark text:name="ref-logs" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Tracer les actions</text:h><text:p text:style-name="TexteCourant">importants pour retrouver des problèmes
contexte où plein de personnes accèdent à une application, font plein de trucs
(ça dépasse l&#8217;échelle de compréhension d&#8217;un cerveau)</text:p>
<text:bookmark text:name="ref-tests" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Vers un code réutilisable et testable</text:h><text:bookmark text:name="ref-modulariser_le_code_des_routes" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Modulariser le code des routes</text:h><text:p text:style-name="TexteCourant">but est de rendre une fonction de render la plus fine possible</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">middlewares</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">initialisation</text:p>
</text:list-item></text:list>
<text:bookmark text:name="ref-tester_le_code_indépendamment_du_framework" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Tester le code indépendamment du framework</text:h><text:p text:style-name="TexteCourant">mocha, chai, bon duo</text:p>
<text:bookmark text:name="ref-tester_les_aspects_cruciaux_du_front_end" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Tester les aspects cruciaux du front-end</text:h><text:p text:style-name="TexteCourant">Cf. chapter-09/karma</text:p>
<text:bookmark text:name="ref-déployer_automatiquement" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Déployer automatiquement</text:h><text:p text:style-name="TexteCourant">Cf. chapter-06</text:p>
<text:bookmark text:name="ref-advanced" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Pour aller plus loin</text:h><text:bookmark text:name="ref-advanced.server" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Pourquoi lancer un serveur ?</text:h><text:p text:style-name="TexteCourant">Il y a des environnements ou des logiciels comme Apache ou Nginx intègrent
notre langage de programmation avec des modules, par exemple PHP avec le <text:span text:style-name="CodeDansTexte">mod_php</text:span>
ou Perl avec le <text:span text:style-name="CodeDansTexte">mod_cgi</text:span>.
Les requêtes entrantes sont dirigées vers un script que le module interprète
et retourne une réponse, dynamiquement.</text:p>
<text:p text:style-name="TexteCourant">Le <text:span text:style-name="T7">script PHP est interprété à chaque requête</text:span> et tout cette représentation
est détruite une fois la réponse envoyée&#160;— mémoire, valeurs des variables, configuration.
Il faut recourir à un ensemble de modules additionnels pour optimiser ce gâchis
de ressources informatiques&#160;— cache d&#8217;interprétation, cache applicatif, cache de configuration.</text:p>
<text:p text:style-name="TexteCourant">Démarrer un serveur HTTP dans le langage de notre application nous éloigne de
ce modèle coûteux et nous rapproche d&#8217;un fonctionnement plus performant, organisé
autour de ces 3 piliers&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">Node et Apache/Nginx fonctionnent ensemble</text:span>&#160;— ils se font le relais des requêtes
et des réponses car ils parlent le même protocole&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">le serveur Node est préchauffé</text:span>&#160;— une requête entrante trouve une application
déjà opérationnelle, déjà configurée, déjà connectée à une base de données
et prête à répondre&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">le code exécuté est spécifique à la requête</text:span>&#160;— l&#8217;application reçoit chaque
requête de manière indépendante en ayant le minimum d&#8217;effort à faire pour
générer une réponse.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">Autrement dit, ce modèle réduit le temps de parcours entre une requête entrante
et une réponse sortante.
Ça a un impact significatif sur le temps d&#8217;apparition de l&#8217;icône de chargement
côté client.</text:p>
<text:bookmark text:name="ref-http" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Comprendre le modèle HTTP</text:h><text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">quand une requête arrive ça veut dire quoi</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">browser&#160;: GET <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://monsite.com" text:visited-style-name="Visited_20_Internet_20_Link">http://monsite.com</text:a></text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">montrer une requête HTTP brute</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">surprise&#160;: c&#8217;est que du texte</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">c&#8217;est interprété de deux côtés&#160;: par le client (programme qui demande, adresse une requête&#8201;&#8212;&#8201;un navigateur web c&#8217;est un type de client) et le serveur (programme qui reçoit et renvoie des réponses)</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">et une réponse ça ressemble à quoi&#160;?</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">dans la réponse y&#8217;a un statut (200, etc) (c&#8217;est pour ça 404)</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">dans la réponse y&#8217;a un type de contenu (Content-Type)</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">le corps de la réponse peut être du texte, qui suit un certain format (HTML, texte, XML, JSON, image/jpg, image/png)</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">le client interprète en fonction de ses capacités et d&#8217;hypothèses pragmatiques</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">un navigateur web&#160;: il interprète le HTML, l&#8217;affiche, et demande les ressources listées dans les différentes balises (img, video, audio)</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">fait autant de requêtes que nécessaire pour les obtenir et les afficher</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">attention s&#8217;il y en a trop, ça fait le même effet que retirer un courier à la Poste à la mauvaise heure</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">le poids des ressources à transférer a un impact (plus c&#8217;est lourd, plus c&#8217;est gros, plus c&#8217;est long à charger&#160;— c&#8217;est amplifié par la qualité et le débit de la connexion Internet)</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">[TIP]&#160;: les WebView ce sont des navigateurs web, genre pour iOS, Android etc.</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">un client en ligne de commande (curl, wget)&#160;: il n&#8217;interpète pas, récupère juste</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">c&#8217;est utilisé pour faire du scrapping</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">c&#8217;est utilisé pour donner ça à d&#8217;autres programmes (enjoliver le résultat, extraire des informations)</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">voir au chapitre 8 pour en savoir plus sur le fonctionnement d&#8217;applications en ligne de commande</text:p>
</text:list-item></text:list>
<text:p text:style-name="RemarqueFigureNumero">(chapter-07/images/httpstat.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 56. Temporalité de l&#8217;exécution d&#8217;une requête HTTP et des entêtes de réponse.</text:p>
<text:p text:style-name="TexteCourant"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/jshttp" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/jshttp</text:a></text:p>
<text:bookmark text:name="ref-authentication" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Authentifier des utilisateurs</text:h>
<text:bookmark text:name="ref-api" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">API REST : l&#8217;application web orientée données</text:h>
<text:bookmark text:name="ref-job-queue" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Déléguer le travail aux files d&#8217;attente</text:h>
<text:bookmark text:name="ref-lambda" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Une application minimaliste avec les Lambda</text:h><text:p text:style-name="TexteCourant"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/micro" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/micro</text:a></text:p>
<text:bookmark text:name="ref-https" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Et HTTPS dans tout ça ?</text:h>
<text:bookmark text:name="ref-conclusion_7" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Conclusion</text:h><text:p text:style-name="TexteCourant">TBD.</text:p>
<text:bookmark text:name="ref-chapter-08" /><text:p text:style-name="ChapitreNumero">8</text:p><text:h text:style-name="ChapitreTitre" text:outline-level="1">Créer un outil en ligne de commande</text:h><text:p text:style-name="TexteCourant">Créer un outil en ligne de commande est un savoir utile pour se forger nos
propres outils, automatiser des actions et mieux s&#8217;intégrer au
système d&#8217;exploitation.</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">Créer un script exécutable.</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Du script au programme interactif.</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Vers un code réutilisable et testable.</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Utilisation d’un framework d’application en ligne de commande.</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Gérer les chemins d&#8217;accès et les flux de données.</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Rendre le programme indépendant de Node.</text:p>
</text:list-item></text:list>
<text:p text:style-name="ChapitreIntroduction"><text:p text:style-name="TexteCourant">Ce chapitre est une invitation à créer des applications au plus proche des
systèmes d&#8217;exploitation&#160;; une chose dans laquelle Node excelle.</text:p>
<text:p text:style-name="TexteCourant">Nous apprendrons à passer d&#8217;un script Node ordinaire à un script qui
s&#8217;exécute comme un programme de notre système d&#8217;exploitation.</text:p>
<text:p text:style-name="TexteCourant">Nous renforcerons ce programme en améliorant son expérience utilisateur
mais aussi en le rendant robuste grâce aux tests et à l&#8217;écriture d&#8217;une
documentation minimaliste, générée automatiquement.</text:p>
<text:p text:style-name="TexteCourant">Enfin, nous verrons aussi comment aller plus loin en organisation son code
comme dans une véritable application, avec une compréhension plus poussée
des chemins d&#8217;accès et des traitements en continu sur des flux de données.</text:p></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Remarque</text:span> Versions de Node et npm</text:h><text:p text:style-name="Remarque">Le contenu de ce chapitre utilise les versions <text:span text:style-name="T7">Node v10</text:span> et <text:span text:style-name="T7">npm v6</text:span>.
Ce sont les versions stables recommandées en 2018.
J&#8217;explique comment les installer au <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 2</text:a>.</text:p>
<text:p text:style-name="TexteCourant">Un script en ligne de commande revient souvent à une installation globale
d&#8217;un module npm (<text:span text:style-name="CodeDansTexte">npm install --global &lt;module&gt;</text:span>).
Ce script prend aussi bien la forme d&#8217;un petit outil que d&#8217;une application complète.
Dans tous les cas, le terminal est l&#8217;interface d&#8217;affichage.</text:p>
<text:p text:style-name="TexteCourant">Node est particulièrement adapté à la création d&#8217;outils en ligne de commande
grâce à son modèle de gestion mémoire et de son processus unique.
Il doit toutefois partager la mémoire et les ressources de la machine avec
les autres programmes&#160;— à nous de faire le choix de la frugalité.</text:p>
<text:p text:style-name="TexteCourant">Ces outils nous servent à outiller nos projets, à créer des programmes autonomes,
des interfaces visuelles dans un terminal et à automatiser ce qu&#8217;il nous semble
juste d&#8217;automatiser.
Leur distribution sur le registre npm (cf. <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-05"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 5</text:a>)
les rend faciles d&#8217;accès et facile à partager.
Surtout après avoir appris à <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-bien les tests"  text:visited-style-name="Visited_20_Internet_20_Link">tester et à bien les documenter</text:a>.</text:p>
<text:bookmark text:name="ref-start" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Créer un script exécutable</text:h><text:p text:style-name="TexteCourant">La première étape est de transformer un script Node en un script Node exécutable.
Le système d&#8217;exploitation ne percevra plus le script comme un simple fichier texte
mais bel et bien comme un programme au même titre que l&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Nous allons apprendre à faire ce cheminement ensemble, jusqu&#8217;à rendre notre
code distribuable sous forme d&#8217;un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-modules"  text:visited-style-name="Visited_20_Internet_20_Link">module npm</text:a>
(cf. <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-05"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 5</text:a>).</text:p>
<text:bookmark text:name="ref-script" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Au départ, un simple script Node</text:h><text:p text:style-name="TexteCourant">Ce dont nous avons besoin pour démarrer, c&#8217;est d&#8217;un script Node que nous
pouvons appeler depuis notre terminal.
Nous allons placer l&#8217;exemple suivant dans le répertoire <text:span text:style-name="CodeDansTexte">bin</text:span>
(pour <text:span text:style-name="T4">binary</text:span> en anglais, c&#8217;est-à-dire <text:span text:style-name="T4">exécutable</text:span>).
Ça n&#8217;a pas d&#8217;incidence technique mais c&#8217;est une pratique courante au sein
de la communauté Node pour repérer plus facilement les exécutables
sans ambiguïté.</text:p>
<text:p text:style-name="CodeTitre">bin/time.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const date = new Date();<text:s text:c="20"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">const hour = date.getHours();</text:p><text:p text:style-name="Code">const minutes = date.getMinutes();</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(`Il est ${hour}h${minutes}.`);</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Crée un objet qui représente la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-date"  text:visited-style-name="Visited_20_Internet_20_Link">date</text:a> courante&#160;— cf. <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-03"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 3</text:a> pour se rafraichir la mémoire au sujet de cette API.<text:line-break/></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Jouer avec les exemples dans un terminal</text:h><text:p text:style-name="Remarque">Les exemples titrés d&#8217;un nom de fichier peuvent être installés sur votre ordinateur.
Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de
votre lecture pour voir ce qui change.</text:p>
<text:p text:style-name="Remarque">Installation des exemples via le module npm <text:span text:style-name="CodeDansTexte">nodebook</text:span>.</text:p><text:p text:style-name="RemarqueCode">$ npm install --global nodebook</text:p><text:p text:style-name="RemarqueCode">$ nodebook install chapter-08</text:p><text:p text:style-name="RemarqueCode">$ cd $(nodebook dir chapter-08)</text:p>
<text:p text:style-name="Remarque">La commande suivante devrait afficher un résultat qui confirme que vous êtes
au bon endroit&#160;:</text:p>
<text:p text:style-name="RemarqueCode">$ node hello.js</text:p>
<text:p text:style-name="Remarque">Suivez à nouveau les installations d&#8217;instruction pour rétablir les exemples
dans leur état initial.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exécution du script avec Node retourne la date et l&#8217;heure courante&#160;— selon
l&#8217;horloge de l&#8217;ordinateur qui exécute le code.</text:p>
<text:p text:style-name="Code">$ node bin/time.js</text:p><text:p text:style-name="Code">Il est 13h42.</text:p>
<text:bookmark text:name="ref-permissions" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Modifier les permissions du script</text:h><text:p text:style-name="TexteCourant">Les systèmes d&#8217;exploitation modernes distinguent les fichiers ordinaires
des fichiers exécutables.
L&#8217;appel à un fichier exécutable se fait sans avoir à connaître quoique ce soit
d&#8217;autre que son emplacement.</text:p>
<text:p text:style-name="TexteCourant">Essayons d&#8217;exécuter le script précédent pour nous en rendre compte.
pour ce faire, nous allons l&#8217;invoquer seulement avec son chemin
—&#160;ici, son chemin relatif&#160;:</text:p>
<text:p text:style-name="Code">$ ./bin/time.js</text:p><text:p text:style-name="Code">sh: permission denied: ./bin/time.js</text:p>
<text:p text:style-name="TexteCourant">Le système refuse de l&#8217;exécuter car les permissions du fichier ne sont pas
adéquates.
Comme nous ne les connaissons pas, utilisons la commande <text:span text:style-name="CodeDansTexte">ls</text:span> ainsi que
l&#8217;option <text:span text:style-name="CodeDansTexte">-l</text:span> pour afficher ses informations détaillées&#160;:</text:p>
<text:p text:style-name="Code">$ ls -l bin/time.js</text:p><text:p text:style-name="Code"><text:span text:style-name="CodeExergue">-rw-r--r--</text:span> oncletom<text:s text:c="2"/>staff<text:s text:c="2"/>175 Jun 14 13:47 bin/time.js</text:p>
<text:p text:style-name="TexteCourant">Cet affichage détaille les permissions du fichier, l&#8217;utilisateur et le groupe
propriétaire, son poids et enfin la date de dernière modification.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Déchiffrer</text:span> Lire les permissions Unix</text:h><text:p text:style-name="Remarque">Les permissions sont cryptiques à lire quand on tombe dessus pour la première fois.</text:p>
<text:p text:style-name="Remarque">Le premier caractère spécifie le type (fichier, répertoire, lien symbolique) et
ensuite, ce sont des blocs de 3 caractères qui décrivent les permissions de
l&#8217;utilisateur propriétaire, du groupe propriétaire et du reste des utilisateurs
du système d&#8217;exploitation.</text:p>
<text:p text:style-name="Remarque">Chaque bloc affiche <text:span text:style-name="CodeDansTexte">r</text:span> s&#8217;il est lisible, <text:span text:style-name="CodeDansTexte">w</text:span> s&#8217;il est modifiable et
<text:span text:style-name="CodeDansTexte">x</text:span> s&#8217;il est exécutable&#160;— c&#8217;est ce dernier qui nous intéresse.</text:p>
<text:p text:style-name="TexteCourant">Nous allons rendre le fichier exécutable (<text:span text:style-name="CodeDansTexte">+x</text:span>) pour notre utilisateur (<text:span text:style-name="CodeDansTexte">u</text:span>)
grâce à la commande <text:span text:style-name="CodeDansTexte">chmod</text:span>.
Je préfère utiliser cette notation pour car elle évite des effets de bord&#160;:</text:p>
<text:p text:style-name="Code">$ chmod u+x bin/time.js</text:p>
<text:p text:style-name="TexteCourant">L&#8217;utilisation renouvelée de la commande <text:span text:style-name="CodeDansTexte">chmod</text:span> confirme que la
permission <text:span text:style-name="T4">exécutable</text:span> du fichier a été attribuée à l&#8217;utilisateur propriétaire
du fichier&#160;:</text:p>
<text:p text:style-name="Code">$ ls -l bin/time.js</text:p><text:p text:style-name="Code">-rwxr--r-- oncletom<text:s text:c="2"/>staff<text:s text:c="2"/>175 Jun 14 13:47 bin/time.js</text:p>
<text:p text:style-name="TexteCourant">Nous sommes accueillis avec un nouveau message d&#8217;erreur lorsque nous
tentons d&#8217;exécuter le fichier <text:span text:style-name="CodeDansTexte">bin/time.js</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ ./bin/time.js</text:p><text:p text:style-name="Code">./bin/time.js: line 1: use strict: command not found</text:p><text:p text:style-name="Code">./bin/time.js: line 3: syntax error near unexpected token `('</text:p>
<text:p text:style-name="TexteCourant">La bonne nouvelle c&#8217;est que le fichier est exécutable.
Par contre, il semblerait que le système d&#8217;exploitation ait du mal
à interpréter le fichier.</text:p>
<text:bookmark text:name="ref-shebang" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Préciser le contexte d&#8217;exécution (<text:span text:style-name="T4">shebang</text:span>)</text:h><text:p text:style-name="TexteCourant">Donner les permissions d&#8217;exécution à un fichier ne suffit donc pas.
Nous avons perdu un élément contextuel en supprimant l&#8217;appel à <text:span text:style-name="CodeDansTexte">node</text:span>
dans l&#8217;exécution du script et nous allons voir comment rectifier le tir.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Interopérabilité</text:span> Un fonctionnement différent sous Windows</text:h><text:p text:style-name="Remarque">Ce mécanisme est n&#8217;est pas compris par le système d&#8217;exploitation Windows.
Ce dernier utilise une surcouche qui serait trop longue à expliquer dans
cet ouvrage.</text:p>
<text:p text:style-name="Remarque">Je recommande cependant de conserver le contexte d&#8217;exécution sous Windows
car l&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span> gère l&#8217;interopérabilité pour nous.
Nous verrons comment dans la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-package.json"  text:visited-style-name="Visited_20_Internet_20_Link">section suivante</text:a>.</text:p>
<text:p text:style-name="TexteCourant">Le caractère <text:span text:style-name="CodeDansTexte">#</text:span> placé en début de ligne d&#8217;un script système signale une ligne
placée en commentaire.
C&#8217;est l&#8217;équivalent de <text:span text:style-name="CodeDansTexte">//</text:span> en ECMAScript.
Il existe un cas spécial&#160;: lorsque le caractère <text:span text:style-name="CodeDansTexte">#</text:span> est suivi d&#8217;un <text:span text:style-name="CodeDansTexte">!</text:span>
<text:span text:style-name="T4">et</text:span> lorsqu&#8217;il s&#8217;agit de la première ligne d&#8217;un fichier.
Le contenu du commentaire est alors utilisé par le système d&#8217;exploitation
pour déterminer quel programme utiliser pour interpréter le script.
C&#8217;est ce qu&#8217;on appelle <text:span text:style-name="T4">shebang</text:span> (en anglais).</text:p>
<text:p text:style-name="TexteCourant">Modifions le script de la section précédente pour ajouter le <text:span text:style-name="T4">shebang</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">bin/time-sh.js</text:p><text:p text:style-name="Code">#!/usr/bin/env node<text:s text:c="3"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const date = new Date();</text:p><text:p text:style-name="Code">...</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Le programme <text:span text:style-name="CodeDansTexte">/usr/bin/env</text:span> est exécuté avec un argument, <text:span text:style-name="CodeDansTexte">node</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Le programme <text:span text:style-name="CodeDansTexte">/usr/bin/env</text:span> crée un nouvel environnement d&#8217;exécution
et le reste du script est passé au programme référencé en argument&#160;— ici, <text:span text:style-name="CodeDansTexte">node</text:span>.
Ce nouvel environnement dure le temps de l&#8217;exécution du script.</text:p>
<text:p text:style-name="Code">$ ./bin/time-sh.js</text:p><text:p text:style-name="Code">Il est 13h42.</text:p>
<text:p text:style-name="TexteCourant">Le dernier effort à faire pour distribuer ce script exécutable de manière
interopérable est de le lier à un
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-package.json"  text:visited-style-name="Visited_20_Internet_20_Link">module npm</text:a>.</text:p>
<text:bookmark text:name="ref-package.json" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Faire le lien avec un module npm</text:h><text:p text:style-name="TexteCourant">Nous avons vu dans le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-05"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 5</text:a>
que Node utilisait la valeur <text:span text:style-name="CodeDansTexte">main</text:span> du fichier <text:span text:style-name="CodeDansTexte">package.json</text:span> pour déterminer
quel script inclure en faisant <text:span text:style-name="CodeDansTexte">require('&lt;module&gt;')</text:span> ou <text:span text:style-name="CodeDansTexte">import &lt;module&gt; from '&lt;module&gt;'</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Le champ <text:span text:style-name="CodeDansTexte">bin</text:span> est une transposition de <text:span text:style-name="CodeDansTexte">main</text:span> pour associer un script
exécutable à notre module npm.
Par exemple&#160;:</text:p>
<text:p text:style-name="CodeTitre">package.json</text:p><text:p text:style-name="Code">{</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"name": "nodebook.chapter-08",</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"bin": "examples/bin/time-sh.js",</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"...": "..."</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant">Le moyen le plus simple pour tester l&#8217;intégration de l&#8217;exécutable
avec notre système d&#8217;exploitation est de
l'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install.global"  text:visited-style-name="Visited_20_Internet_20_Link">installer globalement</text:a>.
L&#8217;exécutable <text:span text:style-name="CodeDansTexte">npm</text:span> sait aussi installer un module à partir
d&#8217;un chemin vers un répertoire contenant un fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ npm install --global .</text:p>
<text:p text:style-name="TexteCourant">Par défaut, l&#8217;exécutable est disponible sous le nom du module en question,
déclaré dans le champ <text:span text:style-name="CodeDansTexte">name</text:span> du fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ nodebook.chapter-08</text:p><text:p text:style-name="Code">Il est 13h42.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Un autre nom ou plusieurs exécutables</text:h><text:p text:style-name="Remarque">Le champ <text:span text:style-name="CodeDansTexte">bin</text:span> s&#8217;écrit sous forme d&#8217;un objet si vous souhaitez utiliser
un autre nom que celui du module npm.
La clé correspond au nom de l&#8217;exécutable tel qu&#8217;il sera utilisable sur le
système tandis que la valeur contient le chemin d&#8217;accès au script exécutable.
Plusieurs exécutables sont alors installés si nous renseignons plusieurs
clés et valeurs.</text:p>
<text:p text:style-name="Remarque">package.json</text:p><text:p text:style-name="RemarqueCode">{</text:p><text:p text:style-name="RemarqueCode"><text:s text:c="2"/>"name": "nodebook.chapter-08",</text:p><text:p text:style-name="RemarqueCode"><text:s text:c="2"/>"bin": {</text:p><text:p text:style-name="RemarqueCode"><text:s text:c="4"/>"<text:span text:style-name="CodeExergue">quelle-heure-est-il</text:span>": "examples/bin/time-sh.js"</text:p><text:p text:style-name="RemarqueCode"><text:s text:c="2"/>}</text:p><text:p text:style-name="RemarqueCode">}</text:p>
<text:p text:style-name="Remarque">L&#8217;installation de l&#8217;exécutable <text:span text:style-name="CodeDansTexte">examples/bin/time-sh.js</text:span> se fera sous le nom <text:span text:style-name="CodeDansTexte">quelle-heure-est-il</text:span>.</text:p>
<text:bookmark text:name="ref-interactive" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Du script au programme interactif</text:h><text:p text:style-name="TexteCourant">Nous avons appris à transformer un script Node ordinaire en un script
exécutable et prêt à le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-publish"  text:visited-style-name="Visited_20_Internet_20_Link">publier sur un registre npm</text:a>
(cf. <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-05"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 5</text:a>).</text:p>
<text:p text:style-name="TexteCourant">Cette section se focalise sur l&#8217;enrichissement d&#8217;un tel script pour en faire
une application plus complète, interactive et robuste.
De quoi se constituer un outillage sur mesure, partageable avec le reste de
notre équipe et de l&#8217;écosystème de modules npm.</text:p>
<text:bookmark text:name="ref-args" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Utiliser des arguments et des options</text:h><text:p text:style-name="TexteCourant">Nous avons vu comment récupérer les arguments d&#8217;un script Node
en découvrant le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">process</text:span></text:a>
au <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-04"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 4</text:a>
—&#160;un des nombreux modules fournis avec chaque installation de Node.
Pour rappel, la variable <text:span text:style-name="CodeDansTexte">process.argv</text:span> est un tableau qui contient tous
les arguments passés au script principal&#160;:</text:p>
<text:p text:style-name="CodeTitre">options/intro.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const args = process.argv.slice(2);</text:p><text:p text:style-name="Code">console.log(args);</text:p>
<text:p text:style-name="TexteCourant">Ce qui donne le résultat suivant quand nous lançons ce script dans un terminal&#160;:</text:p>
<text:p text:style-name="Code">$ node options/intro.js --country FR --fast</text:p><text:p text:style-name="Code">[ '--country', 'FR', '--fast' ]</text:p>
<text:p text:style-name="TexteCourant">Ce tableau est un peu "léger" car il se contente de retourner les arguments,
sans compréhension de la logique recherchée.
C&#8217;est à nous de faire la démarche de dire que <text:span text:style-name="CodeDansTexte">FR</text:span> est une valeur
associée à <text:span text:style-name="CodeDansTexte">--country</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Dans le contexte des outils en ligne de commande,
les arguments et les options sont des paramètres qui sont interprétées
par le programme pour contextualiser son action.
Ils fonctionnent un peu comme des arguments de
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-function"  text:visited-style-name="Visited_20_Internet_20_Link">fonction</text:a> et des paramètres d&#8217;URL.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;enjeu des arguments et des options est de les
<text:span text:style-name="T7">transformer en une structure de données</text:span> afin de les passer en tant
que paramètres d&#8217;une fonction.</text:p>
<text:p text:style-name="TableauTitre">Table 21. Représentation des arguments et des options entre un outil en ligne de commande, une fonction et une URL.</text:p><table:table table:style-name="Tableau1"><table:table-column />,<table:table-column />,<table:table-column /><table:table-row><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p></text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Options</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Arguments</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Fonction</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">prog({country: 'FR', 'fast': true})</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">prog('FR', 'fast')</text:span></text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Ligne de commande</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">prog --country FR --fast</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">prog FR fast</text:span></text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>URL</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">prog/?country=FR&amp;fast=true</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">prog/FR/fast</text:span></text:p></table:table-cell></table:table-row></table:table>
<text:p text:style-name="TexteCourant">Nous allons utiliser le module npm <text:span text:style-name="T4">minimist</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/minimist" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/minimist</text:a></text:span>)
dans les exemples suivants.
Il prend en charge la complexité de l&#8217;interprétation de <text:span text:style-name="CodeDansTexte">process.argv</text:span> et je
le trouve robuste, bien testé et minimaliste.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Histoire</text:span> Au commencement était <text:span text:style-name="CodeDansTexte">getopt</text:span></text:h><text:p text:style-name="Remarque"><text:span text:style-name="CodeDansTexte">getopt</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://linux.die.net/man/3/getopt" text:visited-style-name="Visited_20_Internet_20_Link">https://linux.die.net/man/3/getopt</text:a></text:span>) est le programme Linux
qui sert à l&#8217;analyse des arguments et des options.
Les modules npm se calquent sur son modèle de fonctionnement.</text:p>
<text:bookmark text:name="ref-args.options" /><text:p text:style-name="TexteCourant">Commençons par les <text:span text:style-name="T7">options</text:span> et voyons ce que <text:span text:style-name="T4">minimist</text:span> affiche&#160;:</text:p>
<text:p text:style-name="Code">$ node options/parse.js --country FR --fast</text:p><text:p text:style-name="Code">{ _: [], country: 'FR', fast: true }<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> La valeur <text:span text:style-name="CodeDansTexte">_</text:span> contient les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-args.arguments"  text:visited-style-name="Visited_20_Internet_20_Link">arguments</text:a> d&#8217;exécution&#160;— nous y reviendrons.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Les options sont adaptées pour <text:span text:style-name="T7">nommer des paramètres facultatifs</text:span> dont
l&#8217;ordre n&#8217;a pas d&#8217;importance, sous forme d&#8217;un "interrupteur" dans le cas
d&#8217;un booléen ou d&#8217;une valeur&#160;— nombre ou chaîne de caractères, peu importe.</text:p>
<text:p text:style-name="CodeTitre">options/parse.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const parse = require('minimist');</text:p><text:p text:style-name="Code">const args = parse(process.argv.slice(2));</text:p><text:p text:style-name="Code">console.log(args);</text:p>
<text:p text:style-name="TexteCourant">Les options s&#8217;écrivent sous une <text:span text:style-name="T7">forme raccourcie</text:span> (<text:span text:style-name="T4">alias</text:span>).
Un alias réduit l&#8217;encombrement visuel et est signalé avec un seul tiret
(au lieu de deux pour leur forme complète)&#160;:</text:p>
<text:p text:style-name="Code">$ node options/alias.js <text:span text:style-name="CodeExergue">-c</text:span> FR</text:p><text:p text:style-name="Code">{ _: [], c: 'FR', country: 'FR' }</text:p>
<text:p text:style-name="CodeTitre">options/alias.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const parse = require('minimist');</text:p><text:p text:style-name="Code">const alias = { 'c': 'country' }; <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const args = parse(process.argv.slice(2), { alias });</text:p><text:p text:style-name="Code">console.log(args);<text:s text:c="16"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Définition de l&#8217;option <text:span text:style-name="CodeDansTexte">-c</text:span> en tant qu&#8217;alias de <text:span text:style-name="CodeDansTexte">--country</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> L&#8217;affichage représenté à la fois la valeur de l&#8217;option et la valeur de l&#8217;alias.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">La lecture est rendue plus difficile pour celui ou celle qui n&#8217;a pas lu
le manuel d&#8217;utilisation en détail&#160;— ce qui est souvent le cas, surtout
pour des personnes qui découvrent un nouveau logiciel.</text:p>
<text:p text:style-name="TexteCourant">J&#8217;ai tendance à utiliser les alias pour les options principales ou importantes.
Je privilégie la forme longue dans les exemples et dans la documentation
afin d&#8217;augmenter les chances de compréhension.</text:p>
<text:p text:style-name="TexteCourant">Les <text:span text:style-name="T7">valeurs par défaut</text:span> simplifient le paramétrage en rendant certaines
valeurs implicites&#160;:</text:p>
<text:p text:style-name="Code">$ node options/defaults.js --fast</text:p><text:p text:style-name="Code">{ _: [], country: 'FR', fast: true } <text:span text:style-name="PuceCode">1</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> La valeur <text:span text:style-name="CodeDansTexte">country</text:span> affiche une valeur alors que nous ne l&#8217;avons pas spécifié dans la commande.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">L&#8217;enjeu réside alors dans l&#8217;utilisation des valeurs à bon escient, pour
que le programme fasse ce qui est attendu d&#8217;un point de vue utilisateur.
Le paramétrage est similaire à celui des <text:span text:style-name="T4">alias</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">options/defaults.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const parse = require('minimist');</text:p><text:p text:style-name="Code">const options = {defaults: {country: 'FR'}};<text:s text:c="6"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const args = parse(process.argv.slice(2), options);</text:p><text:p text:style-name="Code">console.log(args);</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> L&#8217;option <text:span text:style-name="CodeDansTexte">--country</text:span> aura <text:span text:style-name="CodeDansTexte">FR</text:span> comme valeur par défaut.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Un autre concept utile est celui des <text:span text:style-name="T7">types</text:span>.
Nous définissons explicitement nos attentes sur ce que telle ou telle option
est censée recevoir&#160;:</text:p>
<text:p text:style-name="Code">$ node options/types.js --country --fast furious<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">{ _: [ 'furious' ], fast: true, country: '' }</text:p><text:p text:style-name="Code">$ node options/types.js --country FR</text:p><text:p text:style-name="Code">{ _: [], fast: false, country: 'FR' }<text:s text:c="13"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Omission de la valeur de <text:span text:style-name="CodeDansTexte">--option</text:span> et tentative d&#8217;assignation de valeur à l&#8217;option booléenne <text:span text:style-name="CodeDansTexte">--fast</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Une vaut implicitement <text:span text:style-name="CodeDansTexte">false</text:span> par défaut quand elle est typée comme booléenne.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple précédent renforce nos attentes&#160;: l&#8217;option <text:span text:style-name="CodeDansTexte">--country</text:span> sans valeur
ne sera pas comprise comme un booléen et au contraire, l&#8217;option booléenne <text:span text:style-name="CodeDansTexte">--fast</text:span>
n&#8217;accepte pas de valeur&#160;— cette dernière est interprétée
comme un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-args.arguments"  text:visited-style-name="Visited_20_Internet_20_Link">argument</text:a>.
Nous allons nous y intéresser de suite après.</text:p>
<text:p text:style-name="CodeTitre">options/types.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const argv = process.argv.slice(2);</text:p><text:p text:style-name="Code">const parse = require('minimist');</text:p><text:p text:style-name="Code">const string = ['country'];</text:p><text:p text:style-name="Code">const boolean = ['fast'];</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(parse(argv, { string, boolean }));</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">--country FR</text:span>, <text:span text:style-name="CodeDansTexte">-c FR</text:span></text:span><text:line-break/><text:tab/>Un nombre ou une chaîne de caractères.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">--country FR UK</text:span>, <text:span text:style-name="CodeDansTexte">--country FR --country UK</text:span></text:span><text:line-break/><text:tab/>Un ou plusieurs nombres ou chaînes de caractères.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">--fast</text:span>, <text:span text:style-name="CodeDansTexte">--no-fast</text:span>, <text:span text:style-name="CodeDansTexte">-f</text:span></text:span><text:line-break/><text:tab/>Un booléen dont la valeur vaut <text:span text:style-name="CodeDansTexte">true</text:span>.
La valeur vaut <text:span text:style-name="CodeDansTexte">false</text:span> quand l&#8217;option débute avec <text:span text:style-name="CodeDansTexte">no-</text:span>.<text:line-break/>
Utile quand nous avons besoin d&#8217;activer ou de désactiver quelque chose.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">--verbose --verbose</text:span>, <text:span text:style-name="CodeDansTexte">-vv</text:span></text:span><text:line-break/><text:tab/>Certaines librairies utilisent la répétition d&#8217;un booléen comme un compteur.
Auquel cas, la notation <text:span text:style-name="CodeDansTexte">--verbose --verbose</text:span> correspondrait à la
valeur <text:span text:style-name="CodeDansTexte">{verbose: 2}</text:span>.<text:line-break/>
Utile pour gérer la gradation d&#8217;une option comme la verbosité de l&#8217;affichage
logs par exemple.</text:p>
<text:bookmark text:name="ref-args.arguments" /><text:p text:style-name="TexteCourant">Les arguments sont adaptés à des situations où
<text:span text:style-name="T7">une ou plusieurs valeurs sont obligatoires</text:span>, n&#8217;ont pas besoin d&#8217;être nommées et
pour en accepter un nombre arbitraire.
Si les valeurs ne correspondent pas à une liste, le positionnement des arguments
est important car il détermine leur identification.
Les arguments se prêtent particulièrement bien à exprimer
une liste de fichiers ou d&#8217;identifiants.</text:p>
<text:p text:style-name="Code">$ node options/parse.js Europe/London</text:p><text:p text:style-name="Code">{ _: [ 'Europe/London' ] }</text:p>
<text:p text:style-name="TexteCourant">Le paramètre passé en argument est l&#8217;expression d&#8217;un fuseau horaire
selon l&#8217;organisme de standardisation <text:span text:style-name="T4">IANA</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://www.iana.org/time-zones" text:visited-style-name="Visited_20_Internet_20_Link">https://www.iana.org/time-zones</text:a></text:span>).
Une liste de fuseau se trouve sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://time.is/time_zones" text:visited-style-name="Visited_20_Internet_20_Link">https://time.is/time_zones</text:a></text:span>.<text:line-break/>L&#8217;idée est d&#8217;afficher l&#8217;heure courante selon le fuseau horaire donné en argument.
C&#8217;est un paramètre obligatoire qu&#8217;il n&#8217;est pas nécessaire de nommer&#160;:</text:p>
<text:p text:style-name="Code">$ node options/timezone.js Europe/London</text:p><text:p text:style-name="Code">22:29</text:p><text:p text:style-name="Code">$ node options/timezone.js America/New_York</text:p><text:p text:style-name="Code">17:29</text:p><text:p text:style-name="Code">$ node options/timezone.js Indian/Antananarivo<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">17/6/2018, 00:36</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Fuseau horaire de l&#8217;île de Madagascar.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Nous pouvons travailler avec les fuseaux horaires sans module additionnel,
grâce à la fonctionnalité de
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-intl.datetimeformat"  text:visited-style-name="Visited_20_Internet_20_Link">formatage internationalisé</text:a>
(cf. <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-03"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 3</text:a>)&#160;:</text:p>
<text:p text:style-name="CodeTitre">options/timezone.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const parse = require('minimist');</text:p><text:p text:style-name="Code">const args = parse(process.argv.slice(2));</text:p><text:p text:style-name="Code">const [timezone] = args._;<text:s text:c="26"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">if (!timezone) {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>throw Error('Merci d\'indiquer un fuseau horaire :-)');</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const options = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>timeZone: timezone,</text:p><text:p text:style-name="Code"><text:s text:c="2"/>hour: 'numeric', minute: 'numeric', hour12: false <text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const text = new Date().toLocaleDateString('fr-FR', options);</text:p><text:p text:style-name="Code">console.log(text);<text:s text:c="34"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Nous assignons à <text:span text:style-name="CodeDansTexte">timezone</text:span> la première valeur du tableau d&#8217;arguments.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Configuration des préférences d&#8217;affichage de l&#8217;heure.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Utilisation de la méthode <text:span text:style-name="CodeDansTexte">toLocaleDateString()</text:span> avec nos options pour afficher la date courante.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Cet exemple se transformerait de la manière suivante si nous souhaitions
étendre l&#8217;affichage de l&#8217;heure à autant de fuseaux horaires que voulus&#160;:</text:p>
<text:p text:style-name="Code">$ node options/timezones.js Europe/London America/New_York</text:p><text:p text:style-name="Code">Europe/London : 22:29</text:p><text:p text:style-name="Code">America/New_York : 17:29</text:p>
<text:p text:style-name="CodeTitre">options/timezones.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const parse = require('minimist');</text:p><text:p text:style-name="Code">const args = parse(process.argv.slice(2));</text:p><text:p text:style-name="Code">const timezones = args._;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const output = timezones.map(timeZone =&gt; {<text:s text:c="14"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>const date = new Date().toLocaleDateString('fr-FR', {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>timeZone,</text:p><text:p text:style-name="Code"><text:s text:c="4"/>hour: 'numeric', minute: 'numeric', hour12: false</text:p><text:p text:style-name="Code"><text:s text:c="2"/>});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>return `${timeZone} : ${date}`;<text:s text:c="23"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(output.join('\n'));<text:s text:c="25"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Nous constituons un nouveau tableau en itérant sur chacun des arguments.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Valeur de retour utilisée dans le nouveau tableau <text:span text:style-name="CodeDansTexte">output</text:span>&#160;— cf. <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-array"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 3</text:a>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Le tableau est joint pour constituer une chaîne de caractères multilignes.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Ce script accepte un nombre indéfini d&#8217;arguments et son temps d&#8217;exécution
dépendra de la longueur de cette liste.
Elle n&#8217;a d&#8217;ailleurs pas forcément à être connue à l&#8217;avance et les valeurs
s&#8217;obtiennent dynamiquement, en les sourçant depuis ce fichier, par exemple&#160;:</text:p>
<text:p text:style-name="CodeTitre">options/zones.txt</text:p><text:p text:style-name="Code">Europe/London</text:p><text:p text:style-name="Code">America/New_York</text:p>
<text:p text:style-name="TexteCourant">Le contenu du fichier s&#8217;obtient d&#8217;une traite en bash avec l&#8217;utilisation combinée
de capture de valeur (<text:span text:style-name="CodeDansTexte">$(&#160;)</text:span>) et de l&#8217;opérateur de redirection <text:span text:style-name="CodeDansTexte">&lt;</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ node options/timezones.js $(&lt; options/zones.txt)</text:p><text:p text:style-name="Code">Europe/London : 22:29</text:p><text:p text:style-name="Code">America/New_York : 17:29</text:p>
<text:p text:style-name="TexteCourant">C&#8217;est simple mais le fichier doit être lu
dans son intégralité et copié entièrement dans la mémoire de Node avant d&#8217;en
faire quelque chose.
Une approche plus économique est d&#8217;utiliser les
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-stream"  text:visited-style-name="Visited_20_Internet_20_Link">streams</text:a> (cf. <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-03"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 3</text:a>.
Nous parlerons plus en détail de cette technique dans la section
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-streaming"  text:visited-style-name="Visited_20_Internet_20_Link">utiliser les flux de données</text:a> de ce même
chapitre.</text:p>
<text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">prog [argument1, &#8230;&#8203;]</text:span></text:span><text:line-break/><text:tab/>L&#8217;ordre de placement étant important, les arguments facultatifs doivent
être placés à droite des arguments obligatoires.</text:p><text:p text:style-name="TexteCourant">
<text:span text:style-name="T7"><text:tab/><text:span text:style-name="CodeDansTexte">prog sous-commande [argument1, &#8230;&#8203;]</text:span></text:span><text:line-break/><text:tab/>C&#8217;est un cas particulier pour découper un programme complet en plusieurs
domaines d&#8217;action.<text:line-break/>
Le premier argument est alors utilisé comme identifiant d&#8217;action,
avec ses propres arguments et options.</text:p>
<text:bookmark text:name="ref-args.subcommand" /><text:p text:style-name="TexteCourant">L&#8217;utilisation des sous-commandes est la bienvenue pour organiser des actions
de manière indépendante, là où les choses deviendraient implicites et chaotiques
avec les options.
C&#8217;est l&#8217;équivalent d&#8217;une <text:span text:style-name="T4">route</text:span> dans une
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-07"  text:visited-style-name="Visited_20_Internet_20_Link">application web</text:a> (cf. <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-07"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 7</text:a>).</text:p>
<text:p text:style-name="TexteCourant">Les commandes suivantes illustrent la génération de résultats aléatoires.
Leur nature varie en fonction de la sous-commande employée&#160;;</text:p>
<text:p text:style-name="Code">$ node options/random.js number</text:p><text:p text:style-name="Code">51151</text:p><text:p text:style-name="Code">$ node options/random.js words 2</text:p><text:p text:style-name="Code">streamline THX</text:p>
<text:p text:style-name="TexteCourant">Nous associons une fonction différente à chaque sous-commande pour
renforcer cette notion d&#8217;actions indépendantes mais qui partagent
les options et arguments du script.</text:p>
<text:p text:style-name="CodeTitre">options/random.js</text:p><text:p text:style-name="Code">const {random} = require('faker/locale/fr');</text:p><text:p text:style-name="Code">const args = require('minimist')(process.argv.slice(2));</text:p><text:p text:style-name="Code">const [action, ...actionArgs] = args._;<text:s text:c="15"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const number = () =&gt; random.number();<text:s text:c="17"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">const words = (count=5) =&gt; random.words(count);<text:s text:c="7"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">const log = (result) =&gt; console.log(result);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">if (action === 'words')<text:s text:c="2"/>log(words(...actionArgs));<text:s text:c="3"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code">if (action === 'number') log(number());</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> L&#8217;action est le premier argument&#160;; le reste est accumulé dans le tableau <text:span text:style-name="CodeDansTexte">actionArgs</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Fonction qui retourne un nombre aléatoire.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Fonction qui retourne un nombre défini de mots&#160;— 5 par défaut.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Chaque argument qui suit la sous-commande correspondra ainsi à un argument de la fonction <text:span text:style-name="CodeDansTexte">words</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">L'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-05"  text:visited-style-name="Visited_20_Internet_20_Link">exécutable <text:span text:style-name="CodeDansTexte">npm</text:span></text:a> est un exemple d&#8217;application
exécutable qui repose sur des sous-commandes
pour déterminer quelle action exécuter&#160;— installer un module, lancer
une recherche ou encore initialiser un projet, entre autres.</text:p>
<text:p text:style-name="TexteCourant">Des applications en ligne de commande plus complexes soulèvent de nouveaux
besoins pour éviter les effets de bord et pour faciliter la modularité de
notre code&#160;: la <text:span text:style-name="T7">validation</text:span> des paramètres, une gestion plus fine des
sous-commandes ainsi que la <text:span text:style-name="T7">génération automatique de la documentation</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Si ces choses vous intéressent, je vous invite à vous rendre à la section
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-application"  text:visited-style-name="Visited_20_Internet_20_Link">utilisation d&#8217;un framework</text:a>.</text:p>
<text:bookmark text:name="ref-colours" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Améliorer la lisibilité grâce aux couleurs</text:h><text:p text:style-name="TexteCourant">Les couleurs vont nous aider à faire ressortir, différencier et distinguer
des éléments au sein d&#8217;une interface monochrome.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-08/images/cli-colors.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 57. Exemple d&#8217;utilisation de couleurs dans un terminal.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;alternance de texte coloré et monochrome a été créée à partir du
script suivant&#160;:</text:p>
<text:p text:style-name="CodeTitre">colors/ansi.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log('\x1B[31mHello\x1B[0m World');</text:p>
<text:p text:style-name="TexteCourant">Des combinaisons de caractères ont l&#8217;air de produire cet effet.
Mais comment&#160;?</text:p>
<text:p text:style-name="TexteCourant">Par défaut, tout caractère envoyé vers la console est affiché.
Un mécanisme de <text:span text:style-name="T7">commandes</text:span> s&#8217;active en envoyant un caractère invisible
suivi d&#8217;une série de symboles.
Ces commandes changent la couleur du texte, sa couleur de fond, l&#8217;emphase,
le soulignement et même la position du curseur.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">ANSI</text:span> Structure d&#8217;une commande d&#8217;échappement</text:h><text:p text:style-name="Remarque">Le caractère d'<text:span text:style-name="T4">échappement</text:span> est un caractère invisible, ici représenté
en hexadécimal par <text:span text:style-name="CodeDansTexte">\x1B</text:span>.
Il existe sur nos claviers d&#8217;ordinateur&#160;: c&#8217;est la fameuse touche
<text:span text:style-name="Menu">[ECHAP]</text:span> ou <text:span text:style-name="Menu">[ESC]</text:span>&#160;!<text:line-break/>Une commande suit le caractère <text:span text:style-name="CodeDansTexte">[</text:span> jusqu&#8217;au caractère <text:span text:style-name="CodeDansTexte">m</text:span>.
Les commandes composées utilisent le caractère <text:span text:style-name="CodeDansTexte">;</text:span> comme séparateur.</text:p>
<text:p text:style-name="Remarque">Pour résumer, une commande a la forme <text:span text:style-name="CodeDansTexte">&lt;ECHAP&gt;[&lt;commande&gt;m</text:span> ou
<text:span text:style-name="CodeDansTexte">&lt;ECHAP&gt;[&lt;commande;commande;&#8230;&#8203;&gt;m</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Pour en savoir plus à propos de cette syntaxe, je vous recommande la lecture de
la page Wikipédia <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://en.wikipedia.org/wiki/ANSI_escape_code" text:visited-style-name="Visited_20_Internet_20_Link">https://en.wikipedia.org/wiki/ANSI_escape_code</text:a></text:span> (en anglais).
C&#8217;est comme ça que j&#8217;ai tout appris.</text:p>
<text:p text:style-name="TexteCourant">Nous pouvons être quasiment certain·e que les 8 couleurs principales et les
8 couleurs vives s&#8217;affichent dans à peu près tous les terminaux.
Ça vaut aussi pour leur utilisation en couleur de fond.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-08/images/cli-colors-all.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 58. Affichage des 8 couleurs principales et des 8 couleurs vives.</text:p>
<text:p text:style-name="CodeTitre">colors/all.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const colors = [30, 31, 32, 33, 34, 35, 36, 37];</text:p><text:p text:style-name="Code">const brightColors = [90, 91, 92, 93, 94, 95, 96, 97];</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">[...colors, ...brightColors].forEach(code =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const color = `\x1B[${code}m`;<text:s text:c="12"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>const bgColor = `\x1B[30;${code + 10}m`;<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>const reset = '\x1B[0m';<text:s text:c="18"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(`${color}Hello ${bgColor}World${reset}`);</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Couleur d&#8217;affichage du texte.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Couleur de fond du texte tandis que la couleur de texte est en noir (<text:span text:style-name="CodeDansTexte">30</text:span>).<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Remise à zéro de tous les styles.<text:line-break/></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Compatibilité</text:span> Combien de couleurs dans mon terminal ?</text:h><text:p text:style-name="Remarque">Les terminaux supportent un nombre limité de couleurs, au moins 8, en majorité 256
et parfois plusieurs millions selon le logiciel utilisé.
Le programme Linux et macOS <text:span text:style-name="CodeDansTexte">tput</text:span> sert à obtenir des informations à propos
du terminal, dont le nombre de couleurs supportées&#160;:</text:p>
<text:p text:style-name="RemarqueCode">$ tput colors</text:p><text:p text:style-name="RemarqueCode">256</text:p>
<text:p text:style-name="TexteCourant">Un autre type de commande sélectionne les couleurs dans une palette de 256 couleurs
mais aussi dans la <text:span text:style-name="T4">palette RGB</text:span> (<text:span text:style-name="T4">Red Green Blue</text:span>, <text:span text:style-name="T4">Rouge Vert Bleu</text:span> en français).
Ces commandes débutent par <text:span text:style-name="CodeDansTexte">[38;5</text:span> et <text:span text:style-name="CodeDansTexte">[38;2]</text:span>, respectivement&#160;:</text:p>
<text:p text:style-name="CodeTitre">colors/palette.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log('\x1B[38;5;213mHello\x1B[0m World');<text:s text:c="6"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log('\x1B[38;2;255;69;0mHello\x1B[0m World'); <text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Utilisation de la palette de couleurs 8 bits (256 couleurs) - <text:span text:style-name="CodeDansTexte">213</text:span> est un rose clair.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Utilisation de la palette de couleurs RGB (millions de couleurs)&#160;— <text:span text:style-name="CodeDansTexte">255,69,0</text:span> correspond au orange.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Le module npm <text:span text:style-name="T4">chalk</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/chalk" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/chalk</text:a></text:span>) facilite l&#8217;utilisation
des codes ANSI en leur donnant des libellés mémorisables, en gérant
la compatibilité du nombre de couleurs supportées par le terminal voire
en désactivant les couleurs si nécessaire.</text:p>
<text:p text:style-name="CodeTitre">colors/chalk.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {magentaBright, green, bgRed} = require('chalk');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(`${magentaBright('Hello')} World`); <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(`${green.italic('Hello')} World`);<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">console.log(`${bgRed('Hello')} World`);<text:s text:c="9"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Utilisation de la couleur vive magenta.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Utilisation de la couleur verte et de l&#8217;italique.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Utilisateur de la couleur de fond rouge.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Le module s&#8217;utilise aussi comme modèle avec les guillemets obliques,
ce qui augmente encore plus la clarté d&#8217;affichage&#160;:</text:p>
<text:p text:style-name="CodeTitre">colors/chalk-literal.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const chalk = require('chalk');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(chalk`{magentaBright Hello} World`);</text:p><text:p text:style-name="Code">console.log(chalk`{green.italic Hello} World`);</text:p><text:p text:style-name="Code">console.log(chalk`{bgRed Hello} World`);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(chalk`{rgb(255,69,0) Hello} World`);</text:p>
<text:bookmark text:name="ref-prompt" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Demander une série d&#8217;informations</text:h><text:p text:style-name="TexteCourant">Les programmes interactifs servent à demander des informations de manière
guidée à la personne utilisant l&#8217;exécutable,
en plus des <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-arguments"  text:visited-style-name="Visited_20_Internet_20_Link">arguments et options</text:a>.
Poser une série de question est une manière d&#8217;accompagner une personne
dans une décision, d&#8217;exposer des choix dynamiques et de réduire les erreurs
dans la création de fichiers, par exemple.</text:p>
<text:p text:style-name="Code">$ node prompt/intro.js</text:p><text:p text:style-name="Code">Quel est ton nom ? Thomas</text:p><text:p text:style-name="Code">Coucou Thomas !</text:p>
<text:p text:style-name="TexteCourant">Le module <text:span text:style-name="CodeDansTexte">readline</text:span> proposé par Node est peu connu.
Il sert à transformer les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-process.std"  text:visited-style-name="Visited_20_Internet_20_Link">flux d&#8217;entrée et de sortie</text:a>
(cf. <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-04"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 4</text:a>.
Le système de curseur sait mettre en pause, revenir en arrière et effacer tout
ou une partie d&#8217;une ligne, entre autres.
Ce module sait aussi poser des questions (!)&#160;:</text:p>
<text:p text:style-name="CodeTitre">prompt/intro.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const readline = require('readline');</text:p><text:p text:style-name="Code">const rl = readline.createInterface({<text:s text:c="13"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>input: process.stdin,</text:p><text:p text:style-name="Code"><text:s text:c="2"/>output: process.stdout</text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">rl.question('Quel est ton nom ? ', (answer) =&gt; {<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(`Coucou ${answer} !`);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>rl.close();<text:s text:c="37"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Création de l&#8217;interface qui s&#8217;intercale entre les flux d&#8217;entrée et de sortie&#160;— ici, l&#8217;entrée et la sortie standard.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> La fonction de callback est invoquée dès que l&#8217;utilisateur a saisi sa réponse.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> La méthode <text:span text:style-name="CodeDansTexte">close()</text:span> stoppe l&#8217;interface et rend la main au script&#160;— sans cet appel le script tournerait indéfiniment.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Nous allons utiliser le module npm <text:span text:style-name="T4">inquirer</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/inquirer" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/inquirer</text:a></text:span>)
dans la suite de cette section.
Il se base sur le module <text:span text:style-name="CodeDansTexte">readline</text:span> et <text:span text:style-name="T7">simplifie grandement l&#8217;interactivité</text:span>&#160;:
questions, listes à choix unique navigables au clavier, boîte à cocher,
confirmation, validation de réponses et exécution conditionnelle, si telle ou
telle question contient les valeurs qui nous intéressent, par exemple.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple précédent peut être réécrit de la sortie&#160;:</text:p>
<text:p text:style-name="CodeTitre">prompt/question.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {prompt} = require('inquirer');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const questions = [</text:p><text:p text:style-name="Code"><text:s text:c="2"/>{ name: 'name', message : 'Quel est ton nom ?' }, <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">];</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">prompt(questions).then(answers =&gt; {<text:s text:c="17"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(`Coucou ${answers.name} !`);<text:s text:c="10"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> La question est créée avec l&#8217;identifiant <text:span text:style-name="CodeDansTexte">name</text:span>&#160;— ça facilite l&#8217;utilisation des réponses.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Les résultats sont retournés dans une <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-promise"  text:visited-style-name="Visited_20_Internet_20_Link">promesse</text:a>&#160;— c&#8217;est plus élégant et pratique à gérer qu&#8217;un callback.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Les valeurs des réponses s&#8217;obtiennent grâce à leur identifiant.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Ce n&#8217;est pas beaucoup plus compliqué de poser plusieurs questions et de les
personnaliser avec les réponses des précédentes questions&#160;:</text:p>
<text:p text:style-name="Code">$ node prompt/questions.js</text:p><text:p text:style-name="Code">? Quel est ton nom ? Thomas</text:p><text:p text:style-name="Code">? Quel âge as-tu Thomas ? 35</text:p><text:p text:style-name="Code">Thomas, tu as 35 ans.</text:p>
<text:p text:style-name="CodeTitre">prompt/questions.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {prompt} = require('inquirer');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const questions = [</text:p><text:p text:style-name="Code"><text:s text:c="2"/>{ name: 'name', message : 'Quel est ton nom ?' },</text:p><text:p text:style-name="Code"><text:s text:c="2"/>{ name: 'age', message: (answers) =&gt; {<text:s text:c="12"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>return `Quel âge as-tu ${answers.name} ?`;<text:s text:c="6"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>}}</text:p><text:p text:style-name="Code">];</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">prompt(questions).then(answers =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(`${answers.name}, tu as ${answers.age} ans.`);</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> La valeur de <text:span text:style-name="CodeDansTexte">message</text:span> peut être une fonction à qui est passée l&#8217;intégralité des réponses aux questions précédentes.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Comme toute à l&#8217;heure, la valeur d&#8217;une réponse s&#8217;obtient au travers de son identifiant.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Dans cet exemple, rien ne nous empêchait de saisir autre chose qu&#8217;un nombre
dans la question de l&#8217;âge.
C&#8217;est gênant mais ça se résout à l&#8217;aide de la propriété de configuration <text:span text:style-name="CodeDansTexte">validate</text:span>.</text:p>
<text:p text:style-name="Code">$ node prompt/validate.js</text:p><text:p text:style-name="Code">? Devine le nombre secret (entre 1 et 100): trois</text:p><text:p text:style-name="Code">&gt;&gt; Ce n'est pas un nombre</text:p><text:p text:style-name="Code">? Devine le nombre secret (entre 1 et 100): 10</text:p><text:p text:style-name="Code">&gt;&gt; C'est plus petit.</text:p><text:p text:style-name="Code">? Devine le nombre secret (entre 1 et 100): 5</text:p><text:p text:style-name="Code">Bravo, la réponse est 5 !</text:p>
<text:p text:style-name="TexteCourant">Cette fonction est appelée à chaque tentative de réponse à la question.
La question est inlassablement posée tant que la fonction <text:span text:style-name="CodeDansTexte">validate</text:span> retourne
autre chose que le booléen <text:span text:style-name="CodeDansTexte">true</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">prompt/validate.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {prompt} = require('inquirer');</text:p><text:p text:style-name="Code">const secret_number = Math.floor(Math.random() * 100);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const questions = [</text:p><text:p text:style-name="Code"><text:s text:c="2"/>{ name: 'Devine le nombre secret (entre 1 et 100)',</text:p><text:p text:style-name="Code"><text:s text:c="4"/>validate: (input, answers) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="6"/>if (Number.isNaN(parseInt(input))) {<text:s text:c="4"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="8"/>return 'Ce n\'est pas un nombre';<text:s text:c="5"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="6"/>}</text:p><text:p text:style-name="Code"><text:s text:c="6"/>if (input &gt; secret_number) {</text:p><text:p text:style-name="Code"><text:s text:c="8"/>return 'C\'est plus petit.';</text:p><text:p text:style-name="Code"><text:s text:c="6"/>}</text:p><text:p text:style-name="Code"><text:s text:c="6"/>if (input &lt; secret_number) {</text:p><text:p text:style-name="Code"><text:s text:c="8"/>return 'C\'est plus grand.';</text:p><text:p text:style-name="Code"><text:s text:c="6"/>}</text:p><text:p text:style-name="Code"><text:s text:c="6"/>return true;<text:s text:c="28"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>}}</text:p><text:p text:style-name="Code">];</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">prompt(questions).then(answers =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(`Bravo, la réponse est ${secret_number} !`);</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Nous nous assurons que la valeur saisie est assimilée à un nombre.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Sinon nous retournons un texte utilisé comme message d&#8217;erreur.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Cette condition remplie, le module passera à la question suivante.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Enfin, deux modes de liste sont proposés par le module <text:span text:style-name="T4">inquirer</text:span>&#160;: <text:span text:style-name="CodeDansTexte">list</text:span>
et <text:span text:style-name="CodeDansTexte">checkbox</text:span>.
Dans un cas nous naviguons au clavier pour sélectionner une seule réponse.
Dans le deuxième cas, nous naviguons au clavier et sélectionnons les choix
à l&#8217;aide de la touche espace&#160;:</text:p>
<text:p text:style-name="Code">$ node prompt/list.js</text:p><text:p text:style-name="Code">? Tu fais quoi lundi ?</text:p><text:p text:style-name="Code"><text:s text:c="2"/>Je quitte mon job</text:p><text:p text:style-name="Code">❯ Je pars en vacances</text:p><text:p text:style-name="Code"><text:s text:c="2"/>J'apprends Node.js</text:p>
<text:p text:style-name="CodeTitre">prompt/list.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {prompt} = require('inquirer');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">prompt([</text:p><text:p text:style-name="Code"><text:s text:c="2"/>{ name: 'type',</text:p><text:p text:style-name="Code"><text:s text:c="4"/>type: 'list',<text:s text:c="21"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>message : 'Tu fais quoi lundi ?',</text:p><text:p text:style-name="Code"><text:s text:c="4"/>choices: [<text:s text:c="24"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="6"/>'Je quitte mon job',</text:p><text:p text:style-name="Code"><text:s text:c="6"/>'Je pars en vacances',</text:p><text:p text:style-name="Code"><text:s text:c="6"/>'J\'apprends Node.js'</text:p><text:p text:style-name="Code"><text:s text:c="4"/>]</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">]);</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Le champ <text:span text:style-name="CodeDansTexte">type</text:span> sert à expliciter la nature de la question&#160;— l&#8217;interface utilisateur s&#8217;adapte en fonction.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Le champ <text:span text:style-name="CodeDansTexte">choices</text:span> contient la liste des choix proposés à l&#8217;écran.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Le potentiel de combinaison de ces éléments est vraiment intéressant.
Nous pourrions créer des quiz, des interfaces de recherche ou faciliter
la création de fichiers de configuration sans avoir à mettre les mains dans le
cambouis.
Les choix mis à disposition dans l&#8217;interface se créent aussi dynamiquement,
à partir de données obtenues depuis une ressource distante&#160;—
ils n&#8217;ont nécessairement à être écrits en dur dans le code.</text:p>
<text:bookmark text:name="ref-progress" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Informer de la progression</text:h><text:p text:style-name="TexteCourant">Je trouve que <text:span text:style-name="T7">transmettre un feedback est un élément différenciant</text:span> dans la
conception d&#8217;une application&#160;— qu&#8217;elle soit utilisée sur le web ou dans un
terminal.
Informer de la progression est un des moyens d&#8217;y parvenir.
La progression concerne aussi bien l&#8217;indication du <text:span text:style-name="T7">franchissement d&#8217;étapes</text:span>
que celle de <text:span text:style-name="T7">pourcentage d&#8217;accomplissement</text:span> d&#8217;une tâche.</text:p>
<text:p text:style-name="Code">$ node progress/intro.js</text:p><text:p text:style-name="Code">(•··) Un-deux-trois</text:p><text:p text:style-name="Code">(••·) Un-deux-trois</text:p><text:p text:style-name="Code">(•••) Un-deux-trois ☀️</text:p>
<text:p text:style-name="TexteCourant">Cette approche est une première tentative d&#8217;indiquer une progression à travers
deux mécanismes&#160;: le passage du vide au plein en utilisant un caractère qui
véhicule ce changement et l&#8217;utilisation d&#8217;un signal visuel pour informer de
l&#8217;accomplissement de la tâche.</text:p>
<text:p text:style-name="CodeTitre">progress/intro.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">let counter = 0;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const display = (count) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const progress = '•'.repeat(count).padEnd(3, '·');<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>const sun = count === 3 ? '☀️' : '';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(`(${progress}) Un-deux-trois ${sun}`);<text:s text:c="2"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">setInterval(() =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>counter++;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>display(counter);<text:s text:c="19"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>if (counter === 3) process.exit(0);</text:p><text:p text:style-name="Code">}, 1000);</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Cette fonction affiche la progression toutes les secondes.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> La méthode <text:span text:style-name="CodeDansTexte">padEnd</text:span> (cf. <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-03"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 3</text:a>) complète la barre de progression jusqu&#8217;à atteindre le nombre souhaité de points.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Le message de progression est paramétré pour afficher les éléments nécessaires&#160;— l&#8217;émoji "soleil" s&#8217;affiche quand le compteur atteint <text:span text:style-name="CodeDansTexte">3</text:span>.<text:line-break/></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Performance</text:span> La vitesse est toute relative</text:h><text:p text:style-name="Remarque">Une action qui est instantanée sur notre ordinateur peut durer
plusieurs secondes sur un autre, du fait de ressources moindres ou d&#8217;un accès
réseau moins favorable par exemple.</text:p>
<text:p text:style-name="TexteCourant">La seule chose qu&#8217;il manque à mon goût est d&#8217;avoir un réel sens de progression.
C&#8217;est-à-dire en remplaçant le contenu qui informe de l&#8217;avancement avec un
affichage actualisé qui reflète le nouvel état.</text:p>
<text:p text:style-name="TexteCourant">Nous avons parlé des commandes ANSI pour <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-colors"  text:visited-style-name="Visited_20_Internet_20_Link">changer les couleurs</text:a>
quelques sections en amont.
Il se trouve que certaines de ces commandes contrôlent la <text:span text:style-name="T7">position du curseur</text:span>.
Ainsi, au lieu d&#8217;écrire à la suite, nous pouvons revenir en arrière et même
effacer le contenu d&#8217;une ligne.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-08/images/cli-dots.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 59. Pendant et après la progression d&#8217;un script Node.</text:p>
<text:p text:style-name="TexteCourant">Il n&#8217;y a pas beaucoup de code à changer dans l&#8217;exemple précédent pour y
parvenir&#160;:</text:p>
<text:p text:style-name="CodeTitre">progress/dots.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">let counter = 0;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const display = (count) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const dots = '•'.repeat(count).padEnd(3, '·');</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const sun = count === 3 ? '☀️' : '';</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const cmd = counter !== 1 ? '\x1B[1F' : '';<text:s text:c="11"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(`${cmd}(${dots}) Un-deux-trois ${sun}`);<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">setInterval(() =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>counter++;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>display(counter);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>if (counter === 3) process.exit(0);</text:p><text:p text:style-name="Code">}, 1000);</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> La séquence d&#8217;échappement <text:span text:style-name="CodeDansTexte">\x1B</text:span> suivie de la commande <text:span text:style-name="CodeDansTexte">1F</text:span> déplace le curseur d&#8217;une ligne vers le haut.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Cette séquence est ajoutée en début de ligne remonter d&#8217;une ligne avant d&#8217;écrire la suite des caractères.<text:line-break/></text:p>
<text:p text:style-name="TableauTitre">Table 22. Liste de commandes ANSI pour déplacer le curseur.</text:p><table:table table:style-name="Tableau1"><table:table-column />,<table:table-column /><table:table-row><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Commande</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Effet</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">&lt;n&gt;E</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Descend le curseur de <text:span text:style-name="CodeDansTexte">&lt;n&gt;</text:span> lignes.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">&lt;n&gt;F</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Remonte le curseur de <text:span text:style-name="CodeDansTexte">&lt;n&gt;</text:span> lignes.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">&lt;n&gt;K</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Efface le contenu de la ligne, jusqu&#8217;à la fin si <text:span text:style-name="CodeDansTexte">&lt;n&gt;</text:span> vaut <text:span text:style-name="CodeDansTexte">0</text:span>, jusqu&#8217;au début si <text:span text:style-name="CodeDansTexte">&lt;n&gt;</text:span> vaut <text:span text:style-name="CodeDansTexte">1</text:span>, entièrement si <text:span text:style-name="CodeDansTexte">&lt;n&gt;</text:span> vaut <text:span text:style-name="CodeDansTexte">2</text:span>.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">&lt;n&gt;A</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Déplace le curseur de <text:span text:style-name="CodeDansTexte">&lt;n&gt;</text:span> cases vers le haut.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">&lt;n&gt;B</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Déplace le curseur de <text:span text:style-name="CodeDansTexte">&lt;n&gt;</text:span> cases vers le bas.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">&lt;n&gt;C</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Déplace le curseur de <text:span text:style-name="CodeDansTexte">&lt;n&gt;</text:span> cases vers la droite.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">&lt;n&gt;D</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Déplace le curseur de <text:span text:style-name="CodeDansTexte">&lt;n&gt;</text:span> cases vers la gauche.</text:p></table:table-cell></table:table-row></table:table>
<text:p text:style-name="TexteCourant">À partir de là, nous sommes libres d&#8217;écrire nos propres barres de progression,
des indicateurs d&#8217;activité et de ne garder à l&#8217;écran que les informations
reflétant l&#8217;état actuel de l&#8217;application.</text:p>
<text:p text:style-name="TexteCourant">Deux modules npm simplifient la vie si les commandes ANSI ne sont pas
notre tasse de thé.
<text:span text:style-name="T4">ansi-escapes</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/ansi-escapes" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/ansi-escapes</text:a></text:span>) est l&#8217;équivalent
de <text:span text:style-name="T4">chalk</text:span> mais pour déplacer le curseur.
L&#8217;utilisation de méthodes nommées remplace celle des commandes ANSI.<text:line-break/>Le module <text:span text:style-name="T4">progress-string</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/progress-string" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/progress-string</text:a></text:span>) met
à disposition une base pour afficher des barres de progression
avec un minimum d&#8217;options.</text:p>
<text:p text:style-name="TexteCourant">Terminons cette section avec l&#8217;utilisation d&#8217;un indicateur d&#8217;activité
et un feedback de réussite ou non de notre action.
Nous nous aidons du module npm <text:span text:style-name="T4">ora</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/ora" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/ora</text:a></text:span>).
Il est rapide à configurer et propose une palette intéressante d&#8217;animations.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-08/images/cli-spinner.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 60. Pendant et après la progression avec le module <text:span text:style-name="T4">ora</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Nous nous retrouvons à enlever encore quelques lignes par rapport aux
exemples précédents&#160;:</text:p>
<text:p text:style-name="CodeTitre">progress/spinner.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const ora = require('ora');</text:p><text:p text:style-name="Code">let counter = 0;</text:p><text:p text:style-name="Code">const progress = ora().start('Un-deux-trois…'); <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">setInterval(() =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>counter++;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>if (counter === 3) {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>progress.succeed('Un-deux-trois… Soleil !');<text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>process.exit(0);</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}, 1000);</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Crée et affiche un indicateur de progression animé.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Nous indiquons que la tâche est terminée&#160;— l&#8217;animation est remplacée par une marque de succès.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Nous pouvons aussi tirer parti du fonctionnement du module <text:span text:style-name="T4">ora</text:span> en reproduisant
l&#8217;animation et en personnalisant le symbole de réussite.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-08/images/cli-spinner-custom.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 61. Pendant et après</text:p>
<text:p text:style-name="CodeTitre">progress/spinner-custom.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const ora = require('ora');</text:p><text:p text:style-name="Code">const progress = ora({</text:p><text:p text:style-name="Code"><text:s text:c="2"/>color: 'yellow',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>spinner: {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>frames: ['···', '•··', '••·', '•••'], <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>interval: 1000<text:s text:c="24"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">progress.start('Un-deux-trois…');</text:p><text:p text:style-name="Code">setTimeout(() =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>progress.stopAndPersist({ symbol: '☀️', text: 'Soleil !' });</text:p><text:p text:style-name="Code"><text:s text:c="2"/>process.exit(0);</text:p><text:p text:style-name="Code">}, 4000);</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Création d&#8217;une série d&#8217;éléments d&#8217;animation.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Nous passons d&#8217;un index à l&#8217;autre à la vitesse exprimée en millisecondes.<text:line-break/></text:p>
<text:bookmark text:name="ref-tables" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Afficher des informations sous forme de tableau</text:h><text:p text:style-name="TexteCourant">L&#8217;affichage d&#8217;informations sous forme de tableau est idéal pour
le <text:span text:style-name="T7">confort de lecture de listes</text:span>.
Notre lecture gagne en qualité quand notre vision s&#8217;attend
à retrouver une structure prédictible.</text:p>
<text:p text:style-name="Code">$ node table.js</text:p><text:p text:style-name="Code">╔═════════════════════════════╤════════════════╗</text:p><text:p text:style-name="Code">║ Titre<text:s text:c="23"/>│ ISBN<text:s text:c="11"/>║</text:p><text:p text:style-name="Code">╟─────────────────────────────┼────────────────╢</text:p><text:p text:style-name="Code">║ Node.js<text:s text:c="21"/>│ 978-2212139938 ║</text:p><text:p text:style-name="Code">╟─────────────────────────────┼────────────────╢</text:p><text:p text:style-name="Code">║ Sass pour les web designers │ 978-2212141474 ║</text:p><text:p text:style-name="Code">╟─────────────────────────────┼────────────────╢</text:p><text:p text:style-name="Code">║ Design Systems<text:s text:c="14"/>│ 978-3945749586 ║</text:p><text:p text:style-name="Code">╚═════════════════════════════╧════════════════╝</text:p>
<text:p text:style-name="TexteCourant">Cet exemple est généré à l&#8217;aide du module npm <text:span text:style-name="T4">table</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/table" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/table</text:a></text:span>).
Il s&#8217;utilise sans configuration pour démarrer.
Il a aussi la capacité de tronquer et limiter la largeur des colonnes mais aussi
de gérer l&#8217;alignement des contenus dans les cellules.</text:p>
<text:p text:style-name="CodeTitre">table.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {table} = require('table');</text:p><text:p text:style-name="Code">const {bold, green:g} = require('chalk');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const data = [</text:p><text:p text:style-name="Code"><text:s text:c="2"/>[bold('Titre'), bold('ISBN')],<text:s text:c="6"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>[g('Node.js'), '978-2212139938'],<text:s text:c="3"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>[g('Sass pour les web designers'), '978-2212141474'],</text:p><text:p text:style-name="Code"><text:s text:c="2"/>[g('Design Systems'), '978-3945749586'],</text:p><text:p text:style-name="Code">];</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(table(data));<text:s text:c="13"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> L&#8217;entête du tableau se distingue grâce à un style différent&#160;— du texte en gras.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Chaque ligne du tableau est elle-même un tableau, à deux colonnes dans ce cas de figure.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> L&#8217;affichage se fait sur un simple appel de fonction&#160;— <text:span text:style-name="T4">table</text:span> calcule la largeur des colonnes pour nous.<text:line-break/></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Utilisation des couleurs</text:h><text:p text:style-name="Remarque">La lecture de la section <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-colors"  text:visited-style-name="Visited_20_Internet_20_Link">améliorer la lisibilité grâce aux couleurs</text:a>
vous aidera à améliorer la lisibilité de vos tableaux.</text:p>
<text:p text:style-name="TexteCourant">À noter que le module <text:span text:style-name="T4">table</text:span> expose aussi une interface en flux, pour ajouter
des lignes au fur et à mesure&#160;— par exemple en cas de lecture continue
ou sur un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-streaming"  text:visited-style-name="Visited_20_Internet_20_Link">fichier volumineux</text:a>.</text:p>
<text:bookmark text:name="ref-update" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Inviter à mettre à jour le module</text:h><text:p text:style-name="TexteCourant">L&#8217;inconvénient de l'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install.global"  text:visited-style-name="Visited_20_Internet_20_Link">installation d&#8217;un module exécutable</text:a>,
c&#8217;est la difficulté de savoir si une mise à jour intéressante a été publiée.
Probablement parce que je ne pense pas à lancer la commande <text:span text:style-name="CodeDansTexte">npm outdated --global</text:span>.
Il existe toutefois des moyens de signaler aux personnes qui utilisent votre
exécutable qu&#8217;une version plus récente existe.</text:p>
<text:p text:style-name="TexteCourant">J&#8217;aime l&#8217;approche minimaliste du module npm <text:span text:style-name="T4">update-check</text:span>
(<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/update-check" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/update-check</text:a></text:span>).
Il compare le numéro de version passé en paramètre avec celui de la dernière
version de ce même module, sur le registre npm.</text:p>
<text:p text:style-name="Code">$ node update/intro.js</text:p><text:p text:style-name="Code">{ latest: '0.10.0', fromCache: false }</text:p>
<text:p text:style-name="TexteCourant">Dans cet exemple, le module <text:span text:style-name="T4">update-check</text:span> requête le registre npm
pour déterminer la version la plus récente du module npm <text:span text:style-name="T4">nodebook</text:span>.
Si le module <text:span text:style-name="T4">update-check</text:span> estime que la version installée localement est plus
ancienne, il retourne un objet avec le numéro de version à installer.</text:p>
<text:p text:style-name="CodeTitre">update/intro.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const check = require('update-check');</text:p><text:p text:style-name="Code">const pkg = { name: 'nodebook', version: '0.8.0' }; <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">check(pkg)<text:s text:c="30"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>.then(update =&gt; console.log(update)); <text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Les champs <text:span text:style-name="CodeDansTexte">name</text:span> et <text:span text:style-name="CodeDansTexte">version</text:span> suffisent à accomplir la comparaison.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Démarrage de la comparaison.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Un objet est retourné en cas de version plus récente ou sinon, la valeur <text:span text:style-name="CodeDansTexte">null</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">En temps normal, c&#8217;est-à-dire dans le cas d&#8217;un module dont nous sommes à l&#8217;origine
et que nous publions sur le registre npm, nous aurions tendance
à utiliser le contenu du fichier <text:span text:style-name="CodeDansTexte">package.json</text:span> en argument de la fonction <text:span text:style-name="CodeDansTexte">check</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Maintenant que nous savons ça, nous pouvons présenter une information
plus digeste et actionnable à la personne qui utilise notre module&#160;:</text:p>
<text:p text:style-name="Code">$ node update/cli.js</text:p><text:p text:style-name="Code">nodebook@0.10.0 est dispo</text:p><text:p text:style-name="Code">Tape 'npm install -g nodebook'</text:p>
<text:p text:style-name="CodeTitre">update/cli.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const parse = require('minimist');</text:p><text:p text:style-name="Code">const check = require('update-check');</text:p><text:p text:style-name="Code">const pkg = { name: 'nodebook', version: '0.8.0' };</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const logError = ({message}) =&gt; console.error(message);</text:p><text:p text:style-name="Code">const checkUpdate = (update) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>if (update) {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>const {name} = pkg;</text:p><text:p text:style-name="Code"><text:s text:c="4"/>console.log(`${name}@${update.latest} est dispo`);</text:p><text:p text:style-name="Code"><text:s text:c="4"/>console.log(`Tape 'npm install -g ${pkg.name}'`);</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">check(pkg)</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.then(checkUpdate, logError)<text:s text:c="6"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>.then(() =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>const args = parse(process.argv.slice(2));</text:p><text:p text:style-name="Code"><text:s text:c="4"/>// ...<text:s text:c="26"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Nous vérifions et affichons la mise à jour si nécessaire&#160;; nous gérons aussi une erreur (réseau indisponible, le registre npm est HS, etc.).<text:line-break/><text:span text:style-name="PuceCode">2</text:span> À nous ensuite de gérer le code de notre exécutable&#160;— <text:span text:style-name="T4">parsing</text:span> des arguments, gestion des actions, etc..<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Les utilisatrices et utilisateurs sont notifiées de la disponibilité d&#8217;une mise
à jour dès qu&#8217;elles utilisent le module exécutable en question.
La décision d&#8217;effectuer la mise à jour leur appartient toutefois.</text:p>
<text:bookmark text:name="ref-tests" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Vers un code réutilisable et testable</text:h><text:p text:style-name="TexteCourant">Nous avons appris comment transformer un script Node en un programme paramétrable,
clair et agréable à utiliser.
Cette section a pour but de renforcer la robustesse de notre code.
Nous allons tout d&#8217;abord séparer ce qui est réutilisable de l&#8217;interface en ligne
de commande pour progressivement tester notre code, puis l&#8217;exécutable lui-même.</text:p>
<text:p text:style-name="TexteCourant">Notre progression va s&#8217;effectuer en transformant l&#8217;exemple <text:span text:style-name="CodeDansTexte">options/timezone.js</text:span>
de la section <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-args"  text:visited-style-name="Visited_20_Internet_20_Link">utiliser des arguments et des options</text:a>.</text:p>
<text:p text:style-name="CodeTitre">options/timezone.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const parse = require('minimist');</text:p><text:p text:style-name="Code">const args = parse(process.argv.slice(2));</text:p><text:p text:style-name="Code">const [timezone] = args._;<text:s text:c="26"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">if (!timezone) {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>throw Error('Merci d\'indiquer un fuseau horaire :-)');</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const options = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>timeZone: timezone,</text:p><text:p text:style-name="Code"><text:s text:c="2"/>hour: 'numeric', minute: 'numeric', hour12: false <text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const text = new Date().toLocaleDateString('fr-FR', options);</text:p><text:p text:style-name="Code">console.log(text);<text:s text:c="34"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:bookmark text:name="ref-interface" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Modulariser le code du fichier exécutable</text:h><text:p text:style-name="TexteCourant">Un programme qui accepte de plus en plus d&#8217;options devient de plus en plus
compliqué à maintenir car il est de plus en plus dur de tester tous les cas
de figure à la main.</text:p>
<text:p text:style-name="TexteCourant">Un programme exécutable robuste est un script qui contient le moins de code
spécifique à la gestion de la ligne de commande.
Pour ce faire, nous allons séparer la logique d&#8217;exécution en la plaçant dans une
fonction, dans un autre module.</text:p>
<text:p text:style-name="CodeTitre">testing/01/cli.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const getTime = require('./lib.js');</text:p><text:p text:style-name="Code">const args = require('minimist')(process.argv.slice(2));</text:p><text:p text:style-name="Code">const [timezone] = args._;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(getTime(timezone));<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Tout le code a été modularisé sous forme d&#8217;une seule fonction.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Nous avons opéré un changement&#160;: l&#8217;utilisation du <text:span text:style-name="CodeDansTexte">console.log</text:span> pour l&#8217;affichage
des résultats revient du côté de l&#8217;exécutable.</text:p>
<text:p text:style-name="TexteCourant">Notre code est portable s&#8217;il retourne un résultat et s&#8217;il laisse la
responsabilité de l&#8217;affichage au code le plus proche de l&#8217;utilisateur
—&#160;c&#8217;est le cas ici avec la fonction <text:span text:style-name="CodeDansTexte">getTime()</text:span>.</text:p>
<text:p text:style-name="CodeTitre">testing/01/lib.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">module.exports = (timezone) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>if (!timezone) {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>throw Error('Merci d\'indiquer un fuseau horaire :-)');</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>const options = {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>timeZone: timezone,</text:p><text:p text:style-name="Code"><text:s text:c="4"/>hour: 'numeric', minute: 'numeric', hour12: false</text:p><text:p text:style-name="Code"><text:s text:c="2"/>};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>return new Date().toLocaleDateString('fr-FR', options);</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant">Cette écriture facilite l&#8217;écriture de tests.
Justement, parlons-en.</text:p>
<text:bookmark text:name="ref-tests.interface" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Tester le code partagé</text:h><text:p text:style-name="TexteCourant">L&#8217;écriture de tests nous aide découvrir qu&#8217;une modification produit un résultat
différent de celui attendu.
Les tests documentent aussi les cas à la marge de notre code.
En général, dès qu&#8217;il y a un <text:span text:style-name="CodeDansTexte">if/else</text:span>, ça implique d&#8217;écrire au moins une
nouvelle assertion.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Glossaire</text:span> Test et assertion</text:h><text:p text:style-name="Remarque">Une assertion est l&#8217;expression d&#8217;une attente quant au fonctionnement de notre code.</text:p>
<text:p text:style-name="Remarque">Un test s&#8217;applique à une fonction et utilise une à plusieurs assertions pour
couvrir le spectre de ses fonctionnalités.</text:p>
<text:p text:style-name="TexteCourant">Pour des besoins simples, j&#8217;utilise le module npm <text:span text:style-name="T4">tape</text:span>
(<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/tape" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/tape</text:a></text:span>).
Il gère l&#8217;exécution des tests et il fournit quelques méthodes qui permettent
d&#8217;exprimer nos attentes&#160;— les assertions.</text:p>
<text:p text:style-name="Code">$ node testing/01/lib.test.js</text:p><text:p text:style-name="Code">TAP version 13</text:p><text:p text:style-name="Code"># getTime</text:p><text:p text:style-name="Code">ok 1 should be truthy</text:p><text:p text:style-name="Code">ok 2 should throw</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">1..2</text:p><text:p text:style-name="Code"># tests 2</text:p><text:p text:style-name="Code"># pass<text:s text:c="2"/>2</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"># ok</text:p>
<text:p text:style-name="TexteCourant">Dans cas précis, j&#8217;ai écrit deux assertions qui illustrent les différents
cas de figure représentés dans le fichier <text:span text:style-name="CodeDansTexte">01/lib.js</text:span>
—&#160;quand l&#8217;erreur est provoquée et quand le résultat est retourné&#160;:</text:p>
<text:p text:style-name="CodeTitre">testing/01/lib.test.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const test = require('tape');</text:p><text:p text:style-name="Code">const getTime = require('./lib.js');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">test('getTime', t =&gt; {<text:s text:c="26"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>t.plan(2);<text:s text:c="36"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>t.ok(getTime('Europe/Paris'));<text:s text:c="16"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>t.throws(() =&gt; getTime(), /fuseau horaire/);<text:s text:c="2"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Création d&#8217;un test&#160;— le paramètre <text:span text:style-name="CodeDansTexte">t</text:span> contient les méthodes d&#8217;assertion.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> La méthode <text:span text:style-name="CodeDansTexte">t.plan()</text:span> spécifie le nombre d&#8217;assertions attendues&#160;— si ce nombre n&#8217;est pas atteint, <text:span text:style-name="T4">tape</text:span> considère qu&#8217;il y a un problème.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Assertion qui teste que la fonction <text:span text:style-name="CodeDansTexte">getTime</text:span> retourne bien un résultat.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Assertion qui teste que la fonction <text:span text:style-name="CodeDansTexte">getTime</text:span> provoque une erreur si aucun argument n&#8217;est passé.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Nous sommes parés aux éventualités mais en y réfléchissant, le module <text:span text:style-name="CodeDansTexte">cli.js</text:span>
ne gère pas vraiment l&#8217;éventualité qu&#8217;aucun argument ne soit transmis.</text:p>
<text:p text:style-name="Code">$ node testing/01/cli.js</text:p><text:p text:style-name="Code">/…/chapter-08/examples/testing/01/lib.js:5</text:p><text:p text:style-name="Code"><text:s text:c="4"/>throw Error('Merci d\'indiquer un fuseau horaire :-)');</text:p><text:p text:style-name="Code"><text:s text:c="4"/>^</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">Error: Merci d'indiquer un fuseau horaire :-)</text:p><text:p text:style-name="Code"><text:s text:c="4"/>at module.exports (/…/examples/testing/01/lib.js:5:11)</text:p><text:p text:style-name="Code"><text:s text:c="4"/>at Object.&lt;anonymous&gt; (/…/examples/testing/01/cli.js:7:13)</text:p><text:p text:style-name="Code"><text:s text:c="4"/>at Module._compile (internal/modules/cjs/loader.js:702:30)</text:p><text:p text:style-name="Code"><text:s text:c="4"/>at Object.Module._extensions..js (…/cjs/loader.js:713:10)</text:p><text:p text:style-name="Code"><text:s text:c="4"/>…</text:p>
<text:p text:style-name="TexteCourant">Je trouve ça peu élégant d&#8217;être accueilli·e avec une trace d&#8217;erreur comme celle-ci.
L&#8217;erreur mériterait d&#8217;être présentée en contexte, celui de notre utilisation
et non celle des rouages internes de Node.</text:p>
<text:bookmark text:name="ref-display" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Présenter les messages en contexte</text:h><text:p text:style-name="TexteCourant">La présentation des messages de réussite et d&#8217;erreurs nécessite d&#8217;être à l&#8217;écoute
des signaux envoyés par notre code afin de le restituer de manière adaptée.</text:p>
<text:p text:style-name="Code">$ node testing/02/cli.js</text:p><text:p text:style-name="Code">Merci d'indiquer un fuseau horaire :-)</text:p>
<text:p text:style-name="TexteCourant">Afin de parvenir à ce résultat, j&#8217;ai opté pour l&#8217;utilisation de
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-promise"  text:visited-style-name="Visited_20_Internet_20_Link">promesse</text:a> (cf. <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-03"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 3</text:a>).
Je trouve cette méthode plus élégante car nous gérons le résultat et le message
d&#8217;erreur d&#8217;une manière visuellement similaire, mais séparée.</text:p>
<text:p text:style-name="CodeTitre">testing/02/cli.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const getTime = require('./lib.js');</text:p><text:p text:style-name="Code">const args = require('minimist')(process.argv.slice(2));</text:p><text:p text:style-name="Code">const [timezone] = args._;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">getTime(timezone)</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.then(time =&gt; console.log(time))<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>.catch(error =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>console.error(error.message);<text:s text:c="3"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>process.exit(1);<text:s text:c="16"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Le résultat est affiché en cas de succès.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> En cas d&#8217;erreur produite dans la fonction <text:span text:style-name="CodeDansTexte">getTime</text:span>, nous affichons le message en question.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Nous arrêtons le programme avec un code d&#8217;erreur pour la signaler au niveau du système d&#8217;exploitation.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Ce changement n&#8217;implique pas de bouleversement dans notre code.
L&#8217;appel à <text:span text:style-name="CodeDansTexte">throw</text:span> est remplacé par <text:span text:style-name="CodeDansTexte">reject()</text:span> et le <text:span text:style-name="CodeDansTexte">return</text:span> se transforme en <text:span text:style-name="CodeDansTexte">resolve()</text:span>.</text:p>
<text:p text:style-name="CodeTitre">testing/02/lib.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">module.exports = (timezone) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>return new Promise((resolve, reject) =&gt; { <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>if (!timezone) {</text:p><text:p text:style-name="Code"><text:s text:c="6"/>reject(Error('Merci d\'indiquer un fuseau horaire :-)'));</text:p><text:p text:style-name="Code"><text:s text:c="4"/>}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="4"/>const options = {</text:p><text:p text:style-name="Code"><text:s text:c="6"/>timeZone: timezone,</text:p><text:p text:style-name="Code"><text:s text:c="6"/>hour: 'numeric', minute: 'numeric', hour12: false</text:p><text:p text:style-name="Code"><text:s text:c="4"/>};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="4"/>resolve(new Date().toLocaleDateString('fr-FR', options));</text:p><text:p text:style-name="Code"><text:s text:c="2"/>});</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Nous englobons le contenu entier de la fonction dans une promesse&#160;— en cas de problème à un endroit imprévu, il sera remonté et pris en charge de la même manière que notre rejet explicite.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Nous n&#8217;avons plus à modifier le fichier <text:span text:style-name="CodeDansTexte">cli.js</text:span> pour gérer de nouveaux messages
d&#8217;erreur.
Nous pourrions mieux gérer certains cas de figure, par exemple quand
un fuseau horaire inconnu est spécifié.</text:p>
<text:p text:style-name="Code">$ node testing/02/cli.js Brexit/London</text:p><text:p text:style-name="Code">Unsupported time zone specified Brexit/London</text:p>
<text:bookmark text:name="ref-tests.cli" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Tester l&#8217;exécutable</text:h><text:p text:style-name="TexteCourant">Tester l&#8217;exécutable est un moyen de vérifier que les câblages entre notre
exécutable et notre mode Node sont bien faits.
L&#8217;idée n&#8217;est pas de tester à nouveau les mêmes aspects du code mais bel et
bien de nous assurer que les conditions d&#8217;utilisation du programme soient remplies.</text:p>
<text:p text:style-name="Code">$ node testing/02/cli.test.js</text:p><text:p text:style-name="Code">TAP version 13</text:p><text:p text:style-name="Code"># cli w/o arg</text:p><text:p text:style-name="Code">ok 1 exit code matched</text:p><text:p text:style-name="Code"># cli w/ arg</text:p><text:p text:style-name="Code">ok 2 matched /\d{2}:\d{2}/</text:p><text:p text:style-name="Code">ok 3 exit code matched</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">1..3</text:p><text:p text:style-name="Code"># tests 3</text:p><text:p text:style-name="Code"># pass<text:s text:c="2"/>3</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"># ok</text:p>
<text:p text:style-name="TexteCourant">Nous avons à nouveau recours au module <text:span text:style-name="T4">tape</text:span>.
Cette fois-ci nous l&#8217;accompagnons d&#8217;un autre module,
<text:span text:style-name="T4">tape-spawn</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/tape-spawn" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/tape-spawn</text:a></text:span>).
Ce dernier intègre à <text:span text:style-name="T4">tape</text:span> le test de processus externes.
En l&#8217;occurrence ici, ça concerne nos exécutables en ligne de commande.</text:p>
<text:p text:style-name="CodeTitre">testing/02/cli.test.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const test = require('tape');</text:p><text:p text:style-name="Code">const spawn = require('tape-spawn');</text:p><text:p text:style-name="Code">const opts = {cwd: __dirname};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">test('cli w/o arg', t =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const proc = spawn(t, './cli.js', opts);<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>proc.exitCode(1);<text:s text:c="25"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>proc.end();</text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">test('cli w/ arg', t =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const proc = spawn(t, './cli.js Europe/Paris', opts);</text:p><text:p text:style-name="Code"><text:s text:c="2"/>proc.exitCode(0);</text:p><text:p text:style-name="Code"><text:s text:c="2"/>proc.stdout.match(/\d{2}:\d{2}/);<text:s text:c="9"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>proc.end();</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Nous démarrons un nouveau processus&#160;— ici nous spécifions que le chemin d&#8217;accès est relatif au répertoire du script de tests.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Nous testons le code de sortie du programme&#160;— c&#8217;est cohérent avec l&#8217;invocation de <text:span text:style-name="CodeDansTexte">process.exit(1)</text:span> dans <text:span text:style-name="CodeDansTexte">cli.js</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Dans le cas de réussite, nous avons bien une heure qui s&#8217;affiche dans la sortie standard.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">L&#8217;utilisation conjointe des tests unitaires et des tests de l&#8217;exécutable
nous permettent de gagner en confiance dans la robustesse de notre code,
de déceler de nouveaux cas à la marge et de nous rendre compte de certaines
incohérences d&#8217;interface utilisateur.</text:p>
<text:bookmark text:name="ref-doc" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Documenter notre programme</text:h><text:p text:style-name="TexteCourant">La documentation d&#8217;un logiciel est aussi importante que son code.
C&#8217;est le premier élément qui donne à nous rendre compte de la simplicité ou de
la complexité d&#8217;utilisation d&#8217;un logiciel, de ce qu&#8217;il est possible de faire avec
et de prendre connaissance des concepts qui s&#8217;y rapportent.</text:p>
<text:p text:style-name="TexteCourant">Le premier endroit où documenter son application est dans l&#8217;exécutable lui-même,
avec l&#8217;option <text:span text:style-name="CodeDansTexte">--help</text:span>&#160;— ou son raccourci, <text:span text:style-name="CodeDansTexte">-h</text:span>.
C&#8217;est une convention pour afficher une aide synthétique, rapide d&#8217;accès
et facile à comprendre.</text:p>
<text:p text:style-name="Code">$ node application/intro.js --help</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">Options:</text:p><text:p text:style-name="Code"><text:s text:c="2"/>--help<text:s text:c="5"/>Affiche de l'aide<text:s text:c="13"/>[booléen]</text:p><text:p text:style-name="Code"><text:s text:c="2"/>--version<text:s text:c="2"/>Affiche le numéro de version<text:s text:c="2"/>[booléen]</text:p><text:p text:style-name="Code"><text:s text:c="2"/>--utc, -u<text:s text:c="32"/>[booléen]</text:p>
<text:p text:style-name="TexteCourant">L&#8217;aide ci-contre est minimale et n&#8217;indique que trop peu l&#8217;intention du programme.
Nous n&#8217;avons pas d&#8217;idée de l&#8217;impact de l&#8217;utilisation de telle ou telle option,
du résultat qui va se produire ou encore des valeurs acceptées par le programme.</text:p>
<text:p text:style-name="TexteCourant">Une aide qui me rassure et m&#8217;informe ressemble plutôt à ça&#160;:</text:p>
<text:p text:style-name="Code">$ node help/time.js --help</text:p><text:p text:style-name="Code">Affiche l'heure courante d'ici ou d'ailleurs.</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">Commandes:</text:p><text:p text:style-name="Code"><text:s text:c="2"/>time.js timezones<text:s text:c="2"/>Affiche les fuseaux horaires IANA.</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">Options:</text:p><text:p text:style-name="Code"><text:s text:c="2"/>--version<text:s text:c="3"/>Affiche le numéro de version<text:s text:c="12"/>[booléen]</text:p><text:p text:style-name="Code"><text:s text:c="2"/>--utc<text:s text:c="7"/>Utilise le fuseau horaire universel.<text:s text:c="4"/>[booléen]</text:p><text:p text:style-name="Code"><text:s text:c="2"/>--timezone<text:s text:c="2"/>Précise le fuseau horaire au format IANA.</text:p><text:p text:style-name="Code"><text:s text:c="2"/>--help<text:s text:c="6"/>Affiche de l'aide<text:s text:c="23"/>[booléen]</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">Exemples:</text:p><text:p text:style-name="Code"><text:s text:c="2"/>time.js --utc<text:s text:c="20"/>Heure universelle.</text:p><text:p text:style-name="Code"><text:s text:c="2"/>time.js --timezone=Europe/Lisbon Heure de Lisbonne.</text:p>
<text:p text:style-name="TexteCourant">Elle véhicule l'<text:span text:style-name="T7">intention du programme</text:span>, des exemples qui précisent un concept
que je ne connais pas (fuseau horaire IANA) et j&#8217;y découvre même
l&#8217;existence d&#8217;une commande qui liste ces fameux fuseaux horaires.
Au premier coup d&#8217;œil, je ne décèle pas d&#8217;impasse et j&#8217;y vois plutôt une
invitation à essayer sans appréhension.</text:p>
<text:p text:style-name="TexteCourant">Cette aide a été générée automatiquement en utilisant le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-application"  text:visited-style-name="Visited_20_Internet_20_Link">framework</text:a>
<text:span text:style-name="T4">yargs</text:span>&#160;— nous en parlerons dans la section suivante.
Ses méthodes <text:span text:style-name="CodeDansTexte">.usage()</text:span>, <text:span text:style-name="CodeDansTexte">.example()</text:span> et la propriété <text:span text:style-name="CodeDansTexte">description</text:span> de chaque
option suffisent à constituer un affichage clair et informatif.</text:p>
<text:p text:style-name="CodeTitre">help/time.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const args = require('yargs')</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.usage('Affiche l\'heure courante d\'ici ou d\'ailleurs.')</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.example('$0 --utc', 'Heure universelle.')<text:s text:c="12"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>.example('$0 --timezone=Europe/Lisbon', 'Heure de Lisbonne.')</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.command('timezones', 'Affiche les fuseaux horaires IANA.')</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.option('utc', {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>type: 'boolean',<text:s text:c="36"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>description: 'Utilise le fuseau horaire universel.' <text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>})</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.option('timezone', {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>description: 'Précise le fuseau horaire au format IANA.'</text:p><text:p text:style-name="Code"><text:s text:c="2"/>})</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.locale('fr')</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.argv;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(args);</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Documente un exemple d&#8217;utilisation et une description qui précise l&#8217;intention.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Le type de l&#8217;option est rendu explicite lors de l&#8217;affichage de la documentation.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> La description précise l&#8217;intention de l&#8217;option pour mieux comprendre son impact si elle est activée.<text:line-break/></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Alternative</text:span> Module npm <text:span text:style-name="T4">help-version</text:span></text:h><text:p text:style-name="Remarque">Le module <text:span text:style-name="T4">help-version</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/help-version" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/help-version</text:a></text:span>) gère l&#8217;appel
à l&#8217;option <text:span text:style-name="CodeDansTexte">--help</text:span> et il est indépendant de tout autre module.</text:p>
<text:p text:style-name="Remarque">Le seul risque est d&#8217;avoir une documentation qui est désynchronisée du
fonctionnement du programme.</text:p>
<text:p text:style-name="TexteCourant">Un autre lieu courant pour documenter un projet est le fichier <text:span text:style-name="CodeDansTexte">README</text:span>.
C&#8217;est un fichier texte souvent affiché en premier sur la page d&#8217;accueil
d&#8217;un projet logiciel.
Sa mise en forme s&#8217;améliore avec l&#8217;utilisation d&#8217;une syntaxe de balisage léger
comme <text:span text:style-name="T4">Markdown</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Ce type de fichier est très largement suffisant pour documenter un projet.
C&#8217;est l&#8217;équivalent de l&#8217;option <text:span text:style-name="CodeDansTexte">--help</text:span>, à l&#8217;échelle de l&#8217;application&#160;—
son intention générale, sa compatibilité de version avec Node, comment l&#8217;installer,
où poser des questions et peut-être même davantage d&#8217;exemples pour mieux comprendre
ce qui ne tiendrait pas dans l&#8217;option <text:span text:style-name="CodeDansTexte">--help</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Ça tombe bien, je trouve que le <text:span text:style-name="CodeDansTexte">README</text:span> est un excellent endroit pour y reporter
l&#8217;affichage de la commande <text:span text:style-name="CodeDansTexte">--help</text:span>.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-08/images/documentation-readme.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 62. Présentation de la documentation d&#8217;un exécutable dans un <text:span text:style-name="CodeDansTexte">README</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Je ne pense pas qu&#8217;il y ait besoin de faire plus compliqué pour véhiculer
autant d&#8217;informations essentielles avec un minimum d&#8217;efforts.
Démarrer un projet en écrivant cette documentation est un excellent moyen pour
travailler à la clarification de ses idées et pour commencer à imaginer la
forme que va prendre l'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-tests"  text:visited-style-name="Visited_20_Internet_20_Link">écriture des tests</text:a>.</text:p>
<text:bookmark text:name="ref-advanced" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Pour aller plus loin</text:h><text:p text:style-name="TexteCourant">Dans les précédentes sections, nous avons vu des composantes essentielles
pour créer une programme exécutable clair et fonctionnel.
Cette dernière section va se focaliser sur des concepts qui structurent,
simplifient et rapprochent un exécutable en ligne de commande d&#8217;une application
web ou d&#8217;une application front-end.</text:p>
<text:bookmark text:name="ref-application" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Utilisation d&#8217;un framework d&#8217;application en ligne de commande</text:h><text:p text:style-name="TexteCourant">Une application en ligne de commande dont le nombre de lignes de code augmente
devient de <text:span text:style-name="T7">plus en plus complexe à maintenir</text:span>.
Potentiellement, l&#8217;expérience d&#8217;utilisation se dégrade aussi.
Il faut continuer à <text:span text:style-name="T7">prendre soin de la cohérence des arguments</text:span>, des options et
de valider que ce sont les valeurs attendues.
Cette complexité appelle aussi à afficher une aide à la demande ou de manière
contextuelle, par exemple au niveau de la sous-commande.</text:p>
<text:p text:style-name="TexteCourant">Des modules npm comme <text:span text:style-name="T4">yargs</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/yargs" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/yargs</text:a></text:span>) aident à
structurer la création d&#8217;applications en ligne de commande en intégrant
la majorité des fonctionnalités vues dans la section
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-interactive"  text:visited-style-name="Visited_20_Internet_20_Link">du script au programme interactif</text:a>.
La génération de l&#8217;aide, le <text:span text:style-name="T4">parsing</text:span> d&#8217;arguments et d&#8217;options et leur validation
sont connectés ensemble, de manière transparente.</text:p>
<text:p text:style-name="TexteCourant">Ce genre de modules est intéressant à utiliser quand l&#8217;assemblage d&#8217;autres
modules indépendant rend le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-interface"  text:visited-style-name="Visited_20_Internet_20_Link">programme trop fragile</text:a> et
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-tests"  text:visited-style-name="Visited_20_Internet_20_Link">trop compliqué à tester</text:a>.</text:p>
<text:p text:style-name="Code">$ node application/intro.js --help</text:p><text:p text:style-name="Code">Options:</text:p><text:p text:style-name="Code"><text:s text:c="2"/>--version<text:s text:c="2"/>Affiche le numéro de version<text:s text:c="6"/>[booléen]</text:p><text:p text:style-name="Code"><text:s text:c="2"/>--utc, -u<text:s text:c="36"/>[booléen]</text:p><text:p text:style-name="Code"><text:s text:c="2"/>--help<text:s text:c="5"/>Affiche de l'aide<text:s text:c="17"/>[booléen]</text:p>
<text:p text:style-name="TexteCourant">La commande d&#8217;aide est générée automatiquement à partir de la
définition d&#8217;arguments et d&#8217;options.</text:p>
<text:p text:style-name="Code">$ node application/intro.js</text:p><text:p text:style-name="Code">{ _: [],</text:p><text:p text:style-name="Code"><text:s text:c="2"/>version: false,</text:p><text:p text:style-name="Code"><text:s text:c="2"/>utc: false,</text:p><text:p text:style-name="Code"><text:s text:c="2"/>u: false,</text:p><text:p text:style-name="Code"><text:s text:c="2"/>help: false,</text:p><text:p text:style-name="Code"><text:s text:c="2"/>'$0': 'application/intro.js' }</text:p>
<text:p text:style-name="CodeTitre">application/intro.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const yargs = require('yargs');</text:p><text:p text:style-name="Code">const args = yargs</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.option('utc', {<text:s text:c="4"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>alias: 'u',</text:p><text:p text:style-name="Code"><text:s text:c="4"/>type: 'boolean',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>})</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.locale('fr')<text:s text:c="7"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>.argv;<text:s text:c="14"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(args);</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Création de l&#8217;option <text:span text:style-name="CodeDansTexte">--utc</text:span> avec l&#8217;alias <text:span text:style-name="CodeDansTexte">-u</text:span>, de type booléen.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Les messages générés par l&#8217;application seront en français&#160;— sans cette option, la langue s&#8217;adapte à celle du système d&#8217;exploitation.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Applique les règles précédentes aux éléments contenus dans <text:span text:style-name="CodeDansTexte">process.argv</text:span> et retourne un résultat sous forme d&#8217;objet.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Le mécanisme de coercition définit la règle de transformation d&#8217;une option
vers une autre représentation, plus pratique à utiliser.
C&#8217;est le cas des dates par exemple&#160;: nous les recevons sous forme de chaîne de
caractères alors qu&#8217;il serait plus facile de travailler avec
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-date"  text:visited-style-name="Visited_20_Internet_20_Link">objet <text:span text:style-name="CodeDansTexte">Date</text:span></text:a>
(cf. <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-03"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 3</text:a>).</text:p>
<text:p text:style-name="Code">$ node application/coerce.js --help</text:p><text:p text:style-name="Code">Options:</text:p><text:p text:style-name="Code"><text:s text:c="2"/>--help<text:s text:c="5"/>Affiche de l'aide<text:s text:c="15"/>[booléen]</text:p><text:p text:style-name="Code"><text:s text:c="2"/>--version<text:s text:c="2"/>Affiche le numéro de version<text:s text:c="4"/>[booléen]</text:p><text:p text:style-name="Code"><text:s text:c="2"/>--date<text:s text:c="15"/>[chaine de caractère] [défaut: now]</text:p>
<text:p text:style-name="TexteCourant">Par défaut, la date est calée sur l&#8217;instant présent&#160;:</text:p>
<text:p text:style-name="Code">$ node application/coerce.js</text:p><text:p text:style-name="Code">2018-06-21T08:41:23.091Z</text:p>
<text:p text:style-name="TexteCourant">Une date, même incomplète,</text:p>
<text:p text:style-name="Code">$ node application/coerce.js --date 2018-03-24</text:p><text:p text:style-name="Code">2018-03-24T00:00:00.000Z</text:p>
<text:p text:style-name="CodeTitre">application/coerce.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const yargs = require('yargs');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const args = yargs</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.locale('fr')</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.option('date', {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>type: 'string',</text:p><text:p text:style-name="Code"><text:s text:c="4"/>default: new Date(),<text:s text:c="14"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>defaultDescription: 'now',<text:s text:c="8"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>coerce: input =&gt; new Date(input)<text:s text:c="2"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>})</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.argv;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(args.date.toISOString())</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> La valeur par défaut de l&#8217;option <text:span text:style-name="CodeDansTexte">--date</text:span> est un objet <text:span text:style-name="CodeDansTexte">Date</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Ce réglage personnalise l&#8217;affichage de la valeur par défaut dans la zone d&#8217;aide&#160;— sans ça, la date complète serait affichée, ce qui est peu élégant et moins informatif.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Cette fonction s&#8217;assure que toute valeur passée en option est transformée en objet <text:span text:style-name="CodeDansTexte">Date</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Autre exemple du mécanisme de coercition, cette fois-ci appliqué
à un chemin d&#8217;accès de fichier&#160;:</text:p>
<text:p text:style-name="Code">$ node application/coerce-file.js --json-file ../package.json</text:p><text:p text:style-name="Code">{ name: 'nodebook.chapter-08',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>version: '1.0.0',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>...</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant">Le chemin d&#8217;accès passé en option est intercepté par une fonction.
Elle reçoit le chemin d&#8217;accès en argument et a la responsabilité d&#8217;en lire
le contenu et de le transformer en objet ECMAScript grâce à la fonction
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-json"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="CodeDansTexte">JSON.parse()</text:span></text:a>
(cf. <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-03"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 3</text:a>).</text:p>
<text:p text:style-name="CodeTitre">application/coerce-file.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const yargs = require('yargs');</text:p><text:p text:style-name="Code">const {readFileSync} = require('fs');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const parseJSON = (path) =&gt; JSON.parse(readFileSync(path));</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const args = yargs</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.locale('fr')</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.option('json-file', {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>type: 'string',</text:p><text:p text:style-name="Code"><text:s text:c="4"/>coerce: parseJSON,<text:s text:c="8"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>})</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.argv;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(args.jsonFile);<text:s text:c="3"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Notre fonction <text:span text:style-name="CodeDansTexte">parseJSON</text:span> assure la transformation de l&#8217;argument <text:span text:style-name="CodeDansTexte">--json-file</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> C&#8217;est bien le contenu du fichier qui s&#8217;affiche et non la valeur passée au programme.<text:line-break/></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Performance</text:span> Lire et écrire des fichiers</text:h><text:p text:style-name="Remarque">La lecture de fichiers dont la taille dépasse quelques centaines de kilo-octets
devient problématique sur des machines avec peu de ressources,
si vous souhaitez obtenir des résultats le plus tôt possible et si
vous avez d&#8217;autres impératifs de performance.</text:p>
<text:p text:style-name="Remarque">Je vous invite à lire la section <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-streaming"  text:visited-style-name="Visited_20_Internet_20_Link">utiliser des flux de données</text:a>
pour en savoir plus.</text:p>
<text:p text:style-name="TexteCourant">Cette pratique renforce une approche applicative modulaire.
L'<text:span text:style-name="T7">interface absorbe</text:span> les spécificités de la ligne de commande.
L'<text:span text:style-name="T7">application réagit aux paramètres</text:span> sans avoir à se préoccuper du contexte,
que ça soit sur le web ou dans un terminal.</text:p>
<text:p text:style-name="TexteCourant">Les frameworks d&#8217;application en ligne de commande facilitent
l&#8217;organisation et la définition de <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-args.subcommand"  text:visited-style-name="Visited_20_Internet_20_Link">sous-commandes</text:a>.</text:p>
<text:p text:style-name="Code">$ node application/random.js --help</text:p><text:p text:style-name="Code">random.js [command]</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">Commandes:</text:p><text:p text:style-name="Code"><text:s text:c="2"/>random.js words [count]<text:s text:c="2"/>Des mots</text:p><text:p text:style-name="Code"><text:s text:c="2"/>random.js number<text:s text:c="9"/>Un nombre</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">Options:</text:p><text:p text:style-name="Code"><text:s text:c="2"/>--help<text:s text:c="5"/>Affiche de l'aide<text:s text:c="16"/>[booléen]</text:p><text:p text:style-name="Code"><text:s text:c="2"/>--version<text:s text:c="2"/>Affiche le numéro de version<text:s text:c="5"/>[booléen]</text:p>
<text:p text:style-name="TexteCourant">C&#8217;est l&#8217;occasion d&#8217;adapter l&#8217;exemple utilisé dans la section
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-args.subcommand"  text:visited-style-name="Visited_20_Internet_20_Link">utiliser des arguments et des options</text:a>.
L&#8217;intention est de modifier le moins possible le code initial.</text:p>
<text:p text:style-name="CodeTitre">application/random.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {random} = require('faker/locale/fr');</text:p><text:p text:style-name="Code">const yargs = require('yargs');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const number = () =&gt; random.number();</text:p><text:p text:style-name="Code">const words = (count=5) =&gt; random.words(count);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">yargs</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.locale('fr')</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.command('words [count]', 'Des mots', {}, (args) =&gt; { <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>console.log(words(args.count));<text:s text:c="21"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>})</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.command('number', 'Un nombre', {}, () =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>console.log(number());</text:p><text:p text:style-name="Code"><text:s text:c="2"/>})</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.argv;</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> La commande <text:span text:style-name="CodeDansTexte">words</text:span> accepte un argument optionnel <text:span text:style-name="CodeDansTexte">count</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Cette fonction est déclenchée quand la commande <text:span text:style-name="CodeDansTexte">words</text:span> est exécutée.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Je trouve qu&#8217;il est plus facile d&#8217;exécuter une fonction avec les bons arguments
en utilisant ce mécanisme de sous-commandes.
Nous n&#8217;avons même pas eu à modifier la signature des fonctions <text:span text:style-name="CodeDansTexte">words</text:span> et <text:span text:style-name="CodeDansTexte">number</text:span>.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Syntaxe</text:span> Annotation des arguments dans une commande</text:h><text:p text:style-name="Remarque">Certains frameworks comme <text:span text:style-name="T4">yargs</text:span> interprètent la commande que nous déclarons.
Lorsque c&#8217;est le cas, les arguments sont rangés dans un objet d&#8217;arguments nommés.
Les frameworks gèrent plusieurs cas de figure qui ont chacun leur notation.</text:p>
<table:table table:style-name="Tableau1"><table:table-column />,<table:table-column />,<table:table-column /><table:table-row><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Syntaxe</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Type d&#8217;argument</text:p></table:table-cell><table:table-cell table:style-name="TableauTitreColonne" office:value-type="string"><text:p>Explication</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">cmd [arg1]</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Optionnel</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>L&#8217;argument <text:span text:style-name="CodeDansTexte">arg1</text:span> n&#8217;est pas obligatoire.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">cmd &lt;arg1&gt;</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Obligatoire</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>L&#8217;argument <text:span text:style-name="CodeDansTexte">arg1</text:span> est obligatoire.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">cmd &lt;arg1|arg2&gt;</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Alias</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>L&#8217;argument est obligatoire et accepte deux informations différentes — un identifiant <text:span text:style-name="T4">ou</text:span> un e-email par exemple.</text:p></table:table-cell></table:table-row><table:table-row><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p><text:span text:style-name="CodeDansTexte">cmd [&#8230;&#8203;args]</text:span></text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Tableau</text:p></table:table-cell><table:table-cell table:style-name="TableauCorps" office:value-type="string"><text:p>Les arguments sont regroupés dans le tableau <text:span text:style-name="CodeDansTexte">args</text:span>.</text:p></table:table-cell></table:table-row></table:table>
<text:p text:style-name="TexteCourant">Un résultat identique s&#8217;obtient en organisant les sous-commandes dans des fichiers
individuels et en indiquant à <text:span text:style-name="T4">yargs</text:span> dans quel répertoire les charger.</text:p>
<text:p text:style-name="CodeTitre">application/random-dir.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const yargs = require('yargs');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">yargs</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.locale('fr')</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.commandDir('./commands') <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>.argv;</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Déclaration du répertoire dans lequel nous avons rangé les sous-commandes.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Nous ne déclarons plus les commandes sous forme d&#8217;un appel de fonction mais
en retournant un module Node.
Chacune de ses clés configure un aspect de la commande&#160;:</text:p>
<text:p text:style-name="CodeTitre">application/commands/words.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {random} = require('faker/locale/fr');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">module.exports = {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>command: 'words [count]',<text:s text:c="22"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>desc: 'Génère des mots',<text:s text:c="23"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>handler: (args) =&gt; {<text:s text:c="27"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>console.log(random.words(args.count || 5));</text:p><text:p text:style-name="Code"><text:s text:c="2"/>},</text:p><text:p text:style-name="Code">};</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Arguments acceptés par la commande.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Description de la commande.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Fonction déclenchée lorsque la commande est exécutée.<text:line-break/></text:p>
<text:bookmark text:name="ref-files" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Stratégies pour gérer les chemins d&#8217;accès</text:h><text:p text:style-name="TexteCourant">Il y a des cas où passer des chemins d&#8217;accès à des fichiers en <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-args"  text:visited-style-name="Visited_20_Internet_20_Link">arguments</text:a>
d&#8217;un exécutable ne suffit pas.
C&#8217;est le cas notamment quand on ne connaît pas la liste exacte des fichiers ou
lorsqu&#8217;elle est susceptible de changer.</text:p>
<text:p text:style-name="Code">$ node files/intro.js ../package.json \</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"$(nodebook dir chapter-08 --root)/package-lock.json"</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">[ '…/chapter-08/package.json',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>'…/chapter-08/package-lock.json' ]</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple ci-dessus illustre l&#8217;utilisation d&#8217;un chemin relatif et d&#8217;un
chemin absolu, tous deux normalisés en chemins absolus.
En faisant ainsi, nous rendons notre code indépendant du contexte de son
contexte d&#8217;exécution&#160;— ici, notre emplacement au sein du système de fichiers.</text:p>
<text:p text:style-name="CodeTitre">files/intro.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {resolve} = require('path');</text:p><text:p text:style-name="Code">const files = process.argv.slice(2);<text:s text:c="10"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const resolveFile = (file) =&gt; resolve(file);<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(files.map(resolveFile));<text:s text:c="10"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> La liste des fichiers correspond à tous les arguments du script.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Chaque chemin d&#8217;accès est transformé en chemin absolu.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> La liste homogénéisée est affichée à l&#8217;écran.<text:line-break/></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Repère</text:span> Chemin relatif, absolu ou <text:span text:style-name="CodeDansTexte">__dirname</text:span> ?</text:h><text:p text:style-name="Remarque">Les fichiers passés en argument peuvent être un mélange de chemins absolus
et de chemins relatifs.
Les chemins se normalisent avec la fonction <text:span text:style-name="CodeDansTexte">path.resolve()</text:span>.
La base à considérer est le <text:span text:style-name="T4">répertoire courant</text:span>, là où le programme est exécuté,
c&#8217;est-à-dire la valeur de <text:span text:style-name="CodeDansTexte">process.cwd()</text:span>
(cf. <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-path"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 4</text:a>).</text:p>
<text:p text:style-name="Remarque"><text:span text:style-name="CodeDansTexte">__dirname</text:span> est une base à utiliser lorsqu&#8217;un chemin est relatif au code source.</text:p>
<text:p text:style-name="TexteCourant">La saisie des chemins se simplifie en utilisant deux mécanismes&#160;: l'<text:span text:style-name="T4">expansion</text:span>
et le <text:span text:style-name="T4">globbing</text:span>.
Le module npm <text:span text:style-name="T4">glob</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/glob" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/glob</text:a></text:span>) fait très bien ce travail
mais nous allons nous baser sur <text:span text:style-name="T4">globby</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/globby" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/globby</text:a></text:span>) à la place.
Il supporte les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-promise"  text:visited-style-name="Visited_20_Internet_20_Link">promesses</text:a> et je le trouve
plus simple d&#8217;utilisation.</text:p>
<text:p text:style-name="Code">$ node files/glob.js '../package-*.json'</text:p><text:p text:style-name="Code">['…/chapter-08/package.json', '…/package-lock.json']</text:p>
<text:p text:style-name="TexteCourant">Dans cet exemple, nous partons à la recherche de tous les fichiers préfixés
par <text:span text:style-name="CodeDansTexte">package-</text:span> et terminés par <text:span text:style-name="CodeDansTexte">.json</text:span>.
Cette intention est exprimée par un seul argument qui contient le caractère
de <text:span text:style-name="T4">globbing</text:span> (<text:span text:style-name="CodeDansTexte">*</text:span>).</text:p>
<text:p text:style-name="CodeTitre">files/glob.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const glob = require('globby');</text:p><text:p text:style-name="Code">const {resolve} = require('path');</text:p><text:p text:style-name="Code">const patterns = process.argv.slice(2);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const resolveFiles = (files) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>return files.map(file =&gt; resolve(file));</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">glob(patterns)<text:s text:c="32"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>.then(files =&gt; resolveFiles(files))<text:s text:c="9"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>.then(files =&gt; console.log(files));<text:s text:c="9"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Le module <text:span text:style-name="T4">globby</text:span> accepte un ou plusieurs motifs&#160;— ici nous n&#8217;en utilisons qu&#8217;un.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Nous transformons les fichiers identifiés en chemins absolus.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Pour ensuite les afficher dans le terminal.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">L&#8217;expansion est caractérisée par l&#8217;utilisation des accolades (<text:span text:style-name="CodeDansTexte">{</text:span> et <text:span text:style-name="CodeDansTexte">}</text:span>).
Les valeurs sont séparées par une virgule, qui signifie <text:span text:style-name="T4">ou</text:span>.
Les deux syntaxes se combinent, ici pour récupérer les fichiers suffixés par
<text:span text:style-name="CodeDansTexte">.adoc</text:span> ou par <text:span text:style-name="CodeDansTexte">.html</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ node files/glob.js '../*.{adoc,html}'</text:p><text:p text:style-name="Code">['…/chapter-08/index.adoc']</text:p>
<text:p text:style-name="TexteCourant">Enfin, l&#8217;utilisation de la double-étoile (<text:span text:style-name="CodeDansTexte">**</text:span>) signifie <text:span text:style-name="T4">dans tous les répertoires</text:span>.
Nous récupérons ainsi tous les fichiers <text:span text:style-name="CodeDansTexte">.js</text:span> contenu dans ce répertoire
et les sous-répertoires&#160;:</text:p>
<text:p text:style-name="Code">$ node files/glob.js '**/*.js'</text:p><text:p text:style-name="Code">['…/chapter-08/examples/hello.js', …]</text:p>
<text:bookmark text:name="ref-streaming" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Utiliser les flux de données (<text:span text:style-name="">stdin</text:span>, <text:span text:style-name="">stdout</text:span> et <text:span text:style-name="">stderr</text:span>)</text:h><text:p text:style-name="TexteCourant">Cette section complète notre découverte du
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-stream"  text:visited-style-name="Visited_20_Internet_20_Link">module <text:span text:style-name="CodeDansTexte">stream</text:span></text:a>
(cf. <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-04"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 4</text:a>).
Mon intention est de vous aiguiller dans la conception d&#8217;applications
en ligne de commande qui acceptent des flux de données, en entrée
comme en sortie.
La ligne de commande se prête tout particulièrement au <text:span text:style-name="T4">streaming</text:span> et
nos applications gagnent à fonctionner longtemps en consommant le
moins de ressources possibles.</text:p>
<text:p text:style-name="Code">$ cat blah.txt</text:p><text:p text:style-name="Code">blah blah</text:p><text:p text:style-name="Code">$ cat blah.txt | node streaming/intro.js</text:p><text:p text:style-name="Code">BLAH BLAH</text:p>
<text:p text:style-name="CodeTitre">streaming/intro.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const getStdin = require('get-stdin');<text:s text:c="16"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const uppercase = (text) =&gt; text.toLocaleUpperCase();</text:p><text:p text:style-name="Code">const log = (text) =&gt; process.stdout.write(text);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">getStdin().then(uppercase).then(log);<text:s text:c="17"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Le module npm <text:span text:style-name="T4">get-stdin</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/get-stdin" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/get-stdin</text:a></text:span>) est pratique pour un flux d&#8217;entrée à petit volume.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Le module <text:span text:style-name="T4">get-stdin</text:span> retourne une promesse quand il a terminé de lire le flux d&#8217;entrée.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">J&#8217;aime bien proposer une alternative à l&#8217;entrée standard, en utilisant
les <text:span text:style-name="T7">arguments lorsqu&#8217;il y a un nombre indéfini d&#8217;éléments</text:span> à lire.
Je trouve que cette proposition évite de renoncer à un outil
dans un contexte où il est impossible de configurer un flux d&#8217;entrée.</text:p>
<text:p text:style-name="Code">$ cat blah.txt | node streaming/intro-fallback.js</text:p><text:p text:style-name="Code">BLAH BLAH</text:p><text:p text:style-name="Code">$ node streaming/intro-fallback.js $(&lt; blah.txt)</text:p><text:p text:style-name="Code">BLAH BLAH</text:p>
<text:p text:style-name="TexteCourant">La stratégie consiste à utiliser l&#8217;entrée standard quand on détecte une absence
d&#8217;arguments et sinon, d&#8217;utiliser ces derniers.</text:p>
<text:p text:style-name="CodeTitre">streaming/intro-fallback.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const getStdin = require('get-stdin');</text:p><text:p text:style-name="Code">const input = process.argv.slice(2);<text:s text:c="6"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const uppercase = (text) =&gt; text.toLocaleUpperCase();</text:p><text:p text:style-name="Code">const log = (text) =&gt; process.stdout.write(text);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">if (input.length === 0) {<text:s text:c="17"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>getStdin().then(uppercase).then(log);</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code">else {<text:s text:c="36"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>Promise.resolve(input.join(' ')).then(uppercase).then(log);</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Nous récupérons les arguments du script.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Chaque mot (séparé par un espace) est considéré comme un argument&#160;— s&#8217;il n&#8217;y en a pas nous pouvons utiliser l&#8217;entrée standard.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Sinon nous rassemblons les mots en une seule chaîne de caractères.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Notons au passage l&#8217;utilisation de <text:span text:style-name="CodeDansTexte">Promise.resolve()</text:span>
(cf. <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-promise"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 3</text:a>) pour transformer deux
sources de données de manière identique.</text:p>
<text:p text:style-name="TexteCourant">Les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-args.options"  text:visited-style-name="Visited_20_Internet_20_Link">options</text:a> sont adaptées pour <text:span text:style-name="T7">indiquer l&#8217;emplacement d&#8217;une ressource</text:span>.
La méthode <text:span text:style-name="CodeDansTexte">fs.createReadStream</text:span> (cf. <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-fs"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 4</text:a>)
lit les données d&#8217;une ressource de la même manière que nous consommons
l&#8217;entrée standard.</text:p>
<text:p text:style-name="Code">$ node streaming/input.js --input blah.txt</text:p><text:p text:style-name="Code">BLAH BLAH</text:p>
<text:p text:style-name="CodeTitre">streaming/input.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const minimist = require('minimist');</text:p><text:p text:style-name="Code">const getStream = require('get-stream');<text:s text:c="4"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">const {createReadStream} = require('fs');</text:p><text:p text:style-name="Code">const {input=''} = minimist(process.argv.slice(2));</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const uppercase = (text) =&gt; text.toLocaleUpperCase();</text:p><text:p text:style-name="Code">const log = (text) =&gt; process.stdout.write(text);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">if (input) {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>getStream(createReadStream(input))<text:s text:c="8"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>.then(uppercase).then(log);</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Le module npm <text:span text:style-name="T4">get-stream</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/get-stream" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/get-stream</text:a></text:span>) est similaire à <text:span text:style-name="T4">get-stdin</text:span> et fonctionne avec tout <text:span text:style-name="T4">stream</text:span> de lecture.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> <text:span text:style-name="T4">get-stream</text:span> résout une promesse dès qu&#8217;il a terminé de consommer le flux de lecture.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Là aussi, je trouve intéressant de proposer une approche double, en acceptant
un chemin de fichier en option et son contenu via l&#8217;entrée standard&#160;:</text:p>
<text:p text:style-name="Code">$ node streaming/input-fallback.js --input blah.txt</text:p><text:p text:style-name="Code">BLAH BLAH</text:p><text:p text:style-name="Code">$ cat blah.txt | node streaming/input-fallback.js</text:p><text:p text:style-name="Code">BLAH BLAH</text:p>
<text:p text:style-name="CodeTitre">streaming/input-fallback.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const minimist = require('minimist');</text:p><text:p text:style-name="Code">const through = require('through2');</text:p><text:p text:style-name="Code">const {createReadStream} = require('fs');</text:p><text:p text:style-name="Code">const {input=''} = minimist(process.argv.slice(2));</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const uppercase = (text) =&gt; text.toLocaleUpperCase();</text:p><text:p text:style-name="Code">const transform = through(function(data) {<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>this.push(uppercase(String(data)));<text:s text:c="7"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">if (!input.length) {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>process.stdin.pipe(transform)<text:s text:c="13"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>.pipe(process.stdout);</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code">else {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>createReadStream(input).pipe(transform)</text:p><text:p text:style-name="Code"><text:s text:c="4"/>.pipe(process.stdout);</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Le module npm <text:span text:style-name="T4">through2</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/through2" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/through2</text:a></text:span>) s&#8217;intègre à un <text:span text:style-name="T4">stream</text:span> en exécutant une fonction à chaque afflux de données.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Nous transformons la chaîne de caractères entrante dans le flux de sortie.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Ce flux de sortie est lui-même redirigé vers la sortie standard du programme.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Ce qui est intéressant avec cette approche est qu&#8217;elle nous apprend
à intervenir nous-même sur un flux sans avoir à connaître les tenants et aboutissants
des <text:span text:style-name="T4">streams</text:span>.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Alternative</text:span> Spécifier l&#8217;entrée ou la sortie standard en tant qu&#8217;option</text:h><text:p text:style-name="Remarque">Certains programmes Linux utilisent le caractère <text:span text:style-name="CodeDansTexte">-</text:span> pour symboliser l&#8217;entrée
ou la sortie standard, selon l&#8217;intention de l&#8217;option.</text:p>
<text:p text:style-name="RemarqueCode">$ cat blah.txt | node streaming/input-fallback.js --input -</text:p>
<text:p text:style-name="Remarque">Cette notation est utile quand vous voulez rendre l&#8217;entrée standard
optionnelle et explicite.</text:p>
<text:p text:style-name="TexteCourant">Le précédent exemple nous permet aussi de nous libérer des modules
<text:span text:style-name="T4">get-stdin</text:span> et <text:span text:style-name="T4">get-stream</text:span>.
Ces derniers obligent quand même à <text:span text:style-name="T4">charger tout le contenu</text:span> du flux entrant
en mémoire.
En travaillant directement sur les <text:span text:style-name="T4">streams</text:span> avec le module <text:span text:style-name="T4">through2</text:span>,
les transformations sont faites en temps réel, au fur et à mesure où les données
sont lues, bloc par bloc.</text:p>
<text:p text:style-name="TexteCourant">Nous sommes désormais en mesure de travailler sur avec des fichiers au même
titre qu&#8217;avec l&#8217;entrée et la sortie standard.</text:p>
<text:p text:style-name="Code">$ cat blah.txt | node streaming/pipe-in.js</text:p><text:p text:style-name="Code">BLAH BLAH</text:p>
<text:p text:style-name="CodeTitre">streaming/pipe-in.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const minimist = require('minimist');</text:p><text:p text:style-name="Code">const through = require('through2');</text:p><text:p text:style-name="Code">const {createReadStream:read} = require('fs');</text:p><text:p text:style-name="Code">const {i:input} = minimist(process.argv.slice(2));</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const source = input ? read(input) : process.stdin;<text:s text:c="3"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">const uppercase = (text) =&gt; text.toLocaleUpperCase();</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const transform = through(function(data) {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>this.push(uppercase(String(data)));</text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">source.pipe(transform).pipe(process.stdout);<text:s text:c="10"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> La source de données provient soit du flux de lecture de fichier soit de l&#8217;entrée standard.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Le travail sur le contenu est ainsi factorisé, avec un fonctionnement identique peu importe la source de données.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">L&#8217;utilisation d&#8217;un même concept pour lire et pour écrire des données
simplifie notre code tout en offrant des performances optimales.</text:p>
<text:p text:style-name="TexteCourant">Il ne reste plus grand-chose à faire pour appliquer cet effort à la sortie du
programme, pour écrire en continu dans un fichier ou bien vers la sortie standard.</text:p>
<text:p text:style-name="Code">$ node streaming/pipe-out.js -i blah.txt</text:p><text:p text:style-name="Code">BLAH BLAH</text:p><text:p text:style-name="Code">$ node streaming/pipe-out.js -i blah.txt -o debug.txt</text:p><text:p text:style-name="Code">$ cat blah.txt | node streaming/pipe-out.js -o debug.txt</text:p>
<text:p text:style-name="CodeTitre">streaming/pipe-out.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const minimist = require('minimist');</text:p><text:p text:style-name="Code">const through = require('through2');</text:p><text:p text:style-name="Code">const {createReadStream:read} = require('fs');</text:p><text:p text:style-name="Code">const {createWriteStream:write} = require('fs');</text:p><text:p text:style-name="Code">const {i:input,o:output} = minimist(process.argv.slice(2));</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const source = input ? read(input) : process.stdin;</text:p><text:p text:style-name="Code">const dest = output ? write(output) : process.stdout; <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">const uppercase = (text) =&gt; text.toLocaleUpperCase();</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const transform = through(function(data) {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>this.push(uppercase(String(data)));</text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">source.pipe(transform).pipe(dest);<text:s text:c="20"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> La destination des données est choisie en utilisant un mécanisme similaire à la source de données.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Le processus de traitement est désormais indifférent à la source et à la destination des données.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">En quelques exemples, nous sommes passé·e·s d&#8217;une utilisation potentiellement
énergivore à un traitement en continu, plus doux pour les ressources systèmes
et intégrable à tous les outils en ligne de commande qui lisent depuis
l&#8217;entrée standard ou écrivent vers la sortie standard.</text:p>
<text:bookmark text:name="ref-autocomplete" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Activer l&#8217;autocomplétion des commandes</text:h><text:p text:style-name="TexteCourant">Faire en sorte que les options possibles s&#8217;affichent à l&#8217;écran sur une simple
pression de la touche <text:span text:style-name="Menu">[Tab]</text:span> est la cerise sur le gâteau&#160;!
Cette technique facilite la découverte d&#8217;une application par tâtonnement.
Elle accélère et réduit le risque d&#8217;erreurs durant la saisie des commandes.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Compatibilité</text:span> Incertitudes de fonctionnement sous Windows</text:h><text:p text:style-name="Remarque">Cette section n&#8217;a pas été testée avec les systèmes d&#8217;exploitation Windows.
Les commandes référencées ci-après ne fonctionnent peut-être pas avec.</text:p>
<text:p text:style-name="CodeTitre">Prérequis pour installer les exécutables de ce chapitre.</text:p><text:p text:style-name="Code">$ npm install --global $(nodebook dir chapter-08 --root)</text:p>
<text:p text:style-name="TexteCourant">Le mécanisme d&#8217;autocomplétion est fourni par l&#8217;environnement d&#8217;exécution
de notre terminal, le <text:span text:style-name="T4">shell</text:span>.
Sous Linux et macOS, il s&#8217;agit de <text:span text:style-name="T4">bash</text:span>, de <text:span text:style-name="T4">zsh</text:span> ou plus rarement, de <text:span text:style-name="T4">fish</text:span>.
Il "suffit" donc d&#8217;interconnecter notre programme exécutable pour qu&#8217;il fournisse
les résultats de complétion au mécanisme de notre <text:span text:style-name="T4">shell</text:span>.</text:p>
<text:p text:style-name="Code">$ eval $(nodebook.ch08.autocomplete --completion) <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">$ nodebook.ch08.autocomplete <text:span text:style-name="Menu">[Tab]</text:span></text:p><text:p text:style-name="Code">--help coucou</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> L&#8217;option <text:span text:style-name="CodeDansTexte">--completion</text:span> est une option spéciale comprise par le module npm utilisé dans cet exemple.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Le mécanisme de complétion est fourni par le module npm <text:span text:style-name="T4">omelette</text:span>
(<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/omelette" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/omelette</text:a></text:span>).
Il est totalement indépendant de notre outillage d'<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-args"  text:visited-style-name="Visited_20_Internet_20_Link">arguments et d&#8217;options</text:a>.
Je le trouve léger et rapide à prendre en main.</text:p>
<text:p text:style-name="CodeTitre">autocomplete/intro.js</text:p><text:p text:style-name="Code">#!/usr/bin/env node</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const omelette = require('omelette');</text:p><text:p text:style-name="Code">const args = process.argv.slice(2);</text:p><text:p text:style-name="Code">const options = ['--help','coucou'];<text:s text:c="20"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">omelette`nodebook.ch08.autocomplete ${options}`.init(); <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(args);<text:s text:c="38"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Déclaration du nom de programme et des options et arguments à suggérer.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Ces deux options et arguments sont utilisés pour la complétion du programme.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Cette partie est atteinte seulement quand le programme est exécuté.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">L&#8217;autocomplétion peut aller jusqu&#8217;à suggérer les valeurs associées aux options
et arguments de notre programme.</text:p>
<text:p text:style-name="Code">$ eval $(nodebook.ch08.omelette --completion)</text:p><text:p text:style-name="Code">$ nodebook.ch08.omelette <text:span text:style-name="Menu">[Tab]</text:span></text:p><text:p text:style-name="Code">--timezone now</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">$ nodebook.ch08.omelette --timezone<text:span text:style-name="Menu">[Tab]</text:span><text:span text:style-name="Menu">[Tab]</text:span></text:p><text:p text:style-name="Code">Africa/Abidjan<text:s text:c="18"/>Asia/Almaty</text:p><text:p text:style-name="Code">Africa/Accra<text:s text:c="20"/>Asia/Amman</text:p><text:p text:style-name="Code">Africa/Addis_Ababa<text:s text:c="14"/>Asia/Anadyr</text:p><text:p text:style-name="Code">…</text:p>
<text:p text:style-name="TexteCourant">Pour cela, le module <text:span text:style-name="T4">omelette</text:span> accepte un arbre de déclarations afin de
comprendre quoi suggérer en fonction de ce qui a été précédemment saisi&#160;:</text:p>
<text:p text:style-name="CodeTitre">autocomplete/omelette.js</text:p><text:p text:style-name="Code">#!/usr/bin/env node</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const omelette = require('omelette');</text:p><text:p text:style-name="Code">const args = require('minimist')(process.argv.slice(2));</text:p><text:p text:style-name="Code">const timezones = require('tz-ids');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">omelette('nodebook.ch08.omelette')</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.tree({<text:s text:c="21"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>'--timezone': timezones,<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>'now': []</text:p><text:p text:style-name="Code"><text:s text:c="2"/>})</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.init();</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(args.timezone);</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> L&#8217;arbre est un objet ECMAScript.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> L&#8217;option <text:span text:style-name="CodeDansTexte">--timezone</text:span> suggère la liste complète des fuseaux horaires.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">C&#8217;est clairement pratique quand on ne sait pas par où commencer et quand on ne
connaît pas la liste exhaustive des propositions.</text:p>
<text:p text:style-name="TexteCourant">Nous avons parlé du module npm <text:span text:style-name="T4">yargs</text:span> dans la section
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-application"  text:visited-style-name="Visited_20_Internet_20_Link">utilisation d&#8217;un framework</text:a>.
Il embarque un module d&#8217;autocomplétion.
Si vous utilisez déjà ce module, l&#8217;autocomplétion revient à ajouter une ligne
de code à notre programme.
L&#8217;autocomplétion est un peu plus basique et demande plus de travail pour
arriver à la qualité des résultats du module <text:span text:style-name="T4">omelette</text:span>.</text:p>
<text:p text:style-name="Code">$ eval $(nodebook.ch08.yargs completion)</text:p><text:p text:style-name="Code">$ nodebook.ch08.yargs -<text:span text:style-name="Menu">[Tab]</text:span></text:p><text:p text:style-name="Code">--help<text:s text:c="6"/>--timezone<text:s text:c="2"/>--version</text:p>
<text:p text:style-name="CodeTitre">autocomplete/yargs.js</text:p><text:p text:style-name="Code">#!/usr/bin/env node</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">require('yargs')</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.option('timezone', {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>type: 'string',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>})</text:p><text:p text:style-name="Code"><text:s text:c="2"/>.completion()<text:s text:c="11"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>.argv;</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Cette méthode ajoute la compréhension de l&#8217;argument <text:span text:style-name="CodeDansTexte">completion</text:span> pour s&#8217;intégrer avec le <text:span text:style-name="T4">shell</text:span> de notre système d&#8217;exploitation.<text:line-break/></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Rendre l&#8217;autocomplétion permanente</text:h><text:p text:style-name="Remarque">Les commandes <text:span text:style-name="CodeDansTexte">eval $(&#8230;&#8203;)</text:span> des précédents exemples sont à consigner
dans le fichier de configuration de votre shell.
c&#8217;est-à-dire dans le fichier <text:span text:style-name="CodeDansTexte">~/.bashrc</text:span> pour <text:span text:style-name="T4">bash</text:span>, <text:span text:style-name="CodeDansTexte">~/.zshrc</text:span> pour <text:span text:style-name="T4">zsh</text:span>
et <text:span text:style-name="CodeDansTexte">~/.config/fish/config.fish</text:span> pour <text:span text:style-name="T4">fish</text:span>.</text:p>
<text:bookmark text:name="ref-packaging" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Rendre le programme indépendant de Node</text:h><text:p text:style-name="TexteCourant">Nos programmes exécutables Node souffrent d&#8217;un défaut&#160;: ils imposent
l&#8217;installation préalable de Node pour fonctionner.
Ce n&#8217;est pas grave pour une machine de devéloppeur·se ou sur une machine
de production car nous sommes à même de contrôler l&#8217;environnement d&#8217;exécution.</text:p>
<text:p text:style-name="TexteCourant">La première solution consiste à empaqueter notre application avec le module
npm <text:span text:style-name="T4">pkg</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/pkg" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/pkg</text:a></text:span>).
Cet exécutable embarque notre code, les dépendances npm du projet
et la version de Node de notre choix sous la forme d&#8217;un seul et unique
fichier exécutable.</text:p>
<text:p text:style-name="Code">$ npm install --global pkg</text:p><text:p text:style-name="Code">$ pkg --targets latest-linux,latest-macos,latest-win ..</text:p><text:p text:style-name="Code">$ ./nodebook</text:p><text:p text:style-name="Code">Il est 22h49.</text:p>
<text:p text:style-name="TexteCourant">Dans ce cas, nous avons empaqueté une même application à la fois pour les
systèmes d&#8217;exploitation Windows, Linux et macOS.
Nous pourrions faire de même pour des ordinateurs légers de type Raspberry Pi.</text:p>
<text:p text:style-name="TexteCourant">Une solution alternative consiste à utiliser le logiciel <text:span text:style-name="T4">Docker</text:span>
(<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://docker.com/community-edition" text:visited-style-name="Visited_20_Internet_20_Link">https://docker.com/community-edition</text:a></text:span>).
Ce système crée une base d&#8217;environnement réutilisable (le conteneur) à partir
d&#8217;une recette d&#8217;installation (l&#8217;image).
Une même image applicative se réplique à l&#8217;infini, sans avoir
connaissance de notre système d&#8217;exploitation.</text:p>
<text:p text:style-name="Code">$ docker build -t nodebook/chapter-08 ..</text:p><text:p text:style-name="Code">$ docker run -ti --rm nodebook/chapter-08</text:p><text:p text:style-name="Code">Bienvenue dans le chapitre 8 😊</text:p>
<text:p text:style-name="TexteCourant">Une image se construit depuis un fichier <text:span text:style-name="CodeDansTexte">Dockerfile</text:span> avec la commande <text:span text:style-name="CodeDansTexte">docker build</text:span>.
Elle s&#8217;exécute sous forme d&#8217;un conteneur jetable avec la commande <text:span text:style-name="CodeDansTexte">docker run</text:span>.
La recette d&#8217;installation est une suite d&#8217;instructions jouées les unes à la suite
des autres&#160;:</text:p>
<text:p text:style-name="CodeTitre">Dockerfile</text:p><text:p text:style-name="Code">FROM node:alpine</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">WORKDIR /nodebook</text:p><text:p text:style-name="Code">ADD ./package.json ./package-lock.json ./</text:p><text:p text:style-name="Code">RUN npm ci</text:p><text:p text:style-name="Code">ADD ./examples ./examples</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">CMD ["node", "examples/hello.js"]</text:p>
<text:p text:style-name="TexteCourant">Je recommande de doubler le fichier <text:span text:style-name="CodeDansTexte">Dockerfile</text:span> d&#8217;un fichier <text:span text:style-name="CodeDansTexte">.dockerignore</text:span>.
Il suit les mêmes règles de fonctionnement qu&#8217;un fichier <text:span text:style-name="CodeDansTexte">.gitignore</text:span>.
Il exclut une liste définie de fichiers du contexte d&#8217;exécution et d&#8217;une possible
copie vers l&#8217;image Docker.</text:p>
<text:p text:style-name="CodeTitre">.dockerignore</text:p><text:p text:style-name="Code">node_modules</text:p>
<text:p text:style-name="TexteCourant">Une fois construite, une image se distribue sous forme de fichier transférable,
sur le registre public <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://hub.docker.com" text:visited-style-name="Visited_20_Internet_20_Link">https://hub.docker.com</text:a></text:span> ou sur tout autre
registre privé&#160;— dont ceux fournis par certains
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.docker"  text:visited-style-name="Visited_20_Internet_20_Link">hébergeurs <text:span text:style-name="T4">cloud</text:span></text:a>
(cf. <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-06"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 6</text:a>).</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Alternative</text:span> Windows sous Docker</text:h><text:p text:style-name="Remarque">Microsoft met à disposition des images de Windows Server pour Docker à cette
adresse&#160;: <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://hub.docker.com/r/microsoft/windowsservercore/" text:visited-style-name="Visited_20_Internet_20_Link">https://hub.docker.com/r/microsoft/windowsservercore/</text:a></text:span>.</text:p>
<text:p text:style-name="Remarque">Nous pouvons tester une application Node dans un environnement Windows
sans quitter notre système d&#8217;exploitation Linux ou macOS.</text:p>
<text:bookmark text:name="ref-conclusion_8" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Conclusion</text:h><text:p text:style-name="TexteCourant">L&#8217;écriture d&#8217;un exécutable en ligne de commande est un
<text:span text:style-name="T7">exercice proche de celui d&#8217;une application web</text:span> écrite avec Node.</text:p>
<text:p text:style-name="TexteCourant">Nous avons vu que l&#8217;enjeu majeur tient dans la <text:span text:style-name="T7">modularisation du code applicatif</text:span>
et dans la <text:span text:style-name="T7">création d&#8217;une interface cohérente</text:span>, informative et documentée.</text:p>
<text:p text:style-name="TexteCourant"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-args"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T7">Les options et les arguments</text:span></text:a> sont essentiels à maîtriser et
à <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-doc"  text:visited-style-name="Visited_20_Internet_20_Link">documenter</text:a> car ils servent de pierre angulaire pour créer un pont
avec les utilisateurs.</text:p>
<text:p text:style-name="TexteCourant">Ils deviennent encore plus puissants une fois combinés avec
la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-files"  text:visited-style-name="Visited_20_Internet_20_Link">gestion des chemins d&#8217;accès</text:a> ainsi qu&#8217;avec
les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-streaming"  text:visited-style-name="Visited_20_Internet_20_Link">flux d&#8217;entrée et de sortie</text:a>.</text:p>
<text:bookmark text:name="ref-chapter-09" /><text:p text:style-name="ChapitreNumero">9</text:p><text:h text:style-name="ChapitreTitre" text:outline-level="1">Créer une application front-end</text:h><text:p text:style-name="TexteCourant">La popularité de Node s&#8217;est établie également pour la profusion d&#8217;outillage apportée au développement web <text:span text:style-name="T4">front-end</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Ce chapitre nous apprendra le rôle de Node en tant qu&#8217;extension au développement <text:span text:style-name="T4">front-end</text:span>.</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">Polyfills et compatibilité <text:span text:style-name="T4">ECMASCript</text:span></text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Importer des modules <text:span text:style-name="T4">npm</text:span> pour le web</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Créer du code modulaire, avec ou sans <text:span text:style-name="T4">framework</text:span></text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Échanges de données en temps-réel</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Outillage utile au quotidien</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Tester son code et la compatibilité avec les navigateurs web</text:p>
</text:list-item></text:list>
<text:p text:style-name="ChapitreIntroduction"><text:p text:style-name="TexteCourant">Avant l&#8217;apparition de Node, rare était l&#8217;outillage n&#8217;imposant pas une ou plusieurs plates-formes de développement&#160;: <text:span text:style-name="T4">YUICompressor</text:span> demandait Java, <text:span text:style-name="T4">Google Closure Compiler</text:span> demandait Java, <text:span text:style-name="T4">sprockets</text:span> Ruby et <text:span text:style-name="T4">pngquant</text:span> quelques dépendances système comme <text:span text:style-name="T4">libpng</text:span>.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;existence de Node et du registre <text:span text:style-name="T4">npm</text:span> a favorisé le développement d&#8217;un écosystème orienté <text:span text:style-name="T4">front-end</text:span> plus simple à appréhender.
Cela s&#8217;étend de la découverte au téléchargement des librairies tierces ainsi qu&#8217;à la compilation, l&#8217;optimisation et l&#8217;exécution des tests des applications web côté client.</text:p>
<text:p text:style-name="TexteCourant">Cet <text:span text:style-name="T7">écosystème rend l&#8217;écriture de code moderne normale</text:span>&#160;; un code anticipant les futurs standards d'<text:span text:style-name="T4">ECMAScript</text:span> et <text:span text:style-name="T4">HTML5</text:span>, sur les navigateurs actuels et anciens.</text:p></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Remarque</text:span> Versions de Node et npm</text:h><text:p text:style-name="Remarque">Le contenu de ce chapitre utilise les versions <text:span text:style-name="T7">Node v10</text:span> et <text:span text:style-name="T7">npm v6</text:span>.
Ce sont les versions stables recommandées en 2018.
J&#8217;explique comment les installer au <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 2</text:a>.</text:p>
<text:bookmark text:name="ref-quel_rapport_entre_node_et_les_navigateurs_web" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Quel rapport entre Node et les navigateurs web ?</text:h><text:p text:style-name="TexteCourant">Ce chapitre peut sembler confus au premier abord.
Si Node s&#8217;exécute au niveau du système d&#8217;exploitation&#160;— "côté serveur"&#160;— en quoi est-il lié au développement <text:span text:style-name="T4">front-end</text:span>&#160;— "côté client"&#160;?
Est-ce parce que du code écrit pour Node peut aussi fonctionner dans un navigateur web&#160;?
<text:span text:style-name="T4">Quid</text:span> de l&#8217;utilisation de <text:span text:style-name="CodeDansTexte">require('fs')</text:span> pour accéder au système de fichiers&#160;?</text:p>
<text:p text:style-name="TexteCourant">La réponse <text:span text:style-name="T4">courte</text:span> est&#160;: <text:span text:style-name="T7">nous n&#8217;exécutons pas Node dans un navigateur web</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Et la réponse <text:span text:style-name="T4">longue</text:span>&#160;: <text:span text:style-name="T7">Node est utilisé pour assembler du code</text:span>, le <text:span text:style-name="T4">transformer</text:span> et le rendre fonctionnel dans une paire de balises <text:span text:style-name="CodeDansTexte">&lt;script&gt;&lt;/script&gt;</text:span>.<text:line-break/>Ce code peut être aussi bien fourni par des <text:span text:style-name="T7">librairies tierces</text:span> installées via <text:span text:style-name="T4">npm</text:span> (<text:span text:style-name="T4">jQuery</text:span>, <text:span text:style-name="T4">React</text:span> ou <text:span text:style-name="T4">d3</text:span> par exemple) que par de l'<text:span text:style-name="T7">outillage</text:span> (optimiseurs, suite de tests, orchestration de tâches, etc.) ou encore par le <text:span text:style-name="T7">code réutilisable</text:span> de notre propre application web.</text:p>
<text:p text:style-name="TexteCourant">Il faut également bien comprendre qu&#8217;il y a plusieurs "problèmes" cachés sous une même question&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">Les navigateurs web et Node utilisent différentes machines virtuelles JavaScript, avec différents niveaux de complétion dans l&#8217;implémentation d'<text:span text:style-name="T4">ECMAScript</text:span>&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Les navigateurs web et Node n&#8217;ont pas accès aux mêmes APIs&#160;– Node accède à <text:span text:style-name="CodeDansTexte">fs</text:span> et <text:span text:style-name="CodeDansTexte">http</text:span> tandis que les navigateurs ont <text:span text:style-name="CodeDansTexte">File</text:span> et <text:span text:style-name="CodeDansTexte">fetch</text:span>/<text:span text:style-name="CodeDansTexte">XmlHttpRequest</text:span>&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">Les navigateurs web et Node ne gèrent pas le chargement de modules de la même manière&#160;– voir la section <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-managing-dependencies"  text:visited-style-name="Visited_20_Internet_20_Link">gestion des dépendances</text:a>&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">L&#8217;implémentation même d'<text:span text:style-name="T4">ECMAScript</text:span> va différer selon les versions de Node employées&#160;– un navigateur moderne et Node 6 comprendraient l&#8217;objet natif <text:span text:style-name="CodeDansTexte">Promise</text:span> mais pas Node 0.12.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">Ce processus n&#8217;est <text:span text:style-name="T4">pas magique</text:span> et nous verrons graduellement au cours des prochaines sections comment tout ceci fonctionne.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Jouer avec les exemples dans un terminal</text:h><text:p text:style-name="Remarque">Les exemples titrés d&#8217;un nom de fichier peuvent être installés sur votre ordinateur.
Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de
votre lecture pour voir ce qui change.</text:p>
<text:p text:style-name="Remarque">Installation des exemples via le module npm <text:span text:style-name="CodeDansTexte">nodebook</text:span>.</text:p><text:p text:style-name="RemarqueCode">$ npm install --global nodebook</text:p><text:p text:style-name="RemarqueCode">$ nodebook install chapter-09</text:p><text:p text:style-name="RemarqueCode">$ cd $(nodebook dir chapter-09)</text:p>
<text:p text:style-name="Remarque">La commande suivante devrait afficher un résultat qui confirme que vous êtes
au bon endroit&#160;:</text:p>
<text:p text:style-name="RemarqueCode">$ node hello.js</text:p>
<text:p text:style-name="Remarque">Suivez à nouveau les installations d&#8217;instruction pour rétablir les exemples
dans leur état initial.</text:p>
<text:bookmark text:name="ref-écrire_dès_à_présent_le_code_du_futur" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Écrire dès à présent le code du futur</text:h><text:p text:style-name="TexteCourant">Transformer du code ECMAScript a pendant longtemps été chose pénible.
Je pense par exemple à de la minification de code (pour réduire les temps de transfert sur les antiques lignes ADSL 128K) ou à de la conversion automatique de code <text:span text:style-name="T4">ECMAScript 3</text:span> en <text:span text:style-name="T4">ECMAScript 5</text:span>.
Cela nécessitait systématiquement l&#8217;utilisation d&#8217;un autre environnement qu&#8217;ECMAScript lui-même: <text:span text:style-name="T4">Rhino</text:span> nécessitait Java, <text:span text:style-name="T4">Spidermonkey</text:span> nécessitait C++ et <text:span text:style-name="T4">Trident</text:span> nécessitait un environnement Windows en plus de C++.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T7">esprima</text:span> chamboule les règles du jeu en décembre 2011&#160;: ce parseur <text:span text:style-name="T4">ECMAScript</text:span>&#160;— lui-même écrit en <text:span text:style-name="T4">ECMAScript</text:span>&#160;– exporte une compréhension de code sous forme d&#8217;arbre syntaxique abstrait (<text:span text:style-name="T4">abstract syntax tree</text:span>, <text:span text:style-name="T4">AST</text:span>).
Cet arbre est lui-même analysable par de <text:span text:style-name="T7">nouveaux outils émergents</text:span>&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">les <text:span text:style-name="T4">source maps</text:span> pour associer le code transformé au code d&#8217;origine, notamment dans les outils de développement des navigateurs web&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">des <text:span text:style-name="T4">minifieurs</text:span> plus efficaces et ayant connaissance des portions de code exécutées&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">des <text:span text:style-name="T4">analyseurs de code</text:span> pour informer le développeur d&#8217;erreurs de syntaxe, de non-respect de styles de développement, etc.&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">des <text:span text:style-name="T4">convertisseurs de code</text:span> pour passer d'<text:span text:style-name="T4">ECMAScript</text:span> vers <text:span text:style-name="T4">CoffeeScript</text:span>, de modules <text:span text:style-name="T4">CommonJS</text:span> vers des modules <text:span text:style-name="T4">ECMAScript 2015</text:span>, etc.</text:p>
</text:list-item></text:list>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Lien</text:span> Annonce d'<text:span text:style-name="T4">esprima</text:span></text:h><text:p text:style-name="Remarque"><text:span text:style-name="T4">Aryia Hidayat</text:span> introduit esprima dans ce billet de blog&#160;: <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://ariya.io/2011/12/introducing-esprima" text:visited-style-name="Visited_20_Internet_20_Link">https://ariya.io/2011/12/introducing-esprima</text:a></text:span>.
Il y présente notamment des comparatifs de performances d&#8217;exécution sur
différentes VM ECMAScript et face à d&#8217;autres parseurs.</text:p>
<text:bookmark text:name="ref-la_fin_de_lapproche_par_le_dénominateur_commun" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">La fin de l&#8217;approche par le dénominateur commun</text:h><text:p text:style-name="TexteCourant">Qui n&#8217;a pas déjà entamé un projet en posant la question à un client, en regardant les statistiques de trafic ou en se posant une question à soi-même&#160;: quelle est la liste des versions de navigateurs avec lequel notre site ou application web doit être compatible&#160;?</text:p>
<text:p text:style-name="TexteCourant">La version de navigateur la plus ancienne ou la moins conforme aux standards était celle qui donnait le <text:span text:style-name="T4">la</text:span> (qui a prononcé <text:span text:style-name="T4">Internet Explorer 7</text:span> dans la salle&#160;?).<text:line-break/>Cela voulait dire se priver de techniques modernes, standardisées ou en cours de standardisation.
Cela voulait dire des <text:span text:style-name="T4">hacks</text:span> dans ses CSS, dans son code <text:span text:style-name="T4">ECMAScript</text:span> et dans ses ressources graphiques.</text:p>
<text:bookmark text:name="ref-transpilation" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Écrire au plus proche des standards</text:h><text:p text:style-name="TexteCourant">Fort heureusement l&#8217;arrivée d'<text:span text:style-name="T4">esprima</text:span> change la donne et permet d&#8217;écrire un code proche des standards qui résiste au temps.
Son existence facilite l'<text:span text:style-name="T7">émergence d&#8217;outils automatisant les transformations de code</text:span> pour satisfaire nos besoins spécifiques.</text:p>
<text:p text:style-name="TexteCourant">Il y a plusieurs éléments à prendre en compte concernant la standardisation de nouvelles versions d'<text:span text:style-name="T4">ECMAScript</text:span> et les évolutions de sa syntaxe&#160;:</text:p>
<text:p text:style-name="ListeANumero">1.<text:tab/>la <text:span text:style-name="T7">cadence de standardisation</text:span> a été revue pour devenir prédictible&#160;– une volonté d&#8217;une fois par an&#160;;</text:p><text:p text:style-name="ListeANumero">2.<text:tab/>les <text:span text:style-name="T7">fonctionnalités et éléments de syntaxe sont implémentés un par un</text:span>, à des vitesses différentes par les différents navigateurs web&#160;;</text:p><text:p text:style-name="ListeANumero">3.<text:tab/><text:span text:style-name="T4">deux tiers</text:span> de navigateurs fonctionnent sur des <text:span text:style-name="T7">rythmes de mises à jour en cycle court</text:span> (de six à neuf semaines)&#160;– le <text:span text:style-name="T4">tiers</text:span> restant est cadencé à <text:span text:style-name="T7">une seule mise à jour par an</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Il vaut mieux <text:span text:style-name="T7">parier sur les standards comme stratégie à long terme</text:span> si on tient compte du <text:span text:style-name="T4">temps de développement</text:span> et du <text:span text:style-name="T4">temps de maintenance</text:span> d&#8217;une base de code.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Question</text:span> Standards, quels standards ?</text:h><text:p text:style-name="Remarque">Il y a plusieurs organismes prenant part à la standardisation de langages et d&#8217;API lorsque l&#8217;on touche aux navigateurs web&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="RemarquePuce">Pour le <text:span text:style-name="T4">langage HTML</text:span>&#160;: WHATWG (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://html.spec.whatwg.org/" text:visited-style-name="Visited_20_Internet_20_Link">https://html.spec.whatwg.org/</text:a></text:span>)&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="RemarquePuce">Pour l'<text:span text:style-name="T4">API DOM</text:span>&#160;: WHATWG (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://dom.spec.whatwg.org/" text:visited-style-name="Visited_20_Internet_20_Link">https://dom.spec.whatwg.org/</text:a></text:span>)&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="RemarquePuce">Pour le <text:span text:style-name="T4">langage CSS</text:span>&#160;: W3C (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://www.w3.org/standards/techs/css" text:visited-style-name="Visited_20_Internet_20_Link">https://www.w3.org/standards/techs/css</text:a></text:span>)&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="RemarquePuce">Pour le <text:span text:style-name="T4">langage ECMAScript</text:span>&#160;: TC39 (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/tc39" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/tc39</text:a></text:span>)&#160;;</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">Lorsque nous écrivons du code, nous pouvons rencontrer quatre cas de figure&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">élément de syntaxe non-implémenté</text:span>&#160;: transformer le code pour l&#8217;adapter aux navigateurs cibles&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">élément de syntaxe partiellement implémenté</text:span>&#160;: utiliser l&#8217;implémentation native des navigateurs et à défaut, transformer le code pour l&#8217;adapter aux autres navigateurs&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">élément de syntaxe totalement implémenté</text:span>&#160;: utiliser l&#8217;implémentation native des navigateurs.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">Il arrive que certains éléments de syntaxe soient <text:span text:style-name="T7">abandonnés</text:span> pendant le processus de standardisation&#160;– ou que leur implémentation change beaucoup (on pensera à <text:span text:style-name="CodeDansTexte">Object.observe</text:span>).</text:p>
<text:p text:style-name="TexteCourant">La question qui nous taraude est&#160;: <text:span text:style-name="T7">comment transformer le code</text:span> pour satisfaire à la fois les navigateurs compatibles et les autres&#160;?<text:line-break/><text:span text:style-name="T7">Babel</text:span> est un outil de choix  pour parvenir à ces fins d&#8217;écriture de code résistant au(x standards du) temps.</text:p>
<text:p text:style-name="TexteCourant">Ce module convertit de manière sélective toute syntaxe <text:span text:style-name="T4">ECMAScript 2015</text:span>&#160;– ainsi que <text:span text:style-name="T4">ECMAScript 2016</text:span>, etc.&#160;– vers de l'<text:span text:style-name="T4">ECMAScript 5</text:span>, compréhensible par les <text:span text:style-name="T4">navigateurs web modernes</text:span>.
L&#8217;intérêt de sa <text:span text:style-name="T4">sélectivité</text:span> fait que l&#8217;on peut progressivement arrêter de convertir les éléments de syntaxe couverts par 100% des navigateurs web modernes.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Histoire</text:span> Traceur</text:h><text:p text:style-name="Remarque"><text:span text:style-name="T4">Traceur</text:span> est un des premiers transpilateurs <text:span text:style-name="T4">ECMAScript 2015</text:span> vers <text:span text:style-name="T4">ECMAScript 5</text:span> à avoir émergé dans l&#8217;écosystème Node.</text:p>
<text:p text:style-name="Remarque">Il a permis de commencer à <text:span text:style-name="T7">écrire des modules en <text:span text:style-name="T4">ECMAScript 2015</text:span> bien avant que la spécification ne soit entièrement terminée</text:span>.
Et donc de pouvoir anticiper son apprentissage tout en mettant le langage à l&#8217;épreuve avant sa finalisation.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple suivant illustre un code utilisant des éléments de syntaxe d'<text:span text:style-name="T4">ECMAScript 2015</text:span>.</text:p>
<text:p text:style-name="CodeTitre">babel-es2015.js</text:p><text:p text:style-name="Code">const getOS = userAgent =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const USER_AGENT = /\(([^;]+)\s?;\s?([^)]+)\)/;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const [, os, version] = userAgent.match(USER_AGENT);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>return {os, version};</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {userAgent} = window.navigator; <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(getOS(userAgent));<text:s text:c="8"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Nous déstructurons l'<text:span text:style-name="T4">agent utilisateur</text:span> du navigateur&#160;– à noter que ce même code exécuté par Node lancerait une exception car <text:span text:style-name="CodeDansTexte">window</text:span> n&#8217;existe pas dans cet environnement.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche un objet content le <text:span text:style-name="T4">nom</text:span> de votre système d&#8217;exploitation ainsi que sa <text:span text:style-name="T4">version</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Ce code représente l'<text:span text:style-name="T7">idéal de ce que l&#8217;on souhaite écrire</text:span>.
Le seul obstacle consiste à <text:span text:style-name="T4">traduire</text:span> ce code pour l&#8217;ensemble des navigateurs web compatibles avec <text:span text:style-name="T4">ECMAScript 5</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Exécutons cette commande&#160;:</text:p>
<text:p text:style-name="Code">$ npm run babel -- --no-babelrc examples/babel-es2015.js</text:p>
<text:p text:style-name="TexteCourant">La sortie affichée correspond <text:span text:style-name="T4">exactement</text:span> à notre code d&#8217;origine.
C&#8217;est parce que sans configuration, <text:span text:style-name="T4">babel</text:span> ne transforme rien.<text:line-break/>L&#8217;ouvrage contient un fichier de configuration <text:span text:style-name="CodeDansTexte">.babelrc.yml</text:span>.
Nous expliquerons son contenu après en avoir observé son impact&#160;:</text:p>
<text:p text:style-name="Code">$ npm run babel -- examples/babel-es2015.js</text:p>
<text:p text:style-name="TexteCourant">La sortie a changé et renvoie un code totalement fonctionnel sur des navigateurs web ne supportant pas <text:span text:style-name="T4">ECMAScript 2015</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">babel-es2015ified.js</text:p><text:p text:style-name="Code">"use strict";</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">var getOS = function getOS(userAgent) {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>var _userAgent$match = userAgent.match(/\(([^;]+)\s?;\s?([^)]+)\)/),</text:p><text:p text:style-name="Code"><text:s text:c="6"/>os = _userAgent$match[1],</text:p><text:p text:style-name="Code"><text:s text:c="6"/>version = _userAgent$match[2];</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>return { os: os, version: version };</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">var userAgent = window.navigator.userAgent;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(getOS(userAgent));</text:p>
<text:p text:style-name="TexteCourant">Il existe de nombreuses règles de transformation.
Chacune d&#8217;entre elles cible une fonctionnalité spécifique d&#8217;une version d'<text:span text:style-name="T4">ECMAScript</text:span>.
Les <text:span text:style-name="T7"><text:span text:style-name="T4">presets</text:span> des modules <text:span text:style-name="T4">npm</text:span> faisant office de groupes logiques</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Le <text:span text:style-name="T4">preset</text:span> <text:span text:style-name="CodeDansTexte">preset-env</text:span> <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/babel-preset-env" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/babel-preset-env</text:a></text:span> convertit
notre code dans une version compatible avec la majorité des navigateurs
supportés sur le marché.
Si vos besoins sont différents, sa configuration sait cibler des navigateurs
soit en fonction de leur version, soit en fonction de leurs parts de marché.</text:p>
<text:p text:style-name="TexteCourant">La configuration des <text:span text:style-name="T4">presets</text:span> et d&#8217;autres aspects de Babel se font
dans un fichier nommé <text:span text:style-name="CodeDansTexte">.babelrc.yml</text:span>.
L&#8217;exemple suivant configure Babel pour préserver les commentaires,
transformer la syntaxe JSX pour <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-react"  text:visited-style-name="Visited_20_Internet_20_Link">React</text:a> et transformer pour les
dernières versions des navigateurs web sur le marché&#160;:</text:p>
<text:p text:style-name="CodeTitre">.babelrc.yml</text:p><text:p text:style-name="Code">comments: false</text:p><text:p text:style-name="Code">presets:</text:p><text:p text:style-name="Code"><text:s text:c="2"/>- react</text:p><text:p text:style-name="Code"><text:s text:c="2"/>- env</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Lien</text:span> Documentation de <text:span text:style-name="T4">babel</text:span></text:h><text:p text:style-name="Remarque">Toutes les options de configuration sont documentées sur le site officiel
de <text:span text:style-name="T4">babel</text:span>&#160;: <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://babeljs.io/docs/usage/api/#options" text:visited-style-name="Visited_20_Internet_20_Link">https://babeljs.io/docs/usage/api/#options</text:a></text:span>.</text:p>
<text:p text:style-name="Remarque">Une autre page explique où placer et quoi mettre dans les fichiers
<text:span text:style-name="CodeDansTexte">.babelrc.yml</text:span>&#160;: <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://babeljs.io/docs/usage/babelrc/" text:visited-style-name="Visited_20_Internet_20_Link">https://babeljs.io/docs/usage/babelrc/</text:a></text:span>.</text:p>
<text:bookmark text:name="ref-polyfills" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Combler les manques avec des <text:span text:style-name="T4">polyfills</text:span></text:h><text:p text:style-name="TexteCourant">Des outils comme <text:span text:style-name="T4">babel</text:span> nous permettent d&#8217;écrire avec une <text:span text:style-name="T7">syntaxe moderne</text:span>.
Les <text:span text:style-name="T7">polyfills</text:span> sont des bouts de code qui nous permettent de <text:span text:style-name="T7">combler les fonctionnalités manquantes</text:span>&#160;– leur implémentation.</text:p>
<text:p text:style-name="TexteCourant">Un <text:span text:style-name="T7">polyfill harmonise la présence d&#8217;une fonctionnalité</text:span> au sein d&#8217;une variété de navigateurs web et d&#8217;environnements JavaScript.
Cela se fera au détriment de <text:span text:style-name="T7">quelques kilo-octets de code</text:span> à charger en plus dans nos applications.
L&#8217;appel à un service de polyfill externe entrainera un <text:span text:style-name="T7">léger ralentissement du chargement</text:span> de notre page.</text:p>
<text:p text:style-name="TexteCourant">Prenons le bloc de code suivant&#160;:</text:p>
<text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">Promise.resolve('ok');</text:p>
<text:p text:style-name="TexteCourant">Comprenons que&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">cette <text:span text:style-name="T7">syntaxe est valide</text:span> dans toutes les versions d'<text:span text:style-name="T4">ECMAScript</text:span> (<text:span text:style-name="T4">babel</text:span> ne changera rien à ce code)&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">l&#8217;objet global <text:span text:style-name="CodeDansTexte">Promise</text:span> existe dans un navigateur moderne&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">l&#8217;objet global <text:span text:style-name="CodeDansTexte">Promise</text:span> n&#8217;existe pas dans <text:span text:style-name="T4">Internet Explorer 11</text:span>, entre autres.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">Ce code fonctionnerait donc sur un navigateur moderne mais pas dans <text:span text:style-name="T4">IE11</text:span>.
L&#8217;inclusion d&#8217;un <text:span text:style-name="T4">polyfill</text:span> de <text:span text:style-name="CodeDansTexte">Promise</text:span> résoudrait le problème.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Bonne pratique</text:span> Quand inclure les <text:span text:style-name="T4">polyfills</text:span> ?</text:h><text:p text:style-name="Remarque"><text:span text:style-name="T7">Un polyfill se charge toujours en premier</text:span>.
On incluera tous les polyfills d&#8217;un coup <text:span text:style-name="T7">avant notre propre code</text:span>.</text:p>
<text:p text:style-name="Remarque">Nous garantissons ainsi une <text:span text:style-name="T7">cohérence et stabilité de comportement</text:span> au sein de notre application, peu importe l&#8217;ordre d&#8217;exécution de nos scripts.</text:p>
<text:p text:style-name="TexteCourant">Parlons maintenant des méthodes d&#8217;inclusion des <text:span text:style-name="T4">polyfills</text:span> pour mieux comprendre comment procéder.</text:p>
<text:p text:style-name="TexteCourant">Le <text:span text:style-name="T7">service polyfill.io</text:span> est de loin la méthode la plus simple à utiliser.
Il suffit d&#8217;inclure un script dans toutes vos pages web.
<text:span text:style-name="T4">polyfill.io</text:span> déterminera les <text:span text:style-name="T4">polyfills</text:span> à charger en fonction de la compatibilité du navigateur chargeant la page&#160;:</text:p>
<text:p text:style-name="CodeTitre">polyfill.io.html</text:p><text:p text:style-name="Code">&lt;!DOCTYPE html&gt;</text:p><text:p text:style-name="Code">&lt;html&gt;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;head&gt;</text:p><text:p text:style-name="Code"><text:s text:c="4"/>&lt;title&gt;Example polyfill.io&lt;/title&gt;</text:p><text:p text:style-name="Code"><text:s text:c="4"/>&lt;script src="https://cdn.polyfill.io/v2/polyfill.min.js"&gt;&lt;/script&gt;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;/head&gt;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;body&gt;</text:p><text:p text:style-name="Code"><text:s text:c="4"/>&lt;script&gt;</text:p><text:p text:style-name="Code"><text:s text:c="6"/>Promise.resolve('ok')</text:p><text:p text:style-name="Code"><text:s text:c="8"/>.then(msg =&gt; console.log(msg));</text:p><text:p text:style-name="Code"><text:s text:c="4"/>&lt;/script&gt;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;/body&gt;</text:p><text:p text:style-name="Code">&lt;/html&gt;</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> polyfill.io</text:h><text:p text:style-name="Remarque"><text:span text:style-name="T4">polyfill.io</text:span> possède une documentation très complète sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://qa.polyfill.io/v2/docs/" text:visited-style-name="Visited_20_Internet_20_Link">https://qa.polyfill.io/v2/docs/</text:a></text:span>.
Elle nous aidera à configurer finement le service en fonction de nos besoins.</text:p>
<text:p text:style-name="TexteCourant">Nous pouvons déduire <text:span text:style-name="T7">deux règles</text:span> de l&#8217;exemple précédent&#160;:</text:p>
<text:p text:style-name="ListeANumero">1.<text:tab/>inclure les <text:span text:style-name="T4">polyfills</text:span> en <text:span text:style-name="T7">tout premier</text:span>&#160;;</text:p><text:p text:style-name="ListeANumero">2.<text:tab/>inclure les <text:span text:style-name="T4">polyfills</text:span> <text:span text:style-name="T7">en dehors</text:span> de notre code.</text:p>
<text:p text:style-name="TexteCourant">La deuxième méthode est d'<text:span text:style-name="T7">embarquer les polyfills</text:span> dans notre base de code.
L&#8217;avantage est de maitriser notre base de code et de ne pas dépendre d&#8217;un service externe.
L&#8217;inconvénient est que nous chargeons du code qui sera inutile dans les navigateurs et environnements disposant déjà de ces fonctionnalités&#160;:</text:p>
<text:p text:style-name="CodeTitre">polyfill-import.html</text:p><text:p text:style-name="Code">&lt;!DOCTYPE html&gt;</text:p><text:p text:style-name="Code">&lt;html&gt;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;head&gt;</text:p><text:p text:style-name="Code"><text:s text:c="4"/>&lt;title&gt;Exemple polyfill custom&lt;/title&gt;</text:p><text:p text:style-name="Code"><text:s text:c="4"/>&lt;script type="module"&gt;</text:p><text:p text:style-name="Code"><text:s text:c="6"/>import 'es6-promise/auto';<text:s text:c="8"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="6"/>import 'core-js/fn/number/is-nan';<text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>&lt;/script&gt;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;/head&gt;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;body&gt;</text:p><text:p text:style-name="Code"><text:s text:c="4"/>&lt;script&gt;</text:p><text:p text:style-name="Code"><text:s text:c="6"/>Promise.resolve(Number.isNaN(NaN))</text:p><text:p text:style-name="Code"><text:s text:c="8"/>.then(msg =&gt; console.log(msg));</text:p><text:p text:style-name="Code"><text:s text:c="4"/>&lt;/script&gt;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;/body&gt;</text:p><text:p text:style-name="Code">&lt;/html&gt;</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Nous verrons <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-modules"  text:visited-style-name="Visited_20_Internet_20_Link">comment importer des modules</text:a> ci-après.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> On importe un deuxième <text:span text:style-name="T4">polyfill</text:span>, celui de la méthode <text:span text:style-name="CodeDansTexte">Number.isNaN</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Le module <text:span text:style-name="T4">npm</text:span> <text:span text:style-name="CodeDansTexte">core-js</text:span> est une librairie exhaustive de <text:span text:style-name="T4">polyfills</text:span> pouvant être inclus un à un ou par versions d'<text:span text:style-name="T4">ECMAScript</text:span>.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> <text:span text:style-name="CodeDansTexte">core-js</text:span></text:h><text:p text:style-name="Remarque">La documentation en ligne de <text:span text:style-name="CodeDansTexte">core-js</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/core-js" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/core-js</text:a></text:span>) liste
l&#8217;ensemble des <text:span text:style-name="T4">polyfills</text:span> supportés par ainsi que des exemples d&#8217;utilisation.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Attention</text:span> Performance et duplication</text:h><text:p text:style-name="Remarque">Il faut veiller à ne pas alourdir inutilement une application.</text:p>
<text:p text:style-name="Remarque">Laissons la responsabilité de <text:span text:style-name="T4">polyfiller</text:span> aux utilisateurs de notre code&#160;; particulièrement si celui-ci est <text:span text:style-name="T7">redistribué</text:span> en tant que module <text:span text:style-name="T4">npm</text:span> public.</text:p>
<text:p text:style-name="Remarque">Si plusieurs scripts nécessitent des polyfills, mieux vaut inclure ces derniers <text:span text:style-name="T4">en une fois</text:span>&#160;:</text:p>
<text:p text:style-name="RemarqueCode">&lt;script src="polyfills.js"&gt;&lt;/script&gt;</text:p><text:p text:style-name="RemarqueCode">&lt;script src="script-a.js"&gt;&lt;/script&gt;</text:p><text:p text:style-name="RemarqueCode">&lt;script src="script-b.js"&gt;&lt;/script&gt;</text:p>
<text:p text:style-name="TexteCourant">Enfin, une dernière méthode est d'<text:span text:style-name="T7">importer la fonction de <text:span text:style-name="T4">polyfill</text:span> sans réécrire les objets globaux</text:span>.
Cette pratique a l&#8217;avantage de <text:span text:style-name="T4">ne pas entrainer d&#8217;effets secondaires</text:span> et de garantir le <text:span text:style-name="T4">même comportement</text:span> dans tous les navigateurs web.
L&#8217;inconvénient est qu&#8217;on n&#8217;utilise pas la fonctionnalité native des navigateurs lorsqu&#8217;elle est présente.
Nous nous retrouvons tributaires de la qualité d&#8217;implémentation du <text:span text:style-name="T4">polyfill</text:span>.</text:p>
<text:p text:style-name="CodeTitre">polyfill-require.js</text:p><text:p text:style-name="Code">import {Promise as PromisePolyfill} from 'es6-promise';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">PromisePolyfill.resolve('ok').then(msg =&gt; console.log(msg));</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log('Promise' in window);<text:s text:c="16"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(PromisePolyfill === window.Promise); <text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">true</text:span> si le navigateur implémente l&#8217;API <text:span text:style-name="T4">Promise</text:span>&#160;– sinon affiche <text:span text:style-name="CodeDansTexte">false</text:span> et l&#8217;utilisation d&#8217;un <text:span text:style-name="T4">polyfill</text:span> prend tout son sens.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">false</text:span>, car le <text:span text:style-name="T4">polyfill</text:span> de <text:span text:style-name="T4">Promise</text:span> est une function strictement différente de <text:span text:style-name="CodeDansTexte">window.Promise</text:span>.<text:line-break/></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Guide</text:span> Bonnes pratiques constatées</text:h><text:p text:style-name="Remarque">De bons usages des <text:span text:style-name="T4">polyfills</text:span> ainsi les risques liés à leur utilisation
sont compilés dans ce guide édité par le W3C&#160;: <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://w3ctag.github.io/polyfills/" text:visited-style-name="Visited_20_Internet_20_Link">https://w3ctag.github.io/polyfills/</text:a></text:span>.</text:p>
<text:bookmark text:name="ref-modules" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Importer des modules</text:h><text:p text:style-name="TexteCourant">Importer des modules est une pratique courante avec Node.
Ça l&#8217;est en revanche beaucoup moins dans l&#8217;univers du web puisqu&#8217;il n&#8217;existait rien de <text:span text:style-name="T4">natif</text:span> avant les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-modules-es2015"  text:visited-style-name="Visited_20_Internet_20_Link">modules ECMAScript 2015</text:a>.</text:p>
<text:p text:style-name="TexteCourant">Auparavant, on aura vu débarquer les modules <text:span text:style-name="T4">AMD</text:span> (<text:span text:style-name="T4">Asynchronous Module Definition</text:span>) pour gérer les dépendances <text:span text:style-name="T4">entre scripts</text:span>.
Les librairies <text:span text:style-name="T4">Dojo</text:span>, <text:span text:style-name="T4">RequireJS</text:span> et <text:span text:style-name="T4">YUI</text:span> ont popularisé ce motif de conception.
Un désir d&#8217;universalité a ensuite émergé avec le gain de popularité croissant de Node avec les modules <text:span text:style-name="T4">UMD</text:span>, conciliant modules <text:span text:style-name="T4">AMD</text:span> et <text:span text:style-name="T4">CommonJS</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Les modules <text:span text:style-name="T4">ECMAScript 2015</text:span> ont émergé de ce bouillonnement.</text:p>
<text:bookmark text:name="ref-modules-script" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">La balise <text:span text:style-name="">&lt;script&gt;</text:span></text:h><text:p text:style-name="TexteCourant">Rappelons-le, la méthode incontournable pour charger du code dans un navigateur web est l&#8217;utilisation de la base <text:span text:style-name="CodeDansTexte">&lt;script&gt;</text:span>.
Le chargement puis l&#8217;évaluation et l&#8217;exécution du script bloque le temps nécessaire le rendu d&#8217;un document HTML.</text:p>
<text:p text:style-name="CodeTitre">import/script.html</text:p><text:p text:style-name="Code">&lt;script src="global-dom-log.js"&gt;&lt;/script&gt;</text:p><text:p text:style-name="Code">&lt;script src="script.js"&gt;&lt;/script&gt;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">&lt;div id="logs"&gt;&lt;/div&gt;</text:p>
<text:p text:style-name="TexteCourant">Les différents <text:span text:style-name="T4">scripts</text:span> partagent le même espace mémoire, permettant ainsi à <text:span text:style-name="CodeDansTexte">script.js</text:span> d&#8217;avoir accès à la fonction <text:span text:style-name="CodeDansTexte">log</text:span> définie dans <text:span text:style-name="CodeDansTexte">global-dom-log.js</text:span>.</text:p>
<text:p text:style-name="CodeTitre">import/global-dom-log.js</text:p><text:p text:style-name="Code">const log = (message) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const text = String(message).trim();</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>document.querySelector('#logs').textContent = text;</text:p><text:p text:style-name="Code">};</text:p>
<text:p text:style-name="CodeTitre">import/script.js</text:p><text:p text:style-name="Code">/* global log */</text:p><text:p text:style-name="Code">window.addEventListener('load', () =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>log('OK');<text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">log('KO');<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche une erreur car <text:span text:style-name="CodeDansTexte">&lt;div id="logs"&gt;</text:span> n&#8217;existe pas encore dans le document à ce stade de l&#8217;exécution.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Cette ligne est exécutée une fois le document chargé&#160;– <text:span text:style-name="CodeDansTexte">&lt;div id="logs"&gt;</text:span> contient désormais le texte <text:span text:style-name="CodeDansTexte">OK</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">S&#8217;il est facile d&#8217;ajouter du code dans le navigateur, on constate plusieurs problèmes&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">partager du code entre scripts repose sur une <text:span text:style-name="T7">attente explicite</text:span>&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">le partage de variables entre scripts peut entrainer des <text:span text:style-name="T7">collisions</text:span> (par exemple, deux variables du même nom définies dans des scripts différents)&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">il n&#8217;y a pas de moyen évident de rendre des bouts de code <text:span text:style-name="T4">privé</text:span> au sein de chaque script.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">Le développement front-end basé sur de l&#8217;outillage Node va justement nous aider à <text:span text:style-name="T7">solidifier et renforcer la réutilisabilité de notre code</text:span>.</text:p>
<text:bookmark text:name="ref-modules-es2015" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Les modules <text:span text:style-name="T4">ECMAScript 2015</text:span></text:h><text:p text:style-name="TexteCourant">Nous avons évoqué les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-primitives"  text:visited-style-name="Visited_20_Internet_20_Link">primitives <text:span text:style-name="T4">ECMAScript 2015</text:span></text:a> dans le Chapitre 3.
Les modules font partie des fonctionnalités tant attendues.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-09/images/module-import.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 63. Utilisation des modules <text:span text:style-name="T4">ECMAScript 2015</text:span> dans un navigateur web (ici, Safari pour macOS).</text:p>
<text:p text:style-name="TexteCourant">L&#8217;attribut <text:span text:style-name="CodeDansTexte">type="module"</text:span> a été introduit pour maintenir une compatibilité entre scripts classiques et les modules <text:span text:style-name="T4">ECMAScript 2015</text:span>.
Ce mécanisme de modules introduit plusieurs concepts importants&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">toute variable est privée</text:span> sauf si elle est <text:span text:style-name="T4">exportée</text:span> avec l&#8217;opérateur <text:span text:style-name="CodeDansTexte">export</text:span>&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">les <text:span text:style-name="T7">modules sont explicitement inclus</text:span> avec l&#8217;opérateur <text:span text:style-name="CodeDansTexte">import</text:span>&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">les <text:span text:style-name="T7">variables globales</text:span> définies par l&#8217;utilisateur ne sont pas accessibles depuis un module.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">Retravaillons le document HTML de la section précédente&#160;:</text:p>
<text:p text:style-name="CodeTitre">import/import.html</text:p><text:p text:style-name="Code">&lt;script&gt;const pro = 'test';&lt;/script&gt;</text:p><text:p text:style-name="Code">&lt;script type="module" src="script-import.js"&gt;&lt;/script&gt;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">&lt;div id="logs"&gt;&lt;/div&gt;</text:p>
<text:p text:style-name="TexteCourant">Nous voulons maintenant (sa)voir si la variable <text:span text:style-name="CodeDansTexte">pro</text:span> définie avant l&#8217;inclusion du module <text:span text:style-name="CodeDansTexte">script-import.js</text:span> est constatée.
Nous voulons également savoir si la syntaxe d&#8217;import de la fonction <text:span text:style-name="CodeDansTexte">log</text:span> fonctionne&#160;:</text:p>
<text:p text:style-name="CodeTitre">import/script-import.js</text:p><text:p text:style-name="Code">import {log} from './dom-log.js';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(typeof pro);<text:s text:c="4"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(typeof log);<text:s text:c="4"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">console.log(typeof window); <text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">window.addEventListener('load', () =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>log('OK');</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">undefined</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">function</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">object</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">De même que nous avons utilisé <text:span text:style-name="CodeDansTexte">import</text:span> pour importer de manière sélective une fonction du module <text:span text:style-name="CodeDansTexte">dom-log.js</text:span>, l&#8217;opérateur <text:span text:style-name="CodeDansTexte">export</text:span> nous aide à exposer des objets, fonctions et variables&#160;:</text:p>
<text:p text:style-name="CodeTitre">import/dom-log.js</text:p><text:p text:style-name="Code">export function log (message, target = '#logs') {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const text = String(message).trim();</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>document.querySelector(target).textContent = text;</text:p><text:p text:style-name="Code">}</text:p>
<text:bookmark text:name="ref-browserify" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Importer des modules <text:span text:style-name="T4">npm</text:span> pour le web</text:h><text:p text:style-name="TexteCourant">Qu&#8217;en est-il alors des modules <text:span text:style-name="T4">npm</text:span>&#160;?
Nous pouvons transpiler et importer du code, ce serait très utile si nous pouvions également importer du <text:span text:style-name="T4">code tiers</text:span>.
Cela nous éviterait de réinventer la roue, d&#8217;avoir accès à du code bien testé et trop coûteux à écrire nous-mêmes.</text:p>
<text:p text:style-name="TexteCourant">Nous avons vu comment <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-modules"  text:visited-style-name="Visited_20_Internet_20_Link">charger des modules <text:span text:style-name="T4">npm</text:span></text:a>
dans le chapitre 5.
Intéressons-nous à leur utilisation dans le contexte d&#8217;une application front-end.
Pour cela, adaptons l&#8217;exemple de la section précédente&#160;:</text:p>
<text:p text:style-name="CodeTitre">import/script-import-jquery.js</text:p><text:p text:style-name="Code">import $ from 'jquery';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log($.fn.jquery);<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">$(document).ready(() =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>$('#logs').text('OK');<text:s text:c="3"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> <text:span text:style-name="CodeDansTexte">$.fn.jquery</text:span> contient le numéro de version de jQuery.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Substitut jQuery pour remplacer le texte dans <text:span text:style-name="CodeDansTexte">&lt;div id="logs"&gt;</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Le document HTML chargeant ce module est en tout point similaire au précédent exemple&#160;:</text:p>
<text:p text:style-name="CodeTitre">import/import-jquery.html</text:p><text:p text:style-name="Code">&lt;script type="module" src="script-import-jquery.js"&gt;&lt;/script&gt;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">&lt;div id="logs"&gt;&lt;/div&gt;</text:p>
<text:p text:style-name="TexteCourant">Le seul <text:span text:style-name="T4">hic</text:span>, c&#8217;est que <text:span text:style-name="T7">cela ne fonctionne pas</text:span>&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">le navigateur <text:span text:style-name="T4">ne peut pas savoir</text:span> où se trouve la dépendance demandée&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">rien ne garantit que <text:span text:style-name="CodeDansTexte">jquery</text:span> expose son code en tant que module <text:span text:style-name="T4">ECMAScript 2015</text:span>&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">on n&#8217;a certainement pas envie d&#8217;exposer publiquement le répertoire <text:span text:style-name="CodeDansTexte">node_modules</text:span>.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">C&#8217;est alors qu&#8217;entre en jeu <text:span text:style-name="T7">browserify</text:span>.
<text:span text:style-name="T4">browserify</text:span> est un outil générique de transformation de code.
Il peut être utilisé en ligne de commande, via son API Node mais aussi par le biais de plugins pour d&#8217;autres outils (comme Gulp, Grunt, etc.).</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">browserify</text:span> a été initialement créé pour transformer du code écrit pour Node en code fonctionnel dans les navigateurs web.
Il expose notamment un concept d&#8217;intégrations (les <text:span text:style-name="T4">transforms</text:span>) afin d&#8217;effectuer des remplacements ligne à ligne.</text:p>
<text:p text:style-name="TexteCourant">Là où <text:span text:style-name="T4">babel</text:span> cherche uniquement à traduire un langage vers un autre, <text:span text:style-name="T4">browserify</text:span> est le couteau suisse pour effectuer des remplacements majeurs dans le code&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">portage de la fonction <text:span text:style-name="CodeDansTexte">require()</text:span> et inclusion du code des modules sous-jacents&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">suppression de code conditionnel&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">remplacement d&#8217;API spécifiques à Node par des polyfills pour le web&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">extraction de CSS&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">etc.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">browserify</text:span> est intéressant au sens où il nous apprend à nous constituer nous-mêmes notre outillage, pour nos propres besoins.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Guide</text:span> Utiliser browserify</text:h><text:p text:style-name="Remarque"><text:span text:style-name="T4">browserify</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/browserify" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/browserify</text:a></text:span>) est un outil extrêmement
versatile, modulaire et puissant.
Son apprentissage progressif peut faire de lui un allié de choix dans tous
vos projets Node et web.</text:p>
<text:p text:style-name="Remarque">Pour en savoir plus&#160;: <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/substack/browserify-handbook" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/substack/browserify-handbook</text:a></text:span>.</text:p>
<text:p text:style-name="TexteCourant">Revenons maintenant à notre code auquel il manque la compréhension des modules <text:span text:style-name="T4">npm</text:span>.
Nous allons maintenant chercher à transformer le fichier <text:span text:style-name="CodeDansTexte">script-import-jquery.js</text:span> pour à la fois rendre la syntaxe <text:span text:style-name="CodeDansTexte">import</text:span> intelligible  (c&#8217;est le rôle de <text:span text:style-name="T4">babel</text:span>) mais aussi pour faire le lien avec les modules <text:span text:style-name="T4">npm</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ npm run browserify -- \</text:p><text:p text:style-name="Code"><text:s text:c="2"/>-t babelify \</text:p><text:p text:style-name="Code"><text:s text:c="2"/>-e examples/import/script-import-jquery.js \</text:p><text:p text:style-name="Code"><text:s text:c="2"/>-o examples/import/script-import-jquery-browserify.js</text:p>
<text:p text:style-name="TexteCourant">Cette commande exécute trois choses&#160;:</text:p>
<text:p text:style-name="ListeANumero">1.<text:tab/><text:span text:style-name="CodeDansTexte">-t babelify</text:span> indique d&#8217;utiliser une intégration <text:span text:style-name="T4">babel</text:span> (un <text:span text:style-name="T4">transform</text:span>) pour transformer la syntaxe <text:span text:style-name="T4">ECMAScript 2015</text:span>&#160;;</text:p><text:p text:style-name="ListeANumero">2.<text:tab/><text:span text:style-name="CodeDansTexte">-e &#8230;&#8203;</text:span> indique le script d&#8217;entrée à transformer&#160;;</text:p><text:p text:style-name="ListeANumero">3.<text:tab/><text:span text:style-name="CodeDansTexte">-o &#8230;&#8203;</text:span> indique où stocker le script transformé.</text:p>
<text:p text:style-name="TexteCourant">Il en résultera un fichier nommé <text:span text:style-name="CodeDansTexte">script-import-jquery-browserify.js</text:span> compatible <text:span text:style-name="T4">ECMAScript 5</text:span> et qui inclut désormais le code source de jQuery.<text:line-break/>Il ne nous reste plus qu&#8217;à charger le fichier transformé dans notre page web pour voir le résultat&#160;:</text:p>
<text:p text:style-name="CodeTitre">import/import-jquery-browserify.html</text:p><text:p text:style-name="Code">&lt;script src="script-import-jquery-browserify.js"&gt;&lt;/script&gt;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">&lt;div id="logs"&gt;&lt;/div&gt;</text:p>
<text:bookmark text:name="ref-récapitulatif" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Récapitulatif</text:h><text:p text:style-name="TexteCourant">En résumé, nous avons besoin de nous baser sur <text:span text:style-name="T4">deux ou trois outils</text:span> pour écrire un code modulaire et compatible avec n&#8217;importe quel type de syntaxe&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">babel</text:span> pour transformer la syntaxe&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">des <text:span text:style-name="T7">polyfills</text:span> pour harmoniser les fonctionnalités&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">browserify</text:span> pour l&#8217;intégration avec les modules <text:span text:style-name="T4">npm</text:span>.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">Ceux-ci ont l&#8217;avantage d&#8217;être <text:span text:style-name="T4">faciles</text:span> à prendre en main, <text:span text:style-name="T4">modulaires</text:span> et <text:span text:style-name="T4">évolutifs</text:span>.
Nous pourrons aussi nous tourner vers d&#8217;autres outils de transformation de code pour explorer d&#8217;autres horizons&#160;– et il en existe énormément&#160;: <text:span text:style-name="T4">webpack</text:span>, <text:span text:style-name="T4">rollup</text:span>, <text:span text:style-name="T4">broccoli</text:span>, etc.</text:p>
<text:bookmark text:name="ref-conception_modulaire" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Conception modulaire</text:h><text:p text:style-name="TexteCourant">Un autre paradigme change avec la mise à disposition des modules et de l&#8217;outillage à disposition&#160;: le code que l&#8217;on écrit dépend surtout d'<text:span text:style-name="T4">ECMAScript</text:span> et de l&#8217;environnement dans lequel on l&#8217;exécute, à savoir Node ou un navigateur web.</text:p>
<text:p text:style-name="TexteCourant">La section suivante s&#8217;intéresse à l'<text:span text:style-name="T7">évolution de l&#8217;écriture du code</text:span>, autrefois dirigée par la <text:span text:style-name="T7">structure du document</text:span> HTML vers un monde de <text:span text:style-name="T7">fonctions consommant des données</text:span>, transformées pour un type d&#8217;affichage, que ce soit HTML ou autre.</text:p>
<text:p text:style-name="TexteCourant">Nous illustrerons cette évolution au travers d&#8217;un exemple relativement simple&#160;: une balise HTML affichant l&#8217;heure dont nous actualisons le contenu toutes les secondes.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-09/images/modules-time.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 64. Résultat de l&#8217;exemple développé dans les sections suivantes.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> <text:span text:style-name="T4">jQuery</text:span></text:h><text:p text:style-name="Remarque">Les exemples suivants se basent sur l&#8217;utilisation de la librairie <text:span text:style-name="T4">jQuery</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://api.jquery.com/" text:visited-style-name="Visited_20_Internet_20_Link">https://api.jquery.com/</text:a></text:span>).</text:p>
<text:p text:style-name="Remarque">Elle facilite la manipulation du <text:span text:style-name="T4">DOM</text:span> tout en gérant les incompatibilités des
différents navigateurs web.
Son utilisation est devenue moins dominante du fait d&#8217;une nette amélioration de
la qualité de ces derniers.</text:p>
<text:p text:style-name="Remarque">Pour apprendre à l&#8217;utiliser&#160;: <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://learn.jquery.com/using-jquery-core/" text:visited-style-name="Visited_20_Internet_20_Link">http://learn.jquery.com/using-jquery-core/</text:a></text:span>.</text:p>
<text:bookmark text:name="ref-le_syndrome_du_plugin_jquery" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Le syndrome du plugin <text:span text:style-name="T4">jQuery</text:span></text:h><text:p text:style-name="TexteCourant">Ce que j&#8217;appelle le "syndrome du plugin <text:span text:style-name="T4">jQuery</text:span>", c&#8217;est une combinaison des éléments suivants&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">création de <text:span text:style-name="T7">code métier inutilisable</text:span> en dehors de <text:span text:style-name="T4">jQuery</text:span>&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">mélange de la présentation</text:span> des données et de l&#8217;organisation du code métier&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">un code <text:span text:style-name="T4">aveugle</text:span> car <text:span text:style-name="T7">éloigné de la structure HTML</text:span> nécessaire à son fonctionnement&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">fragilité</text:span> du code en cas de changement de la structure HTML associée&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">en général, un code <text:span text:style-name="T7">difficilement testable</text:span>&#160;– difficile de ne pas aboutir à une interface boguée.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">Voici un exemple de document HTML <text:span text:style-name="T4">fragile</text:span> et <text:span text:style-name="T4">mélangeant</text:span> tous les concepts en même temps.
Il est parfaitement valide mais illustre un ensemble de pratiques courantes que nous allons chercher à <text:span text:style-name="T4">désapprendre</text:span>.</text:p>
<text:p text:style-name="CodeTitre">modules/jquery-plugin.html</text:p><text:p text:style-name="Code">&lt;!DOCTYPE html&gt;</text:p><text:p text:style-name="Code">&lt;body&gt;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;link rel="stylesheet" type="text/css" href="styles.css"&gt;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;time datetime="" data-interval="1000"&gt;---&lt;/time&gt;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;script src="../../node_modules/jquery/dist/jquery.js"&gt;&lt;/script&gt;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;script src="jquery-plugin.js"&gt;&lt;/script&gt;</text:p><text:p text:style-name="Code">&lt;/body&gt;</text:p>
<text:p text:style-name="TexteCourant">Maintenant que la structure HTML est définie, nous devons désormais écrire le code affichant l&#8217;heure dans un élément HTML toutes les secondes&#160;:</text:p>
<text:p text:style-name="CodeTitre">modules/jquery-plugin.js</text:p><text:p text:style-name="Code">/* global jQuery */</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">($ =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>$.fn.displaySeconds = function displaySeconds() {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>this.each((i, dateElement) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="6"/>setInterval(() =&gt; {<text:s text:c="18"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="8"/>const now = new Date();<text:s text:c="12"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="8"/>const seconds = now.getSeconds();</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="8"/>$(dateElement)<text:s text:c="21"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="10"/>.removeClass(seconds % 2 ? 'pair': 'impair')</text:p><text:p text:style-name="Code"><text:s text:c="10"/>.addClass(seconds % 2 ? 'impair': 'pair')</text:p><text:p text:style-name="Code"><text:s text:c="10"/>.attr('datetime', now.toISOString())</text:p><text:p text:style-name="Code"><text:s text:c="10"/>.text(now.toLocaleTimeString());</text:p><text:p text:style-name="Code"><text:s text:c="6"/>}, $(dateElement).data('interval')); <text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="4"/>return this;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>$(document).ready(() =&gt; {<text:s text:c="6"/><text:span text:style-name="PuceCode">5</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>$('time').displaySeconds();<text:s text:c="2"/><text:span text:style-name="PuceCode">6</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>});</text:p><text:p text:style-name="Code">})(jQuery);</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Ce bloc de code est exécuté toutes les secondes.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> La donnée de <text:span text:style-name="T4">temps</text:span> est obtenue chaque seconde par notre <text:span text:style-name="T4">plugin jQuery</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Certaines décisions métier sont mélangées avec l&#8217;affichage de la donnée <text:span text:style-name="T4">temps</text:span>.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> L&#8217;intervalle est déterminé par la <text:span text:style-name="T4">valeur de l&#8217;attribut "data-interval"</text:span>.<text:line-break/><text:span text:style-name="PuceCode">5</text:span> Ce bloc de code est exécuté dès que le document HTML est prêt&#160;— toute sa structure HTML est disponible.<text:line-break/><text:span text:style-name="PuceCode">6</text:span> Le <text:span text:style-name="T4">plugin jQuery</text:span> est appliqué à toutes les occurrences de <text:span text:style-name="CodeDansTexte">&lt;time&gt;</text:span> dans lequel le <text:span text:style-name="T4">plugin</text:span> est exécuté.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Certains motifs illustrés dans la section <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-modules"  text:visited-style-name="Visited_20_Internet_20_Link">Importer des modules</text:a> refont surface&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">variables globales&#160;: que faire si <text:span text:style-name="CodeDansTexte">jQuery</text:span> n&#8217;existe pas&#160;?</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">connaissance implicite du document&#160;: que faire si une personne tierce remplace la balise <text:span text:style-name="CodeDansTexte">&lt;time&gt;</text:span> par une autre balise&#160;?</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">code JavaScript piloté par le document&#160;: que faire si une personne tierce exprime l&#8217;intervalle en secondes et non en millisecondes&#160;?</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">La faute n&#8217;est pas vraiment celle de <text:span text:style-name="T4">jQuery</text:span> mais plutôt la nôtre&#160;— enfin, la <text:span text:style-name="T4">mienne</text:span>.
Nous avons <text:span text:style-name="T7">mélangé règles de fonctionnement</text:span> (contenu de balise, classe CSS à ajouter/enlever) et données (date courante, parité des secondes, événement de mise à jour <text:span text:style-name="CodeDansTexte">setInterval</text:span>).</text:p>
<text:bookmark text:name="ref-vers_une_approche_jquery_composite" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Vers une approche <text:span text:style-name="T4">jQuery</text:span> composite</text:h><text:p text:style-name="TexteCourant">Nous allons maintenant reprendre les concepts appris précédemment et conserver le même outil, à savoir <text:span text:style-name="T4">jQuery</text:span>.
Certains outils encouragent de bons <text:span text:style-name="T4">motifs de conception</text:span> et donnent la sensation de résoudre des problèmes.
Apprendre ces motifs et à capitaliser sur les outils que nous connaissons déjà peuvent nous emmener tout aussi loin.</text:p>
<text:p text:style-name="CodeTitre">modules/jquery-app.html</text:p><text:p text:style-name="Code">&lt;!DOCTYPE html&gt;</text:p><text:p text:style-name="Code">&lt;body&gt;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;link rel="stylesheet" type="text/css" href="styles.css"&gt;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;time datetime=""&gt;---&lt;/time&gt;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;script src="jquery-app-browserify.js"&gt;&lt;/script&gt;</text:p><text:p text:style-name="Code">&lt;/body&gt;</text:p>
<text:p text:style-name="TexteCourant">Le changement majeur réside dans la réorganisation du code applicatif&#160;:</text:p>
<text:p text:style-name="CodeTitre">modules/jquery-app.js</text:p><text:p text:style-name="Code">import $ from 'jquery';</text:p><text:p text:style-name="Code">import timerFn from './timer.js';<text:s text:c="19"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const displaySeconds = (tickData, dateElement) =&gt; { <text:span text:style-name="PuceCode">5</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>const {className, now} = tickData;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>$(dateElement)<text:s text:c="36"/><text:span text:style-name="PuceCode">6</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>.attr('class', className)</text:p><text:p text:style-name="Code"><text:s text:c="4"/>.attr('datetime', now.toISOString())</text:p><text:p text:style-name="Code"><text:s text:c="4"/>.text(now.toLocaleTimeString());</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">$(document).ready(() =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const dateElements = $('time').get();<text:s text:c="13"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>const onTick = tickData =&gt; {<text:s text:c="22"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>dateElements.forEach(el =&gt; displaySeconds(tickData, el));</text:p><text:p text:style-name="Code"><text:s text:c="2"/>};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>timerFn({ interval: 1000, onTick });<text:s text:c="14"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Nous sélectionnons les éléments de la page à actualiser chaque seconde.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Nous définissons quoi faire avec les données transmises chaque seconde.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Nous démarrons un minuteur.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Le minuteur est une fonction externe, dont le comportement n&#8217;est pas régi par <text:span text:style-name="T4">jQuery</text:span> ou une autre librairie.<text:line-break/><text:span text:style-name="PuceCode">5</text:span> Cette fonction est responsable de l&#8217;affichage de <text:span text:style-name="T4">données</text:span> dans un <text:span text:style-name="T4">élément HTML</text:span>.<text:line-break/><text:span text:style-name="PuceCode">6</text:span> Cette fois-ci, nous nous contentons de seulement mettre à jour attributs et contenus&#160;– la logique métier a été déplacée dans le module <text:span text:style-name="CodeDansTexte">timer.js</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Le code a été divisé en deux sections distinctes&#160;:</text:p>
<text:p text:style-name="ListeANumero">1.<text:tab/>celui qui décrit la <text:span text:style-name="T7">réaction à une donnée</text:span>&#160;;</text:p><text:p text:style-name="ListeANumero">2.<text:tab/><text:span text:style-name="T7">celui qui intègre</text:span> le minuteur avec les éléments du <text:span text:style-name="T4">DOM</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Nous n&#8217;avons pas réellement besoin de savoir comment fonctionne le minuteur à ce niveau&#160;– nous avons juste besoin de pouvoir compter sur les données qu&#8217;il nous fournit.</text:p>
<text:p text:style-name="CodeTitre">modules/timer.js</text:p><text:p text:style-name="Code">const tick = () =&gt; {<text:s text:c="14"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>const now = new Date;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>return {<text:s text:c="24"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>now,</text:p><text:p text:style-name="Code"><text:s text:c="4"/>className: now.getSeconds() % 2 ? 'impair': 'pair'</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">module.exports = function timer ({ onTick, interval }) {<text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>setInterval(() =&gt; onTick(tick()), interval);<text:s text:c="10"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>return tick();<text:s text:c="18"/><text:span text:style-name="PuceCode">5</text:span></text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Cette fonction (privée) est responsable de décrire le <text:span text:style-name="T4">temps présent</text:span> sous forme d&#8217;une <text:span text:style-name="T7">structure de données</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Cette <text:span text:style-name="T4">structure de données</text:span> pourra retourner de nouvelles clés/valeurs sans remettre en cause le fonctionnement du code y ayant recours.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Le paramètre <text:span text:style-name="CodeDansTexte">onTick</text:span> est une fonction passée en argument qui sera appelée à chaque nouvel intervalle de temps.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> La responsabilité de <text:span text:style-name="CodeDansTexte">timer</text:span> est de communiquer une nouvelle <text:span text:style-name="T4">structure de données</text:span> à un intervalle de temps donné.<text:line-break/><text:span text:style-name="PuceCode">5</text:span> On retourne immédiatement une structure de données par commodité et de manière synchrone.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Pour un résultat identique, nous avons désormais séparé notre code en trois <text:span text:style-name="T7">domaines distincts</text:span>&#160;: le <text:span text:style-name="T4">minuteur</text:span>, l'<text:span text:style-name="T4">intégration</text:span> du minuteur, la <text:span text:style-name="T4">représentation</text:span> du minuteur sous forme HTML.
Cerise sur le gâteau, cette <text:span text:style-name="T4">distinction se constate visuellement</text:span>, au premier coup d&#8217;œil.</text:p>
<text:p text:style-name="TexteCourant">Tout n&#8217;est pas parfait, car nous sommes encore liés à la structure du document HTML.</text:p>
<text:bookmark text:name="ref-partager_le_code_métier_avec_node" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Partager le code métier avec Node</text:h><text:p text:style-name="TexteCourant">Cette <text:span text:style-name="T4">séparation de principes</text:span> (<text:span text:style-name="T4">separation of concerns</text:span>) va au-delà du plaisir de l&#8217;esthète.
Nous venons sans le savoir de créer du <text:span text:style-name="T7">code <text:span text:style-name="T4">ECMAScript</text:span> universel</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Pourquoi <text:span text:style-name="T4">universel</text:span>&#160;?
Parce que nous pouvons tout aussi bien l&#8217;inclure et l&#8217;exécuter dans Node que dans un navigateur web&#160;:</text:p>
<text:p text:style-name="CodeTitre">modules/node-timer.js</text:p><text:p text:style-name="Code">const timerFn = require('./timer.js');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">timerFn({ interval: 1000, onTick: console.log });</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exécution du script <text:span text:style-name="CodeDansTexte">node-timer.js</text:span> afficherait quelque chose du genre dans votre terminal&#160;:</text:p>
<text:p text:style-name="Code">$ node examples/modules/node-timer.js</text:p><text:p text:style-name="Code">{ now: 2017-02-17T11:07:29.752Z, className: 'impair' }</text:p><text:p text:style-name="Code">{ now: 2017-02-17T11:07:30.762Z, className: 'pair' }</text:p><text:p text:style-name="Code">{ now: 2017-02-17T11:07:31.768Z, className: 'impair' }</text:p><text:p text:style-name="Code">{ now: 2017-02-17T11:07:32.770Z, className: 'pair' }</text:p><text:p text:style-name="Code">{ now: 2017-02-17T11:07:33.775Z, className: 'impair' }</text:p><text:p text:style-name="Code">{ now: 2017-02-17T11:07:34.779Z, className: 'pair' }</text:p><text:p text:style-name="Code">^C</text:p>
<text:p text:style-name="TexteCourant">Chaque seconde, la fonction <text:span text:style-name="CodeDansTexte">console.log</text:span> est appelée et affiche la <text:span text:style-name="T4">structure de données</text:span> de notre minuteur dans la <text:span text:style-name="T4">sortie standard</text:span> du terminal.</text:p>
<text:p text:style-name="TexteCourant">Nous pourrions dès à présent utiliser le minuteur dans d&#8217;autres applications, côté client, côté serveur et pourquoi pas un jour, le publier sur le <text:span text:style-name="T4">registre npm</text:span>.</text:p>
<text:bookmark text:name="ref-séparation_du_fond_et_de_la_forme_données_rendu_et_interactions" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Séparation du fond et de la forme : données, rendu et interactions</text:h><text:p text:style-name="TexteCourant">Les praticien·ne·s de l&#8217;intégration web nous le dirons souvent&#160;: il faut <text:span text:style-name="T7">séparer le fond de la forme</text:span>.
Il en est de même dans notre code&#160;– et pas que pour le développement <text:span text:style-name="T4">front-end</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Un code maintenable n&#8217;a pas besoin d&#8217;être complexe.
Un code maintenable a surtout besoin de bien <text:span text:style-name="T4">isoler</text:span> ses périmètres d&#8217;intervention.</text:p>
<text:p text:style-name="TexteCourant">Les exemples précédents nous ont permis de déceler trois périmètres phares&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">données</text:span>&#160;: des structures prédictibles, obtenues ou modifiées&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">rendu</text:span>&#160;: la représentation des données en <text:span text:style-name="T4">contexte</text:span>, que ce soit une page HTML, un terminal ou un fichier CSV&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">interactions</text:span>&#160;: des événements déclenchés par les utilisateurs, par des facteurs externes ou des règles métier&#160;– ils impactent les <text:span text:style-name="T4">données</text:span> et leur <text:span text:style-name="T4">représentation</text:span>.</text:p>
</text:list-item></text:list>
<text:bookmark text:name="ref-react" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Rapprocher données, rendu et interactions avec <text:span text:style-name="T4">React</text:span></text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">React</text:span> a atteint un pic de popularité certain en 2015 et 2016.
Pas seulement parce qu&#8217;il s&#8217;agit d&#8217;un outil bien conçu mais justement parce qu&#8217;il encourage cette pratique de la <text:span text:style-name="T7">représentation des données</text:span>.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> API React</text:h><text:p text:style-name="Remarque">Les exemples suivants se basent sur la librairie <text:span text:style-name="T4">React</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://facebook.github.io/react/" text:visited-style-name="Visited_20_Internet_20_Link">https://facebook.github.io/react/</text:a></text:span>).
Sa documentation offre de bons exemples pour se familiariser avec son utilisation.</text:p>
<text:p text:style-name="TexteCourant">Notre code HTML n&#8217;est qu&#8217;un <text:span text:style-name="T7">résultat</text:span> exposant des <text:span text:style-name="T7">surfaces d&#8217;interaction</text:span>.
Notre code se structure en <text:span text:style-name="T7">composants</text:span>.
Un <text:span text:style-name="T4">composant</text:span> est responsable de deux choses&#160;: la <text:span text:style-name="T7">représentation de données</text:span> et la <text:span text:style-name="T7">réaction à des événements</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Cela se traduira par un changement de taille&#160;: l&#8217;exemple que nous avons fait évoluer ne fait plus mention de balise <text:span text:style-name="CodeDansTexte">&lt;time&gt;</text:span> mais expose une balise dédiée à contenir notre <text:span text:style-name="T4">composant minuteur</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">modules/react-app.html</text:p><text:p text:style-name="Code">&lt;!DOCTYPE html&gt;</text:p><text:p text:style-name="Code">&lt;body&gt;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;link rel="stylesheet" type="text/css" href="styles.css"&gt;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;div id="app"&gt;&lt;/div&gt;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;script src="react-app-browserify.js"&gt;&lt;/script&gt;</text:p><text:p text:style-name="Code">&lt;/body&gt;</text:p>
<text:p text:style-name="TexteCourant">Notre code applicatif est réduit à son plus strict minimum&#160;:</text:p>
<text:p text:style-name="CodeTitre">modules/react-app.js</text:p><text:p text:style-name="Code">import { createElement } from 'react';</text:p><text:p text:style-name="Code">import ReactDOM from 'react-dom';</text:p><text:p text:style-name="Code">import DateInterval from './date-interval.jsx';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">ReactDOM.render(<text:s text:c="34"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>createElement(DateInterval, {interval: 1000}),<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>document.querySelector('#app')<text:s text:c="18"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">);</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Méthode responsable du rendu HTML de notre composant <text:span text:style-name="CodeDansTexte">TimeInterval</text:span> dans l&#8217;élément <text:span text:style-name="CodeDansTexte">&lt;div id="app"&gt;</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Création de notre composant minuteur avec un intervalle de mise à jour de 1000 millisecondes.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Indication que le rendu du composant sera effectué <text:span text:style-name="T4">dans</text:span> l&#8217;élément <text:span text:style-name="CodeDansTexte">&lt;div id="app"&gt;</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Cela ressemble fortement au contenu de nos précédentes invocations de <text:span text:style-name="CodeDansTexte">$(document).ready()</text:span> mais sans avoir à se soucier du fonctionnement interne du minuteur.</text:p>
<text:p text:style-name="TexteCourant">La représentation et le fonctionnement du minuteur sont désormais regroupés dans un seul composant&#160;:</text:p>
<text:p text:style-name="CodeTitre">modules/date-interval.jsx</text:p><text:p text:style-name="Code">import React, { Component } from 'react';</text:p><text:p text:style-name="Code">import timerFn from './timer.js';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">export default class DateInterval extends Component {<text:s text:c="8"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>constructor(props) {<text:s text:c="39"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>super(props);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="4"/>const {interval} = props;</text:p><text:p text:style-name="Code"><text:s text:c="4"/>this.onTick = this.onTick.bind(this);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="4"/>this.state = {</text:p><text:p text:style-name="Code"><text:s text:c="6"/>tickData: timerFn({ interval, onTick: this.onTick })<text:s text:c="3"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>};</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>onTick (tickData) {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>this.setState({ tickData });<text:s text:c="19"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>render() {<text:s text:c="39"/><text:span text:style-name="PuceCode">5</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>const {className, now} = this.state.tickData;<text:s text:c="2"/><text:span text:style-name="PuceCode">6</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="4"/>return (&lt;time className={className} dateTime={now.toISOString()}&gt;</text:p><text:p text:style-name="Code"><text:s text:c="6"/>{now.toLocaleTimeString()}</text:p><text:p text:style-name="Code"><text:s text:c="4"/>&lt;/time&gt;);</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Nous exportons un composant <text:span text:style-name="T4">React</text:span> grâce à l&#8217;opérateur <text:span text:style-name="T4">ECMAScript 2015</text:span> <text:span text:style-name="CodeDansTexte">extends</text:span>&#160;– cf. la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-primitive-class"  text:visited-style-name="Visited_20_Internet_20_Link">section Class du Chapitre 3</text:a>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Le <text:span text:style-name="CodeDansTexte">constructor</text:span> est exécuté quand le composant est rendu dans le document.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> La propriété <text:span text:style-name="CodeDansTexte">interval</text:span> nous est fournie dans <text:span text:style-name="CodeDansTexte">react-app.js</text:span> et nous stockons la <text:span text:style-name="T4">structure de donnée</text:span> retournée par le minuteur tout en déclenchant son actualisation toutes les 1000 millisecondes.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> À chaque intervalle, nous mettons à jour la valeur <text:span text:style-name="CodeDansTexte">tickData</text:span> de l&#8217;état interne du composant (<text:span text:style-name="CodeDansTexte">this.state</text:span>).<text:line-break/><text:span text:style-name="PuceCode">5</text:span> La méthode <text:span text:style-name="CodeDansTexte">render()</text:span> est exécutée quand le composant est inséré dans un document pour la première fois et dès que l&#8217;état interne (<text:span text:style-name="CodeDansTexte">this.state</text:span>) change.<text:line-break/><text:span text:style-name="PuceCode">6</text:span> Nous déstructurons la valeur connue de <text:span text:style-name="CodeDansTexte">tickData</text:span> pour effectuer une opération qui nous rappelle les différents appels à <text:span text:style-name="CodeDansTexte">.attr('class')</text:span> et <text:span text:style-name="CodeDansTexte">.text()</text:span> de <text:span text:style-name="T4">jQuery</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">React</text:span> introduit quatre concepts au sein des composants&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">un <text:span text:style-name="T7">cycle de vie</text:span> basé sur des <text:span text:style-name="T4">propriétés</text:span> (<text:span text:style-name="T4">props</text:span>) et un <text:span text:style-name="T4">état interne</text:span> (<text:span text:style-name="T4">state</text:span>)&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">des <text:span text:style-name="T7">propriétés immuables</text:span> pour le paramétrage initial&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">un <text:span text:style-name="T7">état interne mutable</text:span> pour contenir les changements et demander une actualisation de leur représentation dans le document.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">React</text:span> détermine les opérations à effectuer dans le document HTML en fonction de la lourdeur des opérations&#160;: (re)création complète de <text:span text:style-name="CodeDansTexte">&lt;time&gt;</text:span> dans le nœud parent, simple mise à jour d&#8217;un ou plusieurs attributs ou encore déplacement du composant ailleurs dans le document HTML, etc.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;intelligence d&#8217;une librairie comme <text:span text:style-name="T4">React</text:span> est d&#8217;encourager à décrire les données et leur rendu pour se charger des opérations d&#8217;écriture dans le DOM.
Cela permet de créer des composants faciles à isoler, à réutiliser et à tester.</text:p>
<text:p text:style-name="TexteCourant">Cette approche nous a permis de réutiliser notre minuteur simplement en adaptant son utilisation.
<text:span text:style-name="T4">React</text:span> nous permet de <text:span text:style-name="T7">diriger l&#8217;affichage</text:span> du document plutôt que d&#8217;en dépendre.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Outil</text:span> React Developer Tools</text:h><text:p text:style-name="Remarque">L&#8217;extension <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://chrome.google.com/webstore/detail/fmkadmapgofadopljbjfkapdkoienihi" text:visited-style-name="Visited_20_Internet_20_Link">https://chrome.google.com/webstore/detail/fmkadmapgofadopljbjfkapdkoienihi</text:a></text:span>
pour le navigateur Chrome détaille l&#8217;arborescence des composants montés
dans le document HTML ainsi qu&#8217;une vue de leurs propriétés respectives.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-09/images/react-devtools.png)</text:p>
<text:bookmark text:name="ref-io" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Des requêtes AJAX au temps-réel</text:h><text:p text:style-name="TexteCourant">Les technologies web offrent un panel de fonctionnalités créatives et versatiles.
Le boom du <text:span text:style-name="T4">Web 2.0</text:span> a coïncidé avec la redécouverte de <text:span text:style-name="CodeDansTexte">XMLHttpRequest</text:span>, une API initialement créée par Microsoft pour <text:span text:style-name="T7">transférer des données entre client et serveur</text:span>, de <text:span text:style-name="T4">manière non-bloquante</text:span>.
Cette fonctionnalité a permis de basculer vers un monde de pages dynamiques et rapides à charger.
Des applications web comme Google Maps, Gmail ou la recherche instantanée de Google ont parachevé la popularisation de cette technique.</text:p>
<text:p text:style-name="TexteCourant">Toutefois son API est peu intuitive et est unidirectionnelle, dirigée <text:span text:style-name="T7">du client vers le serveur</text:span>.
Le terme <text:span text:style-name="CodeDansTexte">XMLHttpRequest</text:span> est parfois nommé <text:span text:style-name="CodeDansTexte">AJAX</text:span> ou <text:span text:style-name="CodeDansTexte">xhr</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Un même exemple côté client sera développé et successivement adapté aux technologies <text:span text:style-name="CodeDansTexte">fetch()</text:span>, <text:span text:style-name="T4">EventSource</text:span> puis <text:span text:style-name="T4">WebSocket</text:span>.
Il nous permettra d&#8217;en faire émerger les principes, leurs cas d&#8217;usage ainsi que leur possible intégration avec Node.<text:line-break/>L&#8217;implémentation côté serveur est basée sur un serveur <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-express"  text:visited-style-name="Visited_20_Internet_20_Link">Express.js</text:a> dont l&#8217;usage est expliqué au chapitre 7.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-09/images/io-example.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 65. Résultat attendu dans les exemples des sections suivantes.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Remarque</text:span> Node, mais pas que.</text:h><text:p text:style-name="Remarque"><text:span text:style-name="CodeDansTexte">fetch()</text:span>, <text:span text:style-name="T4">EventSource</text:span> et <text:span text:style-name="T4">WebSocket</text:span> reposent sur le protocole HTTP/1 et ses extensions.
Il est important de comprendre que leur contrepartie "côté serveur" existe aussi dans d&#8217;autres langages et environnements comme Ruby, Python et PHP.</text:p>
<text:p text:style-name="Remarque">Il se trouve que la nature asynchrone même de Node rend cette intégration relativement aisée et triviale, aussi et en grande partie grâce à l&#8217;écosystème <text:span text:style-name="T4">npm</text:span>.</text:p>
<text:bookmark text:name="ref-io-fetch" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Échange ponctuel de données avec <text:span text:style-name="">fetch()</text:span></text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="CodeDansTexte">fetch()</text:span> offre une interface très simple pour appeler une ressource HTTP.
Le résultat est retourné sous forme de <text:span text:style-name="T4">promesse</text:span> (voir la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-promise"  text:visited-style-name="Visited_20_Internet_20_Link">section <text:span text:style-name="T4">Promise</text:span></text:a> du Chapitre 3).
Cette fonction sert aussi bien à obtenir des ressources avec des requêtes de type <text:span text:style-name="CodeDansTexte">GET</text:span> et <text:span text:style-name="CodeDansTexte">HEAD</text:span> qu&#8217;à en créer et modifier avec des requêtes de type <text:span text:style-name="CodeDansTexte">POST</text:span>, <text:span text:style-name="CodeDansTexte">PUT</text:span>, <text:span text:style-name="CodeDansTexte">DELETE</text:span> et <text:span text:style-name="CodeDansTexte">PATCH</text:span>.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple associé est accessible sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://localhost:4000/examples/io/fetch.html" text:visited-style-name="Visited_20_Internet_20_Link">http://localhost:4000/examples/io/fetch.html</text:a></text:span>.
Nous pouvons vérifier la compatibilité navigateur de <text:span text:style-name="CodeDansTexte">fetch()</text:span> sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://caniuse.com#feat=fetch" text:visited-style-name="Visited_20_Internet_20_Link">http://caniuse.com#feat=fetch</text:a></text:span>.</text:p>
<text:p text:style-name="TexteCourant">Le déroulé d&#8217;exécution d&#8217;un appel à <text:span text:style-name="CodeDansTexte">fetch()</text:span> est le suivant&#160;:</text:p>
<text:p text:style-name="ListeANumero">1.<text:tab/>construction de la <text:span text:style-name="T7">requête</text:span> (<text:span text:style-name="T4">URL</text:span> ou objet <text:span text:style-name="CodeDansTexte">Request</text:span>, options)&#160;;</text:p><text:p text:style-name="ListeANumero">2.<text:tab/><text:span text:style-name="T7">réception</text:span> des entêtes de la <text:span text:style-name="T4">réponse</text:span> (objet <text:span text:style-name="CodeDansTexte">Response</text:span>)&#160;;</text:p><text:p text:style-name="ListeANumero">3.<text:tab/><text:span text:style-name="T7">décodage</text:span> de la <text:span text:style-name="T4">réponse</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Plusieurs <text:span text:style-name="T4">décodeurs de réponse</text:span> sont fournis nativement&#160;: texte (<text:span text:style-name="CodeDansTexte">response.text()</text:span>), JSON (<text:span text:style-name="CodeDansTexte">response.json()</text:span>), ArrayBuffer (<text:span text:style-name="CodeDansTexte">response.arrayBuffer()</text:span>), Blob (<text:span text:style-name="CodeDansTexte">response.blob()</text:span>) et FormData (<text:span text:style-name="CodeDansTexte">response.formData()</text:span>).</text:p>
<text:p text:style-name="CodeTitre">io/fetch-client.js</text:p><text:p text:style-name="Code">const userList = document.querySelector('#user-list');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">setInterval(() =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>fetch('/new-users')<text:s text:c="29"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>.then(response =&gt; response.text())<text:s text:c="12"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>.then(data =&gt; {<text:s text:c="31"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="6"/>const now = new Date().toLocaleTimeString();</text:p><text:p text:style-name="Code"><text:s text:c="6"/>const li = document.createElement('li');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="6"/>li.textContent = `${now} : ${data}`;</text:p><text:p text:style-name="Code"><text:s text:c="6"/>userList.prepend(li);</text:p><text:p text:style-name="Code"><text:s text:c="4"/>})</text:p><text:p text:style-name="Code">}, 2000);</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Exécution de la requête HTTP <text:span text:style-name="T4">GET</text:span> vers <text:span text:style-name="CodeDansTexte">/new-users</text:span> depuis le navigateur web courant.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Décodage progressif de la réponse.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Une fois le décodage terminé, le résultat de la requête HTTP est mis à disposition&#160;– ici, sous forme de chaîne de caractères.<text:line-break/></text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-09/images/fetch-frames.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 66. Traces réseau d&#8217;appels successifs à <text:span text:style-name="CodeDansTexte">fetch()</text:span> ; chacun résultant en une nouvelle requête HTTP.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;implémentation d&#8217;une ressource HTTP côté serveur s&#8217;effectue simplement en retournant une <text:span text:style-name="T4">réponse</text:span> lors d&#8217;une <text:span text:style-name="T4">requête</text:span> HTTP&#160;:</text:p>
<text:p text:style-name="CodeTitre">io/fetch-server.js</text:p><text:p text:style-name="Code">const chance = require('chance').Chance();</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">module.exports = (app) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>app.get('/new-users', (req, res) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>res.send(chance.name());</text:p><text:p text:style-name="Code"><text:s text:c="2"/>});</text:p><text:p text:style-name="Code">};</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Guide</text:span> Collection d&#8217;exemples</text:h><text:p text:style-name="Remarque">Le site communautaire <text:span text:style-name="T4">MDN</text:span> met à disposition une dizaine d&#8217;exemples
sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/mdn/fetch-examples" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/mdn/fetch-examples</text:a></text:span> pour illustrer différents
cas d&#8217;utilisation de <text:span text:style-name="CodeDansTexte">fetch()</text:span>.</text:p>
<text:p text:style-name="TexteCourant">En <text:span text:style-name="T4">résumé</text:span>, <text:span text:style-name="CodeDansTexte">fetch()</text:span> est idéal pour des demandes ponctuelles de données, du client vers le serveur.
Le module <text:span text:style-name="T4">npm</text:span> <text:span text:style-name="CodeDansTexte">node-fetch</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/node-fetch" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/node-fetch</text:a></text:span>) est une implémentation de <text:span text:style-name="CodeDansTexte">fetch()</text:span> pour Node tandis que <text:span text:style-name="CodeDansTexte">whatwg-fetch</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/whatwg-fetch" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/whatwg-fetch</text:a></text:span>) s&#8217;adresse uniquement à polyfiller les navigateurs web.</text:p>
<text:bookmark text:name="ref-io-eventsource" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Approche unidirectionnelle avec <text:span text:style-name="T4">EventSource</text:span></text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">EventSource</text:span> est un mécanisme moins connu que <text:span text:style-name="CodeDansTexte">fetch()</text:span> ou <text:span text:style-name="T4">WebSocket</text:span> mais tire ses origines de la technologie <text:span text:style-name="T4">Comet</text:span>.
On peut l&#8217;assimiler à une inversion de <text:span text:style-name="CodeDansTexte">fetch()</text:span>&#160;: le client appelle une ressource serveur, maintient une connexion de longue durée et attend un ou plusieurs <text:span text:style-name="T4">messages</text:span> dudit serveur.</text:p>
<text:p text:style-name="TexteCourant">Chaque connexion est ouverte en faisant appel à la construction d&#8217;un objet <text:span text:style-name="CodeDansTexte">EventSource</text:span>.
Cet objet émet alors plusieurs types d&#8217;événements en fonction des actions&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="CodeDansTexte">open</text:span>&#160;: lorsque le client a effectué une connexion au serveur&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="CodeDansTexte">message</text:span>&#160;: lorsque le serveur émet des données à destination du client&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="CodeDansTexte">close</text:span>&#160;: lorsque la connexion est fermée par le serveur&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="CodeDansTexte">error</text:span>&#160;: lorsque la connexion est accidentellement interrompue.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">Ce modèle de connexion permet tout aussi bien d&#8217;avoir un canal de données unique avec chaque utilisateur ou encore d&#8217;émettre les mêmes données en temps réel à destination de tous les usagers.</text:p>
<text:p text:style-name="TexteCourant">L’exemple associé est accessible sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://localhost:4000/examples/io/eventsource.html" text:visited-style-name="Visited_20_Internet_20_Link">http://localhost:4000/examples/io/eventsource.html</text:a></text:span>.
Nous pouvons vérifier la compatibilité navigateur de <text:span text:style-name="T4">EventSource</text:span> sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://caniuse.com#feat=eventsource" text:visited-style-name="Visited_20_Internet_20_Link">http://caniuse.com#feat=eventsource</text:a></text:span>.</text:p>
<text:p text:style-name="CodeTitre">io/eventsource-client.js</text:p><text:p text:style-name="Code">const connection = new EventSource('/new-users');<text:s text:c="5"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">const userList = document.querySelector('#user-list');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">connection.addEventListener('message', ({data}) =&gt; {<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>const now = new Date().toLocaleTimeString();</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const li = document.createElement('li');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>li.textContent = `${now} : ${data}`;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>userList.prepend(li);</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Nous ouvrons une nouvelle connexion <text:span text:style-name="T4">Event Source</text:span> de longue durée depuis le navigateur web courant.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Fonction appelée à chaque fois que le serveur transmet un message au client.<text:line-break/></text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-09/images/eventsource-frames.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 67. Plusieurs messages peuvent être transmis par le biais d&#8217;une seule connexion HTTP avec <text:span text:style-name="T4">EventSource</text:span>.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;implémentation d'<text:span text:style-name="T4">EventSource</text:span> demande un peu d&#8217;efforts côté serveur mais ne nécessite pas de <text:span text:style-name="T4">framework</text:span> particulier.
La complexité réside dans le maintien d&#8217;une transmission de données dédiée à chaque client ainsi qu&#8217;à la libération de la connexion lorsque le client se déconnecte.</text:p>
<text:p text:style-name="CodeTitre">io/eventsource-server.js</text:p><text:p text:style-name="Code">const WebSocket = require('faye-websocket');</text:p><text:p text:style-name="Code">const {EventSource} = WebSocket;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const chance = require('chance').Chance();</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">module.exports = (app) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>app.get('/new-users', (req, res, next) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>if (!EventSource.isEventSource(req)) {<text:s text:c="6"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="6"/>return next();</text:p><text:p text:style-name="Code"><text:s text:c="4"/>}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="4"/>let es = new EventSource(req, res);<text:s text:c="9"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>const loop = setInterval(() =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="6"/>es.send(chance.name());<text:s text:c="19"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>}, 2000);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="4"/>es.on('close', () =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="6"/>clearInterval(loop);</text:p><text:p text:style-name="Code"><text:s text:c="6"/>es = null;</text:p><text:p text:style-name="Code"><text:s text:c="6"/>next();</text:p><text:p text:style-name="Code"><text:s text:c="4"/>});</text:p><text:p text:style-name="Code"><text:s text:c="2"/>});</text:p><text:p text:style-name="Code">};</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Une connexion <text:span text:style-name="T4">EventSource</text:span> s&#8217;effectue (presque) comme une requête HTTP classique&#160;– il convient de vérifier qu&#8217;elle s&#8217;annonce en tant que telle.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Création d&#8217;un canal unique entre le client et le serveur.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Chaque appel à <text:span text:style-name="CodeDansTexte">es.send</text:span> enverra un nouveau message au client.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Le serveur est responsable de la gestion des connexions demandées par les différents clients.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> EventSource</text:h>
Rendez-vous sur <text:span text:style-name="T4">MDN web docs</text:span> pour en savoir plus sur EventSource.<text:line-break/>
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://developer.mozilla.org/docs/fr/Server-sent_events" text:visited-style-name="Visited_20_Internet_20_Link">https://developer.mozilla.org/docs/fr/Server-sent_events</text:a>

<text:p text:style-name="TexteCourant">En résumé, <text:span text:style-name="T4">EventSource</text:span> est idéal pour maintenir une connexion avec le serveur et souscrire à des mises à jour en continu.
Chaque connexion <text:span text:style-name="T4">EventSource</text:span> devrait concerner qu&#8217;un seul et même type d&#8217;événement.</text:p>
<text:bookmark text:name="ref-io-websocket" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Échanges en temps-réel avec <text:span text:style-name="T4">WebSocket</text:span></text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">WebSocket</text:span> est une technologie web favorisant les échanges bidirectionnels entre client et serveur.</text:p>
<text:p text:style-name="TexteCourant">À l&#8217;inverse du protocole HTTP/1, tout message envoyé par le client ou par le serveur n&#8217;appelle pas à une réponse de la part du receveur.
Cet élément ainsi que le maintien d&#8217;une connexion permanente expliquent la rapidité du protocole en comparaison avec le modèle requête/réponse.</text:p>
<text:p text:style-name="TexteCourant">L’exemple associé est accessible sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://localhost:4000/examples/io/websocket.html" text:visited-style-name="Visited_20_Internet_20_Link">http://localhost:4000/examples/io/websocket.html</text:a></text:span>.
Nous pouvons vérifier la compatibilité navigateur de <text:span text:style-name="T4">WebSocket</text:span> sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://caniuse.com#feat=websocket" text:visited-style-name="Visited_20_Internet_20_Link">http://caniuse.com#feat=websocket</text:a></text:span>.</text:p>
<text:p text:style-name="CodeTitre">io/websocket-client.js</text:p><text:p text:style-name="Code">let ws = new WebSocket('ws://localhost:4000/users');<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">const userList = document.querySelector('#user-list');</text:p><text:p text:style-name="Code">let interval;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">ws.addEventListener('open', () =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>interval = setInterval(() =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>ws.send(JSON.stringify({ action: 'getName' }));<text:s text:c="3"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>}, 2000);</text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">ws.addEventListener('message', ({data}) =&gt; {<text:s text:c="10"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>const li = document.createElement('li');</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const now = new Date().toLocaleTimeString();</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>li.textContent = `${now} : ${data}`;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>userList.prepend(li);</text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">ws.addEventListener('close', () =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>ws = null;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>clearInterval(interval);</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Nous ouvrons une connexion <text:span text:style-name="T4">WebSocket</text:span> depuis le navigateur web courant.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Émission d&#8217;un message à destination du serveur.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Réaction à un message émis par le serveur.<text:line-break/></text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-09/images/websocket-frames.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 68. Trame de messages envoyés par le client (sur fond vert) et par le serveur.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;implémentation côté serveur est légèrement plus compliquée qu&#8217;avec <text:span text:style-name="T4">EventSource</text:span> pour la simple et bonne raison que <text:span text:style-name="T4">Websocket</text:span> est une surcouche du protocole <text:span text:style-name="CodeDansTexte">ws</text:span>.
HTTP n&#8217;est utilisé que comme canal de communication pour établir un lien avec le serveur <text:span text:style-name="CodeDansTexte">ws</text:span>.
HTTP sert de tunnel tandis que le dialogue entre client et serveur s&#8217;effectue dans un dialecte compréhensible uniquement de clients <text:span text:style-name="T4">WebSocket</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Il est nécessaire d&#8217;utiliser un module <text:span text:style-name="T4">npm</text:span> <text:span text:style-name="T4">WebSocket</text:span> comme <text:span text:style-name="T4">faye</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/faye-websocket" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/faye-websocket</text:a></text:span>) ou <text:span text:style-name="T4">socket.io</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/socket.io" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/socket.io</text:a></text:span>) à moins de vouloir réimplémenter le protocole soi-même.
Le motif de conception est similaire à <text:span text:style-name="T4">EventSource</text:span>, à la différence près qu&#8217;il faut aussi écouter les messages transmis par le client.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Remarque</text:span> HTTP et le statut <text:span text:style-name="CodeDansTexte">101 Switching Protocols</text:span></text:h><text:p text:style-name="Remarque">Voici ce qui se passe lorsqu&#8217;un client <text:span text:style-name="T4">WebSocket</text:span> se connecte sur <text:span text:style-name="CodeDansTexte">ws://example.com</text:span>&#160;:</text:p>
<text:p text:style-name="RemarqueNumero">1.<text:tab/>requête HTTP <text:span text:style-name="CodeDansTexte"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://example.com" text:visited-style-name="Visited_20_Internet_20_Link">http://example.com</text:a></text:span> standard contenant les entêtes <text:span text:style-name="CodeDansTexte">Upgrade: websocket</text:span> et <text:span text:style-name="CodeDansTexte">Connection: Upgrade</text:span>&#160;;</text:p><text:p text:style-name="RemarqueNumero">2.<text:tab/>le serveur HTTP répond avec un statut <text:span text:style-name="CodeDansTexte">101 Switching Protocols</text:span>&#160;;</text:p><text:p text:style-name="RemarqueNumero">3.<text:tab/>le serveur <text:span text:style-name="T4">WebSocket</text:span> prend le relais dans le dialogue client/serveur&#160;;</text:p><text:p text:style-name="RemarqueNumero">4.<text:tab/>client et serveur communiquent désormais via le protocole <text:span text:style-name="CodeDansTexte">ws</text:span> au sein de la connexion HTTP initiale.</text:p>
<text:p text:style-name="TexteCourant">Par extension et de par la nature même du protocole <text:span text:style-name="CodeDansTexte">ws</text:span>, il serait tout à fait possible que <text:span text:style-name="T4">et</text:span> clients <text:span text:style-name="T4">et</text:span> serveur soient des agents Node.
Autrement dit, un client <text:span text:style-name="T4">WebSocket</text:span> n&#8217;a pas nécessairement à être un navigateur web.</text:p>
<text:p text:style-name="CodeTitre">io/websocket-server.js</text:p><text:p text:style-name="Code">const WebSocket = require('faye-websocket');</text:p><text:p text:style-name="Code">const chance = require('chance').Chance();</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">module.exports = (server) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>server.on('upgrade', (req, socket, body, next) =&gt; {<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>if (!WebSocket.isWebSocket(req)) {<text:s text:c="11"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="6"/>return next();</text:p><text:p text:style-name="Code"><text:s text:c="4"/>}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="4"/>let ws = new WebSocket(req, socket, body);<text:s text:c="3"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="4"/>ws.on('message', event =&gt; {<text:s text:c="18"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code"><text:s text:c="6"/>const data = JSON.parse(event.data);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="6"/>if (data.action === 'getName') {</text:p><text:p text:style-name="Code"><text:s text:c="8"/>ws.send(chance.name());<text:s text:c="18"/><text:span text:style-name="PuceCode">5</text:span></text:p><text:p text:style-name="Code"><text:s text:c="6"/>}</text:p><text:p text:style-name="Code"><text:s text:c="4"/>});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="4"/>ws.on('close', () =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="6"/>ws = null;</text:p><text:p text:style-name="Code"><text:s text:c="4"/>});</text:p><text:p text:style-name="Code"><text:s text:c="2"/>});</text:p><text:p text:style-name="Code">};</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Le serveur HTTP vient de répondre avec un statut <text:span text:style-name="CodeDansTexte">101 Switching Protocols</text:span> et délègue désormais la responsabilité du dialogue client/serveur.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Nous vérifions que le changement de protocole concerne le protocole <text:span text:style-name="CodeDansTexte">ws</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> La connexion réseau (<text:span text:style-name="CodeDansTexte">socket</text:span>) est transmise au serveur <text:span text:style-name="T4">WebSocket</text:span> pour amorcer le dialogue client/serveur avec le protocole <text:span text:style-name="CodeDansTexte">ws</text:span>.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Réaction à la réception d&#8217;un message client.<text:line-break/><text:span text:style-name="PuceCode">5</text:span> Émission d&#8217;un message à destination d&#8217;un client.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Là aussi, le serveur est responsable de la gestion des connexions demandées par les différents clients.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> WebSockets</text:h>
Rendez-vous sur <text:span text:style-name="T4">MDN web docs</text:span> pour en savoir plus sur WebSockets.<text:line-break/>
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://developer.mozilla.org/docs/fr/WebSockets" text:visited-style-name="Visited_20_Internet_20_Link">https://developer.mozilla.org/docs/fr/WebSockets</text:a>

<text:p text:style-name="TexteCourant">En résumé, <text:span text:style-name="T4">WebSocket</text:span> est idéal pour maintenir une connexion en temps-réel et pour relayer plusieurs messages à l&#8217;initiative du serveur et de tout client connecté&#160;– qu&#8217;il s&#8217;agisse d&#8217;un navigateur web ou d&#8217;un agent Node.
Chaque connexion <text:span text:style-name="T4">WebSocket</text:span> peut encapsuler plusieurs types de messages.</text:p>
<text:bookmark text:name="ref-développer_au_quotidien" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Développer au quotidien</text:h><text:p text:style-name="TexteCourant">Nous avons beaucoup parlé de nouvelles techniques et de modularisation.
Cela peut sembler rebutant, notamment par l&#8217;introduction d&#8217;outils auxquels nous ne sommes pas encore familiers.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;écosystème Node fournit énormément d&#8217;outils qui devraient nous faire <text:span text:style-name="T7">gagner du temps</text:span>, en nous aidant à exécuter des actions <text:span text:style-name="T7">lorsqu&#8217;un fichier est modifié</text:span>, en nous aidant à <text:span text:style-name="T7">organiser notre travail</text:span> mais aussi en <text:span text:style-name="T7">actualisant automatiquement notre application web</text:span> au fil du développement (fini les appuis répétés sur la touche <text:span text:style-name="Menu">[F5]</text:span>) ou encore en <text:span text:style-name="T7">optimisant nos fichiers graphiques</text:span>.</text:p>
<text:bookmark text:name="ref-watchify" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Reconstruire en continu avec <text:span text:style-name="">watchify</text:span></text:h><text:p text:style-name="TexteCourant">L&#8217;utilisation de <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-browserify"  text:visited-style-name="Visited_20_Internet_20_Link">browserify</text:a> nous apporte le confort de pouvoir inclure des modules <text:span text:style-name="T4">npm</text:span> dans les navigateurs web.
En revanche, ça nous demande de générer des artéfacts&#160;– des <text:span text:style-name="T4">bundles</text:span>&#160;– à chaque modification pour consolider ces changements.</text:p>
<text:p text:style-name="TexteCourant">C&#8217;est à ce moment qu&#8217;intervient le module <text:span text:style-name="T4">watchify</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/watchify" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/watchify</text:a></text:span>).
Il fonctionne <text:span text:style-name="T7">exactement comme <text:span text:style-name="T4">browserify</text:span></text:span> mais au lieu de compiler une seule fois, il compilera dès qu&#8217;un changement sera détecté&#160;– où que ce soit dans l&#8217;arbre de dépendances du point d&#8217;entrée (paramètre <text:span text:style-name="CodeDansTexte">-e</text:span>, <text:span text:style-name="CodeDansTexte">--entrypoint</text:span>).</text:p>
<text:p text:style-name="TexteCourant">La commande suivante compilerait le fichier <text:span text:style-name="CodeDansTexte">examples/modules/react-app.js</text:span> une fois et une seule&#160;:</text:p>
<text:p text:style-name="Code">$ ./node_modules/.bin/browserify -t babelify -e examples/modules/react-app.js -o examples/modules/react-app-browserify.js</text:p>
<text:p text:style-name="TexteCourant">Il suffit de remplacer <text:span text:style-name="CodeDansTexte">browserify</text:span> par <text:span text:style-name="CodeDansTexte">watchify</text:span>&#160;– le programme garde la main et indique chaque nouvelle compilation sur une nouvelle ligne&#160;:</text:p>
<text:p text:style-name="Code">$ ./node_modules/.bin/watchify -dv -t babelify -e examples/modules/react-app.js -o examples/modules/react-app-browserify.js</text:p><text:p text:style-name="Code">1840601 bytes written to examples/modules/react-app-browserify.js (2.58 seconds) at 4:44:28 PM</text:p><text:p text:style-name="Code">352482 bytes written to examples/modules/react-app-browserify.js (0.10 seconds) at 4:45:09 PM</text:p><text:p text:style-name="Code">1840605 bytes written to examples/modules/react-app-browserify.js (0.25 seconds) at 4:45:15 PM</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">watchify</text:span> utilise un mécanisme dit de <text:span text:style-name="T7">compilation incrémentale</text:span>&#160;: <text:span text:style-name="T4">watchify</text:span> ne recompile pas tout mais uniquement les différences depuis le dernier changement.
C&#8217;est beaucoup plus rapide et tout aussi efficace.</text:p>
<text:p text:style-name="TexteCourant">Trois arguments sont utiles à <text:span text:style-name="T4">watchify</text:span>&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="CodeDansTexte">-v</text:span> (<text:span text:style-name="CodeDansTexte">--verbose</text:span>)&#160;: force la création du fichier compilé au lancement de la commande&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="CodeDansTexte">-o</text:span> (<text:span text:style-name="CodeDansTexte">--outfile</text:span>)&#160;: spécifie le chemin d&#8217;enregistrement du fichier compilé&#160;– il est impossible d&#8217;utiliser la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-stdio"  text:visited-style-name="Visited_20_Internet_20_Link">sortie standard</text:a> (cf. Chapitre 4)&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="CodeDansTexte">-d</text:span> (<text:span text:style-name="CodeDansTexte">--debug</text:span>)&#160;: (lire <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-browserify-sourcemaps"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T4">Source Maps</text:span></text:a> dans ce même chapitre).</text:p>
</text:list-item></text:list>
<text:bookmark text:name="ref-livereload" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Changements en temps-réel dans le navigateur</text:h><text:p text:style-name="TexteCourant">Modifier un fichier. Changer de fenêtre. Recharger. Changer de fenêtre. Re-modifier un fichier. Changer de fenêtre. Recharger. <text:span text:style-name="T4">Là</text:span> c&#8217;est bon.<text:line-break/>La quantité d&#8217;outils à disposition et leurs différentes opinions sur notre manière de travailler nous obligent à prendre des postures de travail qui ne vont <text:span text:style-name="T7">pas nécessairement dans le sens de la productivité</text:span>.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;intégration de Node avec le système d&#8217;exploitation va nous aider à déclencher des actions lorsqu&#8217;un ou plusieurs fichiers sont modifiés.
Ces modifications peuvent être de notre fait, directement ou par le biais d&#8217;un autre logiciel (un optimiseur d&#8217;images ou la <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-node-sass"  text:visited-style-name="Visited_20_Internet_20_Link">compilation d&#8217;un fichier <text:span text:style-name="T4">Sass</text:span></text:a> par exemple).</text:p>
<text:p text:style-name="TexteCourant">Nous allons explorer <text:span text:style-name="T4">deux stratégies</text:span> d&#8217;actualisation&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">le <text:span text:style-name="T7">rafraichissement automatique du navigateur</text:span>&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">le <text:span text:style-name="T7">remplacement de modules à chaud</text:span> (<text:span text:style-name="T4">Hot Module Replacement</text:span>, <text:span text:style-name="T4">HMR</text:span>).</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">browser-sync</text:span> est un outil formidable de développement pour <text:span text:style-name="T7">rafraichir automatiquement une page web</text:span> si son contenu ou une des ressources associées change.
Il offre également la possibilité de <text:span text:style-name="T7">propager les changements sur plusieurs fenêtres et terminaux</text:span>&#160;– y compris les clics, <text:span text:style-name="T4">scrolls</text:span> et toute interaction avec des formulaires.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">browser-sync</text:span> maintient la position du scroll lors d&#8217;un rechargement de contenu.
L&#8217;outil se lance soit de manière autonome, soit en <text:span text:style-name="T4">proxy</text:span> entre l&#8217;utilisateur et tout autre serveur web.
Il ne nécessite pas non plus de <text:span text:style-name="T4">plugin</text:span> ou d&#8217;extension navigateur pour fonctionner, le rendant idéal pour du prototypage, de la recherche utilisateur ou du développement local.</text:p>
<text:p text:style-name="CodeTitre">Lancement d&#8217;un serveur web autonome avec synchronisation sur le port 4000.</text:p><text:p text:style-name="Code">$ ./node_modules/.bin/browser-sync start --server --port 4000 .</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple suivant illustre l&#8217;intégration de <text:span text:style-name="T4">browser-sync</text:span> avec le serveur web exposant les exemples de ce chapitre (voir le détail dans le fichier <text:span text:style-name="CodeDansTexte">server.js</text:span>)&#160;:</text:p>
<text:p text:style-name="CodeTitre">livereload/server-sync.js</text:p><text:p text:style-name="Code">const browserSync = require('browser-sync');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">module.exports = (server) =&gt; {<text:s text:c="13"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>return port =&gt; {<text:s text:c="25"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>const PUBLIC_PORT = 4000;<text:s text:c="14"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>const bs = browserSync.create();</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="4"/>server.listen(port);<text:s text:c="19"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="4"/>bs.init({<text:s text:c="30"/><text:span text:style-name="PuceCode">5</text:span></text:p><text:p text:style-name="Code"><text:s text:c="6"/>files: ['./examples'],</text:p><text:p text:style-name="Code"><text:s text:c="6"/>port: PUBLIC_PORT,</text:p><text:p text:style-name="Code"><text:s text:c="6"/>open: false,</text:p><text:p text:style-name="Code"><text:s text:c="6"/>logPrefix: 'nodebook',</text:p><text:p text:style-name="Code"><text:s text:c="6"/>proxy: {</text:p><text:p text:style-name="Code"><text:s text:c="8"/>target: `http://localhost:${port}`,<text:span text:style-name="PuceCode">6</text:span></text:p><text:p text:style-name="Code"><text:s text:c="8"/>ws: true,</text:p><text:p text:style-name="Code"><text:s text:c="6"/>}</text:p><text:p text:style-name="Code"><text:s text:c="4"/>});</text:p><text:p text:style-name="Code"><text:s text:c="2"/>};</text:p><text:p text:style-name="Code">};</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> On passe un serveur http en argument (obtenu via <text:span text:style-name="CodeDansTexte">http.createServer()</text:span> par exemple).<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Ce port sera assigné au serveur web mais ne sera pas voué à être public.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Ce port, lui, est celui qui sera public.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Démarrage du serveur web sur le port privé.<text:line-break/><text:span text:style-name="PuceCode">5</text:span> Initialisation de <text:span text:style-name="T4">browser-sync</text:span>.<text:line-break/><text:span text:style-name="PuceCode">6</text:span> Interfaçage avec le serveur web créé au point 4.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">La synchronisation peut être activée avec tous les exemples du chapitre en suffixant la commande <text:span text:style-name="CodeDansTexte">npm start</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ nodebook chapter 4</text:p><text:p text:style-name="Code">$ npm start -- --with-sync</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> <text:span text:style-name="T4">browser-sync</text:span></text:h><text:p text:style-name="Remarque"><text:span text:style-name="T4">browser-sync</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://browsersync.io/" text:visited-style-name="Visited_20_Internet_20_Link">https://browsersync.io/</text:a></text:span>) est richement documenté et
illustré, y compris ses intégrations avec les outils <text:span text:style-name="T4">gulp</text:span> et <text:span text:style-name="T4">grunt</text:span>.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">browser-sync</text:span> a beau maintenir la position du <text:span text:style-name="T4">scroll</text:span>, il n&#8217;en reste pas moins que <text:span text:style-name="T7">chaque changement remet à zéro</text:span> l&#8217;espace mémoire de la page.
C&#8217;est là qu&#8217;entre en jeu le <text:span text:style-name="T7">remplacement des modules à chaud</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Le <text:span text:style-name="T7">remplacement des modules à chaud</text:span> (<text:span text:style-name="T4">Hot Module Replacement</text:span> ou <text:span text:style-name="T4">HMR</text:span>) est une technique basée sur le remplacement de fonctions ou d&#8217;objets tout en assurant le maintien de leurs variables ou états internes.
Cette technique a notamment été popularisée par la combinaison de la librairie <text:span text:style-name="T4">React</text:span> et de l&#8217;outil d&#8217;assemblage <text:span text:style-name="T4">Webpack</text:span>.
Il est toutefois possible de procéder à du <text:span text:style-name="T4">remplacement à chaud</text:span> sans <text:span text:style-name="T4">React</text:span> et sans <text:span text:style-name="T4">Webpack</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Quatre actions sont effectuées&#160;:</text:p>
<text:p text:style-name="ListeANumero">1.<text:tab/>un <text:span text:style-name="T7">serveur de remplacement à chaud</text:span> est démarré localement&#160;;</text:p><text:p text:style-name="ListeANumero">2.<text:tab/>l&#8217;outil d&#8217;assemblage (<text:span text:style-name="T4">browserify</text:span>, <text:span text:style-name="T4">Webpack</text:span>, etc.) <text:span text:style-name="T7">insère du code client</text:span> permettant d&#8217;établir un lien entre la page web et le serveur de remplacement à chaud&#160;;</text:p><text:p text:style-name="ListeANumero">3.<text:tab/>l&#8217;outil d&#8217;assemblage <text:span text:style-name="T7">déclare les fichiers modifiés</text:span>, transmis par le serveur de remplacement à chaud vers le navigateur web&#160;;</text:p><text:p text:style-name="ListeANumero">4.<text:tab/>le <text:span text:style-name="T7">code client remplace les modules</text:span> et maintient leur état interne.</text:p>
<text:p text:style-name="TexteCourant">Le <text:span text:style-name="T4">plugin browserify</text:span> nommé <text:span text:style-name="T4">livereactload</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/livereactload" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/livereactload</text:a></text:span>)
est très certainement le plus facile à mettre en place pour remplacer des
modules <text:span text:style-name="T4">React</text:span> à la volée.
Il nécessite une ligne de configuration côté <text:span text:style-name="T4">browserify</text:span> et ne nécessite aucun
changement de code côté client.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> <text:span text:style-name="T4">livereactload</text:span></text:h><text:p text:style-name="Remarque">Des aides à l&#8217;installation du module <text:span text:style-name="T4">livereactload</text:span> sont disponibles dans
son fichier README.</text:p>
<text:p text:style-name="TexteCourant">Le remplacement à chaud n&#8217;est possible que lorsque nous sommes dans un état de reconstruction en continu, par exemple avec <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-watchify"  text:visited-style-name="Visited_20_Internet_20_Link">watchify</text:a>.</text:p>
<text:p text:style-name="TexteCourant">Nous pouvons constater les effets du remplacement à chaud avec un des exemples de ce chapitre accessible sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://localhost:4000/examples/livereload/react-app-hmr.html" text:visited-style-name="Visited_20_Internet_20_Link">http://localhost:4000/examples/livereload/react-app-hmr.html</text:a></text:span>.
La commande <text:span text:style-name="CodeDansTexte">npm run watch</text:span> de ce chapitre démarre un serveur web et reconstruit en continu le fichier <text:span text:style-name="CodeDansTexte">./examples/livereload/react-app-hmr.js</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ nodebook chapter 4</text:p><text:p text:style-name="Code">$ npm run watch</text:p>
<text:p text:style-name="TexteCourant">Qui n&#8217;est autre qu&#8217;un équivalent de&#160;:</text:p>
<text:p text:style-name="Code">$ watchify -dv \</text:p><text:p text:style-name="Code"><text:s text:c="2"/>-t babelify \</text:p><text:p text:style-name="Code"><text:s text:c="2"/>-p livereactload \</text:p><text:p text:style-name="Code"><text:s text:c="2"/>-e ./examples/livereload/react-app-hmr.js \</text:p><text:p text:style-name="Code"><text:s text:c="2"/>-o ./examples/livereload/react-app-hmr-browserify.js</text:p>
<text:p text:style-name="TexteCourant">Dans cet exemple, le <text:span text:style-name="T4">transform</text:span> (<text:span text:style-name="CodeDansTexte">-t</text:span>) modifie le code source à la volée&#160;—
ici, adapter le code écrit dans une syntaxe compréhensible par la majorité
des navigateurs web grâce à l&#8217;outil <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-transpilation"  text:visited-style-name="Visited_20_Internet_20_Link">Babel</text:a>.</text:p>
<text:p text:style-name="TexteCourant">Le <text:span text:style-name="T4">plugin</text:span> (<text:span text:style-name="CodeDansTexte">-p</text:span>) ne transforme pas le code mais le fonctionnement de
<text:span text:style-name="T4">watchify</text:span> pour y ajouter des fonctionnalités&#160;— ici, refléter les
changements du fichier source vers le navigateur en temps réel.</text:p>
<text:p text:style-name="TexteCourant">Il faudra ensuite modifier l&#8217;un des deux fichiers suivants&#160;– en décommentant les lignes concernées par exemple&#160;– pour constater les changements dans notre navigateur.</text:p>
<text:p text:style-name="CodeTitre">livereload/react-app-hmr.js</text:p><text:p text:style-name="Code">import { createElement } from 'react';</text:p><text:p text:style-name="Code">import ReactDOM from 'react-dom';</text:p><text:p text:style-name="Code">import ButtonCount from './button-count.jsx';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">ReactDOM.render(</text:p><text:p text:style-name="Code"><text:s text:c="2"/>createElement('div', {}, [</text:p><text:p text:style-name="Code"><text:s text:c="4"/>createElement(ButtonCount),</text:p><text:p text:style-name="Code"><text:s text:c="4"/>createElement(ButtonCount),</text:p><text:p text:style-name="Code"><text:s text:c="4"/>// createElement(ButtonCount),</text:p><text:p text:style-name="Code"><text:s text:c="2"/>]),</text:p><text:p text:style-name="Code"><text:s text:c="2"/>document.querySelector('#app')</text:p><text:p text:style-name="Code">);</text:p>
<text:p text:style-name="TexteCourant">Chaque instance du composant <text:span text:style-name="CodeDansTexte">livereload/button-count.jsx</text:span> gère un état interne indépendant des autres instances de même type.
Nous aurions perdu cet état interne en cas d&#8217;utilisation de <text:span text:style-name="T4">browser-sync</text:span>, sans <text:span text:style-name="T4">remplacement à chaud</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">livereload/button-count.jsx</text:p><text:p text:style-name="Code">import React, { Component } from 'react';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">export default class ButtonCount extends Component {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>constructor(props) {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>super(props);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="4"/>this.handleClick = this.handleClick.bind(this);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="4"/>this.state = {</text:p><text:p text:style-name="Code"><text:s text:c="6"/>clickCount: 0<text:s text:c="43"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>};</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>handleClick () {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>this.setState({ clickCount: this.state.clickCount + 1 }); <text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>render() {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>let style = {};</text:p><text:p text:style-name="Code"><text:s text:c="4"/>// style = {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>//<text:s text:c="3"/>fontFamily: 'monospace',</text:p><text:p text:style-name="Code"><text:s text:c="4"/>//<text:s text:c="3"/>fontWeight: 'bold',</text:p><text:p text:style-name="Code"><text:s text:c="4"/>//<text:s text:c="3"/>textTransform:' uppercase',</text:p><text:p text:style-name="Code"><text:s text:c="4"/>// };</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="4"/>return (&lt;button style={style} onClick={this.handleClick}&gt;</text:p><text:p text:style-name="Code"><text:s text:c="6"/>Clics : {this.state.clickCount}</text:p><text:p text:style-name="Code"><text:s text:c="4"/>&lt;/button&gt;);</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Initialisation du compteur de clics propre à chaque instance de <text:span text:style-name="CodeDansTexte">ButtonCount</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Incrémentation du compteur de clics en réaction à un clic sur le composant <text:span text:style-name="CodeDansTexte">ButtonCount</text:span>.<text:line-break/></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Alternative</text:span> <text:span text:style-name="T4">ud</text:span> et <text:span text:style-name="T4">browserify-hmr</text:span></text:h><text:p text:style-name="Remarque">Deux modules vont nous aider&#160;: <text:span text:style-name="T4">ud</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/ud" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/ud</text:a></text:span>)
et <text:span text:style-name="T4">browserify-hmr</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/browserify-hmr" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/browserify-hmr</text:a></text:span>), respectivement pour
déclarer des modules remplaçables et pour démarrer un serveur de remplacement
à chaud minimaliste.</text:p>
<text:bookmark text:name="ref-node-sass" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Modulariser ses feuilles de style avec <text:span text:style-name="T4">Sass</text:span></text:h><text:p text:style-name="TexteCourant">La modularité et l&#8217;écriture d&#8217;un code isolé facilitent sa réutilisation et préviennent les effets de bord.<text:line-break/>Dans le cas des feuilles de style CSS, cela peut aider à éviter de faire <text:span text:style-name="T4">déborder</text:span> la cascade&#160;– si l&#8217;on peut dire.</text:p>
<text:p text:style-name="TexteCourant">Avec le <text:span text:style-name="T4">langage Sass</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://sass-lang.com" text:visited-style-name="Visited_20_Internet_20_Link">http://sass-lang.com</text:a></text:span>), nous pourrions songer à générer des blocs de code selon des <text:span text:style-name="T7">listes</text:span> (idéal pour des thèmes de couleurs, des rubriques produits, etc.), à concevoir des <text:span text:style-name="T7">composants comme des fonctions</text:span> ou à bénéficier de fonctions de <text:span text:style-name="T7">calcul de couleurs</text:span> ou d&#8217;unités de mesure.</text:p>
<text:p text:style-name="TexteCourant">Le langage <text:span text:style-name="T4">Sass</text:span> est originaire du monde Ruby mais il a été depuis rendu accessible nativement à l&#8217;écosystème Node par le biais de <text:span text:style-name="T4">node-sass</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/node-sass" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/node-sass</text:a></text:span>)– et par extension, par la librairie C <text:span text:style-name="T4">libsass</text:span>.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Lecture</text:span> CSS maintenables avec Sass et Compass</text:h><text:p text:style-name="Remarque">Je recommande la lecture de l&#8217;ouvrage de référence <text:span text:style-name="T4">CSS maintenables avec Sass et Compass</text:span>
(<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://editions-eyrolles.com/Livre/9782212136401" text:visited-style-name="Visited_20_Internet_20_Link">https://editions-eyrolles.com/Livre/9782212136401</text:a></text:span>).
Il écrit par <text:span text:style-name="T4">Kaelig Deloumeau-Prigent</text:span> aux éditions <text:span text:style-name="T4">Eyrolles</text:span>.</text:p>
<text:p text:style-name="Remarque">Il décrit très bien les tenants et aboutissants de Sass ainsi que de bonnes
méthodes d&#8217;organisation du code et de maintenabilité au sein d&#8217;une équipe de
travail.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">node-sass</text:span> offre un outil en ligne de commande pour compiler un fichier Sass, plusieurs fichiers Sass ou encore une arborescence de répertoires contenant des fichiers Sass vers des fichiers CSS compréhensibles par les navigateurs web.</text:p>
<text:p text:style-name="CodeTitre">ui/buttons.scss</text:p><text:p text:style-name="Code">$sizes: (<text:s text:c="29"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>small: .8,</text:p><text:p text:style-name="Code"><text:s text:c="2"/>regular: 1,</text:p><text:p text:style-name="Code"><text:s text:c="2"/>large: 1.2</text:p><text:p text:style-name="Code">);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">.btn {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>@each $size, $factor in $sizes {<text:s text:c="4"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>&amp;.btn--#{$size} {<text:s text:c="17"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="6"/>font-size: $factor * 1em;<text:s text:c="7"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>}</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>&amp;.btn--icon {<text:s text:c="23"/><text:span text:style-name="PuceCode">5</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>svg {</text:p><text:p text:style-name="Code"><text:s text:c="6"/>height: 16px;</text:p><text:p text:style-name="Code"><text:s text:c="6"/>width: 16px;</text:p><text:p text:style-name="Code"><text:s text:c="6"/>margin-right: .5em;</text:p><text:p text:style-name="Code"><text:s text:c="4"/>}</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Définition d&#8217;une <text:span text:style-name="CodeDansTexte">Map</text:span> nommée <text:span text:style-name="CodeDansTexte">$sizes</text:span> (ensemble clé/valeur) décrivant des tailles et leur facteur multiplicateur.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Itération et extraction des clés/valeurs de <text:span text:style-name="CodeDansTexte">$sizes</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Interpolation d&#8217;une variable pour composer un sélecteur CSS (<text:span text:style-name="CodeDansTexte">.btn&#8212;&#8203;small</text:span>, <text:span text:style-name="CodeDansTexte">.btn&#8212;&#8203;regular</text:span> etc.).<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Calcul de la taille de la police de caractères (<text:span text:style-name="CodeDansTexte">.8em</text:span>, <text:span text:style-name="CodeDansTexte">1em</text:span> etc.).<text:line-break/><text:span text:style-name="PuceCode">5</text:span> Composition d&#8217;un sélecteur de classe à partir du sélecteur courant (<text:span text:style-name="CodeDansTexte">.btn.btn&#8212;&#8203;icon</text:span>).<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">La compilation des fichiers s&#8217;effectue très simplement&#160;:</text:p>
<text:p text:style-name="Code">$ ./node_modules/.bin/node-sass -o ./examples ./examples/buttons.scss</text:p>
<text:p text:style-name="TexteCourant">La compilation générera le fichier CSS <text:span text:style-name="CodeDansTexte">button.css</text:span>, lisible par tout navigateur web&#160;:</text:p>
<text:p text:style-name="CodeTitre">ui/buttons.css</text:p><text:p text:style-name="Code">.btn.btn--small {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>font-size: 0.8em; }</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">.btn.btn--regular {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>font-size: 1em; }</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">.btn.btn--large {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>font-size: 1.2em; }</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">.btn.btn--icon svg {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>height: 16px;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>width: 16px;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>margin-right: .5em; }</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Astuce</text:span> Oublions les <text:span text:style-name="T4">vendor prefix</text:span></text:h><text:p text:style-name="Remarque">Les navigateurs évoluent plus vite que le cycle de vie de nos projets.
Certaines propriétés CSS sont abritées derrière des préfixes (<text:span text:style-name="CodeDansTexte">-moz</text:span>, <text:span text:style-name="CodeDansTexte">-webkit</text:span>
etc.) avant d&#8217;être standardisées.</text:p>
<text:p text:style-name="Remarque">Les modules <text:span text:style-name="T4">autoprefixer</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/autoprefixer" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/autoprefixer</text:a></text:span>) et
<text:span text:style-name="T4">postcss</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/postcss" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/postcss</text:a></text:span>) facilitent notre vie en préfixant
et réécrivant automatiquement les attributs en fonction de nos exigences de
compatibilité navigateurs.</text:p>
<text:bookmark text:name="ref-ui-bundling" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Lier composants visuels et feuilles de style</text:h><text:p text:style-name="TexteCourant">Souvenons-nous de la section expliquant le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-react"  text:visited-style-name="Visited_20_Internet_20_Link">rapprochement entre données, rendu et interactions avec <text:span text:style-name="T4">React</text:span></text:a> de ce même chapitre.
Finalement nous avons presque tout rapproché, exception faite de la présentation avec <text:span text:style-name="T4">Sass</text:span> ou CSS.</text:p>
<text:p text:style-name="TexteCourant">En suivant la logique de notre approche modulaire, nous pourrions imaginer un <text:span text:style-name="T4">transform browserify</text:span> pour compiler et/ou extraire notre code <text:span text:style-name="T4">Sass</text:span> ou CSS depuis nos composants <text:span text:style-name="T4">CommonJS</text:span> ou <text:span text:style-name="T4">ECMAScript 2015</text:span>.</text:p>
<text:p text:style-name="TexteCourant">C&#8217;est exactement la proposition du module <text:span text:style-name="T4">sassify</text:span>.
Il intègre <text:span text:style-name="T4">node-sass</text:span> en tant que <text:span text:style-name="T4">transform browserify</text:span> et le transforme le code à la volée durant la phase de compilation.
Il se charge lui-même d&#8217;ajouter les styles dans le document HTML ou expose le code CSS compilé via la fonction <text:span text:style-name="CodeDansTexte">require()</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Une saine stratégie serait de charger des CSS de base dans une feuille de style en tête de <text:span text:style-name="CodeDansTexte">&lt;head&gt;</text:span> puis de laisser les composants graphiques injecter leurs feuilles CSS respectives après coup.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple suivant expose deux composants <text:span text:style-name="T4">React</text:span>, regroupés dans une thématique de composants de boutons HTML.
Une feuille de style est importée à même le module afin de <text:span text:style-name="T7">gérer à un même niveau, présentation, rendu et interactions</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">ui/Buttons.jsx</text:p><text:p text:style-name="Code">import React from 'react';</text:p><text:p text:style-name="Code">import './buttons.scss';<text:s text:c="10"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const Icon = (props) =&gt; (&lt;svg aria-hidden="true"&gt;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;use xlinkHref={'symbols.svg#' + props.id} /&gt;</text:p><text:p text:style-name="Code">&lt;/svg&gt;);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">export const BaseButton = (props) =&gt; (</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;button className={'btn btn--' + props.variant}&gt;{props.children}&lt;/button&gt;</text:p><text:p text:style-name="Code">);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">export const IconButton = (props) =&gt; (</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;button className="btn btn--icon"&gt;</text:p><text:p text:style-name="Code"><text:s text:c="4"/>&lt;Icon id={props.icon} /&gt;</text:p><text:p text:style-name="Code"><text:s text:c="4"/>{props.children}</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;/button&gt;</text:p><text:p text:style-name="Code">);</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Import d&#8217;un fichier <text:span text:style-name="T4">Sass</text:span> qui sera par la suite compilé en CSS par le <text:span text:style-name="T4">transform sassify</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Sans surprise, le module <text:span text:style-name="T4">sassify</text:span> se charge comme la majorité des <text:span text:style-name="T4">transform browserify</text:span> comme vu dans la section <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-browserify"  text:visited-style-name="Visited_20_Internet_20_Link">Importer des modules npm pour le web</text:a> dans ce même chapitre&#160;:</text:p>
<text:p text:style-name="Code">$ ./node_modules/.bin/browserify \</text:p><text:p text:style-name="Code"><text:s text:c="2"/>-t sassify \</text:p><text:p text:style-name="Code"><text:s text:c="2"/>-t babelify \</text:p><text:p text:style-name="Code"><text:s text:c="2"/>-e ./examples/Buttons.jsx \</text:p><text:p text:style-name="Code"><text:s text:c="2"/>-o ./examples/Button-browserify.js</text:p>
<text:p text:style-name="TexteCourant">La commande suivante injectera automatiquement les feuilles de style compilées dans le document HTML lors de son exécution dans un navigateur web&#160;:</text:p>
<text:p text:style-name="Code">$ ./node_modules/.bin/browserify \</text:p><text:p text:style-name="Code"><text:s text:c="2"/>-t [ sassify --auto-inject ] \</text:p><text:p text:style-name="Code"><text:s text:c="2"/>-t babelify \</text:p><text:p text:style-name="Code"><text:s text:c="2"/>-e ./examples/Buttons.jsx \</text:p><text:p text:style-name="Code"><text:s text:c="2"/>-o ./examples/Button-browserify.js</text:p>
<text:bookmark text:name="ref-optimiser_ses_ressources_graphiques" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Optimiser ses ressources graphiques</text:h><text:p text:style-name="TexteCourant">Node est un outil de choix lorsque l&#8217;on souhaite s&#8217;atteler au développement <text:span text:style-name="T4">front-end</text:span> et ce n&#8217;est pas sans raison.
Outre l&#8217;outillage lié à la réécriture du code&#160;– comme <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-babel"  text:visited-style-name="Visited_20_Internet_20_Link">Babel</text:a> et <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-browserify"  text:visited-style-name="Visited_20_Internet_20_Link">browserify</text:a> évoqués ci-avant&#160;– Node regorge de modules <text:span text:style-name="T4">npm</text:span> réduisant les tâches manuelles répétitives et possiblement sujettes à erreur.</text:p>
<text:p text:style-name="TexteCourant">Nous retrouvons l'<text:span text:style-name="T7">optimisation des ressources graphiques</text:span> parmi cet ensemble de tâches rébarbatives.
Quand j&#8217;écris <text:span text:style-name="T4">ressources graphiques</text:span>, j&#8217;entends par là le redimensionnement ou la création de vignettes d&#8217;images, l&#8217;optimisation de leur poids, la fusion de fichiers SVG sous forme de symboles, la création de piles de polices de caractère et même l&#8217;encodage audio/vidéo&#160;– via des <text:span text:style-name="T4">bindings</text:span> avec des logiciels spécialisés comme <text:span text:style-name="T4">ffmpeg</text:span> ou <text:span text:style-name="T4">lame</text:span>.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;outil en ligne de commande <text:span text:style-name="T4">imagemin-cli</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/imagemin-cli" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/imagemin-cli</text:a></text:span>) est le module de référence pour optimiser les fichiers graphiques.
Il est basé sur la librairie <text:span text:style-name="T4">imagemin</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/imagemin" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/imagemin</text:a></text:span>) et se chargera de réduire le poids de nos images JPEG, PNG mais aussi GIF (animés et statiques) ainsi que le format vectoriel SVG.</text:p>
<text:p text:style-name="Code">$ ./node_modules/.bin/imagemin images/* --out-dir images</text:p><text:p text:style-name="Code">8 images minified</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Glossaire</text:span> Compression destructive et non-destructive</text:h><text:p text:style-name="Remarque">Il existe deux types de compression&#160;: avec et sans perte (<text:span text:style-name="T4">lossless</text:span>).
Elles ont toutes deux des caractéristiques distinctes&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="RemarquePuce"><text:span text:style-name="T7">destructive</text:span>&#160;: poids réduit au maximum, possibles artéfacts visuels, destruction potentielle de couleurs dans le cas d&#8217;images complexes&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="RemarquePuce"><text:span text:style-name="T7">sans perte</text:span>&#160;: poids réduit, les couleurs supprimées ne sont pas perceptibles à l&#8217;œil nu.</text:p>
</text:list-item></text:list>
<text:p text:style-name="Remarque">Il vaut mieux privilégier la <text:span text:style-name="T4">compression sans perte</text:span> pour éviter les artéfacts visuels et respecter fidèlement la création d&#8217;origine.</text:p>
<text:p text:style-name="TexteCourant">Le <text:span text:style-name="T7">redimensionnement d&#8217;images</text:span> est une autre de ces tâches courantes et récurrentes qui tombe rapidement aux oubliettes de par sa gourmandise en temps.
On voudra par exemple redimensionner des photos depuis des fichiers originaux, générer des <text:span text:style-name="T7">vignettes</text:span> ou encore <text:span text:style-name="T7">générer différentes tailles d&#8217;images</text:span> adaptées aux différentes dispositions d&#8217;un site web <text:span text:style-name="T4">responsive</text:span>.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">sharp-cli</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/sharp-cli" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/sharp-cli</text:a></text:span>) répond exactement à ce cahier des charges.
Ce module en ligne de commande est basé sur <text:span text:style-name="T4">sharp</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/sharp" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/sharp</text:a></text:span>), une librairie Node de modification d&#8217;images écrite en <text:span text:style-name="T4">ECMAScript</text:span> et <text:span text:style-name="T4">C++</text:span>.
<text:span text:style-name="T4">sharp</text:span> nous aidera entre autres à redimensionner, découper, retourner, recentrer, assembler et appliquer des effets graphiques de manière prédictible.</text:p>
<text:p text:style-name="Code">$ ./node_modules/.bin/sharp resize 500 \</text:p><text:p text:style-name="Code"><text:s text:c="2"/>--min \</text:p><text:p text:style-name="Code"><text:s text:c="2"/>-i images/*.png \</text:p><text:p text:style-name="Code"><text:s text:c="2"/>--output ./images/thumbs</text:p>
<text:p text:style-name="TexteCourant">La commande précédente illustre une <text:span text:style-name="T7">opération de redimensionnement d&#8217;images</text:span>&#160;:</text:p>
<text:p text:style-name="ListeANumero">1.<text:tab/>d&#8217;une dimension de <text:span text:style-name="T7">500 pixels de largeur</text:span>&#160;;</text:p><text:p text:style-name="ListeANumero">2.<text:tab/><text:span text:style-name="T7">minimum</text:span> (donc respecte)&#160;– sans cet attribut les images seraient des carrés de 500 pixels de large et de 500 pixels de haut&#160;;</text:p><text:p text:style-name="ListeANumero">3.<text:tab/>ciblant toutes les <text:span text:style-name="T7">images PNG</text:span> du répertoire <text:span text:style-name="CodeDansTexte">images</text:span>&#160;;</text:p><text:p text:style-name="ListeANumero">4.<text:tab/>puis <text:span text:style-name="T7">exportées dans le répertoire</text:span> <text:span text:style-name="CodeDansTexte">images/thumbs</text:span>.</text:p>
<text:p text:style-name="Code">$ ./node_modules/.bin/sharp grayscale \</text:p><text:p text:style-name="Code"><text:s text:c="2"/>-i images/*.png \</text:p><text:p text:style-name="Code"><text:s text:c="2"/>--output ./images/square</text:p>
<text:p text:style-name="TexteCourant">À l&#8217;inverse, la commande précédente illustre la conversion en noir et blanc d&#8217;images ainsi que leur export dans un répertoire différent.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;interface en ligne de commande de <text:span text:style-name="T4">sharp-cli</text:span> ne permet pas de créer d&#8217;opérations composites (redimensionner et convertir en niveaux de gris par exemple).
Il faudra recourir à l&#8217;API Node de <text:span text:style-name="T4">sharp</text:span> et chaîner les opérations en s&#8217;aidant des exemples documentés sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://sharp.dimens.io/" text:visited-style-name="Visited_20_Internet_20_Link">http://sharp.dimens.io/</text:a></text:span>.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Alternative</text:span> gm</text:h><text:p text:style-name="Remarque">Le module <text:span text:style-name="T4">gm</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/gm" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/gm</text:a></text:span>) est le module <text:span text:style-name="T4">classique</text:span> de
redimensionnement dans l&#8217;écosystème Node.
Il s&#8217;interface avec le programme <text:span text:style-name="T4">GraphicsMagick</text:span> et <text:span text:style-name="T4">ImageMagick</text:span>&#160;–
et nécessite donc leur présence sur le système d&#8217;exploitation.</text:p>
<text:p text:style-name="Remarque">Cela rend l&#8217;utilisation de <text:span text:style-name="T4">gm</text:span> légèrement moins triviale que celle de <text:span text:style-name="T4">sharp</text:span>
mais la quantité de ressources et la qualité du module en font une bonne
alternative à considérer.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;utilisation d&#8217;un <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-npm-scripts"  text:visited-style-name="Visited_20_Internet_20_Link">script npm</text:a>
(cf. chapitre 5) est idéale pour décrire les différentes actions d&#8217;optimisation.
Les <text:span text:style-name="T4">scripts</text:span> sont alors à invoquer manuellement, sur un <text:span text:style-name="T4">crochet git</text:span>
(<text:span text:style-name="T4">git hook</text:span>) ou automatiquement lors du déploiement avec un
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-deploy.ci"  text:visited-style-name="Visited_20_Internet_20_Link">service d&#8217;intégration continue</text:a>, par
exemple.</text:p>
<text:bookmark text:name="ref-testing" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Tester son code</text:h><text:p text:style-name="TexteCourant">C&#8217;est bien connu que lorsqu&#8217;on produit du code de qualité, écrire des tests est
amplement superflu et ne sert qu&#8217;à nous ralentir.</text:p>
<text:p text:style-name="TexteCourant">La réalité est toute autre et suit un paradigme très simple&#160;:
<text:span text:style-name="T7">plus il y a de lignes de code, plus il y a de chances de faire des erreurs</text:span>.
Cela vaut aussi bien pour du HTML que du CSS ou encore de l'<text:span text:style-name="T4">ECMAScript</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Cette ultime et dernière section de ce chapitre nous aidera à comprendre
quoi et comment tester pour
<text:span text:style-name="T7">diminuer le coût de maintenance de nos applications</text:span>.</text:p>
<text:bookmark text:name="ref-testing-101" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Que tester ?</text:h><text:p text:style-name="TexteCourant">L&#8217;idée d&#8217;écrire des tests pour améliorer la qualité de son code est attrayante
mais quand on en sait pas quoi tester et ni à qui demander pour se lancer,
il est évident qu&#8217;on ne va pas s&#8217;y mettre pour s&#8217;assurer que 1+1 valent bien
<text:span text:style-name="T8">3</text:span> 2.</text:p>
<text:p text:style-name="TexteCourant">Je pense à ces <text:span text:style-name="T4">trois règles</text:span> lorsque je souhaite écrire des tests&#160;:</text:p>
<text:p text:style-name="ListeANumero">1.<text:tab/>qu&#8217;est-ce qui est <text:span text:style-name="T7">public/exporté</text:span>&#160;?</text:p><text:p text:style-name="ListeANumero">2.<text:tab/>qu&#8217;est-ce qui crée des <text:span text:style-name="T7">branches dans mon code</text:span>&#160;?</text:p><text:p text:style-name="ListeANumero">3.<text:tab/>qu&#8217;est-ce qui <text:span text:style-name="T7">vient du monde extérieur</text:span>&#160;?</text:p>
<text:p text:style-name="TexteCourant">La syntaxe de modules <text:span text:style-name="T4">ECMAScript 2015</text:span> est idéale pour visualiser les segments
de code qui sont exportés par nos différents fichiers.
Élément marquant&#160;: ce code est simple et devrait arriver à compter le nombre
de mots mais nous n&#8217;avons aucune idée s&#8217;il fera correctement le travail sans
l&#8217;exécuter dans une application.</text:p>
<text:p text:style-name="CodeTitre">test-export.js</text:p><text:p text:style-name="Code">const isString = (thing) =&gt; typeof word === 'string';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const isWord = (word) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>return isString(word) &amp;&amp; /^[\w\s.,\-?!;+]{2,}$/.test(word);</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">export default function countWords (sentence) { <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>return sentence.split(' ').filter(isWord).length;</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> La fonction <text:span text:style-name="CodeDansTexte">countWords</text:span> le seul élément exporté par notre module et
devrait donc être le seul sujet de nos tests.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Une <text:span text:style-name="T4">branche</text:span> est une portion de <text:span text:style-name="T7">code qui s&#8217;exécute de manière ponctuelle</text:span>.
Ces sections de code s&#8217;activent ou non selon l&#8217;état d&#8217;une structure de données.
Il faut <text:span text:style-name="T7">prévoir <text:span text:style-name="T4">au moins autant</text:span> de tests que de branches</text:span> pour valider les
attentes.</text:p>
<text:p text:style-name="CodeTitre">test-branches.js</text:p><text:p text:style-name="Code">export default function isOdd (number) {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>if (!Number.isFinite(number)) {<text:s text:c="21"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>throw new Error('number devrait être un nombre');</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>if (number % 2) { <text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>return true;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code"><text:s text:c="2"/>else {<text:s text:c="12"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>return false;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Première branche activée dans <text:span text:style-name="T4">deux</text:span> cas de figure.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Seconde branche.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Troisième branche.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Enfin, l'<text:span text:style-name="T7">accès à toute donnée externe</text:span> est susceptible de mal fonctionner
sans que nous puissions maitriser l&#8217;origine des problèmes.
En revanche l&#8217;écriture de tests nous aidera à <text:span text:style-name="T7">accepter ce cas de figure</text:span> et
à le signaler à nos applications.</text:p>
<text:p text:style-name="CodeTitre">test-outside-world.js</text:p><text:p text:style-name="Code">export default function getLinkElementContent (linkElement) {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const {href} = linkElement;<text:s text:c="11"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>return fetch(href)<text:s text:c="20"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>.then(response =&gt; response.json())<text:s text:c="2"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>.then(pkg =&gt; pkg.dependencies);</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> <text:span text:style-name="CodeDansTexte">linkElement</text:span> peut ne pas être un lien hypertexte (<text:span text:style-name="CodeDansTexte">document.querySelector</text:span> retourne <text:span text:style-name="CodeDansTexte">null</text:span>).<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Ici tout peut arriver&#160;: <text:span text:style-name="CodeDansTexte">href</text:span> n&#8217;est pas une URL valide (balise <text:span text:style-name="CodeDansTexte">href</text:span> vide), serveur indisponible etc.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Et là, le fichier JSON peut être mal formé ou la réponse est exprimée dans un autre format que JSON.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Nous savons désormais à peu près tout ce qu&#8217;il faut <text:span text:style-name="T4">flairer</text:span> pour renforcer nos applications en écrivant quelques tests.</text:p>
<text:bookmark text:name="ref-soutiller_pour_écrire_des_assertions" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">S&#8217;outiller pour écrire des assertions</text:h><text:p text:style-name="TexteCourant">Avant de nous lancer directement dans la conception et l&#8217;écriture des tests, intéressons-nous à comprendre comment l&#8217;outillage se structure.</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">l'<text:span text:style-name="T7">assertion</text:span><text:line-break/>
C&#8217;est la <text:span text:style-name="T4">vérification</text:span> d&#8217;une vérité, d&#8217;une attente, du résultat d&#8217;une opération.
Une <text:span text:style-name="T4">assertion</text:span> couvre <text:span text:style-name="T4">une branche</text:span> de code.</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">le <text:span text:style-name="T7">test</text:span><text:line-break/>
C&#8217;est un <text:span text:style-name="T4">regroupement d&#8217;assertions</text:span> couvrant toutes les <text:span text:style-name="T4">branches</text:span> des fonctionnalités <text:span text:style-name="T4">publiques</text:span> de notre code.</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">la <text:span text:style-name="T7">suite de tests</text:span><text:line-break/>
C&#8217;est un <text:span text:style-name="T4">ensemble de tests</text:span> couvrant un aspect logique d&#8217;un code applicatif.
Une application peut comporter plusieurs suites selon sa complexité&#160;:</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">l'<text:span text:style-name="T7">exécuteur de tests</text:span><text:line-break/>
C&#8217;est le logiciel responsable de créer l&#8217;environnement d&#8217;exécution d&#8217;une <text:span text:style-name="T4">suite de tests</text:span>.
Ils expriment une opinion sur la structuration des tests ainsi que sur des automatismes à fournir pour accélérer l&#8217;écriture des tests.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">L&#8217;outillage varie selon chacun de ces niveaux.
Certains outils offrent une écriture d&#8217;assertion plus fluide, d&#8217;autres proposent une écriture plus spécifiquement adaptée.</text:p>
<text:p text:style-name="TexteCourant">Les sections suivantes sont complémentaires.
J&#8217;ai favorisé des approches itératives et modulaires pour faciliter l&#8217;ajout ou le retrait de tout outil de notre outillage&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">la librairie <text:span text:style-name="T4">chai</text:span> pour les <text:span text:style-name="T4">assertions</text:span>&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">la librairie <text:span text:style-name="T4">mocha</text:span> pour les <text:span text:style-name="T4">tests</text:span>&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">la librairie <text:span text:style-name="T4">mocha</text:span> pour la <text:span text:style-name="T4">suite de tests</text:span> exécutable par Node&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">l'<text:span text:style-name="T4">exécuteur de tests</text:span> nommé  <text:span text:style-name="T4">karma</text:span> pour faire fonctionner la <text:span text:style-name="T4">suite de tests</text:span> dans les navigateurs web.</text:p>
</text:list-item></text:list>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> <text:span text:style-name="T4">chai</text:span>, <text:span text:style-name="T4">mocha</text:span> et <text:span text:style-name="T4">karma</text:span></text:h><text:p text:style-name="Remarque">Ces trois librairies disposent d&#8217;une documentation en ligne expliquant leurs
options respectives ainsi que des exemples d&#8217;utilisation.</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="RemarquePuce"><text:span text:style-name="T4">chai</text:span>&#160;: <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://chaijs.com/api/bdd/" text:visited-style-name="Visited_20_Internet_20_Link">http://chaijs.com/api/bdd/</text:a></text:span>&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="RemarquePuce"><text:span text:style-name="T4">mocha</text:span>&#160;: <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://mochajs.org/" text:visited-style-name="Visited_20_Internet_20_Link">https://mochajs.org/</text:a></text:span>&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="RemarquePuce"><text:span text:style-name="T4">karma</text:span>&#160;: <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://karma-runner.github.io/" text:visited-style-name="Visited_20_Internet_20_Link">https://karma-runner.github.io/</text:a></text:span>.</text:p>
</text:list-item></text:list>
<text:p text:style-name="CodeTitre">Exemple d&#8217;assertion avec la librairie <text:span text:style-name="T4">chai</text:span></text:p><text:p text:style-name="Code">import {expect} from 'chai';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">expect(2+2).to.equal(4);</text:p>
<text:p text:style-name="CodeTitre">Exemple de test avec la librairie <text:span text:style-name="T4">mocha</text:span></text:p><text:p text:style-name="Code">describe('functionName', () =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>it('should succeed with parameter cheese', () =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>// ...</text:p><text:p text:style-name="Code"><text:s text:c="2"/>});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>it('should throw an error with parameter meat', () =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>// ...</text:p><text:p text:style-name="Code"><text:s text:c="2"/>});</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="CodeTitre">Exemple d&#8217;exécution de suites de tests avec <text:span text:style-name="T4">mocha</text:span> et <text:span text:style-name="T4">karma</text:span></text:p><text:p text:style-name="Code">$ mocha tests/**/*.js</text:p><text:p text:style-name="Code">$ karma start</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exécuteur de tests <text:span text:style-name="T4">karma</text:span> se configure par le biais d&#8217;un fichier <text:span text:style-name="CodeDansTexte">karma.conf.js</text:span>.
Nous en trouverons un à la racine du répertoire des ressources de ce chapitre 4.</text:p>
<text:bookmark text:name="ref-tester_ses_composants_react_sans_navigateur_web" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Tester ses composants React sans navigateur web</text:h><text:p text:style-name="TexteCourant">Un des points forts de <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-react"  text:visited-style-name="Visited_20_Internet_20_Link">React</text:a> évoqué dans ce chapitre est la <text:span text:style-name="T4">description de son rendu</text:span> à même le composant.
Nous bénéficions ainsi du résultat final (son HTML par exemple) ainsi que d&#8217;un arbre représentant une structure de sous-éléments et de propriétés.</text:p>
<text:p text:style-name="TexteCourant">Nous disposons de deux stratégies pour tester un composant <text:span text:style-name="T4">React</text:span> afin d&#8217;en tester les différents comportements&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">tester le rendu</text:span> en comparant des chaînes de caractères&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">tester l&#8217;état</text:span> en validant la présence d&#8217;attributs ou le déclenchement de certaines méthodes du composant.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">La librairie <text:span text:style-name="T4">Enzyme</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/enzyme" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/enzyme</text:a></text:span>) s&#8217;occupe très bien des deux, en plus de s&#8217;intégrer avec n&#8217;importe quelle librairie de tests.
Dans tous les cas, elle nous permettra de monter nos composants soit de manière isolée, soit dans un véritable arbre DOM soit en rendu HTML.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> <text:span text:style-name="T4">Enzyme</text:span></text:h><text:p text:style-name="Remarque">L&#8217;équipe d&#8217;Airbnb offre une documentation exhaustive sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://airbnb.io/enzyme/" text:visited-style-name="Visited_20_Internet_20_Link">http://airbnb.io/enzyme/</text:a></text:span>.
J&#8217;ai beaucoup apprécié les exemples complets d&#8217;intégration avec
<text:span text:style-name="T4">mocha</text:span>, <text:span text:style-name="T4">webpack</text:span> et <text:span text:style-name="T4">tape</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Nous allons nous baser sur le composant créé dans la section
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-react"  text:visited-style-name="Visited_20_Internet_20_Link">rapprocher données, rendu et interactions avec React</text:a> pour s&#8217;assurer
de son comportement <text:span text:style-name="T4">avant même de l&#8217;inclure</text:span> dans notre application.</text:p>
<text:p text:style-name="CodeTitre">tests/date-interval.js</text:p><text:p text:style-name="Code">import { createElement } from 'react';</text:p><text:p text:style-name="Code">import { expect } from 'chai';</text:p><text:p text:style-name="Code">import { shallow } from 'enzyme';</text:p><text:p text:style-name="Code">import DateInterval from '../modules/date-interval.jsx';<text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">describe('&lt;DateInterval /&gt;', () =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const element = createElement(DateInterval);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>it('affiche un élément &lt;time&gt;', () =&gt; {<text:s text:c="15"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>const component = shallow(element);<text:s text:c="17"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="4"/>expect(component.find('time')).to.have.length(1);<text:s text:c="3"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>it('la propriété tickDate influence la classe HTML', () =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>const OK_CLASS = ['pair', 'impair'];</text:p><text:p text:style-name="Code"><text:s text:c="4"/>const component = shallow(element);<text:s text:c="17"/><text:span text:style-name="PuceCode">5</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>const {tickData} = component.state();<text:s text:c="15"/><text:span text:style-name="PuceCode">6</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="4"/>const time = tickData.now.getTime();</text:p><text:p text:style-name="Code"><text:s text:c="4"/>expect(time).to.be.closeTo(Date.now(), 3);<text:s text:c="10"/><text:span text:style-name="PuceCode">7</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>expect(tickData.className).to.be.oneOf(OK_CLASS);<text:s text:c="3"/><text:span text:style-name="PuceCode">8</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>});</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Import du module <text:span text:style-name="CodeDansTexte">DateInterval</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Création d&#8217;un <text:span text:style-name="T4">test</text:span> destiné à vérifier la nature de la balise HTML à générer.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Création du composant isolé (<text:span text:style-name="T4">shallow</text:span>)&#160;– aucun élément DOM ne sera créé ni inséré dans le document.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> On écrit une <text:span text:style-name="T4">assertion</text:span> garantissant que l&#8217;on retourne un élément <text:span text:style-name="CodeDansTexte">&lt;time&gt;</text:span>.<text:line-break/><text:span text:style-name="PuceCode">5</text:span> Création d&#8217;un second composant isolé dont l&#8217;état est indépendant du premier.<text:line-break/><text:span text:style-name="PuceCode">6</text:span> Récupération de l&#8217;état (<text:span text:style-name="T4">state</text:span>) du composant.<text:line-break/><text:span text:style-name="PuceCode">7</text:span> Assertion vérifiant que la date utilisée par le composant est proche de la date courante (à quelques millisecondes près).<text:line-break/><text:span text:style-name="PuceCode">8</text:span> Assertion vérifiant qu&#8217;une propriété de l&#8217;état ne peut être qu&#8217;une des deux valeurs parmi <text:span text:style-name="CodeDansTexte">pair</text:span> et <text:span text:style-name="CodeDansTexte">impair</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">En complément à ceci, la librairie <text:span text:style-name="T4">chai-enzyme</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/chai-enzyme" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/chai-enzyme</text:a></text:span>) étend le vocabulaire de <text:span text:style-name="T4">chai</text:span> pour ajouter des assertions de composants.
C&#8217;est une question de goût plus qu&#8217;une nécessité.<text:line-break/>L&#8217;exemple suivant reprend le composant créé dans la section
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-livereload"  text:visited-style-name="Visited_20_Internet_20_Link">changements en temps-réel dans le navigateur</text:a> et illustre une
assertion suite à un clic sur le bouton&#160;:</text:p>
<text:p text:style-name="CodeTitre">tests/button-count.js</text:p><text:p text:style-name="Code">import React from 'react';</text:p><text:p text:style-name="Code">import chai, { expect } from 'chai';</text:p><text:p text:style-name="Code">import chaiEnzyme from 'chai-enzyme';</text:p><text:p text:style-name="Code">import { shallow } from 'enzyme';</text:p><text:p text:style-name="Code">import ButtonCount from '../livereload/button-count.jsx';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">chai.use(chaiEnzyme());</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">describe('&lt;ButtonCount /&gt;', () =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>it('should increment state on click', () =&gt; {<text:s text:c="7"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>const component = shallow(&lt;ButtonCount /&gt;);</text:p><text:p text:style-name="Code"><text:s text:c="4"/>component.simulate('click');<text:s text:c="22"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="4"/>expect(component).to.have.state('clickCount', 1); <text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>});</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Le libellé du test décrit le résultat attendu dans les assertions.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Simulation du clic sur le composant.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> L&#8217;état interne a bien été changé et correspond à la valeur attendue.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Le fichier <text:span text:style-name="CodeDansTexte">package.json</text:span> des ressources du chapitre 4 contient une tâche exécutant les tests exécutables dans un environnement Node uniquement.
Elle se lance de la manière suivante&#160;:</text:p>
<text:p text:style-name="Code">$ npm run test:node</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-09/images/mocha-react.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 69. Extrait de la sortie de la commande <text:span text:style-name="CodeDansTexte">npm run test:node</text:span></text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Alternative</text:span> <text:span text:style-name="T4">jest</text:span></text:h><text:p text:style-name="Remarque"><text:span text:style-name="T4">jest</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/jest" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/jest</text:a></text:span>) est un exécuteur de tests moderne et
rapide particulièrement adapté au test de composants côté serveur.
Au moment d&#8217;écrire cet ouvrage, il n&#8217;était pas encore possible de l&#8217;exécuter
dans un navigateur web.</text:p>
<text:p text:style-name="TexteCourant">Il est intéressant de retenir que les tests navigateurs ne sont pas indispensables pour s&#8217;assurer du bon fonctionnement de nos composants.
Des librairies comme <text:span text:style-name="T4">React</text:span> sont déjà solidement testées.
Cela nous laisse l&#8217;opportunité de nous concentrer uniquement sur notre logique métier.</text:p>
<text:p text:style-name="TexteCourant">Les tests navigateurs sont en revanche utiles pour tester la compatibilité navigateurs, que ce soit au niveau de la syntaxe <text:span text:style-name="T4">ECMAScript</text:span> ou du rendu CSS.</text:p>
<text:bookmark text:name="ref-tester_code_et_composants_dans_les_navigateurs_web" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Tester code et composants dans les navigateurs web</text:h><text:p text:style-name="TexteCourant">C&#8217;est bien beau de tester uniquement l&#8217;interface de composants <text:span text:style-name="T4">React</text:span> (ou autre technologie) mais comment faire lorsqu&#8217;on a besoin de tester avec un vrai DOM ou dans plusieurs navigateurs web&#160;?</text:p>
<text:p text:style-name="TexteCourant">On a besoin de tester dans un ou plusieurs navigateurs web pour&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">s&#8217;assurer de la <text:span text:style-name="T7">compatibilité de notre code</text:span> avec les variations d&#8217;implémentation de navigateurs web&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">valider notre choix de <text:span text:style-name="T4">polyfills</text:span>&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">tester fidèlement</text:span> contre des APIs de navigateurs ou du DOM (comme <text:span text:style-name="T4">Web Audio</text:span>, <text:span text:style-name="T4">Service Workers</text:span>, etc.).</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">Autrement dit, nous avons besoin d&#8217;un <text:span text:style-name="T7">exécuteur de tests</text:span> qui les fasse fonctionner dans l&#8217;environnement d&#8217;un navigateur web.
Idéalement, nous voulons que cet <text:span text:style-name="T4">exécuteur de tests</text:span> n&#8217;influent pas sur l&#8217;outillage employé pour écrire nos tests et donc nous permette d&#8217;utiliser <text:span text:style-name="T4">mocha</text:span> et <text:span text:style-name="T4">chai</text:span> comme dans la section précédente.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">karma</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/karma" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/karma</text:a></text:span>) est l&#8217;outil phare de l&#8217;écosystème Node dédié aux tests dans les navigateurs web.
Il a été créé en 2012 pour faciliter l&#8217;exécution des suites de tests de la librairie <text:span text:style-name="T4">Angular</text:span> et s&#8217;exécute en <text:span text:style-name="T7">ligne de commande</text:span>, assez simplement.</text:p>
<text:p text:style-name="TexteCourant">Les fonctionnalités de <text:span text:style-name="T4">karma</text:span> s&#8217;étendent à l&#8217;aide de modules <text:span text:style-name="T4">npm</text:span>&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">intégrations</text:span> avec des <text:span text:style-name="T4">suites de tests</text:span>&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">lanceurs</text:span> de navigateurs web&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">préprocesseurs</text:span> pour transformer des fichiers, les servir et/ou les inclure dans l&#8217;environnement de tests.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">Le pilotage de <text:span text:style-name="T4">karma</text:span> se fait via un fichier de configuration <text:span text:style-name="CodeDansTexte">karma.conf.js</text:span>.
Il est possible de surcharger ultérieurement cette configuration avec des arguments de la ligne de commande.</text:p>
<text:p text:style-name="CodeTitre">Initialisation automatique d&#8217;un fichier de configuration <text:span text:style-name="CodeDansTexte">karma.conf.js</text:span></text:p><text:p text:style-name="Code">$ ./node_modules/.bin/karma init</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">karma</text:span> fonctionne avec des navigateurs installés sur notre machine de développement tout comme avec des services distants comme <text:span text:style-name="T4">SauceLabs</text:span> ou <text:span text:style-name="T4">BrowserStack</text:span> (voir <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-ci"  text:visited-style-name="Visited_20_Internet_20_Link">intégration continue et compatibilité navigateurs</text:a>).
Les navigateurs doivent déjà être disponibles sur la machine de test (Firefox et Chrome par exemple) et nous devons en parallèle installer les <text:span text:style-name="T7">lanceurs</text:span> (<text:span text:style-name="CodeDansTexte">karma-firefox-launcher</text:span> et <text:span text:style-name="CodeDansTexte">karma-chrome-launcher</text:span> respectivement).</text:p>
<text:p text:style-name="TexteCourant">Les navigateurs lancés par défaut lors des tests sont listés dans l&#8217;option <text:span text:style-name="CodeDansTexte">browsers</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">karma.conf.js#L49</text:p><text:p text:style-name="Code">browsers: ['Chrome'],</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">karma</text:span> se charge d'<text:span text:style-name="T7">inclure les fichiers JavaScript</text:span> ou de <text:span text:style-name="T7">servir des fichiers statiques</text:span> en fonction de <text:span text:style-name="T4">motifs</text:span> de chemins.
Ces fichiers peuvent être locaux (de préférence) ou distants et même être de types différents comme JSON ou HTML&#160;:</text:p>
<text:p text:style-name="CodeTitre">karma.conf.js#L7-17</text:p><text:p text:style-name="Code">files: [</text:p><text:p text:style-name="Code"><text:s text:c="2"/>//'https://cdn.polyfill.io/v2/polyfill.min.js',<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>'examples/tests-browser/**/*.js',<text:s text:c="16"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>'examples/tests/**/*.js',</text:p><text:p text:style-name="Code"><text:s text:c="2"/>'examples/tests-browser/**/*.html',<text:s text:c="14"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>{</text:p><text:p text:style-name="Code"><text:s text:c="4"/>pattern: 'package.json',<text:s text:c="23"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code"><text:s text:c="4"/>served: true,</text:p><text:p text:style-name="Code"><text:s text:c="4"/>included: false<text:s text:c="32"/><text:span text:style-name="PuceCode">5</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">],</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Il suffirait de décommenter cette ligne pour inclure les <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-polyfills"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T4">polyfills</text:span> de navigateurs web</text:a> sans toucher à notre code.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Inclusion des fichiers de tests&#160;— ils sont appelés dans des balises HTML <text:span text:style-name="CodeDansTexte">&lt;script&gt;</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Inclusion de fichiers HTML&#160;— ils sont accessibles via HTTP.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Mise à disposition du fichier <text:span text:style-name="CodeDansTexte">package.json</text:span>&#160;— accessible via HTTP à l&#8217;adresse <text:span text:style-name="CodeDansTexte">/base/package.json</text:span>.<text:line-break/><text:span text:style-name="PuceCode">5</text:span> Indique que ce fichier ne doit pas être inclus dans une balise HTML <text:span text:style-name="CodeDansTexte">&lt;script&gt;</text:span>.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Des <text:span text:style-name="T4">intégrations</text:span> doivent être déclarés pour augmenter les fonctionnalités de base de <text:span text:style-name="T4">karma</text:span>.
Les fonctionnalités de base de <text:span text:style-name="T4">karma</text:span> se résument à charger des fichiers <text:span text:style-name="T4">ECMAScript</text:span> dans une balise <text:span text:style-name="CodeDansTexte">&lt;script&gt;</text:span>.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;extrait de configuration suivant illustre le chargement des <text:span text:style-name="T4">plugins</text:span> pour <text:span text:style-name="T4">browserify</text:span> (modules <text:span text:style-name="T4">CommonJS</text:span> et transpilation), <text:span text:style-name="T4">mocha</text:span> (<text:span text:style-name="T4">suites de tests</text:span>) et <text:span text:style-name="T4">fixture</text:span> (données représentant des cas d&#8217;utilisation)&#160;– respectivement les modules <text:span text:style-name="T4">npm</text:span> <text:span text:style-name="CodeDansTexte">karma-browserify</text:span>, <text:span text:style-name="CodeDansTexte">karma-mocha</text:span> et <text:span text:style-name="CodeDansTexte">karma-fixture</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">karma.conf.js#L5</text:p><text:p text:style-name="Code">frameworks: ['browserify', 'mocha', 'fixture'],</text:p>
<text:p text:style-name="TexteCourant">Une fois encore des <text:span text:style-name="T4">motifs de chemins</text:span> sont utilisés pour indiquer aux <text:span text:style-name="T4">plugins</text:span>
leur responsabilité de prise en charge.</text:p>
<text:p text:style-name="CodeTitre">karma.conf.js#L21-25</text:p><text:p text:style-name="Code">preprocessors: {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>'examples/tests/**/*.js': ['browserify'],<text:s text:c="9"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>'examples/tests-browser/**/*.js': ['browserify'],</text:p><text:p text:style-name="Code"><text:s text:c="2"/>'examples/tests-browser/**/*.html': ['html2js'],<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">},</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Ces fichiers seront transpilés par <text:span text:style-name="T4">browserify</text:span> avant d&#8217;être chargés dans les tests de navigateurs web.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Ces fichiers seront pris en charge par le <text:span text:style-name="T4">préprocesseur</text:span> nommé <text:span text:style-name="T4">html2js</text:span>, utilisé par <text:span text:style-name="CodeDansTexte">karma-fixture</text:span> pour transformer du HTML en arbre DOM.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Nous avons vu un exemple de code reposant sur un élément du DOM dans la section <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-testing-101"  text:visited-style-name="Visited_20_Internet_20_Link">que tester&#160;?</text:a> de ce chapitre.
Nous allons nous intéresser à une manière possible de tester la fonction exportée <text:span text:style-name="CodeDansTexte">getLinkElementContent</text:span> en se basant sur un <text:span text:style-name="T7">véritable appel HTTP</text:span> et un <text:span text:style-name="T7">véritable élément du DOM</text:span>, créé à partir du fichier de <text:span text:style-name="T4">fixture</text:span> suivant&#160;:</text:p>
<text:p text:style-name="CodeTitre">tests-browser/fixtures/link-package.html</text:p><text:p text:style-name="Code">&lt;a href="/base/package.json"&gt;Test&lt;/a&gt;</text:p>
<text:p text:style-name="TexteCourant">Ce fichier de <text:span text:style-name="T4">fixture</text:span> est chargé dans le DOM par le <text:span text:style-name="T4">plugin</text:span> <text:span text:style-name="CodeDansTexte">karma-fixture</text:span> pour prouver que l&#8217;on peut récupérer les dépendances exposées par le fichier <text:span text:style-name="CodeDansTexte">package.json</text:span> des ressources de ce chapitre&#160;:</text:p>
<text:p text:style-name="CodeTitre">tests-browser/test-outside-world.js</text:p><text:p text:style-name="Code">import { expect } from 'chai';</text:p><text:p text:style-name="Code">import getLinkElementContent from '../test-outside-world.js';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">describe('getLinkElementContent', () =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>before(() =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>fixture.setBase('examples/tests-browser/fixtures'); <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>it('fetches dependencies from remote package.json', () =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>const [link] = fixture.load('link-package.html');<text:s text:c="3"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="4"/>return getLinkElementContent(link).then(deps =&gt; {<text:s text:c="3"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="6"/>expect(deps).to.contain.all.keys(<text:s text:c="17"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code"><text:s text:c="8"/>'babel', 'react', 'enzyme'</text:p><text:p text:style-name="Code"><text:s text:c="6"/>);</text:p><text:p text:style-name="Code"><text:s text:c="4"/>});</text:p><text:p text:style-name="Code"><text:s text:c="2"/>});</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> <text:span text:style-name="CodeDansTexte">before()</text:span> indique à <text:span text:style-name="T4">mocha</text:span> d&#8217;exécuter ce bloc de code avant tout <text:span text:style-name="T4">test</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Appel du <text:span text:style-name="T4">plugin</text:span> de <text:span text:style-name="T4">fixture</text:span> pour obtenir l&#8217;élément du DOM nécessaire à la fonction <text:span text:style-name="CodeDansTexte">getLinkElementContent</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Appel réel de la fonction <text:span text:style-name="CodeDansTexte">getLinkElementContent</text:span>, résolu comme une <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-promise"  text:visited-style-name="Visited_20_Internet_20_Link">promesse</text:a> et dont nous testons le résultat à la ligne suivante.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> <text:span text:style-name="T4">Assertion</text:span> vérifiant que le résultat contient bien des clés de dépendances <text:span text:style-name="T4">npm</text:span> attendues&#160;– nous avons bien récupéré le bon fichier et le bon contenu&#160;!.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">L&#8217;invocation de <text:span text:style-name="T4">karma</text:span> se fait en invoquant <text:span text:style-name="CodeDansTexte">./node_modules/.bin/karma start</text:span>.
Par mesure de simplicité, cette commande a été abstraite en tant que <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-npm-scripts"  text:visited-style-name="Visited_20_Internet_20_Link">script <text:span text:style-name="T4">npm</text:span></text:a>&#160;:</text:p>
<text:p text:style-name="CodeTitre">Exécution ponctuelle de <text:span text:style-name="T4">karma</text:span>.</text:p><text:p text:style-name="Code">$ npm run test:browser</text:p>
<text:p text:style-name="TexteCourant">Les tests peuvent être relancés en continu&#160;– dès qu&#8217;un fichier change&#160;– en désactivant l&#8217;exécution unique (<text:span text:style-name="T4">single run</text:span>).
C&#8217;est idéal lorsque les tests sont écrits en parallèle de l&#8217;implémentation du code ou que des ajustements fréquents ont lieu en phase de développement&#160;:</text:p>
<text:p text:style-name="CodeTitre">Exécution continue de <text:span text:style-name="T4">karma</text:span>.</text:p><text:p text:style-name="Code">$ npm run test:browser -- --no-single-run</text:p>
<text:p text:style-name="TexteCourant">Comme tout process de longue durée, il s&#8217;interrompt à l&#8217;aide de la combinaison de touches <text:span text:style-name="Menu">[CTRL+C]</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Nous en savons désormais suffisamment pour <text:span text:style-name="T7">tester dans les conditions des navigateurs web</text:span> avec du <text:span text:style-name="T7">code modulaire et réutilisable</text:span>.</text:p>
<text:p text:style-name="TexteCourant">La question qui se pose désormais est la suivante&#160;: <text:span text:style-name="T7">comment faire pour tester plusieurs versions d&#8217;un même navigateur</text:span>, pour tester sur un système d&#8217;exploitation que l&#8217;on n&#8217;a pas ou encore plusieurs <text:span text:style-name="T7">terminaux mobiles</text:span> de type <text:span text:style-name="T4">smartphone</text:span> ou tablette.</text:p>
<text:bookmark text:name="ref-ci" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">Intégration continue et compatibilité navigateurs</text:h><text:p text:style-name="TexteCourant">Plusieurs cas de figure se posent en complément de la section précédente&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">la <text:span text:style-name="T7">difficulté d&#8217;accès</text:span> à certaines combinaisons <text:span text:style-name="T4">navigateur web</text:span> + <text:span text:style-name="T4">système d&#8217;exploitation</text:span>&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">l&#8217;envie d'<text:span text:style-name="T7">automatiser les tests</text:span> de navigateurs web.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">En étant sous <text:span text:style-name="T4">Windows</text:span>, il nous sera difficile de tester <text:span text:style-name="T4">Safari pour macOS</text:span>.
Inversement, en étant sous <text:span text:style-name="T4">macOS</text:span> il nous sera difficile de tester <text:span text:style-name="T4">Internet Explorer pour Windows XP</text:span> ou <text:span text:style-name="T4">Edge pour Windows 10</text:span>.
Que dire d&#8217;anciennes versions de navigateurs Android dont la rapidité de développement et donc la compatibilité est bien en deçà des versions de Chrome pour ordinateur ou mobile.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;écosystème de modules <text:span text:style-name="T4">npm</text:span> liés à <text:span text:style-name="T4">karma</text:span> s&#8217;est déjà penché sur la question.
C&#8217;est le cas notamment du produit <text:span text:style-name="T4">BrowserStack</text:span> qui offre une intégration pour déléguer l&#8217;exécution des tests sur leur plate-forme commerciale.
Il s&#8217;agit du module <text:span text:style-name="CodeDansTexte">karma-browserstack-launcher</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/karma-browserstack-launcher" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/karma-browserstack-launcher</text:a></text:span>).</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> <text:span text:style-name="T4">BrowserStack</text:span></text:h><text:p text:style-name="Remarque">La documentation de <text:span text:style-name="T4">BrowserStack</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://www.browserstack.com/automate/node" text:visited-style-name="Visited_20_Internet_20_Link">https://www.browserstack.com/automate/node</text:a></text:span>)
décrit les différents systèmes d&#8217;exploitation à disposition ainsi que les
navigateurs web compatibles, pour PC, Mac, iOS et Android.</text:p>
<text:p text:style-name="Remarque">L&#8217;intégration avec Node est également documentée au cas où vous souhaiteriez
effectuer des tests sans passer par <text:span text:style-name="T4">karma</text:span>.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">BrowserStack</text:span> n&#8217;est pas un navigateur en soi mais offre un accès à une multitude
de navigateurs.
Il faut donc créer de nouvelles configurations de navigateurs dans la propriété
de configuration <text:span text:style-name="CodeDansTexte">customLaunchers</text:span>.
L&#8217;extrait de configuration suivant illustre la création d&#8217;un navigateur <text:span text:style-name="T4">Safari</text:span>
pour <text:span text:style-name="T4">iPhone 4S</text:span> sous <text:span text:style-name="T4">iOS 5.1</text:span>&#160;:</text:p>
<text:p text:style-name="CodeTitre">karma.conf.js#L51-58</text:p><text:p text:style-name="Code">customLaunchers: {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>iphone4: {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>base: 'BrowserStack',</text:p><text:p text:style-name="Code"><text:s text:c="4"/>device: 'iPhone 4S',</text:p><text:p text:style-name="Code"><text:s text:c="4"/>os: 'ios',</text:p><text:p text:style-name="Code"><text:s text:c="4"/>os_version: '5.1'</text:p><text:p text:style-name="Code"><text:s text:c="2"/>},</text:p><text:p text:style-name="Code">},</text:p>
<text:p text:style-name="TexteCourant">L&#8217;utilisation de <text:span text:style-name="T4">BrowserStack</text:span> nécessite un compte et l&#8217;obtention d&#8217;une clé
d&#8217;API afin d&#8217;utiliser leur service.
Notre <text:span text:style-name="T4">npm d&#8217;utilisateur</text:span> et la <text:span text:style-name="T4">clé d&#8217;API</text:span> doivent être renseignés en tant que
<text:span text:style-name="T7">variables d&#8217;environnement</text:span> pour établir une connexion au service et démarrer
notre bon vieil iPhone 4&#160;:</text:p>
<text:p text:style-name="Code">$ export BROWSER_STACK_USERNAME=...</text:p><text:p text:style-name="Code">$ export BROWSER_STACK_ACCESS_KEY=...</text:p><text:p text:style-name="Code">$ npm run test:browser -- --browsers iphone4</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">BrowserStack</text:span> peut être configuré plus finement selon vos besoins.
Le réglage suivant s&#8217;assure de faire transiter les données HTTP
(scripts, HTML, etc.) via la connexion sécurisée entre notre ordinateur et
<text:span text:style-name="T4">BrowserStack</text:span>.
C&#8217;est un réglage utile en cas de <text:span text:style-name="T7">proxy exigeant</text:span> ou de
<text:span text:style-name="T7">réglages de connexion à Internet</text:span> bien spécifiques.</text:p>
<text:p text:style-name="CodeTitre">karma.conf.js#L39-41</text:p><text:p text:style-name="Code">browserStack: {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>forcelocal: true,</text:p><text:p text:style-name="Code">},</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Alternative</text:span> <text:span text:style-name="T4">Sauce Labs</text:span></text:h><text:p text:style-name="Remarque"><text:span text:style-name="T4">Sauce Labs</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://saucelabs.com" text:visited-style-name="Visited_20_Internet_20_Link">https://saucelabs.com</text:a></text:span>) est un concurrent de <text:span text:style-name="T4">BrowserStack</text:span>.
Il offre des fonctionnalités similaires et est gratuit pour les projets <text:span text:style-name="T4">open source</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Indépendamment de <text:span text:style-name="T4">BrowserStack</text:span>, l'<text:span text:style-name="T7">intégration continue</text:span> est un mécanisme
permettant l'<text:span text:style-name="T7">exécution automatique</text:span> des tests, de manière <text:span text:style-name="T7">reproductible</text:span> et
dans un <text:span text:style-name="T7">environnement systématiquement propre</text:span>&#160;– sans trace d&#8217;exécution d&#8217;un
précédent test.</text:p>
<text:p text:style-name="TexteCourant">Cela a deux avantages indéniables&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">exécuter les <text:span text:style-name="T7">tests pour tout changement de code</text:span>, peu importe qui en est l&#8217;auteur&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">s&#8217;assurer de l'<text:span text:style-name="T7">exécution systématique des tests</text:span>&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T7">mettre en commun</text:span> la logique d&#8217;exécution de tests.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">On évite ainsi les <text:span text:style-name="T4">oublis</text:span> tout en enlevant le coût de mise en place de l&#8217;infrastructure de tests chez des personnes contribuant de manière occasionnelle.
Cerise sur le gâteau, on prévient en partie les régressions&#160;– changement qui casse le fonctionnement attendu d&#8217;une fonctionnalité.</text:p>
<text:p text:style-name="TexteCourant">Le service <text:span text:style-name="T4">Travis CI</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://travis-ci.org" text:visited-style-name="Visited_20_Internet_20_Link">https://travis-ci.org</text:a></text:span>) est un service d&#8217;intégration continue (<text:span text:style-name="T4">Continuous Integration</text:span>, <text:span text:style-name="T4">CI</text:span>) parmi d&#8217;autres mais qui a été rendu populaire pour son intégration avec <text:span text:style-name="T4">GitHub</text:span>.
Il est gratuit pour les projets <text:span text:style-name="T4">open source</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Un service d&#8217;intégration continue est configuré pour définir ce qui est exécuté <text:span text:style-name="T4">avant</text:span>, <text:span text:style-name="T4">pendant</text:span> et <text:span text:style-name="T4">après</text:span> les tests.
Il a donc l&#8217;avantage de faciliter l&#8217;automatisation des tests de navigateurs web à même la <text:span text:style-name="T4">machine virtuelle</text:span> (<text:span text:style-name="T4">Virtual Machine</text:span>, <text:span text:style-name="T4">VM</text:span>) de test ou bien vers des plates-formes comme <text:span text:style-name="T4">BrowserStack</text:span>.
Son mécanisme de <text:span text:style-name="T7">variables d&#8217;environnement cryptées</text:span> nous évitera de donner accès à notre compte au premier venu.</text:p>
<text:p text:style-name="TexteCourant">Un fichier de configuration minimal au format YAML est nécessaire.
Des services comme <text:span text:style-name="T4">GitHub</text:span> facilitent la connexion avec <text:span text:style-name="T4">Travis CI</text:span> et déclenchent automatiquement l&#8217;exécution des tests à chaque commit ou <text:span text:style-name="T4">pull request</text:span>.</text:p>
<text:p text:style-name="CodeTitre">.travis.yml</text:p><text:p text:style-name="Code">language: node_js<text:s text:c="13"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">node_js: v10<text:s text:c="19"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">addons:</text:p><text:p text:style-name="Code"><text:s text:c="2"/>firefox: latest<text:s text:c="13"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">env:</text:p><text:p text:style-name="Code"><text:s text:c="2"/>- MOZ_HEADLESS=1<text:s text:c="12"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">script: npm run test:browser -- --browsers Firefox</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">env:</text:p><text:p text:style-name="Code"><text:s text:c="2"/>BROWSER_STACK_USERNAME: "$BROWSER_STACK_USERNAME"<text:s text:c="7"/><text:span text:style-name="PuceCode">5</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>BROWSER_STACK_ACCESS_KEY: "$BROWSER_STACK_ACCESS_KEY"</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Configuration de la <text:span text:style-name="T4">VM</text:span> pour utiliser <text:span text:style-name="T4">Node</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Configuration de la <text:span text:style-name="T4">VM</text:span> pour utiliser la version la plus récente de Node v10.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Installation de la dernière version stable de <text:span text:style-name="T4">Firefox</text:span>.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> La variable d&#8217;environnement <text:span text:style-name="CodeDansTexte">MOZ_HEADLESS</text:span> indique à Firefox de démarrer sans afficher d&#8217;interface graphique à l&#8217;écran.<text:line-break/><text:span text:style-name="PuceCode">5</text:span> J&#8217;ai paramétré la clé d&#8217;accès à <text:span text:style-name="T4">BrowserStack</text:span> dans les réglages de <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-travis-ci"  text:visited-style-name="Visited_20_Internet_20_Link">Travis CI</text:a> (voir encadré ci-après).<text:line-break/></text:p>
<text:bookmark text:name="ref-travis-ci" /><text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Documentation</text:span> <text:span text:style-name="T4">Travis CI</text:span></text:h><text:p text:style-name="Remarque">Des services comme <text:span text:style-name="T4">Travis CI</text:span> sont puissants et amplement configurable
pour de nombreux besoins&#160;— dont Node (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://docs.travis-ci.com/user/languages/javascript-with-nodejs/" text:visited-style-name="Visited_20_Internet_20_Link">https://docs.travis-ci.com/user/languages/javascript-with-nodejs/</text:a></text:span>)&#160;—
et y compris pour se connecter à des bases de données Postgres ou MariaDB.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(chapter-09/images/travis-ci-encrypted-env.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 70. Écran de paramétrage des variables d&#8217;environnement secrètes sur Travis CI.</text:p>
<text:bookmark text:name="ref-conclusion_9" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Conclusion</text:h><text:p text:style-name="TexteCourant">Nous sommes désormais en mesure d'<text:span text:style-name="T7">exécuter des tests unitaires</text:span> impliquant
des <text:span text:style-name="T7">navigateurs web</text:span> sur notre machine, sur des <text:span text:style-name="T7">services distants</text:span> mais
également de manière automatique avec des services d'<text:span text:style-name="T7">intégration continue</text:span>
comme <text:span text:style-name="T4">Travis CI</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Le recours aux modules <text:span text:style-name="T4">npm</text:span> combinés aux modules <text:span text:style-name="T4">ECMAScript</text:span> facilite le
<text:span text:style-name="T7">design et la maintenance de code testable et réutilisable</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Ces pratiques de modularisation&#160;– jusqu&#8217;au rendu intermédiaire de <text:span text:style-name="T4">React</text:span>
– encouragent une <text:span text:style-name="T7">rigueur ayant un impact positif</text:span> sur la qualité de notre
code et notre confiance à le déployer en production.</text:p>
<text:bookmark text:name="ref-appendix-a" /><text:p text:style-name="ChapitreNumero">A</text:p><text:h text:style-name="ChapitreTitre" text:outline-level="1">Sélection de modules npm</text:h><text:p text:style-name="TexteCourant">Cette annexe est une sélection de modules npm (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com</text:a></text:span>)
à laquelle vous réferer pour démarrer rapidement mais aussi pour découvrir
des usages et des domaines d&#8217;applications insoupçonnés.</text:p>
<text:p text:style-name="TexteCourant">J&#8217;ai bâti cette liste à partir de mon expérience personnelle et sur la confiance
que je porte aux personnes à l&#8217;origine de ces modules.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Remarque</text:span> Versions de Node et npm</text:h><text:p text:style-name="Remarque">Le contenu de ce chapitre utilise les versions <text:span text:style-name="T7">Node v10</text:span> et <text:span text:style-name="T7">npm v6</text:span>.
Ce sont les versions stables recommandées en 2018.
J&#8217;explique comment les installer au <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-install"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 2</text:a>.</text:p>
<text:h text:style-name="RemarqueTitre" text:outline-level="7"><text:span text:style-name="RemarquePreTitre">Pratique</text:span> Jouer avec les exemples dans un terminal</text:h><text:p text:style-name="Remarque">Les exemples titrés d&#8217;un nom de fichier peuvent être installés sur votre ordinateur.
Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de
votre lecture pour voir ce qui change.</text:p>
<text:p text:style-name="Remarque">Installation des exemples via le module npm <text:span text:style-name="CodeDansTexte">nodebook</text:span>.</text:p><text:p text:style-name="RemarqueCode">$ npm install --global nodebook</text:p><text:p text:style-name="RemarqueCode">$ nodebook install appendix-a</text:p><text:p text:style-name="RemarqueCode">$ cd $(nodebook dir appendix-a)</text:p>
<text:p text:style-name="Remarque">La commande suivante devrait afficher un résultat qui confirme que vous êtes
au bon endroit&#160;:</text:p>
<text:p text:style-name="RemarqueCode">$ node hello.js</text:p>
<text:p text:style-name="Remarque">Suivez à nouveau les installations d&#8217;instruction pour rétablir les exemples
dans leur état initial.</text:p>
<text:bookmark text:name="ref-boîte_à_outil_du_quotidien" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Boîte à outil du quotidien</text:h><text:p text:style-name="TexteCourant">Ces modules adressent des besoins quotidiens, pour travailler plus rapidement
sur des structures ECMAScript.</text:p>
<text:bookmark text:name="ref-lodash" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">lodash</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">lodash</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/lodash" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/lodash</text:a></text:span>) est une collection de plusieurs
dizaines de fonctions pour travailler plus facilement avec des chaînes de caractères,
des tableaux, des fonctions et des objets.</text:p>
<text:p text:style-name="TexteCourant">Vous pourrez ainsi filtrer, sélectionner, fusionner, vérifier et composer
de nouvelles variables aussi bien pour Node que dans les navigateurs web.</text:p>
<text:p text:style-name="CodeTitre">lodash.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const { intersection, first } = require('lodash');</text:p><text:p text:style-name="Code">const DC = ['Batman', 'Brainiac', 'Thor'];</text:p><text:p text:style-name="Code">const Marvel = ['Spiderman', 'Thor'];</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const result = first(intersection(DC, Marvel));</text:p><text:p text:style-name="Code">console.log(result);<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">Thor</text:span>.<text:line-break/></text:p>
<text:bookmark text:name="ref-he" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">he</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">he</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/he" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/he</text:a></text:span>) est un utilitaire pour encoder et décoder
des entités HTML dans des chaînes de caractères.</text:p>
<text:p text:style-name="CodeTitre">he.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {encode} = require('he');</text:p><text:p text:style-name="Code">const html = '&lt;h1&gt;Blog Post&lt;/h1&gt;';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(html);<text:s text:c="19"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(encode(html));<text:s text:c="11"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">&lt;h1&gt;Blog Post&lt;/h1&gt;</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">&amp;#x3C;h1&amp;#x3E;Blog Post&amp;#x3C;/h1&amp;#x3E;</text:span>.<text:line-break/></text:p>
<text:bookmark text:name="ref-chance" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">chance</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">chance</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/chance" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/chance</text:a></text:span>) crée des données de manière aléatoire.
Le module retourne aussi des prénoms fictifs mais aussi des numéros de téléphone,
des nombres, des paragraphes, des dates d&#8217;anniversaire, des identifiants Android ou Apple, etc.</text:p>
<text:p text:style-name="TexteCourant">Il s&#8217;utilise surtout pour générer des données factices à des fins de tests,
en attendant les vraies données.</text:p>
<text:bookmark text:name="ref-date_fns" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">date-fns</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">date-fns</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/date-fns" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/date-fns</text:a></text:span>) est une collection de fonctions
pour travailler avec des dates, plus facilement qu&#8217;avec l&#8217;objet natif <text:span text:style-name="CodeDansTexte">Date</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Vous pouvez formatter, ajouter ou retirer des jours, vérifier si deux périodes
de temps se chevauchent ou si deux dates font partie d&#8217;une même semaine calendaire.</text:p>
<text:bookmark text:name="ref-tcomb" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">tcomb</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">tcomb</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/tcomb" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/tcomb</text:a></text:span>) renforce la création de structures
typées et immutables.
Ça a pour effet de réduire les effets de bord de nos applications lorsque les
données n&#8217;ont pas la structure attendue.</text:p>
<text:p text:style-name="CodeTitre">tcomb.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const t = require('tcomb');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const GPS = t.struct({<text:s text:c="32"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>lat: t.Number,</text:p><text:p text:style-name="Code"><text:s text:c="2"/>lon: t.Number,</text:p><text:p text:style-name="Code">}, {strict: true});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const Bordeaux = GPS({ lat: 44.8638, lon: -0.6561 });</text:p><text:p text:style-name="Code">const Crest = GPS({ lat: 44.7311, long: 4.9861 });<text:s text:c="4"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">const Toulouse = GPS({ lat: 43.6008, lon: 'r0s3' });<text:s text:c="2"/><text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Définition d&#8217;une structure stricte qui a pour propriété <text:span text:style-name="CodeDansTexte">lat</text:span> et <text:span text:style-name="CodeDansTexte">lon</text:span>, pour <text:span text:style-name="T4">latitude</text:span> et <text:span text:style-name="T4">longitude</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Cet appel va lancer une exception car la propriété <text:span text:style-name="CodeDansTexte">long</text:span> est inconnue.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Cet appel va lancer une exception car la propriété <text:span text:style-name="CodeDansTexte">lon</text:span> doit être un nombre.<text:line-break/></text:p>
<text:bookmark text:name="ref-eventemitter3" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">eventemitter3</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">eventemitter3</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/eventemitter3" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/eventemitter3</text:a></text:span>) permet de gérer
des événements de manière uniforme dans un script Node et dans les navigateurs web.</text:p>
<text:p text:style-name="CodeTitre">eventemitter3.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const EventEmitter = require('eventemitter3');</text:p><text:p text:style-name="Code">const emitter = new EventEmitter();</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">emitter.on('ping', data =&gt; console.log('on: %s', data));</text:p><text:p text:style-name="Code">emitter.once('ping', data =&gt; console.log('once: %s', data));</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(emitter.listeners('ping')); <text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">emitter.emit('ping', ['ping', 'ping']); <text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">emitter.emit('ping', ['pong']);<text:s text:c="9"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">emitter.removeListener('ping');</text:p><text:p text:style-name="Code">emitter.emit('ping', ['pong']);<text:s text:c="9"/><text:span text:style-name="PuceCode">4</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">[ [Function], [Function] ]</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">on: ping,ping</text:span> puis <text:span text:style-name="CodeDansTexte">once: ping,ping</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">on: ping,ping</text:span>.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> N&#8217;affiche rien, l&#8217;événement étant désormais déconnecté.<text:line-break/></text:p>
<text:bookmark text:name="ref-dev" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Pendant le développement</text:h><text:bookmark text:name="ref-debug" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">debug</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">debug</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/debug" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/debug</text:a></text:span>) rend l&#8217;affichage de messages de déboguage
optionnels.
Les messages s&#8217;affichent en présence d&#8217;une variable d&#8217;environnement.
Nous pouvons ainsi lancer un processus et retracer un cheminement complexe de
données.</text:p>
<text:p text:style-name="TexteCourant">Par défaut, les messages ne s&#8217;affichent pas&#160;:</text:p>
<text:p text:style-name="Code">$ node examples/debug.js</text:p>
<text:p text:style-name="TexteCourant">Les messages du débogueur <text:span text:style-name="CodeDansTexte">app</text:span> s&#8217;affichent désormais&#160;:</text:p>
<text:p text:style-name="Code">$ <text:span text:style-name="CodeExergue">DEBUG=app</text:span> node examples/debug.js</text:p><text:p text:style-name="Code"><text:s text:c="2"/>app fromages [ 'livarot', 'chaource' ] +0ms</text:p>
<text:p text:style-name="TexteCourant">Nous pouvons en afficher plusieurs en même temps, en usant du caractère <text:span text:style-name="CodeDansTexte">*</text:span>
ou en séparant les noms de débogueurs avec le caractère <text:span text:style-name="CodeDansTexte">,</text:span>&#160;:</text:p>
<text:p text:style-name="Code">$ DEBUG=app<text:span text:style-name="CodeExergue">*</text:span> node examples/debug.js</text:p><text:p text:style-name="Code"><text:s text:c="2"/>app fromages [ 'livarot', 'chaource' ] +0ms</text:p><text:p text:style-name="Code"><text:s text:c="2"/>app:timer now 1531304027271 +0ms</text:p>
<text:p text:style-name="CodeTitre">debug.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const debug = require('debug');</text:p><text:p text:style-name="Code">const log = debug('app');<text:s text:c="21"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">const logInterval = debug('app:timer');<text:s text:c="7"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">log('fromages %o', ['livarot', 'chaource']);<text:s text:c="2"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">setTimeout(() =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>logInterval('now %d', Date.now());<text:s text:c="10"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code">}, 1000);</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Création du débogueur <text:span text:style-name="CodeDansTexte">app</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Création du débogueur <text:span text:style-name="CodeDansTexte">app:timer</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> La fonction de débogage s&#8217;utilise de la même manière que <text:span text:style-name="CodeDansTexte">console.log</text:span>.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Cette fonction fait appel au débogueur <text:span text:style-name="CodeDansTexte">app:timer</text:span>.<text:line-break/></text:p>
<text:bookmark text:name="ref-nodemon" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">nodemon</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">nodemon</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/nodemon" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/nodemon</text:a></text:span>) relance le processus actif
dès qu&#8217;un fichier ECMAScript ou JSON est modifié.
C&#8217;est un module exécutable particulièrement utile lorsque nous voulons prendre
en compte les changements dans une application qui tourne en continu.
C&#8217;est le cas des application web, entre autres.</text:p>
<text:p text:style-name="TexteCourant">Pour en savoir plus, rendez-vous à la section
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-dev"  text:visited-style-name="Visited_20_Internet_20_Link">Pendant le développement&#160;: relancer le serveur automatiquement</text:a>
du <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-07"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 7</text:a>.</text:p>
<text:bookmark text:name="ref-npm_run_all" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">npm-run-all</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">npm-run-all</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/npm-run-all" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/npm-run-all</text:a></text:span>) est mon outil favori
pour composer avec les <text:span text:style-name="T4">scripts npm</text:span>.
Il a l&#8217;avantage d&#8217;être versatile, de régler finement ce qui
doit être exécuté en parallèle ou séquentiellement.
Le module transfère les arguments aux sous-scripts.</text:p>
<text:p text:style-name="CodeTitre">package.json</text:p><text:p text:style-name="Code">{</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"...": "...",</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"scripts": {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"build": "npm-run-all -p 'build:*' -s start",</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"build:css": "sass ...",</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"build:js": "browserify ...",</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"start": "node server.js"</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p>
<text:bookmark text:name="ref-husky" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">husky</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">husky</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/husky" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/husky</text:a></text:span>) intègre Git aux
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-scripts"  text:visited-style-name="Visited_20_Internet_20_Link">scripts npm</text:a>.
Autrement dit, vous pouvez déclencher des scripts lors d&#8217;événements Git,
lors d&#8217;un <text:span text:style-name="T4">push</text:span>, avant un <text:span text:style-name="T4">commit</text:span> ou après avoir rapatrié des changements.</text:p>
<text:p text:style-name="CodeTitre">package.json</text:p><text:p text:style-name="Code">{</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"...": "...",</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"scripts": {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"precommit": "lint-staged",</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"post-merge": "npm install"</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant">La liste complète des <text:span text:style-name="T4">hooks</text:span> Git se trouve dans la documentation
officielle à cette adresse <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://git-scm.com/docs/githooks" text:visited-style-name="Visited_20_Internet_20_Link">https://git-scm.com/docs/githooks</text:a></text:span>.</text:p>
<text:bookmark text:name="ref-onchange" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">onchange</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">onchange</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/onchange" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/onchange</text:a></text:span>) observe une liste de fichiers
en continu et délenche une commande dès que l&#8217;un d&#8217;entre eux est modifié.
C&#8217;est particulièrement utile pour reconstruire des fichiers de configuration
ou des fichiers front-end pendant le développement, sans avoir à le faire à la main.</text:p>
<text:p text:style-name="CodeTitre">package.json</text:p><text:p text:style-name="Code">{</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"...": "...",</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"scripts": {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"build:css": "sass ...",</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"dev": "npm-run-script -p 'watch:*' start",</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"watch:css": "onchange '**/*.scss' -- npm run build:css",</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"start": "node server.js"</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p>
<text:bookmark text:name="ref-tiny_lr" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">tiny-lr</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">tiny-lr</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/tiny-lr" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/tiny-lr</text:a></text:span>) est une implémentation minimale
du protocole <text:span text:style-name="T4">livereload</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://livereload.com/" text:visited-style-name="Visited_20_Internet_20_Link">http://livereload.com/</text:a></text:span>).
Il s&#8217;intègre à un serveur HTTP ou à une application <text:span text:style-name="T4">express</text:span> pour relayer
la liste des fichiers modifié côté client.</text:p>
<text:p text:style-name="TexteCourant">Le script ou l&#8217;extension navigateur client remplace les anciens fichiers
par les nouveaux pour refléter les changements sans recharger la page.</text:p>
<text:bookmark text:name="ref-livereactload" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">livereactload</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">livereactload</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/livereactload" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/livereactload</text:a></text:span>) recherche les composants
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-react"  text:visited-style-name="Visited_20_Internet_20_Link">React</text:a> à chaud.
C&#8217;est à dire sans raffraichir la page et sans perdre l&#8217;état des données.
C&#8217;est un module indispensable pour développer des applications front-end réactives.</text:p>
<text:p text:style-name="TexteCourant">Rendez-vous dans la section <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-livereload"  text:visited-style-name="Visited_20_Internet_20_Link">changements en temps-réel</text:a>
du <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-09"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 9</text:a> pour en savoir plus sur son
installation et son intégration.</text:p>
<text:bookmark text:name="ref-protéger_nos_applications" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Protéger nos applications</text:h><text:p text:style-name="TexteCourant">Le code que nous écrivons se protège dès la conception et dans le temps.
Des modules nous protègent en filtrant les tentatives d&#8217;exploitation de nos
applications tandis que d&#8217;autres vérifient si le code déployé est toujours sûr.</text:p>
<text:bookmark text:name="ref-sanitize_filename" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">sanitize-filename</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">sanitize-filename</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/sanitize-filename" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/sanitize-filename</text:a></text:span>) nettoie
une variable de tout caractère ambigü ou qui ne serait pas attendu de la part
d&#8217;un·e usagèr·e.</text:p>
<text:p text:style-name="CodeTitre">sanitize-filename.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const sanitize = require('sanitize-filename');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">console.log(sanitize('aucun-problème.txt'));<text:s text:c="2"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">console.log(sanitize('../../.ssh/id_rsa'));<text:s text:c="3"/><text:span text:style-name="PuceCode">2</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche <text:span text:style-name="CodeDansTexte">aucun-problème.txt</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche <text:span text:style-name="CodeDansTexte">.....sshid_rsa</text:span>&#160;— les caractères <text:span text:style-name="CodeDansTexte">/</text:span> sont nettoyés car il permettrait de créer des chemins compromettant pour l&#8217;application ou le système d&#8217;exploitation.<text:line-break/></text:p>
<text:bookmark text:name="ref-helmet" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">helmet</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">helmet</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/helmet" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/helmet</text:a></text:span>) est un module à intégrer systématiquement
dans toute application <text:span text:style-name="T4">express</text:span>.
Il ajoute des entêtes HTTP <text:span text:style-name="T4">Content-Security Policy</text:span>, <text:span text:style-name="T4">Strict Transport Policy</text:span>
et d&#8217;autres qui empêchent le détournement d&#8217;informations.</text:p>
<text:p text:style-name="TexteCourant">Chacune de ses protections se configure aussi au cas par cas.
Elles s&#8217;intègrent manuellement dans d&#8217;autres types d&#8217;applications web,
y compris un serveur HTTP natif à Node.</text:p>
<text:bookmark text:name="ref-dompurify" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">dompurify</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">dompurify</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/dompurify" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/dompurify</text:a></text:span>) nettoie un contenu HTML
pour le rendre affichable en toute sécurité.
Il nettoie des scripts indésirés, des balises mal formées qui casseraient l&#8217;affichage,
ou encore des <text:span text:style-name="T4">iframes</text:span> qui injecteraient des contenus tiers sans notre consentement.</text:p>
<text:bookmark text:name="ref-filenamify" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">filenamify</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">filenamify</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/filenamify" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/filenamify</text:a></text:span>) nettoie une valeur
pour retirer tout caractère invalide dans un nom de fichier.
C&#8217;est pratique dans le cas où vous laissez la possibilité à un·e usagèr·e
de choisir un nom de fichier sans pour autant leur laisser la possibilité
de mettre en danger le système ou l&#8217;application.</text:p>
<text:bookmark text:name="ref-retire_js" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">retire.js</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">retire.js</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/retire" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/retire</text:a></text:span>) est un module npm pour
scanner soi-même des vulnérabilités connues dans des fichiers JavaScript.
Il est complémentaire de la commande <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-audit"  text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="CodeDansTexte">npm audit</text:span></text:a>
car il inspecte des dépendances qui ne sont pas forcément sur npm.</text:p>
<text:bookmark text:name="ref-snyk" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">snyk</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">snyk</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/snyk" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/snyk</text:a></text:span>) est à la fois un service en ligne
et un module pour vérifier la présence de failles de sécurité connues
dans les dépendances de nos projets.</text:p>
<text:bookmark text:name="ref-vérifier_la_syntaxe_de_notre_code" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Vérifier la syntaxe de notre code</text:h><text:p text:style-name="TexteCourant">La vérification syntaxique est un mécanisme s&#8217;assurant que votre code respecte
la grammaire du langage associé.
Elle révèle aussi des anomalies fondamentales (balise mal fermée,
expression inconnue etc.) et renforce des pratiques de programmation commune
au groupe de développement.</text:p>
<text:p text:style-name="TexteCourant">Vérifier la syntaxe de notre code est un excellente première étape avant
d&#8217;introduire des tests unitaires ou fonctionnels.</text:p>
<text:bookmark text:name="ref-htmlhint" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">htmlhint</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">htmlhint</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/htmlhint" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/htmlhint</text:a></text:span>) vérifie la structure de
nos documents HTML.
Il rapporte les doublons d&#8217;attributs <text:span text:style-name="CodeDansTexte">id</text:span>, la présence de balises
mal formées, l&#8217;absence de balise fermante ou encore l&#8217;existance de chaînes de
caractère non-imprimables dans des attributs critiques, entre autres.</text:p>
<text:p text:style-name="TexteCourant">Prenons en exemple le document suivant&#160;:</text:p>
<text:p text:style-name="CodeTitre">sample.html</text:p><text:p text:style-name="Code">&lt;html&gt;</text:p><text:p text:style-name="Code">&lt;head&gt;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;link rel="stylesheet" href="sample.css"&gt;</text:p><text:p text:style-name="Code">&lt;/head&gt;</text:p><text:p text:style-name="Code">&lt;body&gt;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;button id="btn" class="btn btn-primary"&gt;OK&lt;/button&gt;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;button id="btn" class="btn"&gt;KO&lt;/button&gt;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;BUTTON class='btn__primary--curent btn--active'&gt;&lt;/BUTTON&gt;</text:p><text:p text:style-name="Code">&lt;/body&gt;</text:p><text:p text:style-name="Code">&lt;/html&gt;</text:p>
<text:p text:style-name="TexteCourant">Une lecture distraite pourrait nous faire passer à côté d&#8217;erreurs et
d&#8217;inconsistances de programmation.
Ce genre d&#8217;erreurs passe d&#8217;autant plus inaperçues que la base de code
devient volumineuse et change fréquemment.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exécution de <text:span text:style-name="T4">htmlhint</text:span> avec ses règles par défaut remontera les alertes
suivantes&#160;:</text:p>
<text:p text:style-name="Code">$ ../node_modules/.bin/htmlhint sample.html</text:p><text:p text:style-name="Code">sample.html:</text:p><text:p text:style-name="Code">line 1, col 1: Doctype must be first.</text:p><text:p text:style-name="Code">line 8, col 10: Id redefinition of [ btn ].</text:p><text:p text:style-name="Code">line 10, col 3: Tagname [ BUTTON ] must be lower case.</text:p><text:p text:style-name="Code">...</text:p><text:p text:style-name="Code">line 10, col 52: Tagname [ BUTTON ] must be lower case.</text:p>
<text:bookmark text:name="ref-eslint" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">eslint</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">eslint</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/eslint" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/eslint</text:a></text:span>) est l&#8217;outil de vérification
syntaxique pour ECMAScript par excellence.
Il est souple, rapide à mettre en œuvre et s&#8217;adapte à des contextes complexes.
J&#8217;aime son mécanisme de configuration de règles&#160;: utilisation systématique du
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-strict"  text:visited-style-name="Visited_20_Internet_20_Link">mode strict</text:a>, nombre maximum de paramètres
de fonctions, objets non-déclarés, variables inconnues etc.<text:line-break/><text:span text:style-name="T4">eslint</text:span> expose également des fonctions pour créer vos propres règles métier.</text:p>
<text:p text:style-name="CodeTitre">package.json</text:p><text:p text:style-name="Code">{</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"...": "...",</text:p><text:p text:style-name="Code"><text:s text:c="2"/>"eslintConfig": {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"env": {</text:p><text:p text:style-name="Code"><text:s text:c="6"/>"node": true,</text:p><text:p text:style-name="Code"><text:s text:c="6"/>"es6": true</text:p><text:p text:style-name="Code"><text:s text:c="4"/>},</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"extends": [</text:p><text:p text:style-name="Code"><text:s text:c="6"/>"eslint:recommended"</text:p><text:p text:style-name="Code"><text:s text:c="4"/>],</text:p><text:p text:style-name="Code"><text:s text:c="4"/>"rules": {</text:p><text:p text:style-name="Code"><text:s text:c="6"/>"strict": ["error", "global"],</text:p><text:p text:style-name="Code"><text:s text:c="6"/>"quotes": ["error", "single"],</text:p><text:p text:style-name="Code"><text:s text:c="6"/>"no-undef": "error",</text:p><text:p text:style-name="Code"><text:s text:c="6"/>"curly": "error",</text:p><text:p text:style-name="Code"><text:s text:c="6"/>"eqeqeq": "error"</text:p><text:p text:style-name="Code"><text:s text:c="4"/>}</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant">Le niveau de sévérité de chaque règle est représenté par un identifiant&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="CodeDansTexte">none</text:span>&#160;: règle désactivée&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="CodeDansTexte">warn</text:span>&#160;: affiche un avertissement&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="CodeDansTexte">error</text:span>&#160;: affiche une erreur (le processus se terminera avec un code d&#8217;erreur).</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant">Certaines règles demandent ou acceptent des arguments supplémentaires.
Elles sont toutes documentées sur le site web du projet
<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="http://eslint.org/docs/rules/" text:visited-style-name="Visited_20_Internet_20_Link">http://eslint.org/docs/rules/</text:a></text:span>.</text:p>
<text:p text:style-name="TexteCourant">Le détail des règles de configuration mises en application sont disponible
simplement en parcourant l&#8217;arborescence du dépôt de code disponible sur
<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/airbnb/javascript" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/airbnb/javascript</text:a></text:span>.</text:p>
<text:bookmark text:name="ref-csslint" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">csslint</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">csslint</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/csslint" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/csslint</text:a></text:span>) est un outil de vérification
syntaxique de feuilles de style CSS.
Il a été créé par deux anciens ingénieurs de <text:span text:style-name="T4">Yahoo!</text:span>.
Leurs anciens travaux dans le domaine de la performance ont influencé
l&#8217;architecture et le choix des règles par défaut.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">csslint</text:span> fournit les mécanismes de vérification adéquats pour alerter de
possibles effets de bord de <text:span text:style-name="T4">box model</text:span>, de déclaration incompatible de
<text:span text:style-name="CodeDansTexte">@font-face</text:span>, de <text:span text:style-name="T4">vendor prefix</text:span> dépréciés ou encore de combinaisons de
propriétés connues pour casser l&#8217;affichage dans certains navigateurs.</text:p>
<text:p text:style-name="TexteCourant">Prenons par exemple le fichier CSS suivant&#160;:</text:p>
<text:p text:style-name="CodeTitre">sample.css</text:p><text:p text:style-name="Code">.btn {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>background: white;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>color: black;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>border: 0px solid black;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>height: 20px;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>padding: 10px;</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code">.btn__primary {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>background-color: blue;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>color: white;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>font-size: 1.3em;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>transition: font-weight 0.2s ease;</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code">.btn__primary--current {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>color: gray;</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code">.btn__primary--current.btn--active {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>font-weight: 700;</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">csslint</text:span> génèrera trois alertes en lisant le fichier <text:span text:style-name="CodeDansTexte">sample.css</text:span> et ce,
même si celui-ci est syntaxiquement parfaitement valide&#160;:</text:p>
<text:p text:style-name="Code">$ ../node_modules/.bin/csslint sample.css</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">csslint: There are 3 problems in sample.css.</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">sample.css</text:p><text:p text:style-name="Code">1: warning at line 4, col 11</text:p><text:p text:style-name="Code">Values of 0 shouldn't have units specified.</text:p><text:p text:style-name="Code"><text:s text:c="2"/>border: 0px solid black;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">sample.css</text:p><text:p text:style-name="Code">2: warning at line 4, col 3</text:p><text:p text:style-name="Code">Using height with border can sometimes make</text:p><text:p text:style-name="Code"><text:s text:c="2"/>elements larger than you expect.</text:p><text:p text:style-name="Code"><text:s text:c="2"/>border: 0px solid black;</text:p><text:p text:style-name="Code">...</text:p>
<text:bookmark text:name="ref-doiuse" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">doiuse</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">doiuse</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/doiuse" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/doiuse</text:a></text:span>) est un utilitaire qui se repose
sur la base de données du site communautaire <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://caniuse.com" text:visited-style-name="Visited_20_Internet_20_Link">https://caniuse.com</text:a></text:span>.
Il nous alerte des possibles incompatibilités de syntaxe en fonction de la liste
de navigateurs web à supporter.
Cette liste concerne aussi bien des versions spécifiques (Internet Explorer 8)
que des parts de marché (tous les navigateurs avec plus de 5% de parts de marché).</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exemple suivant illustre les alertes relevées par <text:span text:style-name="T4">doiuse</text:span> dans le cas
d&#8217;une recherche de compatibilité avec Internet Explorer 6 et Internet
Explorer 7&#160;:</text:p>
<text:p text:style-name="Code">$ ../node_modules/.bin/doiuse -b 'ie &lt; 8' sample.css</text:p><text:p text:style-name="Code">sample.css:1:1: CSS 2.1 selectors not supported by: IE (6)</text:p><text:p text:style-name="Code">sample.css:8:1: CSS 2.1 selectors not supported by: IE (6)</text:p><text:p text:style-name="Code">sample.css:12:1: CSS3 Transitions not supported by: IE (6,7)</text:p><text:p text:style-name="Code">sample.css:14:1: CSS 2.1 selectors not supported by: IE (6)</text:p>
<text:bookmark text:name="ref-optimize" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Optimiser notre code</text:h><text:p text:style-name="TexteCourant">Commentaires, indentations ou encore noms de variables&#160;: tout ça occupe de
la place&#160;— autant d&#8217;octets transférés sur le réseau avant d&#8217;être exécutés
par un client web.
Les outils d&#8217;optimisation offrent l&#8217;opportunité aux développeurs et développeuses
d&#8217;écrire du code sans compromettre sa lisibilité et sa maintenabilité.</text:p>
<text:p text:style-name="TexteCourant">Les minifieurs et optimiseurs mettent en œuvre différentes techniques pour
réduire le poids de notre code&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero">suppression des commentaires et caractères non-significatifs&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">renommage de variables&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">factorisation d&#8217;occurrences multiples similaires&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">suppression des instructions relatives au débogage/développement&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">suppression du code inutilisé&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">écriture automatique de code pour supporter des environnements anciens ou futurs.</text:p>
</text:list-item></text:list>
<text:bookmark text:name="ref-uglify_js2" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">uglify-js2</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">UglifyJS</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/uglify-js2" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/uglify-js2</text:a></text:span>) est un des premiers
compresseurs à utiliser une représentation syntaxique en arbre
(<text:span text:style-name="T4">Abstract Syntax Tree</text:span>&#160;— <text:span text:style-name="T4">AST</text:span>) en lieu et place des classiques
optimisations à coups d&#8217;expressions régulières.</text:p>
<text:p text:style-name="TexteCourant">Cette méthode élargit les perspectives de la compression via de
la réécriture de code&#160;:</text:p>
<text:list text:style-name="List_20_1"><text:list-item>
<text:p text:style-name="ListeANumero"><text:span text:style-name="T4">hoisting</text:span> des variables (remontée de leur déclaration en début de <text:span text:style-name="T4">scope</text:span>)&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">combinaison des déclarations de variables&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">factorisation des valeurs de variables&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">réécriture partielle d&#8217;expressions&#160;;</text:p>
</text:list-item><text:list-item>
<text:p text:style-name="ListeANumero">injection en ligne du contenu de variables.</text:p>
</text:list-item></text:list>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">UglifyJS</text:span> s&#8217;utilise en ligne de commande ou comme un module Node.</text:p>
<text:bookmark text:name="ref-postcss" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">postcss</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">PostCSS</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/postcss" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/postcss</text:a></text:span>) est une optimiseur CSS modulaire.
Cet outil est construit autour d&#8217;un parseur CSS, d&#8217;un arbre syntaxique
et d&#8217;un compilateur texte.
C&#8217;est la même recette qui a participé au succès et à la richesse fonctionnelle
d&#8217;outils comme <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-uglify-js2"  text:visited-style-name="Visited_20_Internet_20_Link">UglifyJS</text:a> et <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-eslint"  text:visited-style-name="Visited_20_Internet_20_Link">ESLint</text:a>.</text:p>
<text:p text:style-name="TexteCourant">Avec une ou plusieurs extensions, vous basculez d&#8217;un optimiseur de code
vers la possibilité de créer votre propre préprocesseur, à la Sass&#160;!</text:p>
<text:bookmark text:name="ref-autoprefixer" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">autoprefixer</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">autoprefixer</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/autoprefixer" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/autoprefixer</text:a></text:span>) est <text:span text:style-name="T4">le</text:span> module qui
vous épargnera l&#8217;écriture de centaines de lignes CSS.
Il ajoute automatiquement les préfixes navigateurs aux bons endroits
—&#160;`-webkit`, <text:span text:style-name="CodeDansTexte">-moz</text:span>, etc.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">autoprefixer</text:span> s&#8217;utilise comme extension au module <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-postcss"  text:visited-style-name="Visited_20_Internet_20_Link">PostCSS</text:a>,
en ligne de commande ou comme module Node.</text:p>
<text:p text:style-name="Code">$ ../node_modules/.bin/postcss sample.css \</text:p><text:p text:style-name="Code"><text:s text:c="4"/>--use autoprefixer<text:s text:c="2"/>| grep transition</text:p><text:p text:style-name="Code"><text:s text:c="10"/>transition: font-weight 0.2s ease;</text:p>
<text:p text:style-name="TexteCourant">Le choix de compatibilité avec les navigateurs repose sur la variable
d&#8217;environnement <text:span text:style-name="CodeDansTexte">BROWSERSLIST</text:span>, gérée par le module <text:span text:style-name="T4">browserslist</text:span>
(<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/browserslist" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/browserslist</text:a></text:span>)&#160;:</text:p>
<text:p text:style-name="Code">$ export BROWSERSLIST='firefox &gt; 8'</text:p><text:p text:style-name="Code">$ ../node_modules/.bin/postcss sample.css \</text:p><text:p text:style-name="Code"><text:s text:c="4"/>--use autoprefixer | grep transition</text:p><text:p text:style-name="Code"><text:s text:c="5"/>-moz-transition: font-weight 0.2s ease;</text:p><text:p text:style-name="Code"><text:s text:c="10"/>transition: font-weight 0.2s ease;</text:p>
<text:bookmark text:name="ref-uncss" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">uncss</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">uncss</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/uncss" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/uncss</text:a></text:span>) est le pendant inverse d'<text:span text:style-name="T4">autoprefixer</text:span>
puisqu&#8217;il se charge de supprimer le code CSS inutilisé.
Il s&#8217;utilise de manière autonome ou comme module <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-postcss"  text:visited-style-name="Visited_20_Internet_20_Link">PostCSS</text:a>.</text:p>
<text:p text:style-name="TexteCourant">Le module charge une ou plusieurs pages web, calcule la différence entre
les règles utilisées et celles qui ne le sont pas.
Libre à vous de mentionner une liste blanche de règles à ne jamais supprimer.</text:p>
<text:bookmark text:name="ref-csswring" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">csswring</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">csswring</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/csswring" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/csswring</text:a></text:span>) est un minifieur de code CSS
qui s&#8217;interface lui aussi avec <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-postcss"  text:visited-style-name="Visited_20_Internet_20_Link">PostCSS</text:a>.
Vous lui donnez du code, il en ressort une version avec le minimum de caractères
possibles.</text:p>
<text:bookmark text:name="ref-google_closure_compiler_js" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">google-closure-compiler-js</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">Google Closure Compiler</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/google-closure-compiler-js" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/google-closure-compiler-js</text:a></text:span>)
est un compilateur ECMAScript plus poussé qu'<text:span text:style-name="T4">UglifyJS</text:span> mais qui impose un
style d&#8217;écriture plus strict, voire plus contraignant.
Ses optimisations sont en général bien plus poussées et permettent d&#8217;atteindre
des niveaux de finesse difficiles à obtenir autrement.</text:p>
<text:bookmark text:name="ref-csso" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">csso</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">csso</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/csso" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/csso</text:a></text:span>) est une alternative à <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-csswring"  text:visited-style-name="Visited_20_Internet_20_Link">csswring</text:a>.
Elle est écrite par l&#8217;équipe derrière la méthodologie BEM (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://en.bem.info" text:visited-style-name="Visited_20_Internet_20_Link">https://en.bem.info</text:a></text:span>).</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">csso</text:span> ira jusqu&#8217;à réécrire les codes couleurs, les <text:span text:style-name="CodeDansTexte">margin</text:span> et <text:span text:style-name="CodeDansTexte">padding</text:span> et
factorisera les sélecteurs similaires.</text:p>
<text:bookmark text:name="ref-svgo" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">svgo</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">svgo</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://www.npmjs.com/svgo" text:visited-style-name="Visited_20_Internet_20_Link">https://www.npmjs.com/svgo</text:a></text:span>) s&#8217;attaque au nettoyage des fichiers
graphiques vectoriels au format SVG.
Il simplifie les chemins et supprime les attributs et déclarations superflues.</text:p>
<text:p text:style-name="TexteCourant">Vous pouvez l&#8217;essayer en ligne sur <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://jakearchibald.github.io/svgomg/" text:visited-style-name="Visited_20_Internet_20_Link">https://jakearchibald.github.io/svgomg/</text:a></text:span>
ou l&#8217;intégrer comme extension à <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-postcss"  text:visited-style-name="Visited_20_Internet_20_Link">PostCSS</text:a>.</text:p>
<text:bookmark text:name="ref-wawoff2" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">wawoff2</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">wawoff2</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/wawoff2" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/wawoff2</text:a></text:span>) optimise des polices de caractères
pour le web.
Le module convertit des polices au format TTF vers le format WOFF2&#160;— à préférer
car plus léger et donc rapide à charger.</text:p>
<text:bookmark text:name="ref-transpiling" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Passer d&#8217;un langage à un autre</text:h><text:p text:style-name="TexteCourant">Les préprocesseurs sont des outils de productivité pour CSS.
Ils transforment un langage plus avancé dans quelque chose qui est compris
par un navigateur web.</text:p>
<text:p text:style-name="TexteCourant">La même chose s&#8217;applique avec la compilation ou la transpilation pour ECMAScript,
pour utiliser dès maintenant une version du futur.</text:p>
<text:bookmark text:name="ref-less" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">less</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">less</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/less" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/less</text:a></text:span>) est un préprocesseur CSS.
Il gère des variables, de <text:span text:style-name="T4">mixins</text:span>, des calculs de couleurs et des fonctions
qui encouragent une écriture modulaire, plus logique et plus succincte.</text:p>
<text:p text:style-name="CodeTitre">stylesheet.less</text:p><text:p text:style-name="Code">@warning-color: red;</text:p><text:p text:style-name="Code">@base-font-size: 18px;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">.btn {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>border: 1px solid black;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>border-radius: @base-font-size / 6;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>font-size: @base-font-size;</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>&amp;--large {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>font-size: @base-font-size * 1.5;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>&amp;--warning {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>border-color: fadeout(@warning-color, 10%);</text:p><text:p text:style-name="Code"><text:s text:c="4"/>color: @warning-color;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">}</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exécutable <text:span text:style-name="CodeDansTexte">lessc</text:span> compile le fichier LESS:</text:p>
<text:p text:style-name="Code">$ ../node_modules/.bin/lessc stylesheet.less</text:p>
<text:bookmark text:name="ref-sass" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">sass</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">Sass</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/node-sass" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/node-sass</text:a></text:span>) est un autre préprocesseur CSS.
Il est issu du monde Ruby et est désormais tout aussi puissant dans Node
grâce à <text:span text:style-name="T4">libsass</text:span>, un module rapide et portable écrit C++.</text:p>
<text:bookmark text:name="ref-browserify_2" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">browserify</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">browserify</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/browserify" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/browserify</text:a></text:span>) transforme des modules et du
code initialement écrit pour Node vers du code exécutable dans un navigateur Web.</text:p>
<text:p text:style-name="TexteCourant">Un puissant mécanisme de <text:span text:style-name="T4">transformations</text:span> étend ses capacités au coup par coup.</text:p>
<text:p text:style-name="TexteCourant">Nous en parlons plus en détails dans la section
<text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-browserify"  text:visited-style-name="Visited_20_Internet_20_Link">importer des modules npm pour le web</text:a>
au <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-chapter-09"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 9</text:a>.</text:p>
<text:bookmark text:name="ref-babel" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">babel</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">babel</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/babel" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/babel</text:a></text:span>) est un outil qui permet de passer
d&#8217;une version d&#8217;ECMAScript à une autre, fonctionnalité par fonctionnalité.
C&#8217;est un outil indispensable pour écrire un code moderne et le faire
fonctionner dans des navigateurs anciens.</text:p>
<text:bookmark text:name="ref-typescript" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">typescript</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">TypeScript</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/typescript" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/typescript</text:a></text:span>) est un langage de programmation
typé.
Toute structure utilisée est décrite avec un schéma que TypeScript valide.
Nous sommes prévenu·e·s des erreurs avant même d&#8217;avoir exécuté notre code
car l&#8217;outillage sait si on manipule des données qui existent.</text:p>
<text:p text:style-name="TexteCourant">Au final, le code est transformé en ECMAScript et exécuté en tant que tel.
Le code est tellement propre que nous pouvons arrêter d&#8217;utiliser TypeScript
du jour au lendemain et travailler sur le code qu&#8217;il aura généré sans aucun problème.</text:p>
<text:bookmark text:name="ref-fs" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Gérer des fichiers</text:h><text:p text:style-name="TexteCourant">Ces librairies nous permettent d&#8217;écrire moins de lignes de code
pour des besoins quotidiens de manipulation de fichiers.</text:p>
<text:bookmark text:name="ref-mkdirp" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">mkdirp</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">mkdirp</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/mkdirp" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/mkdirp</text:a></text:span>) est identique à la
commande Unix <text:span text:style-name="CodeDansTexte">mkdir -p</text:span>.
C&#8217;est-à-dire que les répertoires seront créés récursivement
s&#8217;ils n&#8217;existent pas au préalable.</text:p>
<text:p text:style-name="TexteCourant">Si nous utilisions le module Node <text:span text:style-name="CodeDansTexte">fs</text:span>, nous devrions créer l&#8217;arborescence de
répertoires par nous-même, niveau par niveau.</text:p>
<text:bookmark text:name="ref-rimraf" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">rimraf</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">rimraf</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/rimraf" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/rimraf</text:a></text:span>) est le pendant opposé <text:span text:style-name="T4">mkdirp</text:span>.
Il supprime une arborescence de manière récursive.
C&#8217;est l&#8217;équivalent de la commande Unix <text:span text:style-name="CodeDansTexte">rm -rf</text:span>.</text:p>
<text:p text:style-name="TexteCourant">Si nous utilisions le module Node <text:span text:style-name="CodeDansTexte">fs</text:span>, nous devrions supprimer d&#8217;abord
les fichiers puis les répertoires, un par un.</text:p>
<text:bookmark text:name="ref-glob" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">glob</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">glob</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/glob" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/glob</text:a></text:span>) est un utilitaire pour obtenir
une liste de fichiers en utilisant des motifs.</text:p>
<text:p text:style-name="CodeTitre">glob.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {promisify} = require('util');</text:p><text:p text:style-name="Code">const glob = promisify(require('glob'));</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">glob('*.js').then(console.log);<text:s text:c="5"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">glob('re*.js').then(console.log);<text:s text:c="3"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">glob('sample.*').then(console.log); <text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Affiche une liste de fichiers dont l&#8217;extension est <text:span text:style-name="CodeDansTexte">.js</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Affiche une liste de fichiers qui commencent par <text:span text:style-name="CodeDansTexte">re</text:span> et dont l&#8217;extension est <text:span text:style-name="CodeDansTexte">.js</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche une liste de fichiers qui s&#8217;appelle <text:span text:style-name="CodeDansTexte">sample</text:span>, peu importe leur extension.<text:line-break/></text:p>
<text:bookmark text:name="ref-fs_extra" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">fs-extra</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">fs-extra</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/fs-extra" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/fs-extra</text:a></text:span>) est une collection
de fonctions pour gérer les opérations de fichiers.
Le module inclut <text:span text:style-name="T4">rimraf</text:span> et <text:span text:style-name="T4">mkdirp</text:span> en plus d&#8217;autres fonctions récursives,
pour copier, déplacer ou supprimer des fichiers.</text:p>
<text:bookmark text:name="ref-graceful_fs" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">graceful-fs</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">graceful-fs</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/graceful-fs" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/graceful-fs</text:a></text:span>) est identique
au module Node <text:span text:style-name="CodeDansTexte">fs</text:span>.</text:p>
<text:p text:style-name="TexteCourant">La différence se situe sous le capot&#160;: le module gère les défaillances
du système et tente d&#8217;accéder à nouveau aux ressources demandées
si les erreurs sont liées à des problèmes de performance.</text:p>
<text:p text:style-name="TexteCourant">C&#8217;est un module à utiliser si notre application dépend fortement de la disponibilité
du système de fichiers et que celui est fortement sollicité.</text:p>
<text:bookmark text:name="ref-chokidar" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">chokidar</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">chokidar</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/chokidar" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/chokidar</text:a></text:span>) crée des observateurs du
système de fichiers.
Il gère les différences des systèmes d&#8217;exploitation et nous permet d&#8217;écrire
un seul et même code.</text:p>
<text:p text:style-name="TexteCourant">C&#8217;est la librairie vers laquelle se tourner lorsque nous avons besoin
de déclencher des actions quand des fichiers sont modifiés.</text:p>
<text:bookmark text:name="ref-databases" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Stocker dans des bases de données</text:h><text:p text:style-name="TexteCourant">Node sait communiquer avec tout type de bases de données grâce à l&#8217;écosystème npm.
Préférez les modules faisant état de <text:span text:style-name="T4">driver</text:span> natif/binaire&#160;—
les transferts de données n&#8217;en sera que plus rapide.</text:p>
<text:bookmark text:name="ref-knex" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">knex</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">knex</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/knex" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/knex</text:a></text:span>) propose d&#8217;interagir et d&#8217;interroger
des bases de données SQL comme PostgreSQL, MariaDB, MySQL et SQLite.</text:p>
<text:p text:style-name="TexteCourant">Les requêtes s&#8217;écrivent en SQL pur ou en utilisant une API dite "fluide",
pour ne pas écrire le SQL à la main.</text:p>
<text:p text:style-name="CodeTitre">knex.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {join} = require('path');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const db = require('knex')({</text:p><text:p text:style-name="Code"><text:s text:c="2"/>client: 'sqlite3',<text:s text:c="28"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>connection: {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>filename: join(__dirname, 'sample.sqlite')<text:s text:c="2"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">Promise.all([</text:p><text:p text:style-name="Code"><text:s text:c="2"/>db('books').where('title', 'like', '%Node%'), <text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>db('books').count('title as count').first(),<text:s text:c="2"/><text:span text:style-name="PuceCode">4</text:span></text:p><text:p text:style-name="Code">])</text:p><text:p text:style-name="Code">.then(([rows, count]) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(rows);<text:s text:c="28"/><text:span text:style-name="PuceCode">5</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(count);<text:s text:c="27"/><text:span text:style-name="PuceCode">6</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>db.destroy();</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Indique que nous allons nous connecter à une base de données de type SQLite.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Spécifie l&#8217;emplacement de la base de données.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Effectue une recherche floue sur les lignes dont le titre contient le mot 'Node'.<text:line-break/><text:span text:style-name="PuceCode">4</text:span> Compte le nombre de lignes et retourne le premier (et seul) résultat de la requête.<text:line-break/><text:span text:style-name="PuceCode">5</text:span> Affiche <text:span text:style-name="CodeDansTexte">[ { id: 1, title: 'Node.js ', created_at: '2018-07-11 10:34:33' } ]</text:span>.<text:line-break/><text:span text:style-name="PuceCode">6</text:span> Affiche <text:span text:style-name="CodeDansTexte">{ count: 3 }</text:span>.<text:line-break/></text:p>
<text:bookmark text:name="ref-bookshelf" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">bookshelf</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">bookshelf</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/bookshelf" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/bookshelf</text:a></text:span>) est une surcouche à ,
écrite par les mêmes personnes.
Elle modèlise les données sous formes d&#8217;objets et de schémas (ORM) pour
automatiser des actions et ajouter plus d'"intelligence" à notre modèle de données.</text:p>
<text:bookmark text:name="ref-sequelize" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">sequelize</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">sequelize</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/sequelize" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/sequelize</text:a></text:span>) est une alternative
à  et .
Elle gère des schémas de données de manière optionnelle mais aussi les migrations.
Ces dernières permettent de scripter les changements de structure d&#8217;une base
de données, de les tester en local avant de les jouer en production.</text:p>
<text:bookmark text:name="ref-mongoose" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">mongoose</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">mongoose</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/mongoose" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/mongoose</text:a></text:span>) sert à composer des modèles
de données pour la base de données MongoDB&#160;— dite NoSQL.
Elle définit des comportements annexes comme des mixins
ou des <text:span text:style-name="T4">accesseurs</text:span> dynamiques.</text:p>
<text:bookmark text:name="ref-levelup" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">levelup</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">LevelDB</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/levelup" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/levelup</text:a></text:span>) est un système de base de
données clé/valeur extrêmement modulaire.
Le stockage se fait sur disque par défaut mais il peut évoluer vers du stockage
en mémoire (module <text:span text:style-name="CodeDansTexte">memdown</text:span>) ou même dans un navigateur web (avec IndexedDB).</text:p>
<text:p text:style-name="CodeTitre">levelup.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const levelup = require('levelup');</text:p><text:p text:style-name="Code">const memdown = require('memdown');</text:p><text:p text:style-name="Code">const encode = require('encoding-down');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const db = levelup(encode(memdown(),<text:s text:c="10"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>{ valueEncoding: 'json' }</text:p><text:p text:style-name="Code">));</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">Promise.all([</text:p><text:p text:style-name="Code"><text:s text:c="2"/>db.put('node', {title: 'Node.js'}),</text:p><text:p text:style-name="Code"><text:s text:c="2"/>db.put('css', {title: 'CSS maintenables'}),</text:p><text:p text:style-name="Code"><text:s text:c="2"/>db.put('opensky', {title: 'Open Sky'}),</text:p><text:p text:style-name="Code">])</text:p><text:p text:style-name="Code">.then(() =&gt; db.get('node'))<text:s text:c="19"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">.then(result =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log(result);<text:s text:c="24"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Crée la connexion à la base de données en mémoire.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Recherche un enregistrement après les avoir enregistré en mémoire.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Affiche <text:span text:style-name="CodeDansTexte">{ title: 'Node.js' }</text:span>.<text:line-break/></text:p>
<text:bookmark text:name="ref-redis" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">redis</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">redis</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/redis" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/redis</text:a></text:span>) est une base de données
clé/valeur distribuée et performante.</text:p>
<text:p text:style-name="CodeTitre">redis.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const client = require('redis').createClient();</text:p><text:p text:style-name="Code">const hset = require('util').promisify(client.hset);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">Promise.all([</text:p><text:p text:style-name="Code"><text:s text:c="2"/>hset('book:node', 'title', 'Node.js'),</text:p><text:p text:style-name="Code"><text:s text:c="2"/>hset('book:css', 'title', 'CSS maintenables'),</text:p><text:p text:style-name="Code"><text:s text:c="2"/>hset('book:opensky', 'title', 'Open Sky')</text:p><text:p text:style-name="Code">])</text:p><text:p text:style-name="Code">.then(() =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log('Enregistrements créés.');</text:p><text:p text:style-name="Code"><text:s text:c="2"/>client.end();</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">hiredis</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/hiredis" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/hiredis</text:a></text:span>) est un <text:span text:style-name="T4">driver</text:span> C++ qui
augmente les performances de connexion à une base de données <text:span text:style-name="T4">redis</text:span>.</text:p>
<text:bookmark text:name="ref-elasticsearch" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">elasticsearch</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">elasticsearch</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/elasticsearch" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/elasticsearch</text:a></text:span>) est un client pour
simplifier la connexion à une base de données ElasticSearch.
Ce type de base est particulièrement adaptée à l&#8217;indexation des données,
pour des recherches performantes et complexes.</text:p>
<text:bookmark text:name="ref-cli" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Ligne de commande</text:h><text:p text:style-name="TexteCourant">Ces modules complètent le panorama déjà très varié présenté
dans le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-../chapter-08/index.adoc"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 8</text:a>.</text:p>
<text:bookmark text:name="ref-yargs_parser" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">yargs-parser</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">yargs-parser</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/yargs-parser" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/yargs-parser</text:a></text:span>) est le module
d&#8217;interprétation des arguments utilisé par le module <text:span text:style-name="T4">yargs</text:span>.
C&#8217;est une alternative plus puissante et plus complexe que <text:span text:style-name="T4">minimist</text:span>.</text:p>
<text:bookmark text:name="ref-args_2" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">args</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">args</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/args" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/args</text:a></text:span>) est un module minimaliste
pour interpréter les arguments, les structurer et afficher une aide
claire à nos utilisateurs et utilisatrices.</text:p>
<text:p text:style-name="TexteCourant">Cerise sur le gâteau&#160;: le module suggère un choix de commande en cas
d&#8217;erreur de frappe.</text:p>
<text:bookmark text:name="ref-caporal" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">caporal</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">caporal</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/caporal" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/caporal</text:a></text:span>) est un framework complet
pour bâtir des applications en ligne de commande.
Il gère les classiques arguments et options ainsi que les sous-commandes,
les types de valeurs et l&#8217;autocomplétion.</text:p>
<text:bookmark text:name="ref-promptly" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">promptly</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">promptly</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/promptly" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/promptly</text:a></text:span>) est un utilitaire pour
poser des questions, valider et travaillers avec les réponses obtenues.
Il est minimaliste et a un faible nombre de dépendances.</text:p>
<text:bookmark text:name="ref-supports_color" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">supports-color</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">supports-color</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/supports-color" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/supports-color</text:a></text:span>) est un module
pour vérifier si le contexte d&#8217;exécution du programme en ligne de commande
supporte les couleurs.</text:p>
<text:p text:style-name="TexteCourant">Ça nous évite d&#8217;envoyer des codes ANSI qui du coup, seraient affichés
au lieu d&#8217;être interprétés comme des couleurs.</text:p>
<text:bookmark text:name="ref-webapp" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Applications web</text:h><text:p text:style-name="TexteCourant">Ces modules complètent le panorama déjà très varié présenté
dans le <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-../chapter-07/index.adoc"  text:visited-style-name="Visited_20_Internet_20_Link">chapitre 7</text:a>.</text:p>
<text:bookmark text:name="ref-fastify" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">fastify</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">fastify</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/fastify" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/fastify</text:a></text:span>) est un framework
inspiré de <text:span text:style-name="T4">express</text:span>.
Il se focalise sur la simplicité de l&#8217;expérience de développement et sur
de hautes performances.
Il sait valider les données sortantes à l&#8217;aide de schémas.</text:p>
<text:p text:style-name="TexteCourant">Pour aller au-delà des données, il se combine avec le module <text:span text:style-name="T4">point-of-view</text:span>
(<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/point-of-view" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/point-of-view</text:a></text:span>).
Vous avez ainsi accès à l&#8217;utilisation de <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-templating"  text:visited-style-name="Visited_20_Internet_20_Link">modules de templating</text:a>.</text:p>
<text:bookmark text:name="ref-passport" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">passport</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">passport</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/passport" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/passport</text:a></text:span>) est une librairie modulaire
d&#8217;authentification pour <text:span text:style-name="T4">express</text:span>.
Elle permet de se brancher à différents mécanismes pour vérifier les utilisateurs&#160;:
utilisateur et mot de passe, compte GitHub, Twitter, OAuth, etc.</text:p>
<text:p text:style-name="TexteCourant">Les sessions d&#8217;utilisateurs se gèrent à côté&#160;— pour mémoriser
qui est connecté ou non, et avec quel identifiant sécurisé et unique.</text:p>
<text:p text:style-name="TexteCourant">Référez-vous à sa documentation pour des exemples détaillés d&#8217;utilisation.</text:p>
<text:bookmark text:name="ref-restify" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">restify</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">restify</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/restify" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/restify</text:a></text:span>) est un framework web
spécialisé dans la création d&#8217;API HTTP.</text:p>
<text:p text:style-name="TexteCourant">Il gère les versions de routes et expose un client permettant de consommer
des données sur d&#8217;autres API REST&#160;— proxy.</text:p>
<text:p text:style-name="CodeTitre">restify.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const restify = require('restify');</text:p><text:p text:style-name="Code">const {NotFoundError} = require('restify-errors');</text:p><text:p text:style-name="Code">const server = restify.createServer();</text:p><text:p text:style-name="Code">const countries = require('i18n-iso-countries');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const responseV1 = (request, response, next) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const codes = countries.getNames('en');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>if (codes[request.params.code] === undefined) {</text:p><text:p text:style-name="Code"><text:s text:c="4"/>return next(new NotFoundError('Country not found'));</text:p><text:p text:style-name="Code"><text:s text:c="2"/>}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>response.send(200, codes[request.params.code]);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>next();</text:p><text:p text:style-name="Code">};</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">server.get({ path: '/:code', version: '1.0.0' }, responseV1);</text:p><text:p text:style-name="Code">server.listen(8080, () =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>console.log('Serveur accessible sur %s', server.url);</text:p><text:p text:style-name="Code">});</text:p>
<text:bookmark text:name="ref-faye" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">faye</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">faye</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/faye" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/faye</text:a></text:span>) est un serveur WebSocket pour communiquer
en temps réel entre un client et un serveur.
Il sait débrayer vers Ajax ou JSON-P pour les navigateurs anciens qui
ne supportent pas WebSocket.</text:p>
<text:p text:style-name="CodeTitre">faye.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const http = require('http');</text:p><text:p text:style-name="Code">const faye = require('faye');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const ws = new faye.NodeAdapter({</text:p><text:p text:style-name="Code"><text:s text:c="2"/>mount: '/realtime', timeout: 10</text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const server = http.createServer((req, res) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>res.writeHead(200, { 'Content-Tyoe': 'text/plain' });</text:p><text:p text:style-name="Code"><text:s text:c="2"/>res.end('Contenu non temps réel');</text:p><text:p text:style-name="Code">});</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">ws.attach(server);</text:p><text:p text:style-name="Code">server.listen(3000);</text:p>
<text:p text:style-name="TexteCourant">Cet exemple de serveur minimaliste expose un point d&#8217;entrée qui peut
être accédé via le client <text:span text:style-name="T4">Faye</text:span>, dans un navigateur web ou via un autre
script Node.</text:p>
<text:p text:style-name="TexteCourant">Tout message émit par un client sera relayé auprès des autres clients
connectés.</text:p>
<text:bookmark text:name="ref-swagger_client" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">swagger-client</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">swagger-client</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/swagger-client" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/swagger-client</text:a></text:span>) sert à valider
des requêtes et des réponses HTTP en fonction de schémas qui répondent
à la spécification OpenAPI.</text:p>
<text:p text:style-name="TexteCourant">Cette spécification permet entre autre de gérer automatiquement les routes
de notre application pour se concentrer sur le code qui génère les données de sortie.</text:p>
<text:bookmark text:name="ref-templating" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Modules front-end et templating</text:h><text:p text:style-name="TexteCourant">Les librairies de templating proposent d&#8217;associer
une structure de données à une logique de présentation.
La plupart fonctionnent aussi bien sous Node que dans les navigateurs web.
Ce qui est une excellente nouvelle pour partager des comportements d&#8217;affichage
entre les deux environnements.</text:p>
<text:p text:style-name="TexteCourant">Tous les modules que nous allons voir généreront cette sortie HTML&#160;:</text:p>
<text:p text:style-name="Code">&lt;!DOCTYPE html&gt;</text:p><text:p text:style-name="Code">&lt;html&gt;</text:p><text:p text:style-name="Code">&lt;head&gt;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;title&gt;Template demo&lt;/title&gt;</text:p><text:p text:style-name="Code">&lt;/head&gt;</text:p><text:p text:style-name="Code">&lt;body&gt;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;ul&gt;</text:p><text:p text:style-name="Code"><text:s text:c="4"/>&lt;li&gt;CSS maintenables&lt;/li&gt;</text:p><text:p text:style-name="Code"><text:s text:c="4"/>&lt;li&gt;Node.js&lt;/li&gt;</text:p><text:p text:style-name="Code"><text:s text:c="4"/>&lt;li&gt;Open Sky&lt;/li&gt;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;/ul&gt;</text:p><text:p text:style-name="Code">&lt;/body&gt;</text:p><text:p text:style-name="Code">&lt;/html&gt;</text:p>
<text:bookmark text:name="ref-nunjucks" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">nunjucks</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">nunjucks</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/nunjucks" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/nunjucks</text:a></text:span>) est un portage de <text:span text:style-name="T4">Jinja</text:span>,
librairie bien connue par les adeptes de Python.
Sa syntaxe inclut des fonctionnalités comme les filtres, les blocs ou
l&#8217;héritage de gabarit.</text:p>
<text:p text:style-name="CodeTitre">template.html</text:p><text:p text:style-name="Code">&lt;!DOCTYPE html&gt;</text:p><text:p text:style-name="Code">&lt;html&gt;</text:p><text:p text:style-name="Code">&lt;head&gt;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;title&gt;{{ title | default('Template demo') | capitalize }}&lt;/title&gt;</text:p><text:p text:style-name="Code">&lt;/head&gt;</text:p><text:p text:style-name="Code">&lt;body&gt;</text:p><text:p text:style-name="Code">{% set items = ['Node.js', 'CSS maintenables', 'Open Sky'] -%}</text:p><text:p text:style-name="Code">&lt;ul&gt;</text:p><text:p text:style-name="Code">{% for item in items|sort -%}</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;li&gt;{{ item }}&lt;/li&gt;</text:p><text:p text:style-name="Code">{% endfor -%}</text:p><text:p text:style-name="Code">&lt;/ul&gt;</text:p><text:p text:style-name="Code">&lt;/body&gt;</text:p><text:p text:style-name="Code">&lt;/html&gt;</text:p>
<text:bookmark text:name="ref-handlebars" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">handlebars</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">handlebars</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/handlebars" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/handlebars</text:a></text:span>) et son prédécesseur <text:span text:style-name="T4">mustache</text:span>
sont les vétérans du templating Node.
Leur parti pris est de proposer le minimum de logique afin que celle-ci
reste au plus près des données.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">handlebars</text:span> sait aussi précompiler les gabarits sous forme de fonctions ECMAScript.</text:p>
<text:p text:style-name="CodeTitre">template.hbs</text:p><text:p text:style-name="Code">&lt;!DOCTYPE html&gt;</text:p><text:p text:style-name="Code">&lt;html&gt;</text:p><text:p text:style-name="Code">&lt;head&gt;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;title&gt;{{#if title}}{{title}}{{else}}Template demo{{/if}}&lt;/title&gt;</text:p><text:p text:style-name="Code">&lt;/head&gt;</text:p><text:p text:style-name="Code">&lt;body&gt;</text:p><text:p text:style-name="Code">&lt;ul&gt;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>{{#each items}}</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;li&gt;{{.}}&lt;/li&gt;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>{{/each}}</text:p><text:p text:style-name="Code">&lt;/ul&gt;</text:p><text:p text:style-name="Code">&lt;/body&gt;</text:p><text:p text:style-name="Code">&lt;/html&gt;</text:p>
<text:bookmark text:name="ref-pug" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">pug</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">pug</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/pug" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/pug</text:a></text:span>) opte pour pour un
parti minimaliste qui repose entièrement sur l&#8217;indentation.
Son mécanisme de blocs facilite la réutilisation d&#8217;éléments de présentation.</text:p>
<text:p text:style-name="CodeTitre">template.pug</text:p><text:p text:style-name="Code">doctype html</text:p><text:p text:style-name="Code">html</text:p><text:p text:style-name="Code"><text:s text:c="2"/>head</text:p><text:p text:style-name="Code"><text:s text:c="4"/>title= title || 'Template demo'</text:p><text:p text:style-name="Code"><text:s text:c="2"/>body</text:p><text:p text:style-name="Code"><text:s text:c="4"/>ul</text:p><text:p text:style-name="Code"><text:s text:c="6"/>each item in ['Node.js', 'CSS maintenables', 'Open Sky']</text:p><text:p text:style-name="Code"><text:s text:c="8"/>li= item</text:p>
<text:bookmark text:name="ref-ejs" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">ejs</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">ejs</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/ejs" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/ejs</text:a></text:span>) part du principe qu&#8217;il n&#8217;y a pas besoin
d&#8217;un langage de templating autre qu&#8217;ECMAScript.
Donc c&#8217;est tout simplement ce qui vous sera proposé, impliquant de ce fait
une faible courbe d&#8217;apprentissage.</text:p>
<text:p text:style-name="CodeTitre">template.ejs</text:p><text:p text:style-name="Code">&lt;!DOCTYPE html&gt;</text:p><text:p text:style-name="Code">&lt;html&gt;</text:p><text:p text:style-name="Code">&lt;head&gt;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;title&gt;&lt;%= typeof title === 'string' ? title : 'Template demo' %&gt;&lt;/title&gt;</text:p><text:p text:style-name="Code">&lt;/head&gt;</text:p><text:p text:style-name="Code">&lt;body&gt;</text:p><text:p text:style-name="Code">&lt;ul&gt;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;% ['Node.js', 'CSS maintenables', 'Open Sky'].forEach((item) =&gt; { -%&gt;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;li&gt;&lt;%= item %&gt;&lt;/li&gt;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;% }); -%&gt;</text:p><text:p text:style-name="Code">&lt;/ul&gt;</text:p><text:p text:style-name="Code">&lt;/body&gt;</text:p><text:p text:style-name="Code">&lt;/html&gt;</text:p>
<text:bookmark text:name="ref-react_2" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">react</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">react</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/react" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/react</text:a></text:span>) est une librairie de présentation
dite "réactive" et orientée composants.
Elle génère un arbre visuel à partir de données passées en entrée.
Cet arbre est ensuite transformé en HTML, en interface iOS ou Android, entre autres.</text:p>
<text:p text:style-name="CodeTitre">template.jsx</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const React = require('react');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const BookList = ({books=[]}) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>return (&lt;ul&gt;</text:p><text:p text:style-name="Code"><text:s text:c="4"/>{books.map((bookName, i) =&gt; (</text:p><text:p text:style-name="Code"><text:s text:c="6"/>&lt;li key={i}&gt;{bookName}&lt;/li&gt;</text:p><text:p text:style-name="Code"><text:s text:c="4"/>))}</text:p><text:p text:style-name="Code"><text:s text:c="2"/>&lt;/ul&gt;);</text:p><text:p text:style-name="Code">}</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">module.exports = ({title, books}) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>return (</text:p><text:p text:style-name="Code"><text:s text:c="4"/>&lt;html&gt;</text:p><text:p text:style-name="Code"><text:s text:c="6"/>&lt;head&gt;</text:p><text:p text:style-name="Code"><text:s text:c="8"/>&lt;title&gt;{title || 'Template demo'}&lt;/title&gt;</text:p><text:p text:style-name="Code"><text:s text:c="6"/>&lt;/head&gt;</text:p><text:p text:style-name="Code"><text:s text:c="6"/>&lt;body&gt;</text:p><text:p text:style-name="Code"><text:s text:c="8"/>&lt;BookList books={books} /&gt;</text:p><text:p text:style-name="Code"><text:s text:c="6"/>&lt;/body&gt;</text:p><text:p text:style-name="Code"><text:s text:c="4"/>&lt;/html&gt;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>);</text:p><text:p text:style-name="Code">};</text:p>
<text:bookmark text:name="ref-storybook" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">storybook</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">storybook</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://github.com/storybooks/storybook" text:visited-style-name="Visited_20_Internet_20_Link">https://github.com/storybooks/storybook</text:a></text:span>) complète <text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="#ref-react"  text:visited-style-name="Visited_20_Internet_20_Link">React</text:a>
et d&#8217;autres frameworks de <text:span text:style-name="T4">templating</text:span> en créant un catalogue de composants
auto-documentés.
Les composants sont affichés en même temps que le code nécessaire pour les utiliser
dans une autre application.</text:p>
<text:bookmark text:name="ref-testing" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Tester notre code</text:h><text:p text:style-name="TexteCourant">Le module <text:span text:style-name="CodeDansTexte">assert</text:span> intégré à Node peut suffire à démarrer.
Il existe tout un outillage pour tester notre code à destination de Node (tests unitaires)
ou des navigateurs (tests fonctionnels) ainsi que pour écrire des assertions
plus facilement.</text:p>
<text:bookmark text:name="ref-tape" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">tape</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">tape</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/tape" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/tape</text:a></text:span>) est une librairie
d&#8217;exécution de tests minimaliste qui se base sur le
<text:span text:style-name="T4">Test Anything Protocol</text:span> (<text:span text:style-name="T4">TAP</text:span>, <text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://testanything.org" text:visited-style-name="Visited_20_Internet_20_Link">https://testanything.org</text:a></text:span>).
Elle embarque aussi le minimum vital pour écrire des assertions.</text:p>
<text:p text:style-name="CodeTitre">tape.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const test = require('tape');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">test('Date test', (t) =&gt; {<text:s text:c="29"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>t.plan(1);</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>t.ok(Date.now() &gt; new Date('2013-03-24').getTime()); <text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Création d&#8217;un test.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Écriture d&#8217;une assertion.<text:line-break/></text:p>
<text:bookmark text:name="ref-chai" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">chai</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">chai</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/chai" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/chai</text:a></text:span>) est une librairie poussée d&#8217;assertions.
Son mécanisme chaîne permet de quasiment écrire des phrases pour exprimer
l&#8217;intention des choses à vérifier.</text:p>
<text:p text:style-name="CodeTitre">chai.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const {expect} = require('chai');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">expect([1, 2]).to.be.an('array');<text:s text:c="13"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code">expect([1, 2]).to.deep.equal([1, 2]);<text:s text:c="9"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code">expect({}).to.be.an('object').and.to.be.empty;<text:span text:style-name="PuceCode">3</text:span></text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Vérification du type d&#8217;une variable.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Vérification stricte de valeur d&#8217;une variable.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Double vérification&#160;— il s&#8217;agit bien d&#8217;objet et il est vide, sans clé/valeur.<text:line-break/></text:p>
<text:bookmark text:name="ref-sinon" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">sinon</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">sinon</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/sinon" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/sinon</text:a></text:span>) est un compagnon idéal pour
intercepter le fonctionnement interne de variables et d&#8217;objets.
Le module propose de créer des écouteurs (<text:span text:style-name="T4">spys</text:span>) et des bouchons
(<text:span text:style-name="T4">stubs</text:span>, <text:span text:style-name="T4">mocks</text:span>).</text:p>
<text:p text:style-name="TexteCourant">En d&#8217;autres termes, vous prenez la main sur des portions de votre propre
code pendant la durée des tests.
Ces techniques permettent de simuler des erreurs et différentes situations
tout en observant le comportement réel de notre code.</text:p>
<text:p text:style-name="CodeTitre">sinon.js</text:p><text:p text:style-name="Code">'use strict';</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">const test = require('tape');</text:p><text:p text:style-name="Code">const sinon = require('sinon');</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">test('Date', (t) =&gt; {</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const d = Date;</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const dateTime = new Date('1983-03-24').getTime();</text:p><text:p text:style-name="Code"><text:s text:c="2"/>const stub = sinon.stub(d, 'now');<text:s text:c="4"/><text:span text:style-name="PuceCode">1</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>stub.returns(9999999999999);<text:s text:c="10"/><text:span text:style-name="PuceCode">2</text:span></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>d.now();</text:p><text:p text:style-name="Code"><text:s text:c="2"/>t.equal(stub.calledOnce, true);<text:s text:c="7"/><text:span text:style-name="PuceCode">3</text:span></text:p><text:p text:style-name="Code"><text:s text:c="2"/>t.ok(stub.returnValues[0] &gt; dateTime);</text:p><text:p text:style-name="Code"><text:s text:c="2"/>t.end();</text:p><text:p text:style-name="Code">});</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="PuceCode">1</text:span> Création d&#8217;un bouchon pour la méthode <text:span text:style-name="CodeDansTexte">now()</text:span> d&#8217;un objet <text:span text:style-name="CodeDansTexte">Date</text:span>.<text:line-break/><text:span text:style-name="PuceCode">2</text:span> Surcharge de la valeur retournée par la méthode <text:span text:style-name="CodeDansTexte">d.now()</text:span>.<text:line-break/><text:span text:style-name="PuceCode">3</text:span> Nous constatons le nombre de fois où la méthode <text:span text:style-name="CodeDansTexte">d.now()</text:span> a été appelée.<text:line-break/></text:p>
<text:p text:style-name="TexteCourant">Le module <text:span text:style-name="T4">sinon-chai</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/sinon-chai" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/sinon-chai</text:a></text:span>)
intègre <text:span text:style-name="T4">sinon</text:span> avec le mécanisme d&#8217;assertions de .</text:p>
<text:bookmark text:name="ref-nyc" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">nyc</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">nyc</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/nyc" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/nyc</text:a></text:span>) génère une couverture de code.
Il inspecte le code exécuté pendant les tests et en déduit les portions
qui n&#8217;ont pas été visitées, et donc qui n&#8217;ont pas été testées.
C&#8217;est un indicateur utile pour attester de la fiabilité d&#8217;une base de code
—&#160;plus la couverture est importante, plus il y a de chances que les cas à la marge
ont été vérifiés.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(appendix-a/images/nyc-cli.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 71. Couverture de code visualisée dans un terminal.</text:p>
<text:p text:style-name="TexteCourant"><text:span text:style-name="T4">nyc</text:span> se greffe sur n&#8217;importe quel librairie d&#8217;exécution de tests.
Sous le capot, c&#8217;est le module <text:span text:style-name="T4">istanbul</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/istanbul" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/istanbul</text:a></text:span>)
qui est utilisé pour effectuer les calculs de couverture de code.</text:p>
<text:p text:style-name="RemarqueFigureNumero">(appendix-a/images/nyc-web.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 72. Couverture de code visualisée dans un navigateur web.</text:p>
<text:bookmark text:name="ref-karma" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">karma</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">karma</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/karma" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/karma</text:a></text:span>) pilote l&#8217;exécution de tests
depuis un ou plusieurs navigateurs web.
Ces navigateurs se pilotent sur notre ordinateur (Chrome, Safari, Firefox, etc.),
depuis une machine virtuelle (VirtualBox) ou même par le biais d&#8217;un service
en ligne (SauceLabs, BrowserStack, etc.).</text:p>
<text:p text:style-name="RemarqueFigureNumero">(appendix-a/images/karma.png)</text:p><text:p text:style-name="RemarqueFigureLegende">Figure 73. Exemple d&#8217;exécution de tests en continu avec Karma.</text:p>
<text:bookmark text:name="ref-supertest" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">supertest</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">supertest</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/supertest" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/supertest</text:a></text:span>) nous permet de tester
une interface HTTP.
Le module envoie des requêtes et nos assertions vérifient qu&#8217;elles retournent
bien ce qui est attendu&#160;— code HTTP, structure de réponse etc.</text:p>
<text:p text:style-name="TexteCourant">Je trouve ce module pratique pour tester des choses qui seraient difficiles
à couvrir seulement avec des tests unitaires.</text:p>
<text:bookmark text:name="ref-internet-of-things" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Objets connectés</text:h><text:p text:style-name="TexteCourant">Node a bénéficié de l&#8217;engouement autour des objets connectés grâce à sa nature
asynchrone et à sa légèreté.
C&#8217;est une plate-forme de choix pour dialoguer ou être embarquée dans des
nano-ordinateurs, frigo et autres ampoules connectées.</text:p>
<text:bookmark text:name="ref-nitrogen" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">nitrogen</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">nitrogen</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/nitrogen" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/nitrogen</text:a></text:span>) gère les interactions entre
différents périphériques, sur un même réseau local et à travers Internet.</text:p>
<text:p text:style-name="TexteCourant">La librairie se base sur un mécanisme déclaratif de fonctionnalités et de
terminaux ainsi que la publication de messages.</text:p>
<text:bookmark text:name="ref-serialport" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">serialport</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">serialport</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/serialport" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/serialport</text:a></text:span>) est la librairie de base
pour communiquer avec le <text:span text:style-name="T4">port série</text:span> d&#8217;un appareil.
Un câble USB suffit ensuite pour envoyer nos instructions à cet appareil.</text:p>
<text:bookmark text:name="ref-firmata" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">firmata</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">firmata</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/firmata" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/firmata</text:a></text:span>) est un <text:span text:style-name="T4">firmware</text:span>, un protocole
de communication ainsi qu&#8217;une librairie de communication pour microcontrôleur
Arduino.</text:p>
<text:p text:style-name="TexteCourant">Le module Node apprend ainsi à communiquer avec un Arduino préalablement
flashé avec Firmata.
Ça nous permet notamment d&#8217;écrire des applications en JavaScript au lieu
d&#8217;utiliser du C.</text:p>
<text:bookmark text:name="ref-johnny_five" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">johnny-five</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">johnny-five</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/johnny-five" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/johnny-five</text:a></text:span>) est une librairie
haut-niveau pour Arduino, Raspberry Pi et tout autre microcontrôleur.
Elle simplifie les interactions avec des moteurs, des servo-contrôleurs,
des capteurs etc.</text:p>
<text:bookmark text:name="ref-node_red" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">node-red</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">node-red</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/node-red" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/node-red</text:a></text:span>) est une interface visuelle
pour programmer des flux de données entre objets connectés.
Le projet émane d&#8217;employé·e·s d&#8217;IBM.</text:p>
<text:p text:style-name="TexteCourant">L&#8217;exécutable démarre un serveur web dont l&#8217;interface nous sert à relier
des sources de données, des réactions à des événements avec des objets prêts à
recevoir les instructions.</text:p>
<text:bookmark text:name="ref-accessibilité" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Accessibilité</text:h><text:p text:style-name="TexteCourant">L&#8217;écosystème npm a participé à un essor d&#8217;outillage lié à l&#8217;accessibilité
d&#8217;applications web.
Auparavant, les outils étaient difficilement automatisables.</text:p>
<text:bookmark text:name="ref-a11y" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">a11y</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">a11y</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/a11y" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/a11y</text:a></text:span>) est un automate d&#8217;inspection de pages web.
Il détecte des problèmes de contrastes, de calques qui masquent du contenu
ou d&#8217;éléments qui ne seraient pas navigables au clavier, entre autres.</text:p>
<text:p text:style-name="TexteCourant">C&#8217;est un excellent outil pour améliorer la qualité d&#8217;une application tout en
l&#8217;ouvrant à un public trop souvent mis de côté.</text:p>
<text:p text:style-name="Code">$ npx a11y https://oncletom.io</text:p><text:p text:style-name="Code"><text:s text:c="2"/>✖ Controls and media elements should have labels</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"><text:s text:c="2"/>#search &gt; .form-control</text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code"></text:p><text:p text:style-name="Code">✔ This element does not support ARIA roles</text:p><text:p text:style-name="Code">✔ Elements with ARIA roles must be in the correct scope</text:p><text:p text:style-name="Code">✔ This element has an invalid ARIA attribute</text:p><text:p text:style-name="Code">✔ ARIA state and property values must be valid</text:p>
<text:bookmark text:name="ref-a11y_css" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">a11y.css</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">a11y.css</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/a11y.css" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/a11y.css</text:a></text:span>) est une feuille de styles CSS
à injecter dans une page web pour rendre visible des incohérences.
Parmi ces incohérences, nous retrouvons des boutons sans intitulés, l&#8217;absence
de langue du document ou encore l&#8217;absence de bouton de validation de formulaire
ou de texte alternatif d&#8217;images.</text:p>
<text:bookmark text:name="ref-lighthouse" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">lighthouse</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">lighthouse</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/lighthouse" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/lighthouse</text:a></text:span>) est l&#8217;outil d&#8217;analyse de
performances, de référencement (SEO) et d&#8217;accessibilité embarqué dans
le navigateur web Google Chrome.</text:p>
<text:p text:style-name="TexteCourant">Ce module npm le rend utilisable depuis un terminal et écrit le rapport
dans un fichier HTML.</text:p>
<text:bookmark text:name="ref-storybook_addon_a11y" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">storybook-addon-a11y</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">storybook-addon-a11y</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/storybook-addon-a11y" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/storybook-addon-a11y</text:a></text:span>)
est une extension au module .
Le module signale les problèmes d&#8217;accessibilité au niveau de chaque composant.
Le suivi est ainsi fait en continu, au plus proche des composants distribués
et utilisés dans les applications.</text:p>
<text:bookmark text:name="ref-travailler_avec_des_images_des_sons_et_des_vidéos" /><text:h text:style-name="TitreNiveau1" text:outline-level="2">Travailler avec des images, des sons et des vidéos</text:h><text:bookmark text:name="ref-sharp" /><text:h text:style-name="TitreNiveau2" text:outline-level="3">sharp</text:h><text:p text:style-name="TexteCourant"><text:span text:style-name="T4">sharp</text:span> (<text:span text:style-name="URL"><text:a xlink:type="simple" text:style-name="Internet_20_link" xlink:href="https://npmjs.com/sharp" text:visited-style-name="Visited_20_Internet_20_Link">https://npmjs.com/sharp</text:a></text:span>) est un module de redimensionnement
et de transformation d&#8217;images JPG, PNG et WebP écrit en JavaScript et C++.
Il ne nécessite pas de programme externe et est compatible avec une approche
en <text:span text:style-name="T4">streaming</text:span>.</text:p></office:text>
  </office:body>
</office:document>